<Type Name="DataContext" FullName="System.Data.Linq.DataContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2c13850ab085a0fd357bd7d4747b2ccdb675c703" />
    <Meta Name="ms.sourcegitcommit" Value="69952c4c5555f8f4bed66798cdd71228d3a9eb98" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/18/2018" />
    <Meta Name="ms.locfileid" Value="39104676" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.DataContext" />
  <TypeSignature Language="VB.NET" Value="Public Class DataContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataContext : IDisposable" />
  <TypeSignature Language="F#" Value="type DataContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="7f410-101">表示 LINQ to SQL 框架的主入口点。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7f410-101">Represents the main entry point for the LINQ to SQL framework.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-102"><xref:System.Data.Linq.DataContext>是通过数据库连接映射的所有实体的源。</span><span class="sxs-lookup"><span data-stu-id="7f410-102">The <xref:System.Data.Linq.DataContext> is the source of all entities mapped over a database connection.</span></span> <span data-ttu-id="7f410-103">它会跟踪对检索到的所有实体所做的更改并维护的"标识缓存"的实体检索不止一次保证由使用相同的对象实例。</span><span class="sxs-lookup"><span data-stu-id="7f410-103">It tracks changes that you made to all retrieved entities and maintains an "identity cache" that guarantees that entities retrieved more than one time are represented by using the same object instance.</span></span>  
  
 <span data-ttu-id="7f410-104">一般情况下，<xref:System.Data.Linq.DataContext>实例旨在最后一个"工作单元"但是你的应用程序定义的术语。</span><span class="sxs-lookup"><span data-stu-id="7f410-104">In general, a <xref:System.Data.Linq.DataContext> instance is designed to last for one "unit of work" however your application defines that term.</span></span> <span data-ttu-id="7f410-105">一个<xref:System.Data.Linq.DataContext>是轻量而不是创建开销很大。</span><span class="sxs-lookup"><span data-stu-id="7f410-105">A <xref:System.Data.Linq.DataContext> is lightweight and is not expensive to create.</span></span> <span data-ttu-id="7f410-106">典型[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]应用程序创建<xref:System.Data.Linq.DataContext>实例的生存期较短的类的表示逻辑组的成员或在方法范围内相关的数据库操作。</span><span class="sxs-lookup"><span data-stu-id="7f410-106">A typical [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] application creates <xref:System.Data.Linq.DataContext> instances at method scope or as a member of short-lived classes that represent a logical set of related database operations.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7f410-107">初始化 <see cref="T:System.Data.Linq.DataContext" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-107">Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class.</span>
          </span>
          <span data-ttu-id="7f410-108">你所使用的连接字符串可为 ADO.NET 连接字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-108">The connection string you use can be an ADO.NET connection string.</span>
          </span>
          <span data-ttu-id="7f410-109">你还可以指定 SQL Server Express 或 SQL Server Compact 文件的文件名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-109">You can also specify a filename to a SQL Server Express or SQL Server Compact file.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataContext (System.Data.IDbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.IDbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As IDbConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataContext(System::Data::IDbConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.Linq.DataContext : System.Data.IDbConnection -&gt; System.Data.Linq.DataContext" Usage="new System.Data.Linq.DataContext connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.IDbConnection" />
      </Parameters>
      <Docs>
        <param name="connection">
          <span data-ttu-id="7f410-110">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 使用的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-110">The connection used by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-111">通过引用由 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 使用的连接来初始化 <see cref="T:System.Data.Linq.DataContext" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-111">Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing the connection used by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-112">一个<xref:System.Data.Linq.DataContext>打开和关闭的连接或连接字符串提供，如果需要关闭数据库连接。</span><span class="sxs-lookup"><span data-stu-id="7f410-112">A <xref:System.Data.Linq.DataContext> opens and closes a database connection as needed if you provide a closed connection or a connection string.</span></span> <span data-ttu-id="7f410-113">一般情况下，您应永远不会需要致电`Dispose`上<xref:System.Data.Linq.DataContext>。</span><span class="sxs-lookup"><span data-stu-id="7f410-113">In general, you should never have to call `Dispose` on a <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="7f410-114">如果提供的打开连接，<xref:System.Data.Linq.DataContext>将不会关闭它。</span><span class="sxs-lookup"><span data-stu-id="7f410-114">If you provide an open connection, the <xref:System.Data.Linq.DataContext> will not close it.</span></span> <span data-ttu-id="7f410-115">因此，不实例化<xref:System.Data.Linq.DataContext>具有打开的连接除非您有一个充分的理由要这样做。</span><span class="sxs-lookup"><span data-stu-id="7f410-115">Therefore, do not instantiate a <xref:System.Data.Linq.DataContext> with an open connection unless you have a good reason to do this.</span></span> <span data-ttu-id="7f410-116">在中<xref:System.Transactions>事务，<xref:System.Data.Linq.DataContext>将不打开或关闭的连接，为了避免出现提升。</span><span class="sxs-lookup"><span data-stu-id="7f410-116">In a <xref:System.Transactions> transaction, a <xref:System.Data.Linq.DataContext> will not open or close a connection to avoid promotion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataContext (System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.IDbConnection connection, class System.Data.Linq.Mapping.MappingSource mapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As IDbConnection, mapping As MappingSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataContext(System::Data::IDbConnection ^ connection, System::Data::Linq::Mapping::MappingSource ^ mapping);" />
      <MemberSignature Language="F#" Value="new System.Data.Linq.DataContext : System.Data.IDbConnection * System.Data.Linq.Mapping.MappingSource -&gt; System.Data.Linq.DataContext" Usage="new System.Data.Linq.DataContext (connection, mapping)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.IDbConnection" />
        <Parameter Name="mapping" Type="System.Data.Linq.Mapping.MappingSource" />
      </Parameters>
      <Docs>
        <param name="connection">
          <span data-ttu-id="7f410-117">由 .NET Framework 使用的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-117">The connection used by the .NET Framework.</span>
          </span>
        </param>
        <param name="mapping">
          <span data-ttu-id="7f410-118">映射源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-118">A source for mapping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-119">通过引用连接和映射源初始化 <see cref="T:System.Data.Linq.DataContext" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-119">Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing a connection and a mapping source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataContext (string fileOrServerOrConnection, System.Data.Linq.Mapping.MappingSource mapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileOrServerOrConnection, class System.Data.Linq.Mapping.MappingSource mapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileOrServerOrConnection As String, mapping As MappingSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataContext(System::String ^ fileOrServerOrConnection, System::Data::Linq::Mapping::MappingSource ^ mapping);" />
      <MemberSignature Language="F#" Value="new System.Data.Linq.DataContext : string * System.Data.Linq.Mapping.MappingSource -&gt; System.Data.Linq.DataContext" Usage="new System.Data.Linq.DataContext (fileOrServerOrConnection, mapping)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileOrServerOrConnection" Type="System.String" />
        <Parameter Name="mapping" Type="System.Data.Linq.Mapping.MappingSource" />
      </Parameters>
      <Docs>
        <param name="fileOrServerOrConnection">
          <span data-ttu-id="7f410-120">此参数可以是下列项之一：SQL Server Express 数据库所在的文件的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-120">This argument can be any one of the following:  The name of a file where a SQL Server Express database resides.</span>
          </span>
          <span data-ttu-id="7f410-121">数据库所在的服务器的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-121">The name of a server where a database is present.</span>
          </span>
          <span data-ttu-id="7f410-122">在此情况下，提供程序对用户使用默认数据库。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-122">In this case the provider uses the default database for a user.</span>
          </span>
          <span data-ttu-id="7f410-123">一个完整的连接字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-123">A complete connection string.</span>
          </span> [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]<span data-ttu-id="7f410-124"> 只是将字符串传递给提供程序，而不做任何修改。</span><span class="sxs-lookup"><span data-stu-id="7f410-124"> just passes the string to the provider without modification.</span></span></param>
        <param name="mapping">
          <span data-ttu-id="7f410-125">映射源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-125">A source for mapping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-126">通过引用文件源和映射源初始化 <see cref="T:System.Data.Linq.DataContext" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-126">Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing a file source and a mapping source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataContext (string fileOrServerOrConnection);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileOrServerOrConnection) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileOrServerOrConnection As String)" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataContext(System::String ^ fileOrServerOrConnection);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public DataContext (string connectionString);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.#ctor(System.String)" FrameworkAlternate="xamarinmac-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataContext(System::String ^ connectionString);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="new System.Data.Linq.DataContext : string -&gt; System.Data.Linq.DataContext" Usage="new System.Data.Linq.DataContext connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileOrServerOrConnection" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.5;netframework-4.0" />
        <Parameter Name="connectionString" Type="System.String" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileOrServerOrConnection">
          <span data-ttu-id="7f410-127">此参数可以是下列项之一：SQL Server Express 数据库所在的文件的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-127">This argument can be any one of the following: The name of a file where a SQL Server Express database resides.</span>
          </span>
          <span data-ttu-id="7f410-128">数据库所在的服务器的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-128">The name of a server where a database is present.</span>
          </span>
          <span data-ttu-id="7f410-129">在此情况下，提供程序对用户使用默认数据库。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-129">In this case the provider uses the default database for a user.</span>
          </span>
          <span data-ttu-id="7f410-130">一个完整的连接字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-130">A complete connection string.</span>
          </span>
          <span data-ttu-id="7f410-131">LINQ to SQL 仅将字符串传递给提供程序，而不进行修改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-131">LINQ to SQL just passes the string to the provider without modification.</span>
          </span>
        </param>
        <param name="connectionString">
          <span data-ttu-id="7f410-132">此参数可以是下列项之一：SQL Server Express 数据库所在的文件的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-132">This argument can be any one of the following: The name of a file where a SQL Server Express database resides.</span>
          </span>
          <span data-ttu-id="7f410-133">数据库所在的服务器的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-133">The name of a server where a database is present.</span>
          </span>
          <span data-ttu-id="7f410-134">在此情况下，提供程序对用户使用默认数据库。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-134">In this case the provider uses the default database for a user.</span>
          </span>
          <span data-ttu-id="7f410-135">一个完整的连接字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-135">A complete connection string.</span>
          </span>
          <span data-ttu-id="7f410-136">LINQ to SQL 仅将字符串传递给提供程序，而不进行修改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-136">LINQ to SQL just passes the string to the provider without modification.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-137">通过引用文件源来初始化 <see cref="T:System.Data.Linq.DataContext" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-137">Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing a file source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeConflicts">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ChangeConflictCollection ChangeConflicts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.ChangeConflictCollection ChangeConflicts" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.ChangeConflicts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChangeConflicts As ChangeConflictCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::ChangeConflictCollection ^ ChangeConflicts { System::Data::Linq::ChangeConflictCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ChangeConflicts : System.Data.Linq.ChangeConflictCollection" Usage="System.Data.Linq.DataContext.ChangeConflicts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ChangeConflictCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f410-138">获取调用 <see cref="M:System.Data.Linq.DataContext.SubmitChanges" /> 时导致并发冲突的对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-138">Gets a collection of objects that caused concurrency conflicts when <see cref="M:System.Data.Linq.DataContext.SubmitChanges" /> was called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f410-139">导致并发冲突的对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-139">A collection of objects that caused concurrency conflicts.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-140">下面的示例演示如何循环集合来检索冲突信息。</span><span class="sxs-lookup"><span data-stu-id="7f410-140">The following example shows how the collection can be iterated over to retrieve conflict information.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.ObjectChangeConflict#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.objectchangeconflict/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.ObjectChangeConflict#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.objectchangeconflict/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTimeout">
      <MemberSignature Language="C#" Value="public int CommandTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CommandTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.CommandTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CommandTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTimeout : int with get, set" Usage="System.Data.Linq.DataContext.CommandTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f410-141">获取或设置一个值，该值增大查询的超时期限，如果不增大则会在默认超时期限间出现超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-141">Gets or sets a value that increases the time-out period for queries that would otherwise time out during the default time-out period.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f410-142">一个整数值，该值增大查询的超时期限，如果不增大则会在默认超时期限间出现超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-142">An integer value that increases the time-out period for queries that would otherwise time out during the default time-out period.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-143">此属性获取或设置用于执行生成的命令的命令超时值 (`IDbCommands`)。</span><span class="sxs-lookup"><span data-stu-id="7f410-143">This property gets or sets the command time-out used to execute generated commands (`IDbCommands`).</span></span> <span data-ttu-id="7f410-144">有关详情，请参阅<xref:System.Data.IDbCommand.CommandTimeout%2A>。</span><span class="sxs-lookup"><span data-stu-id="7f410-144">For more information, see <xref:System.Data.IDbCommand.CommandTimeout%2A>.</span></span>  
  
 <span data-ttu-id="7f410-145">当此属性未设置，默认值的<xref:System.Data.IDbCommand.CommandTimeout%2A>用于查询命令执行。</span><span class="sxs-lookup"><span data-stu-id="7f410-145">When this property is not set, the default value of <xref:System.Data.IDbCommand.CommandTimeout%2A> is used for query command execution.</span></span> <span data-ttu-id="7f410-146">此默认值将由存储提供程序。</span><span class="sxs-lookup"><span data-stu-id="7f410-146">This default value is set by the storage provider.</span></span> <span data-ttu-id="7f410-147">请注意，某些提供程序可能会引发异常，是否此值设置为非零值。</span><span class="sxs-lookup"><span data-stu-id="7f410-147">Note that some providers may throw exceptions if this value is set to a non-zero value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbConnection ^ Connection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.Common.DbConnection" Usage="System.Data.Linq.DataContext.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f410-148">获取由框架使用的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-148">Gets the connection used by the framework.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f410-149">由框架使用的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-149">The connection used by the framework.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-150">可以使用此属性与关系 ADO.NET 代码交互操作。</span><span class="sxs-lookup"><span data-stu-id="7f410-150">You can use this property to interoperate with relational ADO.NET code.</span></span>  
  
 <span data-ttu-id="7f410-151">返回的连接将关闭，除非已由用户显式打开。</span><span class="sxs-lookup"><span data-stu-id="7f410-151">The returned connection will be closed unless it has been explicitly opened by the user.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabase">
      <MemberSignature Language="C#" Value="public void CreateDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateDatabase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.CreateDatabase" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateDatabase ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateDatabase();" />
      <MemberSignature Language="F#" Value="member this.CreateDatabase : unit -&gt; unit" Usage="dataContext.CreateDatabase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f410-152">在服务器上创建数据库。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-152">Creates a database on the server.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-153">通过使用以下算法派生的数据库的名称：</span><span class="sxs-lookup"><span data-stu-id="7f410-153">The name of the database is derived by using the following algorithm:</span></span>  
  
1. <span data-ttu-id="7f410-154">如果在连接字符串中标识数据库，则使用其名称。</span><span class="sxs-lookup"><span data-stu-id="7f410-154">If a database is identified in the connection string, its name is used.</span></span>  
1. <span data-ttu-id="7f410-155">如果<xref:System.Data.Linq.Mapping.DatabaseAttribute>属性是存在，其<xref:System.Data.Linq.Mapping.DatabaseAttribute.Name%2A>属性用作数据库的名称。</span><span class="sxs-lookup"><span data-stu-id="7f410-155">If a <xref:System.Data.Linq.Mapping.DatabaseAttribute> attribute is present, its <xref:System.Data.Linq.Mapping.DatabaseAttribute.Name%2A> property is used as the name of the database.</span></span>  
1. <span data-ttu-id="7f410-156">如果没有数据库标记中的连接字符串和强类型化<xref:System.Data.Linq.DataContext>使用时，具有相同的名称的数据库<xref:System.Data.Linq.DataContext>创建继承类。</span><span class="sxs-lookup"><span data-stu-id="7f410-156">If there is no database tag in the connection string and a strongly typed <xref:System.Data.Linq.DataContext> is used, a database that has the same name as the <xref:System.Data.Linq.DataContext> inheriting class is created.</span></span>  
1. <span data-ttu-id="7f410-157">如果使用弱类型<xref:System.Data.Linq.DataContext>是使用，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7f410-157">If a weakly typed <xref:System.Data.Linq.DataContext> is used, an exception is thrown.</span></span>  
1. <span data-ttu-id="7f410-158">如果<xref:System.Data.Linq.DataContext>造成了通过使用文件名称，创建到该文件的名称相对应的数据库。</span><span class="sxs-lookup"><span data-stu-id="7f410-158">If the <xref:System.Data.Linq.DataContext> has been created by using a file name, the database corresponding to that file name is created.</span></span>  
     
  
## Examples  
 <span data-ttu-id="7f410-159">下面的代码演示如何设置一个临时数据库，然后删除它。</span><span class="sxs-lookup"><span data-stu-id="7f410-159">The following code shows how to set up a temporary database and then remove it.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataContext#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.DataContext/cs/Program.cs#1)]
 [!code-vb[System.Data.Linq.DataContext#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.DataContext/vb/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMethodCallQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="protected internal System.Linq.IQueryable&lt;TResult&gt; CreateMethodCallQuery&lt;TResult&gt; (object instance, System.Reflection.MethodInfo methodInfo, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Linq.IQueryable`1&lt;!!TResult&gt; CreateMethodCallQuery&lt;TResult&gt;(object instance, class System.Reflection.MethodInfo methodInfo, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Linq::IQueryable&lt;TResult&gt; ^ CreateMethodCallQuery(System::Object ^ instance, System::Reflection::MethodInfo ^ methodInfo, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.CreateMethodCallQuery : obj * System.Reflection.MethodInfo * obj[] -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="dataContext.CreateMethodCallQuery (instance, methodInfo, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="7f410-160">返回的集合中的元素的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-160">The type of the elements in the returned collection.</span>
          </span>
        </typeparam>
        <param name="instance">
          <span data-ttu-id="7f410-161">方法调用的实例（当前对象）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-161">The instance of the method invocation (the current object).</span>
          </span>
        </param>
        <param name="methodInfo">
          <span data-ttu-id="7f410-162">标识与数据库方法相对应的 CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-162">The <see cref="T:System.Reflection.MethodInfo" /> that identifies the CLR method that corresponds to a database method.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="7f410-163">要传递给命令的参数数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-163">The array of parameters to be passed to the command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-164">执行与指定的 CLR 方法相关联的表值数据库函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-164">Executes the table-valued database function associated with the specified CLR method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f410-165">由数据库查询返回的最终值的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-165">A collection of resultant values returned by the database query.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-166"><xref:System.Data.Linq.DataContext.CreateMethodCallQuery%2A>方法自动生成的代码中使用，并且可作为数据库函数的代理。</span><span class="sxs-lookup"><span data-stu-id="7f410-166">The <xref:System.Data.Linq.DataContext.CreateMethodCallQuery%2A> method is used in automatically generated code and acts as a proxy to database functions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DatabaseExists">
      <MemberSignature Language="C#" Value="public bool DatabaseExists ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DatabaseExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.DatabaseExists" />
      <MemberSignature Language="VB.NET" Value="Public Function DatabaseExists () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DatabaseExists();" />
      <MemberSignature Language="F#" Value="member this.DatabaseExists : unit -&gt; bool" Usage="dataContext.DatabaseExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f410-167">确定是否可以打开关联数据库。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-167">Determines whether the associated database can be opened.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f410-168">如果可以打开指定的数据库，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-168">
              <see langword="true" /> if the specified database can be opened; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-169">此方法使用中的连接<xref:System.Data.Linq.DataContext.Connection%2A>属性以尝试打开关联的数据库。</span><span class="sxs-lookup"><span data-stu-id="7f410-169">This method uses the connection in the <xref:System.Data.Linq.DataContext.Connection%2A> property to attempt to open the associated database.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f410-170">以下示例使用此方法以确定是否已存在的数据库。</span><span class="sxs-lookup"><span data-stu-id="7f410-170">The following example uses this method to determine whether a database already exists.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataContext#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.DataContext/cs/Program.cs#1)]
 [!code-vb[System.Data.Linq.DataContext#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.DataContext/vb/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeferredLoadingEnabled">
      <MemberSignature Language="C#" Value="public bool DeferredLoadingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DeferredLoadingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.DeferredLoadingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property DeferredLoadingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DeferredLoadingEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DeferredLoadingEnabled : bool with get, set" Usage="System.Data.Linq.DataContext.DeferredLoadingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f410-171">获取或设置一个值，该值指示延迟加载是一对多还是一对一的关系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-171">Gets or sets a value that indicates whether to delay-load one-to-many or one-to-one relationships.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f410-172">如果启用延迟加载，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-172">
              <see langword="true" /> if deferred loading is enabled; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-173">返回代码访问这些关系，null 之一时，如果关系是一对一的并且如果它是一个多，则返回空集合。</span><span class="sxs-lookup"><span data-stu-id="7f410-173">When the code accesses one of these relationships, null is returned if the relationship is one-to-one, and an empty collection is returned if it is one-to-many.</span></span> <span data-ttu-id="7f410-174">仍可通过设置填充关系<xref:System.Data.Linq.DataContext.LoadOptions%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="7f410-174">The relationships can still be filled by setting the <xref:System.Data.Linq.DataContext.LoadOptions%2A> property.</span></span>  
  
 <span data-ttu-id="7f410-175">此属性的主要方案是，可以提取一种对象模型并向它发出 （例如，Web 服务）。</span><span class="sxs-lookup"><span data-stu-id="7f410-175">The main scenario for this property is to enable you to extract a piece of the object model and send it out (for example, to a Web service).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f410-176">如果此属性设置为`false`执行查询后，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7f410-176">If this property is set to `false` after a query has been executed, an exception is thrown.</span></span> <span data-ttu-id="7f410-177">请参阅**有效的模式**部分获取详细信息。</span><span class="sxs-lookup"><span data-stu-id="7f410-177">See the **Valid Modes** section below for more information.</span></span>  
  
## <a name="valid-modes"></a><span data-ttu-id="7f410-178">有效的模式</span><span class="sxs-lookup"><span data-stu-id="7f410-178">Valid modes</span></span>  
 <span data-ttu-id="7f410-179">延迟的加载需要对象跟踪。</span><span class="sxs-lookup"><span data-stu-id="7f410-179">Deferred loading requires object tracking.</span></span> <span data-ttu-id="7f410-180">仅以下三种模式是有效的：</span><span class="sxs-lookup"><span data-stu-id="7f410-180">Only the following three modes are valid:</span></span>  
  
-   <span data-ttu-id="7f410-181"><xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> = `false`。</span><span class="sxs-lookup"><span data-stu-id="7f410-181"><xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> = `false`.</span></span> <span data-ttu-id="7f410-182"><xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> 被忽略，在推断为`false`。</span><span class="sxs-lookup"><span data-stu-id="7f410-182"><xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> is ignored and inferred to be `false`.</span></span> <span data-ttu-id="7f410-183">此行为对应于一个只读的<xref:System.Data.Linq.DataContext>。</span><span class="sxs-lookup"><span data-stu-id="7f410-183">This behavior corresponds to a read-only <xref:System.Data.Linq.DataContext>.</span></span>  
  
-   <span data-ttu-id="7f410-184"><xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> = `true`。</span><span class="sxs-lookup"><span data-stu-id="7f410-184"><xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> = `true`.</span></span> <span data-ttu-id="7f410-185"><xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> = `false`。</span><span class="sxs-lookup"><span data-stu-id="7f410-185"><xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> = `false`.</span></span> <span data-ttu-id="7f410-186">这种情况下对应于<xref:System.Data.Linq.DataContext>允许用户使用加载的对象图<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>指令，但它不会启用延迟的加载。</span><span class="sxs-lookup"><span data-stu-id="7f410-186">This situation corresponds to a <xref:System.Data.Linq.DataContext> that allows users to load an object graph by using <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> directives, but it does not enable deferred loading.</span></span>  
  
-   <span data-ttu-id="7f410-187">两者都设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="7f410-187">Both are set to `true`.</span></span> <span data-ttu-id="7f410-188">这是默认设置。</span><span class="sxs-lookup"><span data-stu-id="7f410-188">This is the default.</span></span>  
  
 <span data-ttu-id="7f410-189">在执行查询后，不能更改标志。</span><span class="sxs-lookup"><span data-stu-id="7f410-189">The flags may not be changed after a query has been executed.</span></span> <span data-ttu-id="7f410-190">使用此信息在第一个查询执行后的任何更改<xref:System.Data.Linq.DataContext>将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7f410-190">Any change after the execution of the first query that uses that <xref:System.Data.Linq.DataContext> throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabase">
      <MemberSignature Language="C#" Value="public void DeleteDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteDatabase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.DeleteDatabase" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDatabase ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDatabase();" />
      <MemberSignature Language="F#" Value="member this.DeleteDatabase : unit -&gt; unit" Usage="dataContext.DeleteDatabase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f410-191">删除关联数据库。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-191">Deletes the associated database.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-192">此方法使用中的连接<xref:System.Data.Linq.DataContext.Connection%2A>属性来标识要删除的数据库。</span><span class="sxs-lookup"><span data-stu-id="7f410-192">This method uses the connection in the <xref:System.Data.Linq.DataContext.Connection%2A> property to identify the database to be deleted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f410-193">下面的示例演示如何删除临时创建的数据库。</span><span class="sxs-lookup"><span data-stu-id="7f410-193">The following example shows how to delete a database that has been temporarily created.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataContext#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.DataContext/cs/Program.cs#1)]
 [!code-vb[System.Data.Linq.DataContext#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.DataContext/vb/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Data.Linq.DataContext.Dispose" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7f410-194">释放 <see cref="T:System.Data.Linq.DataContext" /> 类使用的资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-194">Releases the resources used by the <see cref="T:System.Data.Linq.DataContext" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="dataContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f410-195">释放 <see cref="T:System.Data.Linq.DataContext" /> 类的当前实例所使用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-195">Releases all resources used by the current instance of the <see cref="T:System.Data.Linq.DataContext" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="dataContext.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="7f410-196">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-196">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-197">释放 <see cref="T:System.Data.Linq.DataContext" /> 类使用的非托管资源，还可以选择释放托管资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-197">Releases the unmanaged resources used by the <see cref="T:System.Data.Linq.DataContext" /> class and optionally releases the managed resource.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteCommand">
      <MemberSignature Language="C#" Value="public int ExecuteCommand (string command, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteCommand(string command, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteCommand (command As String, ParamArray parameters As Object()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteCommand(System::String ^ command, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteCommand : string * obj[] -&gt; int" Usage="dataContext.ExecuteCommand (command, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="7f410-198">要执行的 SQL 命令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-198">The SQL command to be executed.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="7f410-199">要传递给命令的参数数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-199">The array of parameters to be passed to the command.</span>
          </span>
          <span data-ttu-id="7f410-200">请注意以下行为：如果数组中的对象的数目小于命令字符串中已标识的最大数，则会引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-200">Note the following behavior:  If the number of objects in the array is less than the highest number identified in the command string, an exception is thrown.</span>
          </span>
          <span data-ttu-id="7f410-201">如果数组包含未在命令字符串中引用的对象，则不会引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-201">If the array contains objects that are not referenced in the command string, no exception is thrown.</span>
          </span>
          <span data-ttu-id="7f410-202">如果任一参数为 null，则该参数会转换为 <see langword="DBNull.Value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-202">If any one of the parameters is null, it is converted to <see langword="DBNull.Value" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-203">直接对数据库执行 SQL 命令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-203">Executes SQL commands directly on the database.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f410-204">执行的命令修改的行数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-204">The number of rows modified by the executed command.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-205">此方法是一种传递机制的情况下，[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]不充分提供用于特定方案。</span><span class="sxs-lookup"><span data-stu-id="7f410-205">This method is a pass-through mechanism for cases where [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not adequately provide for a particular scenario.</span></span>  
  
 <span data-ttu-id="7f410-206">该命令的语法是用于创建 ADO.NET 的语法几乎相同`DataCommand`。</span><span class="sxs-lookup"><span data-stu-id="7f410-206">The syntax for the command is almost the same as the syntax used to create an ADO.NET `DataCommand`.</span></span> <span data-ttu-id="7f410-207">唯一区别是在指定参数的方式。</span><span class="sxs-lookup"><span data-stu-id="7f410-207">The only difference is in how the parameters are specified.</span></span> <span data-ttu-id="7f410-208">具体而言，将它们括在大括号 （{...}） 来指定参数和枚举它们从 0 开始。</span><span class="sxs-lookup"><span data-stu-id="7f410-208">Specifically, you specify parameters by enclosing them in braces ({…}) and enumerate them starting from 0.</span></span> <span data-ttu-id="7f410-209">该参数是与参数数组中的同等带编号对象相关联。</span><span class="sxs-lookup"><span data-stu-id="7f410-209">The parameter is associated with the equally numbered object in the parameters array.</span></span>  
  
 <span data-ttu-id="7f410-210">`ExecuteQuery` 和`ExecuteCommand`，可以指定的参数替换的参数数目可变。</span><span class="sxs-lookup"><span data-stu-id="7f410-210">`ExecuteQuery` and `ExecuteCommand` allow you to specify a variable number of arguments for parameter substitution.</span></span> <span data-ttu-id="7f410-211">例如，可以指定参数调用 ExecuteQuery 时\<TResult >:</span><span class="sxs-lookup"><span data-stu-id="7f410-211">For example, you can specify the parameters when invoking ExecuteQuery\<TResult>:</span></span>  
  
```  
db.ExecuteQuery<Customer>("select * from dbo.Customers where City = {0}", "London");  
```  
  
 <span data-ttu-id="7f410-212">而且，另一个示例：</span><span class="sxs-lookup"><span data-stu-id="7f410-212">And, another example:</span></span>  
  
```  
db.ExecuteCommand("UPDATE Products SET QuantityPerUnit = {0} WHERE ProductID = {1}", "24 boxes", 5);  
```  
  
 <span data-ttu-id="7f410-213">下面的示例打开一个连接，并将传递 SQL `UPDATE` SQL 引擎命令。</span><span class="sxs-lookup"><span data-stu-id="7f410-213">The following example opens a connection and passes a SQL `UPDATE` command to the SQL engine.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DLinqCommunicatingWithDatabase#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqCommunicatingWithDatabase/cs/Program.cs#3)]
 [!code-vb[DLinqCommunicatingWithDatabase#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqCommunicatingWithDatabase/vb/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDynamicDelete">
      <MemberSignature Language="C#" Value="protected internal void ExecuteDynamicDelete (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void ExecuteDynamicDelete(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub ExecuteDynamicDelete (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void ExecuteDynamicDelete(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.ExecuteDynamicDelete : obj -&gt; unit" Usage="dataContext.ExecuteDynamicDelete entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="7f410-214">要删除的实体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-214">The entity to be deleted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-215">在删除替代方法中执行，以向 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 重新委托生成和执行动态 SQL 的任务，以进行删除操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-215">Executes, inside delete override methods, to redelegate to [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] the task of generating and executing dynamic SQL for delete operations.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-216">请参阅 <xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>。</span><span class="sxs-lookup"><span data-stu-id="7f410-216">See <xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDynamicInsert">
      <MemberSignature Language="C#" Value="protected internal void ExecuteDynamicInsert (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void ExecuteDynamicInsert(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub ExecuteDynamicInsert (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void ExecuteDynamicInsert(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.ExecuteDynamicInsert : obj -&gt; unit" Usage="dataContext.ExecuteDynamicInsert entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="7f410-217">要插入的实体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-217">The entity to be inserted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-218">在插入替代方法中执行，以向 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 重新委托生成和执行动态 SQL 的任务，以进行插入操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-218">Executes, inside insert override methods, to redelegate to [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] the task of generating and executing dynamic SQL for insert operations.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-219">请注意以下事项：</span><span class="sxs-lookup"><span data-stu-id="7f410-219">Note the following considerations:</span></span>  
  
-   <span data-ttu-id="7f410-220">由于该方法具有受保护的修饰符，使用它必须子类化<xref:System.Data.Linq.DataContext>。</span><span class="sxs-lookup"><span data-stu-id="7f410-220">Because the method has a protected modifier, its use requires subclassing <xref:System.Data.Linq.DataContext>.</span></span>  
  
-   <span data-ttu-id="7f410-221">如果在未调用此操作，则引发异常<xref:System.Data.Linq.DataContext.SubmitChanges%2A>操作。</span><span class="sxs-lookup"><span data-stu-id="7f410-221">An exception is thrown if this operation is not called inside a <xref:System.Data.Linq.DataContext.SubmitChanges%2A> operation.</span></span> <span data-ttu-id="7f410-222">不应作为独立操作的作用域之外调用<xref:System.Data.Linq.DataContext.SubmitChanges%2A>操作。</span><span class="sxs-lookup"><span data-stu-id="7f410-222">It is not intended to be called as a stand-alone operation outside the scope of a <xref:System.Data.Linq.DataContext.SubmitChanges%2A> operation.</span></span> <span data-ttu-id="7f410-223"><xref:System.Data.Linq.DataContext.SubmitChanges%2A> 自身调用重写方法如果它们实现，它的上一个方法用于在重写方法调用。</span><span class="sxs-lookup"><span data-stu-id="7f410-223"><xref:System.Data.Linq.DataContext.SubmitChanges%2A> itself calls override methods if they are implemented and the previous methods are intended to be called inside the override methods.</span></span>  
  
-   <span data-ttu-id="7f410-224">它负责的开发人员传递正确的实体。</span><span class="sxs-lookup"><span data-stu-id="7f410-224">It is the responsibility of the developer to pass in the correct entity.</span></span> <span data-ttu-id="7f410-225">实现验证传入的实体进行跟踪。</span><span class="sxs-lookup"><span data-stu-id="7f410-225">The implementation verifies that the passed-in entity is tracked.</span></span> <span data-ttu-id="7f410-226">但是，它负责的开发人员来保持顺序，或传递同一实体中两次。</span><span class="sxs-lookup"><span data-stu-id="7f410-226">However, it is the responsibility of the developer to maintain the order or pass in the same entity two times.</span></span>  
  
-   <span data-ttu-id="7f410-227">它负责调用正确的动态 API，开发人员。</span><span class="sxs-lookup"><span data-stu-id="7f410-227">It is the responsibility of the developer to invoke the correct dynamic API.</span></span> <span data-ttu-id="7f410-228">例如，在`Update`重写方法中，只能<xref:System.Data.Linq.DataContext.ExecuteDynamicUpdate%2A>可以调用方法。</span><span class="sxs-lookup"><span data-stu-id="7f410-228">For example, in the `Update` override method, only the <xref:System.Data.Linq.DataContext.ExecuteDynamicUpdate%2A> method can be called.</span></span> [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]<span data-ttu-id="7f410-229"> 不检测或验证调用的动态方法是否与适用的操作相匹配。</span><span class="sxs-lookup"><span data-stu-id="7f410-229"> does not detect or verify whether the invoked dynamic method matches the applicable operation.</span></span> <span data-ttu-id="7f410-230">如果调用不适用的方法，则结果不确定 (例如，调用<xref:System.Data.Linq.DataContext.ExecuteDynamicDelete%2A>要更新的对象)。</span><span class="sxs-lookup"><span data-stu-id="7f410-230">The results are undefined if an inapplicable method is called (for example, calling <xref:System.Data.Linq.DataContext.ExecuteDynamicDelete%2A> for an object to be updated).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDynamicUpdate">
      <MemberSignature Language="C#" Value="protected internal void ExecuteDynamicUpdate (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void ExecuteDynamicUpdate(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub ExecuteDynamicUpdate (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void ExecuteDynamicUpdate(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.ExecuteDynamicUpdate : obj -&gt; unit" Usage="dataContext.ExecuteDynamicUpdate entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="7f410-231">要更新的实体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-231">The entity to be updated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-232">在更新替代方法中执行，以向 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 重新委托生成和执行动态 SQL 的任务，以进行更新操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-232">Executes, inside update override methods, to redelegate to [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] the task of generating and executing dynamic SQL for update operations.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-233">请参阅 <xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>。</span><span class="sxs-lookup"><span data-stu-id="7f410-233">See <xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteMethodCall">
      <MemberSignature Language="C#" Value="protected System.Data.Linq.IExecuteResult ExecuteMethodCall (object instance, System.Reflection.MethodInfo methodInfo, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Data.Linq.IExecuteResult ExecuteMethodCall(object instance, class System.Reflection.MethodInfo methodInfo, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::Linq::IExecuteResult ^ ExecuteMethodCall(System::Object ^ instance, System::Reflection::MethodInfo ^ methodInfo, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteMethodCall : obj * System.Reflection.MethodInfo * obj[] -&gt; System.Data.Linq.IExecuteResult" Usage="dataContext.ExecuteMethodCall (instance, methodInfo, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.IExecuteResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="7f410-234">方法调用的实例（当前对象）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-234">The instance of the method invocation (the current object).</span>
          </span>
        </param>
        <param name="methodInfo">
          <span data-ttu-id="7f410-235">标识与数据库方法相对应的 CLR 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-235">Identifies the CLR method that corresponds to a database method.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="7f410-236">要传递给命令的参数数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-236">The array of parameters to be passed to the command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-237">执行数据库存储过程或与指定的 CLR 方法关联的标量函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-237">Executes the stored database procedure or scalar function associated with the specified CLR method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f410-238">执行指定方法的结果（返回值和输出参数）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-238">The result (the return value and output parameters) of executing the specified method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-239"><xref:System.Data.Linq.DataContext.ExecuteMethodCall%2A>方法自动生成的代码中使用，并且可作为数据库函数的代理。</span><span class="sxs-lookup"><span data-stu-id="7f410-239">The <xref:System.Data.Linq.DataContext.ExecuteMethodCall%2A> method is used in automatically generated code and acts as a proxy to database functions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteQuery">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable ExecuteQuery (Type elementType, string query, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable ExecuteQuery(class System.Type elementType, string query, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteQuery (elementType As Type, query As String, ParamArray parameters As Object()) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ ExecuteQuery(Type ^ elementType, System::String ^ query, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteQuery : Type * string * obj[] -&gt; System.Collections.IEnumerable" Usage="dataContext.ExecuteQuery (elementType, query, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="elementType">
          <span data-ttu-id="7f410-240">要返回的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-240">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to be returned.</span>
          </span>
          <span data-ttu-id="7f410-241">用于将查询结果中的列与对象中的字段或属性进行匹配的算法的工作原理如下：如果某个字段或属性映射到特定的列名称，则结果集中应包含该列名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-241">The algorithm for matching columns in the result of the query to fields or properties in the object works as follows:  If a field or property is mapped to a particular column name, that column name is expected in the resultset.</span>
          </span>
          <span data-ttu-id="7f410-242">如果未映射字段或属性，则结果集中应包含其名称与该字段或属性相同的列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-242">If a field or property is not mapped, a column with the same name as the field or property is expected in the resultset.</span>
          </span>
          <span data-ttu-id="7f410-243">通过先查找区分大小写的匹配来执行比较。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-243">The comparison is performed by looking for a case-sensitive match first.</span>
          </span>
          <span data-ttu-id="7f410-244">如果未找到匹配项，则会继续搜索不区分大小写的匹配项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-244">If this match is not found, a subsequent search occurs for a case-insensitive match.</span>
          </span>
          <span data-ttu-id="7f410-245">如果同时满足下列所有条件，则该查询应当返回（除延迟加载的对象外的）对象的所有跟踪的字段和属性：T<c></c> 是由 <see cref="T:System.Data.Linq.DataContext" /> 显式跟踪的实体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-245">The query must return all the tracked fields and properties of the object (except those that are loaded on a deferred basis) when all the following conditions are true:  <c>T</c> is an entity explicitly tracked by the <see cref="T:System.Data.Linq.DataContext" />.</span>
          </span>
          <span data-ttu-id="7f410-246">
            <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> 为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-246">
              <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="7f410-247">实体具有主键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-247">The entity has a primary key.</span>
          </span>
          <span data-ttu-id="7f410-248">否则会引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-248">Otherwise an exception is thrown.</span>
          </span>
        </param>
        <param name="query">
          <span data-ttu-id="7f410-249">要执行的 SQL 查询。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-249">The SQL query to be executed.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="7f410-250">要传递给命令的参数数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-250">The array of parameters to be passed to the command.</span>
          </span>
          <span data-ttu-id="7f410-251">请注意以下行为：如果数组中的对象的数目小于命令字符串中已标识的最大数，则会引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-251">Note the following behavior:  If the number of objects in the array is less than the highest number identified in the command string, an exception is thrown.</span>
          </span>
          <span data-ttu-id="7f410-252">如果数组包含未在命令字符串中引用的对象，则不会引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-252">If the array contains objects that are not referenced in the command string, no exception is thrown.</span>
          </span>
          <span data-ttu-id="7f410-253">如果某参数为 <see langword="null" />，则该参数会转换为 <see langword="DBNull.Value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-253">If a parameter is <see langword="null" />, it is converted to <see langword="DBNull.Value" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-254">直接对数据库执行 SQL 查询。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-254">Executes SQL queries directly on the database.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f410-255">由查询返回的对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-255">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of objects returned by the query.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TResult&gt; ExecuteQuery&lt;TResult&gt; (string query, params object[] parameters) where TResult : new();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; ExecuteQuery&lt;.ctor TResult&gt;(string query, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteQuery(Of TResult As New) (query As String, ParamArray parameters As Object()) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; where TResult : gcnew() System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ ExecuteQuery(System::String ^ query, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteQuery : string * obj[] -&gt; seq&lt;'Result (requires 'Result : (new : unit -&gt; 'Result))&gt; (requires 'Result : (new : unit -&gt; 'Result))" Usage="dataContext.ExecuteQuery (query, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="7f410-256">返回的集合中的元素的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-256">The type of the elements in the returned collection.</span>
          </span>
        </typeparam>
        <param name="query">
          <span data-ttu-id="7f410-257">要执行的 SQL 查询。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-257">The SQL query to be executed.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="7f410-258">要传递给命令的参数数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-258">The array of parameters to be passed to the command.</span>
          </span>
          <span data-ttu-id="7f410-259">请注意以下行为：如果数组中的对象的数目小于命令字符串中已标识的最大数，则会引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-259">Note the following behavior:  If the number of objects in the array is less than the highest number identified in the command string, an exception is thrown.</span>
          </span>
          <span data-ttu-id="7f410-260">如果数组包含未在命令字符串中引用的对象，则不会引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-260">If the array contains objects that are not referenced in the command string, no exception is thrown.</span>
          </span>
          <span data-ttu-id="7f410-261">如果某参数为 null，则该参数会转换为 <see langword="DBNull.Value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-261">If a parameter is null, it is converted to <see langword="DBNull.Value" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-262">直接对数据库执行 SQL 查询并返回对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-262">Executes SQL queries directly on the database and returns objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f410-263">由查询返回的对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-263">A collection of objects returned by the query.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-264">此方法是一种传递机制的情况下，[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]不提供用于特定方案。</span><span class="sxs-lookup"><span data-stu-id="7f410-264">This method is a pass-through mechanism for cases where [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not provide for a particular scenario.</span></span>  
  
 <span data-ttu-id="7f410-265">对字段的查询结果中的匹配列和属性的对象中的算法工作方式如下：</span><span class="sxs-lookup"><span data-stu-id="7f410-265">The algorithm for matching columns in the result of the query to fields and properties in the object works as follows:</span></span>  
  
-   <span data-ttu-id="7f410-266">如果字段或属性映射到特定列名称，则结果集中应包含该列名称。</span><span class="sxs-lookup"><span data-stu-id="7f410-266">If a field or property is mapped to a particular column name, that column name is expected in the resultset.</span></span>  
  
-   <span data-ttu-id="7f410-267">如果未映射字段或属性，则结果集中应包含其名称与该字段或属性相同的列。</span><span class="sxs-lookup"><span data-stu-id="7f410-267">If a field or property is not mapped, a column with the same name as the field or property is expected in the resultset.</span></span>  
  
-   <span data-ttu-id="7f410-268">通过第一个查找区分大小写匹配来执行比较。</span><span class="sxs-lookup"><span data-stu-id="7f410-268">The comparison is performed by first looking for a case-sensitive match.</span></span> <span data-ttu-id="7f410-269">如果未找到这样的匹配，不区分大小写的匹配项会继续搜索。</span><span class="sxs-lookup"><span data-stu-id="7f410-269">If such a match is not found, a subsequent search occurs for a case-insensitive match.</span></span>  
  
-   <span data-ttu-id="7f410-270">查询必须返回所有跟踪的字段和属性的对象 （除延迟加载） 满足所有以下都条件：</span><span class="sxs-lookup"><span data-stu-id="7f410-270">The query must return all the tracked fields and properties of the object (apart from those subject to deferred loading) when all the following are true:</span></span>  
  
    -   <span data-ttu-id="7f410-271">如果`<T>`显式跟踪的实体由<xref:System.Data.Linq.DataContext>。</span><span class="sxs-lookup"><span data-stu-id="7f410-271">If `<T>` is an entity explicitly tracked by the <xref:System.Data.Linq.DataContext>.</span></span>  
  
    -   <span data-ttu-id="7f410-272">ObjectTrackingEnabled 是如此。</span><span class="sxs-lookup"><span data-stu-id="7f410-272">ObjectTrackingEnabled is true.</span></span>  
  
    -   <span data-ttu-id="7f410-273">实体具有主键。</span><span class="sxs-lookup"><span data-stu-id="7f410-273">The entity has a primary key.</span></span>  
  
     <span data-ttu-id="7f410-274">否则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="7f410-274">Otherwise an exception is thrown.</span></span>  
  
-   <span data-ttu-id="7f410-275">在所有其他情况下，查询可以检索只跟踪的字段和对象的属性的子集。</span><span class="sxs-lookup"><span data-stu-id="7f410-275">In all other cases, the query can retrieve just a subset of the tracked fields and properties for the object.</span></span>  
  
 <span data-ttu-id="7f410-276">以下 C# 代码片段显示了此方法的一个用途：</span><span class="sxs-lookup"><span data-stu-id="7f410-276">The following C# snippet shows one use for this method:</span></span>  
  
```  
var customers = db.ExecuteQuery<Customer>(@"SELECT CustomerID, CompanyName, ContactName, ContactTitle,   
   Address, City, Region, PostalCode, Country, Phone, Fax  
   FROM   dbo.Customers  
   WHERE  City = {0}", "London");  
  
foreach (Customer c in customers)  
   Console.WriteLine(c.ContactName);  
```  
  
 <span data-ttu-id="7f410-277">在 Visual Basic 中</span><span class="sxs-lookup"><span data-stu-id="7f410-277">In Visual Basic</span></span>  
  
```  
Dim customers = db.ExecuteQuery(Of Customer)("SELECT CustomerID, _    CompanyName, ContactName, ContactTitle, _  
   Address, City, Region, PostalCode, Country, Phone, Fax _  
   FROM dbo.Customers _  
WHERE City = {0}", "London")  
  
For Each c As Customer In customers  
    Console.WriteLine(c.ContactName)  
Next  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChangeSet">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ChangeSet GetChangeSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Linq.ChangeSet GetChangeSet() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.GetChangeSet" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChangeSet () As ChangeSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Linq::ChangeSet ^ GetChangeSet();" />
      <MemberSignature Language="F#" Value="member this.GetChangeSet : unit -&gt; System.Data.Linq.ChangeSet" Usage="dataContext.GetChangeSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ChangeSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f410-278">获取由 <see cref="T:System.Data.Linq.DataContext" />跟踪的被修改对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-278">Gets the modified objects tracked by <see cref="T:System.Data.Linq.DataContext" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f410-279">该对象集返回为三个只读的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-279">The set of objects is returned as three read-only collections.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-280">请注意以下事项：</span><span class="sxs-lookup"><span data-stu-id="7f410-280">Note the following considerations:</span></span>  
  
-   <span data-ttu-id="7f410-281"><xref:System.Data.Linq.DataContext.GetChangeSet%2A> 可能会产生副作用，如插入的推理并删除时通常执行的操作<xref:System.Data.Linq.DataContext.SubmitChanges%2A>。</span><span class="sxs-lookup"><span data-stu-id="7f410-281"><xref:System.Data.Linq.DataContext.GetChangeSet%2A> might have side effects, such as inference of insert and delete operations that are usually performed at the time of <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</span></span> <span data-ttu-id="7f410-282">例如，以下操作中使用的对象可以创建以下列表中相应的推断的操作：</span><span class="sxs-lookup"><span data-stu-id="7f410-282">For example, objects that are used in the following operations can create corresponding inferred operations in the following list:</span></span>  
  
    -   <span data-ttu-id="7f410-283"><xref:System.Data.Linq.EntitySet%601.Add%2A> 到<xref:System.Data.Linq.Table%601.InsertOnSubmit%2A>。</span><span class="sxs-lookup"><span data-stu-id="7f410-283"><xref:System.Data.Linq.EntitySet%601.Add%2A> to <xref:System.Data.Linq.Table%601.InsertOnSubmit%2A>.</span></span>  
  
    -   <span data-ttu-id="7f410-284"><xref:System.Data.Linq.EntityRef%601> null 赋值 (由于的可能<xref:System.Data.Linq.EntitySet%601.Remove%2A>到<xref:System.Data.Linq.Table%601.DeleteOnSubmit%2A>。</span><span class="sxs-lookup"><span data-stu-id="7f410-284"><xref:System.Data.Linq.EntityRef%601> assignment to null (possibly because of <xref:System.Data.Linq.EntitySet%601.Remove%2A> to <xref:System.Data.Linq.Table%601.DeleteOnSubmit%2A>.</span></span>  
  
-   <span data-ttu-id="7f410-285">不可能根据外键约束排序集。</span><span class="sxs-lookup"><span data-stu-id="7f410-285">The set may not be ordered according to foreign key constraints.</span></span>  
  
-   <span data-ttu-id="7f410-286">数据库生成的值 （例如，主键和外键的值、 时间戳，等等） 将不可用。</span><span class="sxs-lookup"><span data-stu-id="7f410-286">Database-generated values (for example, primary and foreign key values, timestamps, and so forth) are not available.</span></span> <span data-ttu-id="7f410-287">此类信息需要执行数据库命令，可能是检索到的信息 （例如，从主键的外键） 的传播。</span><span class="sxs-lookup"><span data-stu-id="7f410-287">Such information requires database command execution and perhaps the propagation of retrieved information (for example, foreign key from primary key).</span></span>  
  
-   <span data-ttu-id="7f410-288">在调用时计算已更改的对象的集。</span><span class="sxs-lookup"><span data-stu-id="7f410-288">The set of changed objects is computed at the time of the call.</span></span> <span data-ttu-id="7f410-289">对后续调用<xref:System.Data.Linq.DataContext.SubmitChanges%2A>可以生成一组不同，如果进行其他更改。</span><span class="sxs-lookup"><span data-stu-id="7f410-289">Subsequent calls to <xref:System.Data.Linq.DataContext.SubmitChanges%2A> can produce a different set if additional changes are made.</span></span>  
  
 <span data-ttu-id="7f410-290">在不进行任何更改后的输出显示，如下所示：</span><span class="sxs-lookup"><span data-stu-id="7f410-290">Output when no changes have been made appears as follows:</span></span>  
  
 `{Added: 0, Removed: 0, Modified: 0}`  
  
   
  
## Examples  
 [!code-csharp[DLinqDebuggingSupport#2](~/samples/snippets/csharp/VS_Snippets_Data/DLinqDebuggingSupport/cs/Program.cs#2)]
 [!code-vb[DLinqDebuggingSupport#2](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqDebuggingSupport/vb/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand GetCommand (System.Linq.IQueryable query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Common.DbCommand GetCommand(class System.Linq.IQueryable query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCommand (query As IQueryable) As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Common::DbCommand ^ GetCommand(System::Linq::IQueryable ^ query);" />
      <MemberSignature Language="F#" Value="member this.GetCommand : System.Linq.IQueryable -&gt; System.Data.Common.DbCommand" Usage="dataContext.GetCommand query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="query">
          <span data-ttu-id="7f410-291">要检索其 SQL 命令信息的查询。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-291">The query whose SQL command information is to be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-292">获取关于由 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 生成的 SQL 命令的信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-292">Gets the information about SQL commands generated by [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)].</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f410-293">请求的命令信息对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-293">The requested command information object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-294">此方法是一个 getter，不会影响<xref:System.Data.Linq.DataContext>状态。</span><span class="sxs-lookup"><span data-stu-id="7f410-294">This method is only a getter and does not affect <xref:System.Data.Linq.DataContext> state.</span></span>  
  
 <span data-ttu-id="7f410-295">请注意以下事项：</span><span class="sxs-lookup"><span data-stu-id="7f410-295">Note the following considerations:</span></span>  
  
-   <span data-ttu-id="7f410-296">参数必须为非 null。</span><span class="sxs-lookup"><span data-stu-id="7f410-296">The argument must be non-null.</span></span> <span data-ttu-id="7f410-297">否则，将空参数引发异常。</span><span class="sxs-lookup"><span data-stu-id="7f410-297">Otherwise, a null argument exception is thrown.</span></span>  
  
-   <span data-ttu-id="7f410-298">正常查询期间引发的转换异常[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]不能转换为查询应用查询执行。</span><span class="sxs-lookup"><span data-stu-id="7f410-298">Normal query translation exceptions thrown during [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] query execution apply for a query that cannot be translated.</span></span>  
  
-   <span data-ttu-id="7f410-299">返回仅第一个查询命令。</span><span class="sxs-lookup"><span data-stu-id="7f410-299">Only the first query command is returned.</span></span> <span data-ttu-id="7f410-300">具体而言，用于预先加载的其他命令 (<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>) 不包括在内。</span><span class="sxs-lookup"><span data-stu-id="7f410-300">Specifically, additional commands that are used for eager loading (<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>) are not included.</span></span>  
  
-   <span data-ttu-id="7f410-301"><xref:System.Data.Linq.DataContext> 不跟踪用户与该命令。</span><span class="sxs-lookup"><span data-stu-id="7f410-301"><xref:System.Data.Linq.DataContext> does not track what the user does with the command.</span></span> <span data-ttu-id="7f410-302">例如，返回命令执行的结果不跟踪，并且不会影响<xref:System.Data.Linq.DataContext>状态。</span><span class="sxs-lookup"><span data-stu-id="7f410-302">For example, results from the execution of the returned command are not tracked and do not affect <xref:System.Data.Linq.DataContext> state.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DLinqDebuggingSupport#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqDebuggingSupport/cs/Program.cs#3)]
 [!code-vb[DLinqDebuggingSupport#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqDebuggingSupport/vb/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIDbCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand GetIDbCommand (System.Linq.IQueryable query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.IDbCommand GetIDbCommand(class System.Linq.IQueryable query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.GetIDbCommand(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIDbCommand (query As IQueryable) As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::IDbCommand ^ GetIDbCommand(System::Linq::IQueryable ^ query);" />
      <MemberSignature Language="F#" Value="member this.GetIDbCommand : System.Linq.IQueryable -&gt; System.Data.IDbCommand" Usage="dataContext.GetIDbCommand query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="query">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTable">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ITable GetTable (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Linq.ITable GetTable(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.GetTable(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Linq::ITable ^ GetTable(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.GetTable : Type -&gt; System.Data.Linq.ITable" Usage="dataContext.GetTable type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ITable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="7f410-303">要返回的对象的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-303">The type of the objects to be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-304">返回特定类型的对象的集合，其中类型由 <paramref name="type" /> 参数定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-304">Returns a collection of objects of a particular type, where the type is defined by the <paramref name="type" /> parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f410-305">由 <paramref name="type" /> 参数定义的对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-305">A collection of objects defined by the <paramref name="type" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-306">这是弱类型化的版本<xref:System.Data.Linq.DataContext.GetTable%2A>。</span><span class="sxs-lookup"><span data-stu-id="7f410-306">This is a weakly typed version of <xref:System.Data.Linq.DataContext.GetTable%2A>.</span></span> <span data-ttu-id="7f410-307">请务必已弱类型化的版本，因为它是动态构建的查询相对较常见的做法。</span><span class="sxs-lookup"><span data-stu-id="7f410-307">It is important to have a weakly typed version because it is a relatively common practice to construct queries dynamically.</span></span> <span data-ttu-id="7f410-308">它会强制应用程序使用反射来调用正确的泛型方法很不方便。</span><span class="sxs-lookup"><span data-stu-id="7f410-308">It would be inconvenient to force the application to use reflection to call the correct generic method.</span></span>  
  
 <span data-ttu-id="7f410-309">如果没有为特定类型集合，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7f410-309">If there is no collection for a particular type, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTable&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Linq.Table&lt;TEntity&gt; GetTable&lt;TEntity&gt; () where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Linq.Table`1&lt;!!TEntity&gt; GetTable&lt;class TEntity&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.GetTable``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTable(Of TEntity As Class) () As Table(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class System::Data::Linq::Table&lt;TEntity&gt; ^ GetTable();" />
      <MemberSignature Language="F#" Value="member this.GetTable : unit -&gt; System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="dataContext.GetTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.Table&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TEntity">
          <span data-ttu-id="7f410-310">要返回的对象的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-310">The type of the objects to be returned.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="7f410-311">返回特定类型的对象的集合，其中类型由 <paramref name="TEntity" /> 参数定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-311">Returns a collection of objects of a particular type, where the type is defined by the <paramref name="TEntity" /> parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f410-312">由 <paramref name="TEntity" /> 参数定义的对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-312">A collection of objects defined by the <paramref name="TEntity" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-313">此方法是查询的主入口点。</span><span class="sxs-lookup"><span data-stu-id="7f410-313">This method is the main entry point for querying.</span></span> <span data-ttu-id="7f410-314">当强类型化<xref:System.Data.Linq.DataContext>是创建新的生成的属性封装对此方法的调用。</span><span class="sxs-lookup"><span data-stu-id="7f410-314">When a strongly typed <xref:System.Data.Linq.DataContext> is created, new generated properties encapsulate calls to this method.</span></span> <span data-ttu-id="7f410-315">例如，`Customers`生成属性返回`GetTable<Customer>`。</span><span class="sxs-lookup"><span data-stu-id="7f410-315">For example, a `Customers` property is generated that returns `GetTable<Customer>`.</span></span>  
  
 <span data-ttu-id="7f410-316">如果没有为特定类型集合，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7f410-316">If there is no collection for a particular type, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadOptions">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataLoadOptions LoadOptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataLoadOptions LoadOptions" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.LoadOptions" />
      <MemberSignature Language="VB.NET" Value="Public Property LoadOptions As DataLoadOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataLoadOptions ^ LoadOptions { System::Data::Linq::DataLoadOptions ^ get(); void set(System::Data::Linq::DataLoadOptions ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LoadOptions : System.Data.Linq.DataLoadOptions with get, set" Usage="System.Data.Linq.DataContext.LoadOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataLoadOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f410-317">获取或设置与此 <see cref="T:System.Data.Linq.DataContext" /> 关联的 <see cref="T:System.Data.Linq.DataLoadOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-317">Gets or sets the <see cref="T:System.Data.Linq.DataLoadOptions" /> associated with this <see cref="T:System.Data.Linq.DataContext" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f410-318">相关数据的预提取加载选项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-318">The prefetch load options for related data.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-319">此属性获取或设置用于为延迟加载成员和相关集合的成员身份定义预提取行为的选项。</span><span class="sxs-lookup"><span data-stu-id="7f410-319">This property gets or sets the options that are used to define prefetch behavior for deferred-loaded members and membership of related collections.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter Log { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter Log" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.Log" />
      <MemberSignature Language="VB.NET" Value="Public Property Log As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ Log { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Log : System.IO.TextWriter with get, set" Usage="System.Data.Linq.DataContext.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f410-320">获取或设置要写入 SQL 查询或命令的目标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-320">Gets or sets the destination to write the SQL query or command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f410-321">要用于编写命令的 <see cref="T:System.IO.TextReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-321">The <see cref="T:System.IO.TextReader" /> to use for writing the command.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-322">将此属性设置为`null`禁用命令日志记录。</span><span class="sxs-lookup"><span data-stu-id="7f410-322">Set this property to `null` to disable command logging.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f410-323">下面的示例显示在控制台窗口中生成的 SQL，然后再显示查询的结果。</span><span class="sxs-lookup"><span data-stu-id="7f410-323">The following example displays generated SQL in the console window before it displays the results of the query.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataContext#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.DataContext/cs/Program.cs#2)]
 [!code-vb[System.Data.Linq.DataContext#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.DataContext/vb/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mapping">
      <MemberSignature Language="C#" Value="public System.Data.Linq.Mapping.MetaModel Mapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.Mapping.MetaModel Mapping" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.Mapping" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Mapping As MetaModel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::Mapping::MetaModel ^ Mapping { System::Data::Linq::Mapping::MetaModel ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Mapping : System.Data.Linq.Mapping.MetaModel" Usage="System.Data.Linq.DataContext.Mapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.Mapping.MetaModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f410-324">获取映射所基于的 <see cref="T:System.Data.Linq.Mapping.MetaModel" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-324">Gets the <see cref="T:System.Data.Linq.Mapping.MetaModel" /> on which the mapping is based.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f410-325">在数据库和域对象之间的映射。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-325">The mapping between a database and domain objects.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectTrackingEnabled">
      <MemberSignature Language="C#" Value="public bool ObjectTrackingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ObjectTrackingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property ObjectTrackingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ObjectTrackingEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ObjectTrackingEnabled : bool with get, set" Usage="System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f410-326">获取或设置一个值，该值指示是否启用对象跟踪。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-326">Gets or sets a value that indicates whether object tracking is enabled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f410-327">如果启用跟踪对象，则为 <see langword="true" />；否则为<see langword="false" /> 。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-327">
              <see langword="true" /> if the object tracking is enabled; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="7f410-328">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-328">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-329">此属性设置为`false`提高在检索时的性能，因为有较少的项来跟踪。</span><span class="sxs-lookup"><span data-stu-id="7f410-329">Setting this property to `false` improves performance at retrieval time, because there are fewer items to track.</span></span>  
  
 <span data-ttu-id="7f410-330">引发异常：</span><span class="sxs-lookup"><span data-stu-id="7f410-330">An exception is thrown:</span></span>  
  
-   <span data-ttu-id="7f410-331">如果该属性设置为`false`执行查询后。</span><span class="sxs-lookup"><span data-stu-id="7f410-331">If the property is set to `false` after a query has been executed.</span></span>  
  
     <span data-ttu-id="7f410-332">有关详细信息，请参阅中的有效模式部分<xref:System.Data.Linq.DataContext>。</span><span class="sxs-lookup"><span data-stu-id="7f410-332">For more information, see the Valid Modes section in <xref:System.Data.Linq.DataContext>.</span></span>  
  
-   <span data-ttu-id="7f410-333">如果该属性设置为`false`和<xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="7f410-333">If the property is set to `false` and <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span>  
  
 <span data-ttu-id="7f410-334">如果<xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A>是`false`，<xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A>被忽略，视为`false`。</span><span class="sxs-lookup"><span data-stu-id="7f410-334">If <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> is `false`, <xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> is ignored and treated as `false`.</span></span> <span data-ttu-id="7f410-335">在这种情况下，<xref:System.Data.Linq.DataContext>是只读的。</span><span class="sxs-lookup"><span data-stu-id="7f410-335">In this case, the <xref:System.Data.Linq.DataContext> is read-only.</span></span>  
  
 <span data-ttu-id="7f410-336">如果<xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A>是`true`，<xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A>是`false`。</span><span class="sxs-lookup"><span data-stu-id="7f410-336">If <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> is `true`, <xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> is `false`.</span></span> <span data-ttu-id="7f410-337">在这种情况下， <xref:System.Data.Linq.DataContext> ，你可以通过使用负载对象图<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>指令，但不会启用延迟的加载。</span><span class="sxs-lookup"><span data-stu-id="7f410-337">In this case, <xref:System.Data.Linq.DataContext> allows you to load an object graph by using <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> directives, but does not enable deferred loading.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCacheEnabled">
      <MemberSignature Language="C#" Value="public bool QueryCacheEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool QueryCacheEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.QueryCacheEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property QueryCacheEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool QueryCacheEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.QueryCacheEnabled : bool with get, set" Usage="System.Data.Linq.DataContext.QueryCacheEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Refresh">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7f410-338">使用数据库中的数据刷新对象的状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-338">Refreshes object state by using data in the database.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-339">开放式并发错误将引入另一次尝试的状态项后，此方法很有用。</span><span class="sxs-lookup"><span data-stu-id="7f410-339">This method is useful after an optimistic concurrency error to bring items into a state for another attempt.</span></span> <span data-ttu-id="7f410-340">它将更新的基元字段和属性的对象的状态。</span><span class="sxs-lookup"><span data-stu-id="7f410-340">It updates the state of the primitive fields and properties on the objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f410-341">如果对象位于*许多*将设置一个对多关系，该对象上的外键端和关系的另一端的对象指针将设置为新值。</span><span class="sxs-lookup"><span data-stu-id="7f410-341">If an object is on the *many* side of a one-to-many relationship, the foreign key on the object will be set and the object pointer for the other side of the relationship will be set to the new value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Linq.RefreshMode mode, System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Linq.RefreshMode mode, class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh (mode As RefreshMode, entities As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh(System::Data::Linq::RefreshMode mode, System::Collections::IEnumerable ^ entities);" />
      <MemberSignature Language="F#" Value="member this.Refresh : System.Data.Linq.RefreshMode * System.Collections.IEnumerable -&gt; unit" Usage="dataContext.Refresh (mode, entities)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.Linq.RefreshMode" />
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="7f410-342">一个指定如何处理开放式并发冲突的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-342">A value that specifies how optimistic concurrency conflicts are handled.</span>
          </span>
        </param>
        <param name="entities">
          <span data-ttu-id="7f410-343">要刷新的实体的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-343">The collection of entities to be refreshed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-344">按照指定模式刷新实体对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-344">Refreshes a collection of entity objects according to the specified mode.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Linq.RefreshMode mode, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Linq.RefreshMode mode, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh (mode As RefreshMode, entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh(System::Data::Linq::RefreshMode mode, System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.Refresh : System.Data.Linq.RefreshMode * obj -&gt; unit" Usage="dataContext.Refresh (mode, entity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.Linq.RefreshMode" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="7f410-345">一个指定如何处理开放式并发冲突的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-345">A value that specifies how optimistic concurrency conflicts are handled.</span>
          </span>
        </param>
        <param name="entity">
          <span data-ttu-id="7f410-346">要刷新的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-346">The object to be refreshed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-347">按照指定模式刷新实体对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-347">Refreshes an entity object according to the specified mode.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Linq.RefreshMode mode, params object[] entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Linq.RefreshMode mode, object[] entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh (mode As RefreshMode, ParamArray entities As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh(System::Data::Linq::RefreshMode mode, ... cli::array &lt;System::Object ^&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.Refresh : System.Data.Linq.RefreshMode * obj[] -&gt; unit" Usage="dataContext.Refresh (mode, entities)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.Linq.RefreshMode" />
        <Parameter Name="entities" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="7f410-348">一个指定如何处理开放式并发冲突的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-348">A value that specifies how optimistic concurrency conflicts are handled.</span>
          </span>
        </param>
        <param name="entities">
          <span data-ttu-id="7f410-349">要刷新的实体对象的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-349">The array of entity objects to be refreshed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-350">按照指定模式刷新实体对象的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-350">Refreshes an array of entity objects according to the specified mode.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubmitChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7f410-351">计算要插入、更新或删除的已修改对象的集，并执行相应命令以实现对数据库的更改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-351">Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-352">如果存在用于 insert、 update 或 delete，重写方法<xref:System.Data.Linq.DataContext.SubmitChanges%2A>执行这些方法，而不是默认[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]命令。</span><span class="sxs-lookup"><span data-stu-id="7f410-352">If override methods are present for insert, update, or delete, <xref:System.Data.Linq.DataContext.SubmitChanges%2A> executes these methods instead of the default [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] commands.</span></span>  
  
 <span data-ttu-id="7f410-353"><xref:System.Data.Linq.DataContext.SubmitChanges%2A> 启动一个事务，将回滚任何会发生异常时<xref:System.Data.Linq.DataContext.SubmitChanges%2A>正在执行。</span><span class="sxs-lookup"><span data-stu-id="7f410-353"><xref:System.Data.Linq.DataContext.SubmitChanges%2A> starts a transaction and will roll back if an exception occurs while <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is executing.</span></span> <span data-ttu-id="7f410-354">但是，这不会回滚所做的更改在内存中或由跟踪<xref:System.Data.Linq.DataContext>; 这些更改将需要手动回滚。</span><span class="sxs-lookup"><span data-stu-id="7f410-354">However, this does not roll back the changes in memory or tracked by the <xref:System.Data.Linq.DataContext>; those changes will need to be rolled back manually.</span></span> <span data-ttu-id="7f410-355">可以使用的新实例启动<xref:System.Data.Linq.DataContext>如果在内存中的更改被放弃。</span><span class="sxs-lookup"><span data-stu-id="7f410-355">You can start with a new instance of the <xref:System.Data.Linq.DataContext> if the changes in memory are to be discarded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubmitChanges">
      <MemberSignature Language="C#" Value="public void SubmitChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SubmitChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.SubmitChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub SubmitChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SubmitChanges();" />
      <MemberSignature Language="F#" Value="member this.SubmitChanges : unit -&gt; unit" Usage="dataContext.SubmitChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f410-356">计算要插入、更新或删除的已修改对象的集，并执行相应命令以实现对数据库的更改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-356">Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-357">如果存在用于 insert、 update 或 delete，重写方法<xref:System.Data.Linq.DataContext.SubmitChanges%2A>执行这些方法，而不是默认[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]命令。</span><span class="sxs-lookup"><span data-stu-id="7f410-357">If override methods are present for insert, update, or delete, <xref:System.Data.Linq.DataContext.SubmitChanges%2A> executes these methods instead of the default [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] commands.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubmitChanges">
      <MemberSignature Language="C#" Value="public virtual void SubmitChanges (System.Data.Linq.ConflictMode failureMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SubmitChanges(valuetype System.Data.Linq.ConflictMode failureMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SubmitChanges (failureMode As ConflictMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SubmitChanges(System::Data::Linq::ConflictMode failureMode);" />
      <MemberSignature Language="F#" Value="abstract member SubmitChanges : System.Data.Linq.ConflictMode -&gt; unit&#xA;override this.SubmitChanges : System.Data.Linq.ConflictMode -&gt; unit" Usage="dataContext.SubmitChanges failureMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="failureMode" Type="System.Data.Linq.ConflictMode" />
      </Parameters>
      <Docs>
        <param name="failureMode">
          <span data-ttu-id="7f410-358">提交失败时要采取的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-358">The action to be taken if the submission fails.</span>
          </span>
          <span data-ttu-id="7f410-359">有效参数包括：<see cref="F:System.Data.Linq.ConflictMode.FailOnFirstConflict" /><see cref="F:System.Data.Linq.ConflictMode.ContinueOnConflict" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-359">Valid arguments are as follows:  <see cref="F:System.Data.Linq.ConflictMode.FailOnFirstConflict" /><see cref="F:System.Data.Linq.ConflictMode.ContinueOnConflict" /></span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-360">将对检索到的对象所做的更改发送到基础数据库，并指定提交失败时要采取的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-360">Sends changes that were made to retrieved objects to the underlying database, and specifies the action to be taken if the submission fails.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-361">默认故障模式是<xref:System.Data.Linq.ConflictMode.FailOnFirstConflict>。</span><span class="sxs-lookup"><span data-stu-id="7f410-361">Default failure mode is <xref:System.Data.Linq.ConflictMode.FailOnFirstConflict>.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.ConflictModeEnumeration#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.conflictmodeenumeration/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.ConflictModeEnumeration#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.conflictmodeenumeration/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transaction">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbTransaction Transaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbTransaction Transaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.Transaction" />
      <MemberSignature Language="VB.NET" Value="Public Property Transaction As DbTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbTransaction ^ Transaction { System::Data::Common::DbTransaction ^ get(); void set(System::Data::Common::DbTransaction ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transaction : System.Data.Common.DbTransaction with get, set" Usage="System.Data.Linq.DataContext.Transaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f410-362">获取或设置用于访问数据库的 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 的本地事务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-362">Gets or sets a local transaction for the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] to use to access the database.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f410-363">执行查询和命令时由 <see cref="T:System.Data.Linq.DataContext" /> 使用的事务对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-363">The transaction object used by the <see cref="T:System.Data.Linq.DataContext" /> when executing queries and commands.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-364">此属性的主要方案是使用关系的互操作性[!INCLUDE[vstecado](~/includes/vstecado-md.md)]代码。</span><span class="sxs-lookup"><span data-stu-id="7f410-364">The primary scenario for this property is interoperability with relational [!INCLUDE[vstecado](~/includes/vstecado-md.md)] code.</span></span> <span data-ttu-id="7f410-365">例如，使用此属性，当您编写自己`Create` / `Update` / `Delete`方法，以便设置`Transaction`ADO 属性`Command`对象。</span><span class="sxs-lookup"><span data-stu-id="7f410-365">For example, use this property when you write your own `Create`/`Update`/`Delete` methods to set the `Transaction` property on the ADO `Command` object.</span></span>  
  
 <span data-ttu-id="7f410-366">请注意以下事项：</span><span class="sxs-lookup"><span data-stu-id="7f410-366">Note the following:</span></span>  
  
-   <span data-ttu-id="7f410-367">如果此属性未显式设置，getter 将返回 null。</span><span class="sxs-lookup"><span data-stu-id="7f410-367">If this property has not been explicitly set, the getter returns null.</span></span>  
  
-   <span data-ttu-id="7f410-368">如果在中执行代码<xref:System.Transactions.Transaction>上下文中，设置此属性将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7f410-368">If the code is executing in a <xref:System.Transactions.Transaction> context, setting this property throws an exception.</span></span>  
  
-   <span data-ttu-id="7f410-369">如果此属性设置了一个新<xref:System.Transactions.Transaction>是打开，将引发异常时执行的查询或更新。</span><span class="sxs-lookup"><span data-stu-id="7f410-369">If this property is set and a new <xref:System.Transactions.Transaction> is opened, an exception is thrown when a query or update is executed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Translate">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7f410-370">将现有 <see cref="T:System.Data.IDataReader" /> 转换为对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-370">Converts an existing <see cref="T:System.Data.IDataReader" /> to objects.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f410-371">中的每一行<xref:System.Data.IDataReader>转换中的对象为<xref:System.Collections.Generic.IEnumerable%601>。</span><span class="sxs-lookup"><span data-stu-id="7f410-371">Each row in the <xref:System.Data.IDataReader> is converted to an object in the <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
```  
public IEnumerable<T> Translate<T>(IDataReader reader) {}  
```  
  
 <span data-ttu-id="7f410-372">说明： 此方法用于将转换的现有<xref:System.Data.Common.DbDataReader>对象。</span><span class="sxs-lookup"><span data-stu-id="7f410-372">Description: This method is used to convert an existing <xref:System.Data.Common.DbDataReader> to objects.</span></span> <span data-ttu-id="7f410-373">中的每一行<xref:System.Data.Common.DbDataReader>转换中的对象为<xref:System.Collections.Generic.IEnumerable%601>。</span><span class="sxs-lookup"><span data-stu-id="7f410-373">Each row in the <xref:System.Data.Common.DbDataReader> is converted to an object in the <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="7f410-374">**泛型参数：**</span><span class="sxs-lookup"><span data-stu-id="7f410-374">**Generic parameters:**</span></span>  
  
 <span data-ttu-id="7f410-375">`T`： 请参阅<xref:System.Data.Linq.DataContext.ExecuteQuery%2A>。</span><span class="sxs-lookup"><span data-stu-id="7f410-375">`T`: See <xref:System.Data.Linq.DataContext.ExecuteQuery%2A>.</span></span>  
  
 <span data-ttu-id="7f410-376">**参数：**</span><span class="sxs-lookup"><span data-stu-id="7f410-376">**Parameters:**</span></span>  
  
 <span data-ttu-id="7f410-377">`Query`： 请参阅下面的命令的说明<xref:System.Data.Linq.DataContext.ExecuteCommand%2A>。</span><span class="sxs-lookup"><span data-stu-id="7f410-377">`Query`: See the description for command under <xref:System.Data.Linq.DataContext.ExecuteCommand%2A>.</span></span>  
  
 <span data-ttu-id="7f410-378">`Parameters`： 请参阅下的参数的说明<xref:System.Data.Linq.DataContext.ExecuteCommand%2A>。</span><span class="sxs-lookup"><span data-stu-id="7f410-378">`Parameters`: See the description for parameters under <xref:System.Data.Linq.DataContext.ExecuteCommand%2A>.</span></span>  
  
 <span data-ttu-id="7f410-379">**返回类型：**</span><span class="sxs-lookup"><span data-stu-id="7f410-379">**Return type:**</span></span>  
  
 <span data-ttu-id="7f410-380"><xref:System.Collections.Generic.IEnumerable%601>： 由转换返回的对象的集合。</span><span class="sxs-lookup"><span data-stu-id="7f410-380"><xref:System.Collections.Generic.IEnumerable%601>: collection of objects returned by the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public System.Data.Linq.IMultipleResults Translate (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Linq.IMultipleResults Translate(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Translate (reader As DbDataReader) As IMultipleResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Linq::IMultipleResults ^ Translate(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Translate : System.Data.Common.DbDataReader -&gt; System.Data.Linq.IMultipleResults" Usage="dataContext.Translate reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.IMultipleResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="7f410-381">要转换的 <see cref="T:System.Data.IDataReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-381">The <see cref="T:System.Data.IDataReader" /> to be converted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-382">将现有 <see cref="T:System.Data.Common.DbDataReader" /> 转换为对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-382">Converts an existing <see cref="T:System.Data.Common.DbDataReader" /> to objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f410-383">由转换返回的对象的列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-383">A list of objects returned by the conversion.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Translate (Type elementType, System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Translate(class System.Type elementType, class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Translate (elementType As Type, reader As DbDataReader) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Translate(Type ^ elementType, System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Translate : Type * System.Data.Common.DbDataReader -&gt; System.Collections.IEnumerable" Usage="dataContext.Translate (elementType, reader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" />
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="elementType">
          <span data-ttu-id="7f410-384">要返回的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-384">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to be returned.</span>
          </span>
          <span data-ttu-id="7f410-385">用于将结果中的列与对象中的字段和属性进行匹配的算法的工作原理如下：如果某个字段或属性映射到特定的列名称，则结果集中应包含该列名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-385">The algorithm for matching columns in the result to fields and properties in the object works as follows:  If a field or property is mapped to a particular column name, that column name is expected in the resultset.</span>
          </span>
          <span data-ttu-id="7f410-386">如果未映射字段或属性，则结果集中应包含其名称与该字段或属性相同的列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-386">If a field or property is not mapped, a column with the same name as the field or property is expected in the resultset.</span>
          </span>
          <span data-ttu-id="7f410-387">通过先查找区分大小写的匹配来执行比较。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-387">The comparison is performed by looking for a case-sensitive match first.</span>
          </span>
          <span data-ttu-id="7f410-388">如果未找到匹配项，则会继续搜索不区分大小写的匹配项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-388">If this match is not found, a subsequent search is occurs for a case-insensitive match.</span>
          </span>
          <span data-ttu-id="7f410-389">如果同时满足下列所有条件，则该查询应当返回（除延迟加载的对象外的）对象的所有跟踪的字段和属性：T<c></c> 是由 <see cref="T:System.Data.Linq.DataContext" /> 显式跟踪的实体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-389">The query must return all the tracked fields and properties of the object (except those that are loaded on a deferred basis) when all the following conditions are true:  <c>T</c> is an entity explicitly tracked by the <see cref="T:System.Data.Linq.DataContext" />.</span>
          </span>
          <span data-ttu-id="7f410-390">
            <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> 为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-390">
              <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="7f410-391">实体具有主键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-391">The entity has a primary key.</span>
          </span>
          <span data-ttu-id="7f410-392">否则会引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-392">Otherwise an exception is thrown.</span>
          </span>
        </param>
        <param name="reader">
          <span data-ttu-id="7f410-393">要转换的 <see cref="T:System.Data.IDataReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-393">The <see cref="T:System.Data.IDataReader" /> to be converted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-394">将现有 <see cref="T:System.Data.Common.DbDataReader" /> 转换为对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-394">Converts an existing <see cref="T:System.Data.Common.DbDataReader" /> to objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f410-395">由转换返回的对象的列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-395">A list of objects returned by the conversion.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TResult&gt; Translate&lt;TResult&gt; (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Translate&lt;TResult&gt;(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Translate(Of TResult) (reader As DbDataReader) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Translate(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Translate : System.Data.Common.DbDataReader -&gt; seq&lt;'Result&gt;" Usage="dataContext.Translate reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="7f410-396">要返回的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-396">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to be returned.</span>
          </span>
        </typeparam>
        <param name="reader">
          <span data-ttu-id="7f410-397">要转换的 <see cref="T:System.Data.IDataReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-397">The <see cref="T:System.Data.IDataReader" /> to be converted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f410-398">将现有 <see cref="T:System.Data.Common.DbDataReader" /> 转换为对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-398">Converts an existing <see cref="T:System.Data.Common.DbDataReader" /> to objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f410-399">由转换返回的对象的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f410-399">A collection of objects returned by the conversion.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>