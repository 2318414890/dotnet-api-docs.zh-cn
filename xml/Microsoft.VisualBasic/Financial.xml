<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="597d502122a98f40bf01b84397044f3c295f1b2b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30351111" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="Financial" /> 模块包含用于执行财务运算的过程。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此模块支持执行如折旧、 现在和将来的值、 利率、 返回时，和付款的比率的财务计算的 Visual Basic 运行时库成员。  
  
   
  
## Examples  
 此示例使用`Rate`函数来计算的贷款利率付款的总数目 (`TotPmts`)，贷款付款金额 (`Payment`)，现值或主体的贷款 (`PVal`)，将来贷款值 (`FVal`)，一个数字，指示是否付款的开头或末尾付款周期截止时间是 (`PayType`)，并预期利率的近似值 (`Guess`)。  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必须的。 指定资产原始成本的 <see langword="Double" /> 数据类型。</param>
        <param name="Salvage">必须的。 指定资产在使用年限结束时的价值的 <see langword="Double" /> 数据类型。</param>
        <param name="Life">必须的。 指定资产使用年限的 <see langword="Double" /> 数据类型。</param>
        <param name="Period">必须的。 指定计算资产折旧时所用期间的 <see langword="Double" /> 数据类型。</param>
        <param name="Factor">可选。 指定余额下降比率的 <see langword="Double" /> 数据类型。 如果省略，则假定为 2（双倍余额递减法）。</param>
        <summary>返回一个 <see langword="Double" /> 数据类型，它使用双倍余额递减法或指定的其他方法来指定特定时间段内的资产折旧。</summary>
        <returns>返回一个 <see langword="Double" /> 数据类型，它使用双倍余额递减法或指定的其他方法来指定特定时间段内的资产折旧。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 双倍余额递减平衡方法来计算折旧以加速的速率。 折旧是第一个时间段内最高和后续周期中会降低。  
  
 `Life`和`Period`自变量必须以相同的单位表示。 例如，如果`Life`在月中，给定`Period`还必须为其提供在月中。 所有参数必须都是正数。  
  
 `DDB`函数使用以下公式计算的一段给定时间折旧值：  
  
 折旧 / 段 = ((Cost – Salvage) * 因素) / 生命  
  
   
  
## Examples  
 此示例使用`DDB`函数来返回指定期间内的初始成本资产折旧 (`InitCost`)，资产的使用年限末尾的补救值 (`SalvageVal`)，以年为单位 (资产的总生存期`LifeTime`)，和为其计算折旧的几年期 (`Depr`)。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Factor" /> &lt;= 0，<paramref name="Salvage" /> &lt; 0，<paramref name="Period" /> &lt;= 0，或 <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必须的。 指定每期利率的 <see langword="Double" /> 数据类型。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
        <param name="NPer">必须的。 指定年金付款总期数的 <see langword="Double" /> 数据类型。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
        <param name="Pmt">必须的。 指定每期应付金额的 <see langword="Double" /> 数据类型。 付款金额通常包含本金和利息，该值在年金的有效期限内都不会改变。</param>
        <param name="PV">可选。 指定未来一系列付款金额（或一次付清款项）现值的 <see langword="Double" /> 数据类型。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。 如果省略，则假定为 0。</param>
        <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <see langword="DueDate.EndOfPeriod" />；如果在付款期初付款，则此参数必须为 <see langword="DueDate.BegOfPeriod" />。 如果省略，则假定为 <see langword="DueDate.EndOfPeriod" />。</param>
        <summary>返回一个 <see langword="Double" /> 数据类型，它基于等额分期付款和固定利率指定年金的终值。</summary>
        <returns>返回一个 <see langword="Double" /> 数据类型，它基于等额分期付款和固定利率指定年金的终值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是一系列段时间内所做的固定数量现金付款。 年金可以 （例如住房抵押） 贷款或 （如每月节省计划） 投资。  
  
 `Rate`和`NPer`必须使用以相同的单位表示的付款周期计算自变量。 例如，如果`Rate`使用月计算`NPer`还必须按月进行计算。  
  
 （如存款） 中支付的现金表示为负数; 对于所有参数，表示正数表示 （如被除数检查） 收到的现金。  
  
   
  
## Examples  
 此示例使用`FV`函数以返回给定百分比投资的将来值速率，每个期间累算的时间 (`APR / 12`)，付款的总数 (`TotPmts`)，支付 (`Payment`) 的当前值投资 (`PVal`)，和一个数字，指示是否付款的开头或末尾付款周期 (`PayType`)。 请注意，因为`Payment`表示现金支出，它为负数。  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必须的。 指定每期利率的 <see langword="Double" /> 数据类型。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
        <param name="Per">必须的。 在从 1 到 <c>NPer</c> 范围内指定支付周期的 <see langword="Double" />。</param>
        <param name="NPer">必须的。 指定年金付款总期数的 <see langword="Double" /> 数据类型。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
        <param name="PV">必须的。 指定未来一系列支出或收入现值的 <see langword="Double" /> 数据类型。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。</param>
        <param name="FV">可选。 <see langword="Double" /> 数据类型，指定完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间存储 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
        <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>返回一个 <see langword="Double" /> 数据类型，它基于等额分期付款和固定利率指定年金在给定期间的支付利息。</summary>
        <returns>返回一个 <see langword="Double" /> 数据类型，它基于等额分期付款和固定利率指定年金在给定期间的支付利息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是一系列段时间内所做的固定数量现金付款。 年金可以 （例如住房抵押） 贷款或 （如每月节省计划） 投资。  
  
 `Rate`和`NPer`必须使用以相同的单位表示的付款周期计算自变量。 例如，如果`Rate`使用月计算`NPer`还必须按月进行计算。  
  
 （如存款） 中支付的现金表示为负数; 对于所有参数，表示正数表示 （如被除数检查） 收到的现金。  
  
   
  
## Examples  
 此示例使用`IPmt`函数来计算所有付款时的相同的值的付款多少是感兴趣。 鉴于提供每个周期的利率百分比 (`APR / 12`)、 为其所需的相关部分付款周期 (`Period`)，付款的总数 (`TotPmts`)，现值或主体的贷款 (`PVal`)，则将来的贷款的值 (`FVal`)，以及一个用于指示是否付款的开头或末尾付款周期截止时间是数字 (`PayType`)。  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt;= 0 或 <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">必须的。 指定现金流值的 <see langword="Double" /> 数组。 该数组必须至少包含一个负值（支出）和一个正值（收入）。</param>
        <param name="Guess">可选。 指定 <see langword="IRR" /> 将返回的估算值的对象。 如果省略，<c>Guess</c> 便为 0.1 (10%)。</param>
        <summary>返回一个 <see langword="Double" /> 数据类型，它指定一系列定期现金流（支出和收入）的内部收益率。</summary>
        <returns>返回一个 <see langword="Double" /> 数据类型，它指定一系列定期现金流（支出和收入）的内部收益率。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的内部收益率是收到组成付款和收款定期进行投资的兴趣速率。  
  
 `IRR`函数使用在该数组中的值的顺序来解释付款和收款的顺序。 请确保以正确的顺序输入付款和回执值。 每个段内现金流量不必固定的、 按原样年金。  
  
 `IRR` 通过迭代计算。 从的值开始`Guess`，`IRR`进行计算，直到结果是精确到 0.00001%范围内的周期。 如果`IRR`找不到 20 后的结果尝试，它将失败。  
  
   
  
## Examples  
 在此示例中，`IRR`函数返回的数组中包含的五个现金流的内部收益率`Values()`。 第一个数组元素是表示业务启动成本的负现金流。 剩余的四个现金流后续 4 年之久表示正现金流。 `Guess` 是估计的内部收益率。  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Array 参数值无效或 <paramref name="Guess" /> &lt;= -1。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">必须的。 指定现金流值的 <see langword="Double" /> 数组。 该数组必须至少包含一个负值（支出）和一个正值（收入）。</param>
        <param name="FinanceRate">必须的。 指定作为财务成本支付的利率的 <see langword="Double" /> 数据类型。</param>
        <param name="ReinvestRate">必须的。 指定从现金再投资收益中所得利率的 <see langword="Double" /> 数据类型。</param>
        <summary>返回一个 <see langword="Double" /> 数据类型，它指定一系列定期现金流（支出和收入）修改后的内部收益率。</summary>
        <returns>返回一个 <see langword="Double" /> 数据类型，它指定一系列定期现金流（支出和收入）修改后的内部收益率。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 已修改的内部收益率时付款和收款利率时不同的速率的内部收益率。 `MIRR`函数将考虑在内的投资成本 (`FinanceRate`) 和中得到的现金利率的利率 (`ReinvestRate`)。  
  
 `FinanceRate`和`ReinvestRatearguments`是表示为十进制值的百分比。 例如，12%表示为 0.12。  
  
 `MIRR`函数使用在该数组中的值的顺序来解释付款和收款的顺序。 请确保以正确的顺序输入付款和回执值。  
  
   
  
## Examples  
 此示例使用`MIRR`函数以返回一系列的现金流包含在数组中的已修改内部收益率`Values()`。 `LoanAPR` 表示财务感兴趣，和`InvAPR`代表中得到的利率的兴趣速率。  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ValueArray" /> 的秩不等于 1，<paramref name="FinanceRate" /> = -1，或 <paramref name="ReinvestRate" /> = -1</exception>
        <exception cref="T:System.DivideByZeroException">出现被零除。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必须的。 指定每期利率的 <see langword="Double" /> 数据类型。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
        <param name="Pmt">必须的。 指定每期应付金额的 <see langword="Double" /> 数据类型。 付款金额通常包含本金和利息，该值在年金的有效期限内都不会改变。</param>
        <param name="PV">必须的。 指定未来一系列支出或收入现值的 <see langword="Double" /> 数据类型。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。</param>
        <param name="FV">可选。 <see langword="Double" /> 数据类型，指定完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 $0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间存储 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
        <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>返回一个 <see langword="Double" /> 数据类型，它基于等额分期付款和固定利率指定年金的期数。</summary>
        <returns>返回一个 <see langword="Double" /> 数据类型，它基于等额分期付款和固定利率指定年金的期数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是一系列段一段时间内所做的固定数量现金付款。 年金可以 （例如住房抵押） 贷款或 （如每月节省计划） 投资。  
  
 （如存款） 中支付的现金表示为负数; 对于所有参数，表示正数表示 （如被除数检查） 收到的现金。  
  
   
  
## Examples  
 此示例使用`NPer`中包含函数返回在此期间必须进行付款发挥效用贷款其值的期限数`PVal`。 此外提供了每个周期的利率百分比 (`APR / 12`)，支付 (`Payment`) 的贷款将来的值 (`FVal`)，以及一个用于指示是否付款的开头或末尾付款周期截止时间是数字 (`PayType`).  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Rate" /> = 0 和 <paramref name="Pmt" /> = 0</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">必须的。 指定每期贴现率的 <see langword="Double" /> 数据类型，以小数表示。</param>
        <param name="ValueArray">必须的。 指定现金流值的 <see langword="Double" /> 数组。 该数组必须至少包含一个负值（支出）和一个正值（收入）。</param>
        <summary>返回一个 <see langword="Double" /> 数据类型，它基于一系列定期现金流（支出和收入）和贴现率来指定投资的净现值。</summary>
        <returns>返回一个 <see langword="Double" /> 数据类型，它基于一系列定期现金流（支出和收入）和贴现率来指定投资的净现值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 投资的净现值是未来的一系列付款和收款的当前值。  
  
 `NPV`函数使用在该数组中的值的顺序来解释付款和收款的顺序。 请确保以正确的顺序输入付款和回执值。  
  
 `NPV`投资日期之前的第一个现金流量值的一个周期开始和结束的最后一个的现金流值数组中。  
  
 Net 存在的值计算基于未来的现金流。 如果在第一个期间开始处出现第一个的现金流，第一个的值必须添加到返回的值`NPV`和中的现金流值不能包含`ValueArray`。  
  
 `NPV`函数是类似于`PV`函数 （现值） 但`PV`函数允许现金流开始在结束或句点开头。 与该变量不同`NPV`现金流量值`PV`现金流必须固定在整个投资。  
  
   
  
## Examples  
 此示例使用`NPV`函数以返回一系列的现金流数组中包含的净现值`values()`。 中存储的返回值`FixedRetRate`，表示固定的内部收益率。  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ValueArray" /> 为 <see langword="Nothing" />，<paramref name="ValueArray" /> 的轶 &lt;&gt; 1，或 <paramref name="Rate" /> = -1</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必须的。 指定每期利率的 <see langword="Double" /> 数据类型。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
        <param name="NPer">必须的。 指定年金付款总期数的 <see langword="Double" /> 数据类型。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
        <param name="PV">必须的。 指定在未来一系列要支付的付款现值（或一次付清款项）的 <see langword="Double" /> 数据类型。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。</param>
        <param name="FV">可选。 <see langword="Double" /> 数据类型，指定完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 $0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间储蓄 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
        <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>返回一个 <see langword="Double" /> 数据类型，它基于等额分期付款和固定利率指定年金的付款金额。</summary>
        <returns>返回一个 <see langword="Double" /> 数据类型，它基于等额分期付款和固定利率指定年金的付款金额。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是一系列在一段时间内所做的固定数量现金付款。 年金可以 （例如住房抵押） 贷款或 （如每月节省计划） 投资。  
  
 `Rate`和`NPer`必须使用以相同的单位表示的付款周期计算自变量。 例如，如果`Rate`使用月计算`NPer`还必须按月进行计算。  
  
 （如存款） 付费的现金表示为负数; 对于所有参数，表示正数表示 （如被除数检查） 收到的现金。  
  
   
  
## Examples  
 此示例使用`Pmt`函数以返回固定的时间段内的每月付款的贷款。 鉴于提供每个周期的利率百分比 (`APR / 12`)，付款的总数 (`TotPmts`)，现值或主体的贷款 (`PVal`) 的贷款将来的值 (`FVal`)，和一个数字，指示是否付款的开头或末尾付款周期截止时间是 `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必须的。 指定每期利率的 <see langword="Double" /> 数据类型。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
        <param name="Per">必须的。 <see langword="Double" /> 指定从 1 到 <c>NPer</c> 范围内的支付周期。</param>
        <param name="NPer">必须的。 指定年金付款总期数的 <see langword="Double" /> 数据类型。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
        <param name="PV">必须的。 指定未来一系列支出或收入现值的 <see langword="Double" /> 数据类型。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。</param>
        <param name="FV">可选。 <see langword="Double" /> 数据类型，指定完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 $0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间存储 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
        <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>返回一个 <see langword="Double" /> 数据类型，它基于等额分期付款和固定利率指定年金在给定期间的本金付款额。</summary>
        <returns>返回一个 <see langword="Double" /> 数据类型，它基于等额分期付款和固定利率指定年金在给定期间的本金付款额。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是一系列段一段时间内所做的固定数量现金付款。 年金可以 （例如住房抵押） 贷款或 （如每月节省计划） 投资。  
  
 `Rate`和`NPer`必须使用以相同的单位表示的付款周期计算自变量。 例如，如果`Rate`使用月计算`NPer`还必须按月进行计算。  
  
 （如存款） 付费的现金表示为负数; 对于所有参数，表示正数表示 （如被除数检查） 收到的现金。  
  
   
  
## Examples  
 此示例使用`PPmt`函数来计算所有付款时相同的值的多少特定时间段内的付款是主体。 鉴于提供每个周期的利率百分比 (`APR / 12`)、 为其所需的主体部分付款周期 (`Period`)，付款的总数 (`TotPmts`)，现值或主体的贷款 (`PVal`)，则将来的贷款的值 (`FVal`)，以及一个用于指示是否付款的开头或末尾付款周期截止时间是数字 (`PayType`)。  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt;=0 或 <paramref name="Per" /> &gt; <paramref name="NPer" />。</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必须的。 指定每期利率的 <see langword="Double" /> 数据类型。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
        <param name="NPer">必须的。 指定年金付款总期数的 <see langword="Double" /> 数据类型。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
        <param name="Pmt">必须的。 指定每期应付金额的 <see langword="Double" /> 数据类型。 付款金额通常包含本金和利息，该值在年金的有效期限内都不会改变。</param>
        <param name="FV">可选。 <see langword="Double" /> 数据类型，指定完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 $0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间存储 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
        <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>返回一个 <see langword="Double" /> 数据类型，它基于未来等额分期付款和固定利率指定年金的现值。</summary>
        <returns>返回一个 <see langword="Double" /> 数据类型，它基于未来等额分期付款和固定利率指定年金的现值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是一系列段一段时间内所做的固定数量现金付款。 年金可以 （例如住房抵押） 贷款或 （如每月节省计划） 投资。  
  
 `Rate`和`NPer`必须使用以相同的单位表示的付款周期计算自变量。 例如，如果`Rate`使用月计算`NPer`还必须按月进行计算。  
  
 （如存款） 中支付的现金表示为负数; 对于所有参数，表示正数表示 （如被除数检查） 收到的现金。  
  
   
  
## Examples  
 在此示例中，`PV`函数返回将提供 50000 元的下一步 20 年内每年的 $1000000 年金的现值。 提供的是预期的年度百分比速率 (`APR`)，付款的总数 (`TotPmts`)，每个付款金额 (`YrIncome`)，投资的总值将来 (`FVal`)，和一个数字，指示是否每个付款的开头或末尾付款周期 (`PayType`)。 请注意，`YrIncome`是负数，因为它代表现金，每年从年金中付费。  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">必须的。 指定年金付款总期数的 <see langword="Double" /> 数据类型。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
        <param name="Pmt">必须的。 指定每期应付金额的 <see langword="Double" /> 数据类型。 付款金额通常包含本金和利息，该值在年金的有效期限内都不会改变。</param>
        <param name="PV">必须的。 指定未来一系列支出或收入现值的 <see langword="Double" /> 数据类型。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。</param>
        <param name="FV">可选。 <see langword="Double" /> 数据类型，指定完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 $0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间存储 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
        <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
        <param name="Guess">可选。 指定 <see langword="Double" /> 返回的估计值的 <see langword="Rate" /> 数据类型。 如果省略，<c>Guess</c> 便为 0.1 (10%)。</param>
        <summary>返回一个指定每期年金利率的 <see langword="Double" /> 数据类型。</summary>
        <returns>返回一个指定每期年金利率的 <see langword="Double" /> 数据类型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是一系列段一段时间内所做的固定数量现金付款。 年金可以 （例如住房抵押） 贷款或 （如每月节省计划） 投资。  
  
 （如存款） 中支付的现金表示为负数; 对于所有参数，表示正数表示 （如被除数检查） 收到的现金。  
  
 `Rate` 通过迭代计算。 从的值开始`Guess`，`Rate`进行计算，直到结果是精确到 0.00001%范围内的周期。 如果`Rate`找不到 20 后的结果尝试，它将失败。 如果该值为 10%和`Rate`失败，请尝试不同的值`Guess`。  
  
   
  
## Examples  
 此示例使用`Rate`函数来计算给定的付款总数贷款利率 (`TotPmts`)，贷款付款金额 (`Payment`)，现值或主体的贷款 (`PVal`)，将来贷款值 (`FVal`)，一个数字，指示是否付款的开头或末尾付款周期截止时间是 (`PayType`)，并预期利率的近似值 (`Guess`)。  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> &lt;= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必须的。 指定资产原始成本的 <see langword="Double" /> 数据类型。</param>
        <param name="Salvage">必须的。 指定资产在使用年限结束时的价值的 <see langword="Double" /> 数据类型。</param>
        <param name="Life">必须的。 指定资产使用年限的 <see langword="Double" /> 数据类型。</param>
        <summary>返回一个 <see langword="Double" /> 数据类型，它指定资产在一个周期内的直线折旧。</summary>
        <returns>返回一个 <see langword="Double" /> 数据类型，它指定资产在一个周期内的直线折旧。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须为相同的单位表示折旧期间`Life`自变量。 所有参数必须都是正数。  
  
   
  
## Examples  
 此示例使用`SLN`函数以返回为单个周期指定资产的初始成本资产直线折旧 (`InitCost`)，资产的使用年限末尾的补救值 (`SalvageVal`)，和的总生存期以年为单位的资产 (`LifeTime`)。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必须的。 指定资产原始成本的 <see langword="Double" /> 数据类型。</param>
        <param name="Salvage">必须的。 指定资产在使用年限结束时的价值的 <see langword="Double" /> 数据类型。</param>
        <param name="Life">必须的。 指定资产使用年限的 <see langword="Double" /> 数据类型。</param>
        <param name="Period">必须的。 指定计算资产折旧时所用期间的 <see langword="Double" /> 数据类型。</param>
        <summary>返回一个 <see langword="Double" /> 数据类型，它指定资产在指定期间用年数总计法计算的折旧。</summary>
        <returns>返回一个 <see langword="Double" /> 数据类型，它指定资产在指定期间用年数总计法计算的折旧。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Life`和`Period`自变量必须以相同的单位表示。 例如，如果`Life`在月中，给定`Period`还必须为其提供在月中。 所有参数必须都是正数。  
  
   
  
## Examples  
 此示例使用`SYD`函数以返回给定资产的初始成本在指定期间内的资产折旧 (`InitCost`)，资产的使用年限末尾的补救值 (`SalvageVal`)，和中资产的总生存期年 (`LifeTime`)。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Salvage" /> &lt; 0，<paramref name="Period" /> &gt; <paramref name="Life" />，或 <paramref name="Period" /> &lt;=0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>