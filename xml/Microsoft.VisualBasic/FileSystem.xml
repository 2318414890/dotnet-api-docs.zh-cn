<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ac3ffad84738935580a11dd5acf01cdedc2192d2" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52218299" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="165a7-101">
        <see langword="FileSystem" /> 模块包含用于执行文件、目录或文件夹以及系统操作的过程。</span>
      <span class="sxs-lookup">
        <span data-stu-id="165a7-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="165a7-102">与使用 <see langword="My" /> 模块相比，<see langword="FileSystem" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
      <span class="sxs-lookup">
        <span data-stu-id="165a7-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="165a7-103">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
      <span class="sxs-lookup">
        <span data-stu-id="165a7-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-104">此模块支持的 Visual Basic 语言关键字和访问文件和文件夹的运行时库成员。</span><span class="sxs-lookup"><span data-stu-id="165a7-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-105">此示例使用`GetAttr`函数来确定文件和目录或文件夹的属性。</span><span class="sxs-lookup"><span data-stu-id="165a7-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md">
      <span data-ttu-id="165a7-106">目录和文件摘要</span>
      <span class="sxs-lookup">
        <span data-stu-id="165a7-106">Directories and Files Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md">
      <span data-ttu-id="165a7-107">输入和输出摘要</span>
      <span class="sxs-lookup">
        <span data-stu-id="165a7-107">Input and Output Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="165a7-108">关键字 (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="165a7-108">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="165a7-109">Visual Basic 运行时库成员</span>
      <span class="sxs-lookup">
        <span data-stu-id="165a7-109">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="165a7-110">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-110">Required.</span>
          </span>
          <span data-ttu-id="165a7-111">一个 <see langword="String" /> 表达式，用于标识哪个目录或文件夹将成为新的默认目录或文件夹。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-111">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="165a7-112">
            <paramref name="Path" /> 可以包含驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-112">
              <paramref name="Path" /> may include the drive.</span>
          </span>
          <span data-ttu-id="165a7-113">如果未指定驱动器，则 <see langword="ChDir" /> 更改当前驱动器上的默认目录或文件夹。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-114">更改当前目录或文件夹。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-114">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="165a7-115">与 <see langword="My" /> 函数相比，<see langword="ChDir" /> 功能在文件 I/O 操作方面可提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="165a7-116">有关更多信息，请参见<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-117">`ChDir`函数更改默认目录，但不是在默认驱动器。</span><span class="sxs-lookup"><span data-stu-id="165a7-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="165a7-118">例如，如果默认驱动器为 C，以下语句更改驱动器 D 上的默认目录，但 C 仍保留默认的驱动器：</span><span class="sxs-lookup"><span data-stu-id="165a7-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="165a7-119">您可以进行相对目录更改为通过键入两个句点，如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-120">`ChDir`函数需要非托管的代码权限，这可能会影响在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="165a7-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="165a7-121">有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>和。</span><span class="sxs-lookup"><span data-stu-id="165a7-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-122">此示例使用`ChDir`函数来更改当前目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="165a7-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-123">
            <paramref name="Path" /> 为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-123">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="165a7-124">指定的驱动器无效，或驱动器不可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-124">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">
          <span data-ttu-id="165a7-125">如何：在 Visual Basic 中分析文件路径</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-125">How to: Parse File Paths in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">
          <span data-ttu-id="165a7-126">创建、删除和移动文件和目录 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="165a7-127">更改当前驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-127">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="165a7-128">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-128">Required.</span>
          </span>
          <span data-ttu-id="165a7-129">指定现有驱动器的字符串表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-129">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="165a7-130">如果提供一个零长度字符串 ("")，则当前驱动器不会更改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-130">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="165a7-131">如果 <paramref name="Drive" /> 参数为多字符字符串，<see langword="ChDrive" /> 将仅使用第一个字母。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-132">更改当前驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-132">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-133">`ChDrive`函数需要非托管代码的权限，这可能会影响其在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="165a7-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="165a7-134">有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>并[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="165a7-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-135">此示例使用`ChDrive`函数来更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="165a7-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="165a7-136">如果驱动器不存在，该函数将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-137">指定的驱动器无效，或驱动器不可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-137">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-138">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-138">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="165a7-139">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-139">Required.</span>
          </span>
          <span data-ttu-id="165a7-140">指定现有驱动器的字符串表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-140">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="165a7-141">如果提供一个零长度字符串 ("")，则当前驱动器不会更改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-141">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="165a7-142">如果 <paramref name="Drive" /> 参数为多字符字符串，<see langword="ChDrive" /> 将仅使用第一个字母。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-143">更改当前驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-143">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-144">`ChDrive`函数需要非托管代码的权限，这可能会影响其在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="165a7-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="165a7-145">有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>并[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="165a7-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-146">此示例使用`ChDrive`函数来更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="165a7-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="165a7-147">如果驱动器不存在，该函数将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-148">指定的驱动器无效，或驱动器不可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-148">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-149">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-149">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="165a7-150">返回表示当前路径的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-150">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="165a7-151">与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="165a7-152">有关详情，请参阅<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="165a7-153">返回表示当前路径的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="165a7-154">与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="165a7-155">有关详情，请参阅<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-156">表示当前路径的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="165a7-157">此示例使用`CurDir`函数以返回当前路径。</span><span class="sxs-lookup"><span data-stu-id="165a7-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="165a7-158">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-158">Optional.</span>
          </span>
          <span data-ttu-id="165a7-159">指定现有驱动器的 <see langword="Char" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-159">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="165a7-160">如果未指定驱动器或 <paramref name="Drive" /> 是长度为零的字符串 ("")，则 <see langword="CurDir" /> 返回当前驱动器的路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-161">返回表示当前路径的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-161">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="165a7-162">与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="165a7-163">有关详情，请参阅<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-164">表示当前路径的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-164">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="165a7-165">此示例使用`CurDir`函数以返回当前路径。</span><span class="sxs-lookup"><span data-stu-id="165a7-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="165a7-166">返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="165a7-167">与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="165a7-168">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="165a7-169">返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="165a7-170">与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="165a7-171">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-172">一个字符串，表示与指定模式或文件特性匹配的文件、目录或文件夹的名称，或者表示驱动器卷标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-173">`Dir`函数支持多个字符的使用 (`*`) 和单字符 (`?`) 通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="165a7-174">`VbVolume` 返回而不是特定文件名的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="165a7-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="165a7-175">必须提供`PathName`第一次调用`Dir`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="165a7-176">若要检索的下一项，你可以后续调用`Dir`不带参数的函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-177">若要正确运行，`Dir`函数需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>并<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>标志的<xref:System.Security.Permissions.FileIOPermission>要对其授予对执行代码。</span><span class="sxs-lookup"><span data-stu-id="165a7-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="165a7-178">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，并[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="165a7-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="165a7-179">`Attributes`参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="165a7-180">“值”</span><span class="sxs-lookup"><span data-stu-id="165a7-180">Value</span></span>|<span data-ttu-id="165a7-181">返回的常量</span><span class="sxs-lookup"><span data-stu-id="165a7-181">Constant</span></span>|<span data-ttu-id="165a7-182">描述</span><span class="sxs-lookup"><span data-stu-id="165a7-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="165a7-183">默认。</span><span class="sxs-lookup"><span data-stu-id="165a7-183">Default.</span></span> <span data-ttu-id="165a7-184">指定文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="165a7-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="165a7-185">指定只读文件，以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="165a7-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="165a7-186">指定隐藏的文件，以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="165a7-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="165a7-187">指定系统文件以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="165a7-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="165a7-188">指定卷标签;如果指定任何其他属性，则`vbVolume`将被忽略。</span><span class="sxs-lookup"><span data-stu-id="165a7-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="165a7-189">指定目录或文件夹，以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="165a7-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="165a7-190">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="165a7-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="165a7-191">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="165a7-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="165a7-192">这些枚举所指定的 Visual Basic 语言并可以在任意位置而不是实际值在代码中。</span><span class="sxs-lookup"><span data-stu-id="165a7-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-193">此示例使用`Dir`函数检查是否存在某些文件和目录。</span><span class="sxs-lookup"><span data-stu-id="165a7-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="165a7-194">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-194">Optional.</span>
          </span>
          <span data-ttu-id="165a7-195">
            <see langword="String" /> 表达式，用于指定文件名、目录或文件夹名或者驱动器卷标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-195">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="165a7-196">如果未找到 <paramref name="PathName" />，则返回一个零长度字符串 (<see langword="&quot;&quot;" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span>
          </span>
        </param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes">
          <span data-ttu-id="165a7-197">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-197">Optional.</span>
          </span>
          <span data-ttu-id="165a7-198">其值指定文件特性的枚举或数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-198">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="165a7-199">如果省略，则 <see langword="Dir" /> 将返回与 <paramref name="PathName" /> 匹配但不具有任何特性的文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-199">If omitted, <see langword="Dir" /> returns files that match <paramref name="PathName" /> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-200">返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-200">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="165a7-201">与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-201">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="165a7-202">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-202">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-203">一个字符串，表示与指定模式或文件特性匹配的文件、目录或文件夹的名称，或者表示驱动器卷标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-203">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-204">`Dir`函数支持多个字符的使用 (`*`) 和单字符 (`?`) 通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-204">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="165a7-205">`VbVolume` 返回而不是特定文件名的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="165a7-205">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="165a7-206">必须提供`PathName`第一次调用`Dir`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-206">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="165a7-207">若要检索的下一项，你可以后续调用`Dir`不带任何参数的函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-207">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-208">若要正确运行，`Dir`函数需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>并<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>标志的<xref:System.Security.Permissions.FileIOPermission>要对其授予对执行代码。</span><span class="sxs-lookup"><span data-stu-id="165a7-208">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="165a7-209">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，并[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="165a7-209">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="165a7-210">`Attributes`参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-210">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="165a7-211">“值”</span><span class="sxs-lookup"><span data-stu-id="165a7-211">Value</span></span>|<span data-ttu-id="165a7-212">返回的常量</span><span class="sxs-lookup"><span data-stu-id="165a7-212">Constant</span></span>|<span data-ttu-id="165a7-213">描述</span><span class="sxs-lookup"><span data-stu-id="165a7-213">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="165a7-214">默认。</span><span class="sxs-lookup"><span data-stu-id="165a7-214">Default.</span></span> <span data-ttu-id="165a7-215">指定不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-215">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="165a7-216">指定只读文件，除了不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-216">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="165a7-217">指定隐藏的文件，除了不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-217">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="165a7-218">指定系统文件，除了不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-218">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="165a7-219">指定卷标签;如果指定任何其他属性，则`vbVolume`将被忽略。</span><span class="sxs-lookup"><span data-stu-id="165a7-219">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="165a7-220">指定目录或文件夹，以及不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-220">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="165a7-221">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="165a7-221">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="165a7-222">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="165a7-222">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="165a7-223">这些枚举所指定的 Visual Basic 语言，并可以代替实际值在代码中任意位置使用。</span><span class="sxs-lookup"><span data-stu-id="165a7-223">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-224">此示例使用`Dir`函数检查是否存在某些文件和目录。</span><span class="sxs-lookup"><span data-stu-id="165a7-224">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-225">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-225">Required.</span>
          </span>
          <span data-ttu-id="165a7-226">一个包含任何有效文件号的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-226">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-227">当达到为进行 <see langword="True" /> 或顺序 <see langword="Random" /> 而打开的文件的结尾时，此方法返回布尔值 <see langword="Input" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-227">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-228">当达到为进行 <see langword="True" /> 或顺序 <see langword="Random" /> 而打开的文件的结尾时，此方法返回布尔值 <see langword="Input" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-228">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-229">使用`EOF`以避免通过尝试获取输入文件的末尾而产生的错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-229">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="165a7-230">`EOF`函数返回`False`直到达到文件末尾。</span><span class="sxs-lookup"><span data-stu-id="165a7-230">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="165a7-231">使用文件打开以进行`Random`或`Binary`访问权限，`EOF`返回`False`直到最后一个执行`FileGet`函数不能读取完整记录。</span><span class="sxs-lookup"><span data-stu-id="165a7-231">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="165a7-232">使用文件打开以进行`Binary`访问，请尝试通过文件使用读取`Input`直到函数`EOF`返回`True`生成一个错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-232">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="165a7-233">使用`LOF`并`Loc`函数而不是`EOF`使用二进制文件中读取时`Input`，或使用`Get`时使用`EOF`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-233">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="165a7-234">使用文件打开以进行`Output`，`EOF`始终返回`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-234">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-235">此示例使用`EOF`函数来检测文件的末尾。</span><span class="sxs-lookup"><span data-stu-id="165a7-235">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="165a7-236">此示例假定`Testfile`是一个文本文件，其中包含若干行文本。</span><span class="sxs-lookup"><span data-stu-id="165a7-236">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-237">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-237">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-238">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-238">Required.</span>
          </span>
          <span data-ttu-id="165a7-239">
            <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-239">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="165a7-240">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-240">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-241">返回一个枚举，该枚举表示使用 <see langword="FileOpen" /> 函数打开的文件的文件模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-241">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="165a7-242">与 <see langword="FileAttr" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-242">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="165a7-243">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-243">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-244">下列枚举值指示文件访问模式：</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-244">The following enumeration values indicate the file access mode:</span>
          </span>
          <list type="table">
            <item>
              <term>
                <span data-ttu-id="165a7-245">“值”</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-245">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="165a7-246">模式</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-246">Mode</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="165a7-247">1</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-247">1</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Input" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="165a7-248">2</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-248">2</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Output" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="165a7-249">4</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-249">4</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Random" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="165a7-250">8</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-250">8</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Append" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="165a7-251">32</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-251">32</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Binary" />
              </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-252">此函数返回一个枚举，表示使用打开的文件的文件模式`FileOpen`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-252">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-253">此示例使用`FileAttr`函数以返回打开的文件的文件模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-253">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-254">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-254">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="165a7-255">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-255">Optional.</span>
          </span>
          <span data-ttu-id="165a7-256">要关闭的 0 个或多个信道的参数数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-256">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-257">关闭对用 <see langword="FileOpen" /> 函数打开的文件的输入/输出 (I/O)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-257">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="165a7-258">
            <see langword="My" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-258">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="165a7-259">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-259">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-260">`FileClose`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-260">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-261">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-261">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-262">有关详细信息，请参阅[如何： 使用 StreamReader 文件中读取文本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)，[如何： 使用 StreamWriter 向文件写入文本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)，和[演练： 中操作文件和目录Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-262">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="165a7-263">如果省略`FileNumbers`，打开的所有活动文件`FileOpen`函数将关闭。</span><span class="sxs-lookup"><span data-stu-id="165a7-263">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="165a7-264">当您关闭已打开的文件`Output`或`Append`，最终输出缓冲区写入到该文件的操作系统缓冲区。</span><span class="sxs-lookup"><span data-stu-id="165a7-264">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="165a7-265">所有关联的缓冲区空间使用的已关闭发布文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-265">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="165a7-266">当`FileClose`执行函数，而其文件的文件的关联数字结束。</span><span class="sxs-lookup"><span data-stu-id="165a7-266">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-267">此示例使用`FileClose`函数来关闭文件打开以进行`Input`。</span><span class="sxs-lookup"><span data-stu-id="165a7-267">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-268">
            <paramref name="FileNumber" /> 不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-268">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md">
          <span data-ttu-id="165a7-269">End 语句</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-269">End Statement</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md">
          <span data-ttu-id="165a7-270">Stop 语句 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-270">Stop Statement (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-271">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-271">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="165a7-272">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-272">Required.</span>
          </span>
          <span data-ttu-id="165a7-273">指定要复制的文件的名称的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-273">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="165a7-274">
            <paramref name="Source" /> 可以包含源文件的驱动器和目录或文件夹。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-274">
              <paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="165a7-275">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-275">Required.</span>
          </span>
          <span data-ttu-id="165a7-276">指定目标文件名的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-276">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="165a7-277">
            <paramref name="Destination" /> 可包含目标文件的驱动器和目录或文件夹。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-277">
              <paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-278">复制文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-278">Copies a file.</span>
          </span>
          <span data-ttu-id="165a7-279">与 <see langword="FileCopy" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-279">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="165a7-280">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-280">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-281">如果尝试使用`FileCopy`函数上当前打开的文件，就会出错。</span><span class="sxs-lookup"><span data-stu-id="165a7-281">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="165a7-282">`FileCopy` 需要完全信任才能在本地驱动器上工作。</span><span class="sxs-lookup"><span data-stu-id="165a7-282">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-283">此示例使用`FileCopy`函数将一个文件复制到另一个。</span><span class="sxs-lookup"><span data-stu-id="165a7-283">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="165a7-284">在此示例中，假定`SrcFile`是包含数据的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-284">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-285">
            <paramref name="Source" /> 或 <paramref name="Destination" /> 无效或未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-285">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-286">文件已打开。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-286">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="165a7-287">文件不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-287">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md">
          <span data-ttu-id="165a7-288">如何：在 Visual Basic 中在不同的目录中创建文件的副本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-288">How to: Create a Copy of a File in a Different Directory in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">
          <span data-ttu-id="165a7-289">如何：在同一目录中创建文件副本 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-289">How to: Create a Copy of a File in the Same Directory in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">
          <span data-ttu-id="165a7-290">如何：在 Visual Basic 中将一个目录复制到另一个目录</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-290">How to: Copy a Directory to Another Directory in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="165a7-291">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-291">Required.</span>
          </span>
          <span data-ttu-id="165a7-292">指定一个文件名的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-292">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="165a7-293">
            <paramref name="PathName" /> 可能包括目录或文件夹以及驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-293">
              <paramref name="PathName" /> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-294">返回一个 <see langword="Date" /> 值，该值指示写入文件的日期和时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-294">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="165a7-295">相比 <see langword="FileDateTime" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-295">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="165a7-296">有关详细信息，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-296">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-297">
            <see langword="Date" /> 值，该值指示文件的创建日期和时间或上次修改日期和时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-297">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="165a7-298">此示例使用`FileDateTime`函数来确定的日期和时间文件已创建或上次修改时间。</span><span class="sxs-lookup"><span data-stu-id="165a7-298">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="165a7-299">日期和时间显示格式基于系统的区域设置。</span><span class="sxs-lookup"><span data-stu-id="165a7-299">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-300">
            <paramref name="PathName" /> 无效或包含通配符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-300">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="165a7-301">目标文件不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-301">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-302">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-302">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="165a7-303">将数据从打开的磁盘文件读入到一个变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-303">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="165a7-304">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-304">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="165a7-305">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-305">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-306">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-306">Required.</span>
          </span>
          <span data-ttu-id="165a7-307">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-307">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-308">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-308">Required.</span>
          </span>
          <span data-ttu-id="165a7-309">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-309">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-310">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-310">Optional.</span>
          </span>
          <span data-ttu-id="165a7-311">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-311">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-312">将数据从打开的磁盘文件读入到一个变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-312">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="165a7-313">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-313">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="165a7-314">有关详细信息，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-314">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-315">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-315">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-316">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="165a7-316">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="165a7-317">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-317">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-318">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="165a7-318">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-319">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-319">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="165a7-320">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-320">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-321">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-321">Random Mode</span></span>  
 <span data-ttu-id="165a7-322">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-322">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-323">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="165a7-323">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-324">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-324">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-325">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-325">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-326">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-326">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="165a7-327">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-327">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-328">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-328">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="165a7-329">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-329">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-330">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-330">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="165a7-331">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-331">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-332">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="165a7-332">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="165a7-333">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-333">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="165a7-334">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-334">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="165a7-335">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-335">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-336">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-336">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-337">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-337">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-338">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-338">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="165a7-339">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-339">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="165a7-340">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="165a7-340">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="165a7-341">200 个字节的数据: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="165a7-341">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="165a7-342">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-342">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="165a7-343">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-343">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-344">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="165a7-344">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="165a7-345">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-345">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-346">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="165a7-347">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-347">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="165a7-348">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-348">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-349">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-349">Binary Mode</span></span>  
 <span data-ttu-id="165a7-350">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-350">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-351">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-351">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-352">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-352">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-353">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="165a7-353">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-354">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-354">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="165a7-355">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-355">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="165a7-356">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-356">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-357">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-357">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="165a7-358">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-358">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-359">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-359">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-360">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-360">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-361">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-361">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-362">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-362">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-363">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-363">Required.</span>
          </span>
          <span data-ttu-id="165a7-364">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-364">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-365">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-365">Required.</span>
          </span>
          <span data-ttu-id="165a7-366">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-366">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-367">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-367">Optional.</span>
          </span>
          <span data-ttu-id="165a7-368">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-368">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-369">将数据从打开的磁盘文件读入到一个变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-369">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="165a7-370">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-370">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="165a7-371">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-371">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-372">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-372">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-373">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="165a7-373">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="165a7-374">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-374">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-375">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="165a7-375">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-376">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-376">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="165a7-377">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-377">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-378">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-378">Random Mode</span></span>  
 <span data-ttu-id="165a7-379">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-379">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-380">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="165a7-380">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-381">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-381">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-382">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-382">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-383">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-383">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="165a7-384">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-384">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-385">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-385">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="165a7-386">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-386">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-387">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-387">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="165a7-388">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-388">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-389">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="165a7-389">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="165a7-390">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-390">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="165a7-391">如果未使用说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-391">If the descriptor is not used.</span></span> <span data-ttu-id="165a7-392">然后，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-392">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="165a7-393">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-393">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-394">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-394">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-395">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-395">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-396">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-396">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="165a7-397">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-397">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="165a7-398">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="165a7-398">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="165a7-399">200 个字节的数据: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="165a7-399">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="165a7-400">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-400">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="165a7-401">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-401">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-402">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="165a7-402">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="165a7-403">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-403">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-404">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="165a7-405">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-405">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="165a7-406">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-406">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-407">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-407">Binary Mode</span></span>  
 <span data-ttu-id="165a7-408">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-408">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-409">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-409">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-410">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-410">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-411">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="165a7-411">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-412">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-412">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="165a7-413">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-413">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="165a7-414">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-414">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-415">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-415">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="165a7-416">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-416">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-417">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-417">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-418">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-418">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-419">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-419">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-420">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-420">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-421">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-421">Required.</span>
          </span>
          <span data-ttu-id="165a7-422">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-422">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-423">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-423">Required.</span>
          </span>
          <span data-ttu-id="165a7-424">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-424">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-425">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-425">Optional.</span>
          </span>
          <span data-ttu-id="165a7-426">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-426">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-427">将数据从打开的磁盘文件读入到一个变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-427">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="165a7-428">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-428">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="165a7-429">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-429">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-430">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-430">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-431">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="165a7-431">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="165a7-432">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-432">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-433">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="165a7-433">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-434">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-434">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="165a7-435">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-435">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-436">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-436">Random Mode</span></span>  
 <span data-ttu-id="165a7-437">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-437">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-438">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="165a7-438">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-439">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-439">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-440">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-440">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-441">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-441">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="165a7-442">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-442">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-443">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-443">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="165a7-444">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-444">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-445">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-445">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="165a7-446">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-446">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-447">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="165a7-447">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="165a7-448">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-448">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="165a7-449">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-449">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="165a7-450">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-450">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-451">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-451">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-452">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-452">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-453">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-453">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="165a7-454">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-454">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="165a7-455">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="165a7-455">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="165a7-456">200 个字节的数据: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="165a7-456">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="165a7-457">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-457">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="165a7-458">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-458">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-459">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="165a7-459">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="165a7-460">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-460">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-461">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="165a7-462">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-462">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="165a7-463">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-463">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-464">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-464">Binary Mode</span></span>  
 <span data-ttu-id="165a7-465">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-465">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-466">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-466">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-467">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-467">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-468">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="165a7-468">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-469">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-469">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="165a7-470">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-470">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="165a7-471">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-471">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-472">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-472">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="165a7-473">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-473">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-474">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-474">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-475">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-475">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-476">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-476">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-477">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-477">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-478">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-478">Required.</span>
          </span>
          <span data-ttu-id="165a7-479">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-479">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-480">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-480">Required.</span>
          </span>
          <span data-ttu-id="165a7-481">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-481">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-482">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-482">Optional.</span>
          </span>
          <span data-ttu-id="165a7-483">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-483">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-484">将数据从打开的磁盘文件读入到一个变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-484">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="165a7-485">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-485">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="165a7-486">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-486">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-487">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-487">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-488">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="165a7-488">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="165a7-489">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-489">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-490">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="165a7-490">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-491">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-491">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="165a7-492">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-492">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-493">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-493">Random Mode</span></span>  
 <span data-ttu-id="165a7-494">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-494">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-495">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="165a7-495">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-496">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-496">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-497">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-497">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-498">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-498">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="165a7-499">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-499">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-500">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-500">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="165a7-501">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-501">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-502">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-502">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="165a7-503">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-503">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-504">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="165a7-504">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="165a7-505">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-505">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="165a7-506">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-506">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="165a7-507">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-508">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-509">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-509">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-510">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="165a7-511">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-511">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="165a7-512">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="165a7-512">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="165a7-513">200 个字节的数据: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="165a7-513">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="165a7-514">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-514">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="165a7-515">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-515">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-516">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="165a7-516">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="165a7-517">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-517">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-518">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="165a7-519">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-519">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="165a7-520">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-520">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-521">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-521">Binary Mode</span></span>  
 <span data-ttu-id="165a7-522">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-522">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-523">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-523">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-524">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-524">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-525">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="165a7-525">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-526">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-526">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="165a7-527">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-527">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="165a7-528">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-528">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-529">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-529">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="165a7-530">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-530">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-531">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-531">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-532">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-532">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-533">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-533">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-534">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-534">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-535">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-535">Required.</span>
          </span>
          <span data-ttu-id="165a7-536">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-536">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-537">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-537">Required.</span>
          </span>
          <span data-ttu-id="165a7-538">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-538">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-539">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-539">Optional.</span>
          </span>
          <span data-ttu-id="165a7-540">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-540">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-541">将数据从打开的磁盘文件读入到一个变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-541">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="165a7-542">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-542">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="165a7-543">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-543">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-544">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-544">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-545">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="165a7-545">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="165a7-546">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-546">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-547">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="165a7-547">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-548">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-548">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="165a7-549">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-549">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-550">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-550">Random Mode</span></span>  
 <span data-ttu-id="165a7-551">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-551">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-552">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="165a7-552">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-553">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-553">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-554">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-554">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-555">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-555">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="165a7-556">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-556">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-557">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-557">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="165a7-558">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-558">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-559">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-559">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="165a7-560">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-560">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-561">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="165a7-561">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="165a7-562">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-562">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="165a7-563">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-563">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="165a7-564">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-565">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-566">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-566">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-567">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="165a7-568">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-568">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="165a7-569">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="165a7-569">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="165a7-570">200 个字节的数据: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="165a7-570">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="165a7-571">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-571">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="165a7-572">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-573">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="165a7-573">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="165a7-574">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-574">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-575">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="165a7-576">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-576">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="165a7-577">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-577">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-578">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-578">Binary Mode</span></span>  
 <span data-ttu-id="165a7-579">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-579">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-580">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-580">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-581">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-581">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-582">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="165a7-582">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-583">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-583">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="165a7-584">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-584">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="165a7-585">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-585">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-586">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-586">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="165a7-587">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-587">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-588">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-588">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-589">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-589">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-590">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-590">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-591">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-591">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-592">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-592">Required.</span>
          </span>
          <span data-ttu-id="165a7-593">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-593">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-594">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-594">Required.</span>
          </span>
          <span data-ttu-id="165a7-595">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-595">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-596">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-596">Optional.</span>
          </span>
          <span data-ttu-id="165a7-597">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-598">将数据从打开的磁盘文件读入到一个变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-598">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="165a7-599">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="165a7-600">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-601">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-601">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-602">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="165a7-602">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="165a7-603">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-604">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="165a7-604">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-605">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-605">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="165a7-606">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-606">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-607">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-607">Random Mode</span></span>  
 <span data-ttu-id="165a7-608">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-608">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-609">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="165a7-609">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-610">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-610">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-611">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-611">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-612">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-612">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="165a7-613">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-613">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-614">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-614">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="165a7-615">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-615">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-616">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-616">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="165a7-617">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-617">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-618">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="165a7-618">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="165a7-619">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-619">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="165a7-620">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-620">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="165a7-621">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-621">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-622">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-622">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-623">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-623">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-624">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-624">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="165a7-625">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-625">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="165a7-626">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="165a7-626">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="165a7-627">200 个字节的数据: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="165a7-627">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="165a7-628">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-628">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="165a7-629">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-630">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="165a7-630">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="165a7-631">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-631">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-632">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="165a7-633">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-633">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="165a7-634">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-635">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-635">Binary Mode</span></span>  
 <span data-ttu-id="165a7-636">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-636">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-637">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-637">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-638">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-638">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-639">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="165a7-639">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-640">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-640">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="165a7-641">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-641">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="165a7-642">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-642">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-643">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-643">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="165a7-644">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-644">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-645">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-645">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-646">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-646">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-647">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-647">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-648">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-648">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-649">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-649">Required.</span>
          </span>
          <span data-ttu-id="165a7-650">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-650">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-651">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-651">Required.</span>
          </span>
          <span data-ttu-id="165a7-652">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-652">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-653">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-653">Optional.</span>
          </span>
          <span data-ttu-id="165a7-654">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-655">将数据从打开的磁盘文件读入到一个变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-655">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="165a7-656">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="165a7-657">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-658">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-658">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-659">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="165a7-659">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="165a7-660">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-661">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="165a7-661">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-662">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-662">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="165a7-663">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-663">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-664">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-664">Random Mode</span></span>  
 <span data-ttu-id="165a7-665">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-665">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-666">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="165a7-666">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-667">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-667">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-668">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-668">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-669">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-669">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="165a7-670">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-670">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-671">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-671">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="165a7-672">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-672">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-673">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-673">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="165a7-674">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-674">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-675">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="165a7-675">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="165a7-676">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-676">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="165a7-677">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-677">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="165a7-678">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-678">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-679">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-679">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-680">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-681">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-681">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="165a7-682">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-682">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="165a7-683">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="165a7-683">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="165a7-684">200 个字节的数据: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="165a7-684">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="165a7-685">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-685">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="165a7-686">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-687">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="165a7-687">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="165a7-688">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-688">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-689">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="165a7-690">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-690">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="165a7-691">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-692">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-692">Binary Mode</span></span>  
 <span data-ttu-id="165a7-693">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-693">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-694">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-694">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-695">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-695">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-696">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="165a7-696">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-697">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-697">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="165a7-698">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-698">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="165a7-699">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-699">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-700">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-700">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="165a7-701">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-701">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-702">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-702">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-703">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-703">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-704">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-704">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-705">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-705">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-706">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-706">Required.</span>
          </span>
          <span data-ttu-id="165a7-707">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-707">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-708">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-708">Required.</span>
          </span>
          <span data-ttu-id="165a7-709">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-709">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-710">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-710">Optional.</span>
          </span>
          <span data-ttu-id="165a7-711">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-711">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-712">将数据从打开的磁盘文件读入到一个变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-712">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="165a7-713">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-713">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="165a7-714">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-714">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-715">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-715">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-716">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="165a7-716">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="165a7-717">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-717">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-718">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="165a7-718">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-719">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-719">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="165a7-720">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-720">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-721">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-721">Random Mode</span></span>  
 <span data-ttu-id="165a7-722">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-722">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-723">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="165a7-723">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-724">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-724">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-725">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-725">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-726">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-726">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="165a7-727">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-727">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-728">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-728">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="165a7-729">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-729">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-730">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-730">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="165a7-731">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-731">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-732">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="165a7-732">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="165a7-733">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-733">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="165a7-734">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-734">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="165a7-735">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-735">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-736">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-736">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-737">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-738">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-738">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="165a7-739">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-739">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="165a7-740">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="165a7-740">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="165a7-741">200 个字节的数据: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="165a7-741">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="165a7-742">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-742">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="165a7-743">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-743">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-744">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="165a7-744">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="165a7-745">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-745">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-746">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="165a7-747">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-747">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="165a7-748">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-748">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-749">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-749">Binary Mode</span></span>  
 <span data-ttu-id="165a7-750">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-750">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-751">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-751">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-752">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-752">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-753">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="165a7-753">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-754">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-754">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="165a7-755">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-755">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="165a7-756">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-756">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-757">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-757">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="165a7-758">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-758">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-759">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-759">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-760">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-760">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-761">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-761">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-762">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-762">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-763">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-763">Required.</span>
          </span>
          <span data-ttu-id="165a7-764">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-764">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-765">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-765">Required.</span>
          </span>
          <span data-ttu-id="165a7-766">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-766">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-767">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-767">Optional.</span>
          </span>
          <span data-ttu-id="165a7-768">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-768">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-769">将数据从打开的磁盘文件读入到一个变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-769">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="165a7-770">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="165a7-771">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-772">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-772">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-773">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="165a7-773">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="165a7-774">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-774">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-775">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="165a7-775">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-776">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-776">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="165a7-777">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-777">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-778">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-778">Random Mode</span></span>  
 <span data-ttu-id="165a7-779">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-779">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-780">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="165a7-780">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-781">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-781">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-782">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-782">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-783">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-783">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="165a7-784">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-784">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-785">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-785">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="165a7-786">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-786">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-787">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-787">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="165a7-788">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-788">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-789">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="165a7-789">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="165a7-790">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-790">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="165a7-791">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-791">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="165a7-792">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-792">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-793">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-793">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-794">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-794">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-795">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-795">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="165a7-796">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-796">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="165a7-797">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="165a7-797">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="165a7-798">200 个字节的数据: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="165a7-798">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="165a7-799">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-799">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="165a7-800">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-800">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-801">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="165a7-801">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="165a7-802">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-802">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-803">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="165a7-804">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-804">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="165a7-805">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-805">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-806">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-806">Binary Mode</span></span>  
 <span data-ttu-id="165a7-807">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-807">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-808">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-808">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-809">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-809">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-810">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="165a7-810">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-811">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-811">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="165a7-812">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-812">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="165a7-813">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-813">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-814">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-814">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="165a7-815">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-815">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-816">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-816">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-817">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-817">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-818">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-818">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-819">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-819">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-820">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-820">Required.</span>
          </span>
          <span data-ttu-id="165a7-821">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-821">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-822">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-822">Required.</span>
          </span>
          <span data-ttu-id="165a7-823">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-823">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-824">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-824">Optional.</span>
          </span>
          <span data-ttu-id="165a7-825">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-825">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-826">将数据从打开的磁盘文件读入到一个变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-826">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="165a7-827">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-827">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="165a7-828">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-828">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-829">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-829">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-830">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="165a7-830">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="165a7-831">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-831">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-832">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="165a7-832">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-833">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-833">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="165a7-834">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-834">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-835">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-835">Random Mode</span></span>  
 <span data-ttu-id="165a7-836">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-836">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-837">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="165a7-837">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-838">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-838">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-839">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-839">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-840">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-840">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="165a7-841">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-841">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-842">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-842">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="165a7-843">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-843">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-844">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-844">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="165a7-845">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-845">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-846">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="165a7-846">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="165a7-847">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-847">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="165a7-848">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-848">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="165a7-849">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-849">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-850">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-850">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-851">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-851">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-852">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-852">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="165a7-853">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-853">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="165a7-854">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="165a7-854">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="165a7-855">200 个字节的数据: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="165a7-855">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="165a7-856">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-856">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="165a7-857">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-857">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-858">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="165a7-858">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="165a7-859">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-859">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-860">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="165a7-861">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-861">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="165a7-862">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-862">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-863">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-863">Binary Mode</span></span>  
 <span data-ttu-id="165a7-864">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-864">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-865">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-865">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-866">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-866">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-867">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="165a7-867">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-868">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-868">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="165a7-869">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-869">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="165a7-870">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-870">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-871">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-871">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="165a7-872">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-872">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-873">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-873">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-874">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-874">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-875">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-875">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-876">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-876">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-877">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-877">Required.</span>
          </span>
          <span data-ttu-id="165a7-878">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-878">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-879">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-879">Required.</span>
          </span>
          <span data-ttu-id="165a7-880">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-880">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-881">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-881">Optional.</span>
          </span>
          <span data-ttu-id="165a7-882">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-882">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-883">将数据从打开的磁盘文件读入到一个变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-883">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="165a7-884">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-884">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="165a7-885">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-885">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-886">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-886">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-887">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="165a7-887">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="165a7-888">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-888">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-889">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="165a7-889">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-890">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-890">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="165a7-891">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-891">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-892">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-892">Random Mode</span></span>  
 <span data-ttu-id="165a7-893">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-893">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-894">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="165a7-894">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-895">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-895">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-896">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-896">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-897">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-897">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="165a7-898">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-898">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-899">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-899">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="165a7-900">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-900">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-901">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-901">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="165a7-902">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-902">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-903">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="165a7-903">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="165a7-904">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-904">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="165a7-905">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-905">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="165a7-906">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-906">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-907">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-907">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-908">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-908">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-909">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-909">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="165a7-910">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-910">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="165a7-911">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="165a7-911">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="165a7-912">200 个字节的数据: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="165a7-912">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="165a7-913">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-913">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="165a7-914">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-914">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-915">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="165a7-915">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="165a7-916">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-916">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-917">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="165a7-918">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-918">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="165a7-919">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-919">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-920">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-920">Binary Mode</span></span>  
 <span data-ttu-id="165a7-921">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-921">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-922">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-922">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-923">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-923">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-924">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="165a7-924">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-925">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-925">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="165a7-926">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-926">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="165a7-927">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-927">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-928">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-928">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="165a7-929">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-929">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-930">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-930">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-931">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-931">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-932">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-932">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-933">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-933">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-934">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-934">Required.</span>
          </span>
          <span data-ttu-id="165a7-935">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-935">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-936">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-936">Required.</span>
          </span>
          <span data-ttu-id="165a7-937">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-937">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-938">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-938">Optional.</span>
          </span>
          <span data-ttu-id="165a7-939">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-939">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="165a7-940">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-940">Optional.</span>
          </span>
          <span data-ttu-id="165a7-941">仅在写入字符串时适用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-941">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="165a7-942">指定是否为描述长度的字符串写入一个双字节说明符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-942">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="165a7-943">默认值为 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-943">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-944">将数据从打开的磁盘文件读入到一个变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-944">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="165a7-945">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-945">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="165a7-946">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-946">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-947">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-947">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-948">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="165a7-948">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="165a7-949">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-949">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-950">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="165a7-950">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-951">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-951">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="165a7-952">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-952">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-953">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-953">Random Mode</span></span>  
 <span data-ttu-id="165a7-954">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-954">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-955">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="165a7-955">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-956">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-956">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-957">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-957">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-958">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-958">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="165a7-959">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-959">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-960">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-960">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="165a7-961">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-961">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-962">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-962">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="165a7-963">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-963">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-964">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="165a7-964">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="165a7-965">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-965">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="165a7-966">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-966">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="165a7-967">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-967">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-968">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-968">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-969">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-969">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-970">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-970">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="165a7-971">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-971">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="165a7-972">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="165a7-972">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="165a7-973">200 个字节的数据: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="165a7-973">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="165a7-974">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-974">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="165a7-975">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-975">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-976">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="165a7-976">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="165a7-977">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-977">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-978">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="165a7-979">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-979">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="165a7-980">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-980">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-981">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-981">Binary Mode</span></span>  
 <span data-ttu-id="165a7-982">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-982">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-983">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-983">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-984">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-984">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-985">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="165a7-985">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-986">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-986">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="165a7-987">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-987">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="165a7-988">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-988">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-989">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-989">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="165a7-990">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-990">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-991">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-991">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-992">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-992">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-993">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-993">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-994">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-994">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-995">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-995">Required.</span>
          </span>
          <span data-ttu-id="165a7-996">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-996">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-997">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-997">Required.</span>
          </span>
          <span data-ttu-id="165a7-998">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-998">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-999">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-999">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1000">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1000">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="165a7-1001">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1001">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1002">仅当写入数组时使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1002">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="165a7-1003">指定是否将数组视为动态数组，以及是否需要描述数组大小和边界的数组说明符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1003">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="165a7-1004">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1004">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1005">仅在写入字符串时适用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1005">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="165a7-1006">指定是否为描述长度的字符串写入一个双字节说明符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1006">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="165a7-1007">默认值为 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1007">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1008">将数据从打开的磁盘文件读入到一个变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1008">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="165a7-1009">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1009">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="165a7-1010">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1010">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1011">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1011">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1012">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1012">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="165a7-1013">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1013">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1014">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="165a7-1014">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-1015">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-1015">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="165a7-1016">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1016">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1017">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1017">Random Mode</span></span>  
 <span data-ttu-id="165a7-1018">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1018">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1019">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="165a7-1019">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1020">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1020">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1021">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-1021">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-1022">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1022">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1023">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1023">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1024">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1024">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="165a7-1025">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1025">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1026">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1026">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="165a7-1027">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1027">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-1028">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1028">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="165a7-1029">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1029">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="165a7-1030">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-1030">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="165a7-1031">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1031">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1032">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1032">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1033">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1033">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1034">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1034">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="165a7-1035">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-1035">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="165a7-1036">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="165a7-1036">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="165a7-1037">200 个字节的数据: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1037">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="165a7-1038">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1038">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="165a7-1039">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1039">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-1040">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="165a7-1040">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="165a7-1041">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1041">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1042">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="165a7-1043">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1043">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="165a7-1044">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1044">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-1045">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1045">Binary Mode</span></span>  
 <span data-ttu-id="165a7-1046">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-1046">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-1047">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-1047">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-1048">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-1048">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-1049">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1049">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-1050">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1050">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="165a7-1051">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1051">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="165a7-1052">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1052">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-1053">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1053">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="165a7-1054">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-1054">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-1055">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1055">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-1056">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1056">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-1057">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1057">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1058">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1058">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1059">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1059">Required.</span>
          </span>
          <span data-ttu-id="165a7-1060">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1060">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-1061">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1061">Required.</span>
          </span>
          <span data-ttu-id="165a7-1062">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1062">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-1063">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1063">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1064">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1064">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1065">将数据从打开的磁盘文件读入到一个变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1065">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="165a7-1066">相比 <see langword="FileGetObject" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1066">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="165a7-1067">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1067">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1068">`FileGetObject`而不是使用函数`FileGet`以在编译时避免出现多义性，如果类型`Object`返回而不是另一种类型，如`Integer`， `Long`， `Short`，依次类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1068">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="165a7-1069">如果你想要将写出`Variant`类型，`FileGetObject`是必需的。</span><span class="sxs-lookup"><span data-stu-id="165a7-1069">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="165a7-1070">如果你使用某个对象作为第二个参数，如有疑问，始终建议你使用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1070">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="165a7-1071">`FileGetObject` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1071">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1072">与读取的数据`FileGetObject`通常与编写`FilePutObject`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1072">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="165a7-1073">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1073">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1074">如果省略`RecordNumber`，`FileGetObject`上次读取记录号或字节`FileGetObject`或`FilePutObject`函数 (或指向的最后一个`Seek`函数)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1074">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1075">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1075">Random Mode</span></span>  
 <span data-ttu-id="165a7-1076">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1076">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1077">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGetObject`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="165a7-1077">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1078">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1078">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1079">由于不能准确地确定填充的数据量，它是已记录的长度与读取的数据的长度匹配一个好办法。</span><span class="sxs-lookup"><span data-stu-id="165a7-1079">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="165a7-1080">如果读入的变量是一个字符串，默认情况下`FileGetObject`读取一个包含字符串长度的双字节说明符，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1080">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1081">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1081">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1082">Visual Basic 6.0 和早期版本支持固定长度的字符串和读取到文件时，则不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1082">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="165a7-1083">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1083">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1084">如果读入的变量为数组，则 `RecordLength` 函数中 `FileOpen` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1084">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1085">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1085">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1086">其长度等于 2 + 8 倍的维度数： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="165a7-1086">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="165a7-1087">例如，以下数组声明需要 218 个字节时将数组写入到磁盘：</span><span class="sxs-lookup"><span data-stu-id="165a7-1087">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="165a7-1088">分发了 218 个字节，如下所示：为描述符分发了 18 个字节 (2 + 8 \* 2)，为数据分发了 100 个字节 (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1088">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="165a7-1089">`FileGetObject` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="165a7-1089">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="165a7-1090">在磁盘上，用户定义类型的动态数组 (使用编写`FilePutObject`) 其长度等于 2 加上 8 倍的维度数的描述符前缀为： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="165a7-1090">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="165a7-1091">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素，包括任何数组和其描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1091">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="165a7-1092"><xref:Microsoft.VisualBasic.VBFixedStringAttribute>类可应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1092">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-1093">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1093">Binary Mode</span></span>  
 <span data-ttu-id="165a7-1094">打开的文件中`Binary`模式下，所有的`Random`规则适用，但以下情况例外：</span><span class="sxs-lookup"><span data-stu-id="165a7-1094">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="165a7-1095">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-1095">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-1096">`FileGetObject` 读取所有变量从磁盘连续，也就是说，记录之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="165a7-1096">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-1097">对于在结构中，数组以外的任何数组`FileGetObject`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1097">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="165a7-1098">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1098">No descriptor is read.</span></span>  
  
 <span data-ttu-id="165a7-1099">`FileGetObject` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1099">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-1100">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1100">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-1101">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-1101">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="165a7-1102">例如，名为 form1.vb 的文件可能不是 Visual Basic 源文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1102">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1103">下面的示例测试文件中读取一条记录，然后检索它。</span><span class="sxs-lookup"><span data-stu-id="165a7-1103">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-1104">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1104">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1105">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1105">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="165a7-1106">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1106">Required.</span>
          </span>
          <span data-ttu-id="165a7-1107">
            <see langword="String" /> 表达式，用于指定文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1107">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="165a7-1108">
            <paramref name="PathName" /> 可能包括目录或文件夹以及驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1108">
              <paramref name="PathName" /> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1109">返回 <see langword="Long" /> 值，该值以字节为单位指定文件长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1109">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="165a7-1110">相比 <see langword="FileLen" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1110">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="165a7-1111">有关详情，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1111">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-1112">
            <see langword="Long" /> 值，该值以字节为单位指定文件长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1112">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1113">如果指定的文件打开时`FileLen`调用函数，返回的值表示它已打开时的文件的大小。</span><span class="sxs-lookup"><span data-stu-id="165a7-1113">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-1114">若要获取当前打开的文件的长度，请使用`LOF`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1114">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1115">此示例使用`FileLen`函数以返回文件的长度以字节为单位。</span><span class="sxs-lookup"><span data-stu-id="165a7-1115">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="165a7-1116">在此示例中，假定`TestFile`是包含一些数据的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1116">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="165a7-1117">文件不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1117">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-1118">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1118">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1119">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1119">Required.</span>
          </span>
          <span data-ttu-id="165a7-1120">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1120">Any valid file number.</span>
          </span>
          <span data-ttu-id="165a7-1121">可使用 <see langword="FreeFile" /> 函数获取下一个可用的文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1121">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="165a7-1122">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1122">Required.</span>
          </span>
          <span data-ttu-id="165a7-1123">一个指定文件名的 <see langword="String" /> 表达式，其中可包含目录或文件夹以及驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1123">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="165a7-1124">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1124">Required.</span>
          </span>
          <span data-ttu-id="165a7-1125">指定文件模式的枚举：<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" /> 或 <see langword="Random" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1125">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="165a7-1126">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.OpenMode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1126">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="165a7-1127">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1127">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1128">一个枚举，它指定对打开的文件所允许进行的操作：<see langword="Read" />、<see langword="Write" /> 或 <see langword="ReadWrite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1128">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="165a7-1129">默认为 <see langword="ReadWrite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1129">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="165a7-1130">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.OpenAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1130">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="165a7-1131">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1131">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1132">一个枚举，它指定不允许其他进程对打开的文件所进行的操作：<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" /> 和 <see langword="Lock Read Write" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1132">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="165a7-1133">默认为 <see langword="Lock Read Write" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1133">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="165a7-1134">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.OpenShare" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1134">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="165a7-1135">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1135">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1136">小于或等于 32,767（字节）的数字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1136">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="165a7-1137">对于为进行随机访问而打开的文件，此值是记录的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1137">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="165a7-1138">对于顺序文件，此值是缓冲的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1138">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1139">打开一个文件以进行输入或输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1139">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="165a7-1140">相比 <see langword="FileOpen" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1140">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="165a7-1141">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1141">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1142">`FileOpen`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-1142">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-1143">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-1143">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-1144">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1144">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-1145">可以对其执行任何 I/O 操作之前，必须打开一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1145">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="165a7-1146">`FileOpen` 对文件的 I/O 分配缓冲区，并确定要使用缓冲区的访问模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1146">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-1147">写入到文件时，应用程序可能需要创建一个文件，如果尝试写入的文件不存在。</span><span class="sxs-lookup"><span data-stu-id="165a7-1147">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="165a7-1148">若要执行此操作，必须在其中创建文件的目录的权限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1148">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="165a7-1149">但是，如果指定的文件`FileName`确实存在，应用程序需求`Write`仅对文件本身的权限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1149">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="165a7-1150">可能的为了提高安全性，任何位置创建文件在部署和授予过程`Write`权限到该文件唯一，而不是整个目录。</span><span class="sxs-lookup"><span data-stu-id="165a7-1150">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="165a7-1151">为了提高安全性，请将数据写入到的根目录或 Program Files 目录而不是用户目录中。</span><span class="sxs-lookup"><span data-stu-id="165a7-1151">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="165a7-1152">若要打开的通道可在使用`FreeFile()`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1152">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-1153">`FileOpen`函数需要`Read`从访问`FileIOPermissionAccess`枚举，它可能会影响它在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="165a7-1153">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="165a7-1154">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-1154">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1155">此示例演示了的各种用法`FileOpen`函数，以使输入和输出到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1155">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="165a7-1156">以下代码打开文件`TestFile`在`Input`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1156">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="165a7-1157">此示例打开中的文件`Binary`进行只写操作的模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1157">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="165a7-1158">下面的示例打开中的文件`Random`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1158">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="165a7-1159">该文件包含的记录是结构`Person`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1159">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="165a7-1160">此代码示例将打开的文件中`Output`模式; 任何进程可以读取或写入文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1160">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="165a7-1161">此代码示例将打开的文件中`Binary`模式进行读取; 其他进程无法读取文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1161">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-1162">记录长度是负数（并且不等于 -1）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1162">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-1163">
            <paramref name="FileName" /> 已经打开，或 <paramref name="FileName" /> 无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1163">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-1164">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1164">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1165">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1165">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="165a7-1166">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1166">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-1167">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1167">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="165a7-1168">有关更多信息，请参见 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1168">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1169">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1169">Required.</span>
          </span>
          <span data-ttu-id="165a7-1170">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1170">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-1171">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1171">Required.</span>
          </span>
          <span data-ttu-id="165a7-1172">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1172">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-1173">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1173">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1174">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1174">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1175">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1175">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-1176">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1176">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="165a7-1177">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1177">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1178">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1178">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1179">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1179">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="165a7-1180">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1180">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1181">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1181">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="165a7-1182">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1182">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="165a7-1183">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1183">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="165a7-1184">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1184">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1185">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1185">Random Mode</span></span>  
 <span data-ttu-id="165a7-1186">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1186">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1187">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="165a7-1187">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1188">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1188">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1189">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-1189">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="165a7-1190">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-1190">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="165a7-1191">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1191">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1192">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1192">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="165a7-1193">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-1193">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="165a7-1194">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1194">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="165a7-1195">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1195">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="165a7-1196">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="165a7-1196">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="165a7-1197">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1197">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1198">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1198">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1199">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1199">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="165a7-1200">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="165a7-1200">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="165a7-1201">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1201">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="165a7-1202">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1202">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-1203">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1203">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="165a7-1204">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1204">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1205">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1205">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1206">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1206">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1207">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1207">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="165a7-1208">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1208">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="165a7-1209">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="165a7-1210">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="165a7-1210">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="165a7-1211">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1211">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="165a7-1212">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="165a7-1212">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-1213">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1213">Binary Mode</span></span>  
 <span data-ttu-id="165a7-1214">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-1214">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-1215">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-1215">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-1216">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-1216">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-1217">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="165a7-1217">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-1218">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1218">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="165a7-1219">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1219">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="165a7-1220">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1220">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-1221">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1221">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="165a7-1222">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="165a7-1222">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="165a7-1223">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-1223">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1224">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1224">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="165a7-1225">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1225">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-1226">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1226">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-1227">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1227">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1228">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1228">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1229">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1229">Required.</span>
          </span>
          <span data-ttu-id="165a7-1230">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1230">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-1231">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1231">Required.</span>
          </span>
          <span data-ttu-id="165a7-1232">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1232">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-1233">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1233">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1234">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1234">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1235">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1235">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-1236">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1236">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="165a7-1237">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1237">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1238">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1238">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1239">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1239">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="165a7-1240">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1240">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1241">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1241">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="165a7-1242">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1242">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="165a7-1243">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1243">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="165a7-1244">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1244">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1245">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1245">Random Mode</span></span>  
 <span data-ttu-id="165a7-1246">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1246">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1247">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="165a7-1247">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1248">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1248">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1249">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-1249">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="165a7-1250">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-1250">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="165a7-1251">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1251">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1252">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1252">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="165a7-1253">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-1253">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="165a7-1254">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1254">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="165a7-1255">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1255">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="165a7-1256">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="165a7-1256">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="165a7-1257">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1257">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1258">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1258">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1259">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1259">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="165a7-1260">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="165a7-1260">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="165a7-1261">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1261">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="165a7-1262">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1262">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-1263">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1263">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="165a7-1264">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1264">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1265">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1265">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1266">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1266">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1267">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1267">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="165a7-1268">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1268">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="165a7-1269">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="165a7-1270">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="165a7-1270">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="165a7-1271">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1271">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="165a7-1272">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="165a7-1272">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-1273">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1273">Binary Mode</span></span>  
 <span data-ttu-id="165a7-1274">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-1274">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-1275">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-1275">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-1276">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-1276">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-1277">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="165a7-1277">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-1278">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1278">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="165a7-1279">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1279">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="165a7-1280">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1280">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-1281">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1281">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="165a7-1282">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="165a7-1282">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="165a7-1283">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-1283">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1284">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1284">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="165a7-1285">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1285">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-1286">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1286">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-1287">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1287">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1288">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1288">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1289">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1289">Required.</span>
          </span>
          <span data-ttu-id="165a7-1290">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1290">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-1291">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1291">Required.</span>
          </span>
          <span data-ttu-id="165a7-1292">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1292">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-1293">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1293">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1294">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1294">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1295">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1295">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-1296">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1296">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="165a7-1297">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1297">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1298">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1298">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1299">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1299">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="165a7-1300">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1300">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1301">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1301">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="165a7-1302">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1302">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="165a7-1303">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1303">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="165a7-1304">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1304">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1305">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1305">Random Mode</span></span>  
 <span data-ttu-id="165a7-1306">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1306">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1307">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="165a7-1307">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1308">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1308">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1309">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-1309">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="165a7-1310">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-1310">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="165a7-1311">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1311">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1312">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1312">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="165a7-1313">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-1313">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="165a7-1314">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1314">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="165a7-1315">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1315">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="165a7-1316">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="165a7-1316">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="165a7-1317">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1317">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1318">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1318">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1319">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1319">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="165a7-1320">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="165a7-1320">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="165a7-1321">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1321">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="165a7-1322">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1322">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-1323">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1323">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="165a7-1324">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1324">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1325">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1325">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1326">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1326">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1327">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1327">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="165a7-1328">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1328">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="165a7-1329">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="165a7-1330">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="165a7-1330">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="165a7-1331">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1331">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="165a7-1332">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="165a7-1332">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-1333">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1333">Binary Mode</span></span>  
 <span data-ttu-id="165a7-1334">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-1334">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-1335">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-1335">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-1336">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-1336">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-1337">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="165a7-1337">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-1338">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1338">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="165a7-1339">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1339">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="165a7-1340">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1340">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-1341">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1341">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="165a7-1342">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="165a7-1342">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="165a7-1343">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-1343">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1344">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1344">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="165a7-1345">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1345">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-1346">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1346">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-1347">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1347">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1348">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1348">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1349">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1349">Required.</span>
          </span>
          <span data-ttu-id="165a7-1350">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1350">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-1351">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1351">Required.</span>
          </span>
          <span data-ttu-id="165a7-1352">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1352">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-1353">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1353">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1354">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1354">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1355">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1355">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-1356">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1356">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="165a7-1357">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1357">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1358">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1358">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1359">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1359">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="165a7-1360">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1360">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1361">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1361">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="165a7-1362">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1362">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="165a7-1363">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1363">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="165a7-1364">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1364">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1365">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1365">Random Mode</span></span>  
 <span data-ttu-id="165a7-1366">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1366">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1367">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="165a7-1367">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1368">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1368">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1369">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-1369">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="165a7-1370">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-1370">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="165a7-1371">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1371">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1372">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1372">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="165a7-1373">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-1373">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="165a7-1374">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1374">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="165a7-1375">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1375">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="165a7-1376">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="165a7-1376">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="165a7-1377">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1378">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1378">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1379">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1379">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="165a7-1380">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="165a7-1380">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="165a7-1381">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1381">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="165a7-1382">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1382">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-1383">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1383">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="165a7-1384">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1384">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1385">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1385">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1386">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1386">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1387">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1387">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="165a7-1388">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1388">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="165a7-1389">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="165a7-1390">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="165a7-1390">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="165a7-1391">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1391">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="165a7-1392">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="165a7-1392">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-1393">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1393">Binary Mode</span></span>  
 <span data-ttu-id="165a7-1394">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-1394">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-1395">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-1395">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-1396">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-1396">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-1397">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="165a7-1397">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-1398">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1398">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="165a7-1399">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1399">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="165a7-1400">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1400">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-1401">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1401">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="165a7-1402">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="165a7-1402">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="165a7-1403">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-1403">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1404">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1404">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="165a7-1405">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1405">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-1406">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1406">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-1407">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1407">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1408">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1408">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1409">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1409">Required.</span>
          </span>
          <span data-ttu-id="165a7-1410">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1410">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-1411">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1411">Required.</span>
          </span>
          <span data-ttu-id="165a7-1412">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1412">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-1413">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1413">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1414">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1414">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1415">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1415">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-1416">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1416">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="165a7-1417">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1417">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1418">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1418">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1419">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1419">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="165a7-1420">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1420">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1421">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1421">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="165a7-1422">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1422">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="165a7-1423">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1423">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="165a7-1424">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1424">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1425">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1425">Random Mode</span></span>  
 <span data-ttu-id="165a7-1426">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1426">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1427">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="165a7-1427">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1428">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1428">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1429">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-1429">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="165a7-1430">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-1430">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="165a7-1431">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1431">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1432">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1432">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="165a7-1433">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-1433">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="165a7-1434">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1434">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="165a7-1435">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1435">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="165a7-1436">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="165a7-1436">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="165a7-1437">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1437">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1438">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1438">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1439">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1439">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="165a7-1440">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="165a7-1440">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="165a7-1441">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1441">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="165a7-1442">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1442">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-1443">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1443">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="165a7-1444">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1444">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1445">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1445">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1446">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1446">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1447">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1447">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="165a7-1448">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1448">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="165a7-1449">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="165a7-1450">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="165a7-1450">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="165a7-1451">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1451">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="165a7-1452">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="165a7-1452">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-1453">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1453">Binary Mode</span></span>  
 <span data-ttu-id="165a7-1454">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-1454">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-1455">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-1455">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-1456">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-1456">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-1457">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="165a7-1457">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-1458">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1458">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="165a7-1459">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1459">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="165a7-1460">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1460">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-1461">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1461">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="165a7-1462">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="165a7-1462">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="165a7-1463">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-1463">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1464">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1464">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="165a7-1465">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1465">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-1466">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1466">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-1467">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1467">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1468">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1468">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1469">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1469">Required.</span>
          </span>
          <span data-ttu-id="165a7-1470">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1470">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-1471">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1471">Required.</span>
          </span>
          <span data-ttu-id="165a7-1472">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1472">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-1473">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1473">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1474">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1475">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1475">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-1476">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="165a7-1477">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1478">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1478">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1479">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1479">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="165a7-1480">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1480">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1481">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1481">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="165a7-1482">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1482">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="165a7-1483">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1483">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="165a7-1484">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1484">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1485">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1485">Random Mode</span></span>  
 <span data-ttu-id="165a7-1486">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1486">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1487">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="165a7-1487">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1488">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1488">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1489">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-1489">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="165a7-1490">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-1490">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="165a7-1491">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1491">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1492">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1492">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="165a7-1493">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-1493">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="165a7-1494">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1494">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="165a7-1495">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1495">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="165a7-1496">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="165a7-1496">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="165a7-1497">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1497">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1498">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1498">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1499">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1499">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="165a7-1500">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="165a7-1500">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="165a7-1501">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1501">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="165a7-1502">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1502">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-1503">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1503">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="165a7-1504">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1504">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1505">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1505">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1506">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1506">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1507">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1507">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="165a7-1508">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1508">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="165a7-1509">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="165a7-1510">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="165a7-1510">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="165a7-1511">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1511">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="165a7-1512">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="165a7-1512">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-1513">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1513">Binary Mode</span></span>  
 <span data-ttu-id="165a7-1514">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-1514">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-1515">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-1515">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-1516">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-1516">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-1517">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="165a7-1517">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-1518">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1518">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="165a7-1519">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1519">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="165a7-1520">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1520">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-1521">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1521">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="165a7-1522">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="165a7-1522">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="165a7-1523">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-1523">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1524">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1524">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="165a7-1525">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1525">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-1526">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1526">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-1527">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1527">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1528">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1528">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1529">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1529">Required.</span>
          </span>
          <span data-ttu-id="165a7-1530">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1530">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-1531">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1531">Required.</span>
          </span>
          <span data-ttu-id="165a7-1532">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1532">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-1533">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1533">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1534">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1534">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1535">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1535">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-1536">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1536">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="165a7-1537">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1537">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1538">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1538">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1539">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1539">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="165a7-1540">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1540">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1541">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1541">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="165a7-1542">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1542">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="165a7-1543">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1543">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="165a7-1544">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1544">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1545">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1545">Random Mode</span></span>  
 <span data-ttu-id="165a7-1546">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1546">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1547">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="165a7-1547">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1548">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1548">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1549">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-1549">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="165a7-1550">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-1550">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="165a7-1551">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1551">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1552">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1552">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="165a7-1553">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-1553">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="165a7-1554">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1554">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="165a7-1555">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1555">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="165a7-1556">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="165a7-1556">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="165a7-1557">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1557">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1558">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1558">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1559">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1559">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="165a7-1560">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="165a7-1560">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="165a7-1561">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1561">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="165a7-1562">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1562">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-1563">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1563">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="165a7-1564">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1565">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1566">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1566">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1567">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="165a7-1568">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1568">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="165a7-1569">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="165a7-1570">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="165a7-1570">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="165a7-1571">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1571">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="165a7-1572">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="165a7-1572">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-1573">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1573">Binary Mode</span></span>  
 <span data-ttu-id="165a7-1574">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-1574">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-1575">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-1575">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-1576">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-1576">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-1577">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="165a7-1577">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-1578">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1578">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="165a7-1579">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1579">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="165a7-1580">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1580">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-1581">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1581">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="165a7-1582">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="165a7-1582">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="165a7-1583">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-1583">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1584">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1584">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="165a7-1585">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1585">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-1586">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1586">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-1587">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1587">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1588">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1588">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1589">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1589">Required.</span>
          </span>
          <span data-ttu-id="165a7-1590">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1590">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-1591">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1591">Required.</span>
          </span>
          <span data-ttu-id="165a7-1592">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1592">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-1593">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1593">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1594">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1594">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1595">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1595">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-1596">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1596">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="165a7-1597">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1597">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1598">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1598">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1599">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1599">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="165a7-1600">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1600">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1601">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1601">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="165a7-1602">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1602">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="165a7-1603">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1603">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="165a7-1604">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1604">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1605">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1605">Random Mode</span></span>  
 <span data-ttu-id="165a7-1606">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1606">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1607">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="165a7-1607">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1608">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1608">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1609">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-1609">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="165a7-1610">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-1610">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="165a7-1611">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1611">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1612">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1612">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="165a7-1613">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-1613">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="165a7-1614">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1614">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="165a7-1615">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1615">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="165a7-1616">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="165a7-1616">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="165a7-1617">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1617">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1618">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1618">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1619">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1619">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="165a7-1620">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="165a7-1620">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="165a7-1621">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1621">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="165a7-1622">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1622">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-1623">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1623">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="165a7-1624">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1625">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1626">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1626">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1627">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="165a7-1628">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1628">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="165a7-1629">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="165a7-1630">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="165a7-1630">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="165a7-1631">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1631">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="165a7-1632">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="165a7-1632">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-1633">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1633">Binary Mode</span></span>  
 <span data-ttu-id="165a7-1634">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-1634">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-1635">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-1635">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-1636">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-1636">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-1637">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="165a7-1637">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-1638">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1638">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="165a7-1639">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1639">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="165a7-1640">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1640">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-1641">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1641">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="165a7-1642">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="165a7-1642">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="165a7-1643">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-1643">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1644">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1644">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="165a7-1645">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1645">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-1646">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1646">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-1647">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1647">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1648">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1648">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1649">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1649">Required.</span>
          </span>
          <span data-ttu-id="165a7-1650">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1650">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-1651">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1651">Required.</span>
          </span>
          <span data-ttu-id="165a7-1652">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1652">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-1653">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1653">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1654">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1655">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1655">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-1656">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="165a7-1657">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1658">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1658">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1659">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1659">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="165a7-1660">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1661">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1661">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="165a7-1662">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1662">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="165a7-1663">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1663">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="165a7-1664">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1664">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1665">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1665">Random Mode</span></span>  
 <span data-ttu-id="165a7-1666">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1666">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1667">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="165a7-1667">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1668">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1668">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1669">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-1669">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="165a7-1670">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-1670">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="165a7-1671">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1671">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1672">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1672">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="165a7-1673">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-1673">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="165a7-1674">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1674">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="165a7-1675">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1675">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="165a7-1676">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="165a7-1676">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="165a7-1677">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1677">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1678">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1678">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1679">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1679">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="165a7-1680">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="165a7-1680">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="165a7-1681">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1681">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="165a7-1682">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1682">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-1683">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1683">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="165a7-1684">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1684">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1685">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1685">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1686">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1687">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1687">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="165a7-1688">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1688">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="165a7-1689">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="165a7-1690">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="165a7-1690">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="165a7-1691">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="165a7-1692">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="165a7-1692">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-1693">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1693">Binary Mode</span></span>  
 <span data-ttu-id="165a7-1694">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-1694">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-1695">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-1695">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-1696">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-1696">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-1697">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="165a7-1697">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-1698">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1698">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="165a7-1699">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1699">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="165a7-1700">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1700">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-1701">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1701">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="165a7-1702">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="165a7-1702">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="165a7-1703">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-1703">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1704">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1704">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="165a7-1705">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1705">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-1706">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1706">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-1707">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1707">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1708">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1708">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1709">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1709">Required.</span>
          </span>
          <span data-ttu-id="165a7-1710">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1710">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-1711">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1711">Required.</span>
          </span>
          <span data-ttu-id="165a7-1712">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1712">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-1713">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1713">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1714">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1715">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1715">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-1716">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="165a7-1717">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1718">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1718">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1719">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1719">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="165a7-1720">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1721">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1721">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="165a7-1722">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1722">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="165a7-1723">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1723">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="165a7-1724">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1724">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1725">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1725">Random Mode</span></span>  
 <span data-ttu-id="165a7-1726">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1726">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1727">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="165a7-1727">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1728">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1728">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1729">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-1729">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="165a7-1730">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-1730">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="165a7-1731">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1731">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1732">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1732">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="165a7-1733">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-1733">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="165a7-1734">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1734">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="165a7-1735">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1735">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="165a7-1736">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="165a7-1736">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="165a7-1737">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1738">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1738">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1739">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1739">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="165a7-1740">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="165a7-1740">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="165a7-1741">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1741">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="165a7-1742">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1742">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-1743">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1743">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="165a7-1744">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1744">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1745">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1745">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1746">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1747">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1747">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="165a7-1748">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1748">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="165a7-1749">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="165a7-1750">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="165a7-1750">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="165a7-1751">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="165a7-1752">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="165a7-1752">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-1753">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1753">Binary Mode</span></span>  
 <span data-ttu-id="165a7-1754">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-1754">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-1755">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-1755">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-1756">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-1756">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-1757">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="165a7-1757">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-1758">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1758">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="165a7-1759">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1759">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="165a7-1760">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1760">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-1761">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1761">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="165a7-1762">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="165a7-1762">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="165a7-1763">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-1763">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1764">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1764">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="165a7-1765">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1765">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-1766">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1766">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-1767">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1767">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1768">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1768">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1769">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1769">Required.</span>
          </span>
          <span data-ttu-id="165a7-1770">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1770">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-1771">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1771">Required.</span>
          </span>
          <span data-ttu-id="165a7-1772">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1772">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-1773">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1773">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1774">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1774">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1775">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1775">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-1776">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1776">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="165a7-1777">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1777">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1778">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1778">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1779">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1779">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="165a7-1780">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1780">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1781">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1781">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="165a7-1782">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1782">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="165a7-1783">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1783">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="165a7-1784">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1784">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1785">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1785">Random Mode</span></span>  
 <span data-ttu-id="165a7-1786">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1786">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1787">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="165a7-1787">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1788">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1788">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1789">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-1789">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="165a7-1790">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-1790">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="165a7-1791">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1791">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1792">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1792">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="165a7-1793">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-1793">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="165a7-1794">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1794">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="165a7-1795">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1795">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="165a7-1796">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="165a7-1796">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="165a7-1797">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1798">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1798">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1799">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1799">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="165a7-1800">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="165a7-1800">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="165a7-1801">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1801">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="165a7-1802">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1802">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-1803">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1803">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="165a7-1804">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1804">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1805">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1805">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1806">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1807">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1807">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="165a7-1808">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1808">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="165a7-1809">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="165a7-1810">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="165a7-1810">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="165a7-1811">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1811">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="165a7-1812">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="165a7-1812">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-1813">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1813">Binary Mode</span></span>  
 <span data-ttu-id="165a7-1814">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-1814">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-1815">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-1815">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-1816">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-1816">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-1817">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="165a7-1817">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-1818">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1818">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="165a7-1819">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1819">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="165a7-1820">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1820">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-1821">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1821">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="165a7-1822">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="165a7-1822">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="165a7-1823">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-1823">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1824">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1824">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="165a7-1825">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1825">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-1826">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1826">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-1827">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1827">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1828">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1828">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1829">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1829">Required.</span>
          </span>
          <span data-ttu-id="165a7-1830">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1830">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-1831">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1831">Required.</span>
          </span>
          <span data-ttu-id="165a7-1832">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1832">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-1833">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1833">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1834">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1834">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1835">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1835">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-1836">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1836">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="165a7-1837">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1837">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1838">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1838">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1839">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1839">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="165a7-1840">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1840">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1841">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1841">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="165a7-1842">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1842">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="165a7-1843">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1843">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="165a7-1844">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1844">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1845">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1845">Random Mode</span></span>  
 <span data-ttu-id="165a7-1846">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1846">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1847">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="165a7-1847">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1848">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1848">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1849">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-1849">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="165a7-1850">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-1850">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="165a7-1851">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1851">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1852">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1852">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="165a7-1853">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-1853">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="165a7-1854">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1854">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="165a7-1855">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1855">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="165a7-1856">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="165a7-1856">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="165a7-1857">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1857">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1858">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1858">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1859">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1859">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="165a7-1860">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="165a7-1860">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="165a7-1861">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1861">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="165a7-1862">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1862">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-1863">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1863">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="165a7-1864">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1864">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1865">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1865">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1866">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1866">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1867">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1867">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="165a7-1868">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1868">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="165a7-1869">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="165a7-1870">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="165a7-1870">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="165a7-1871">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1871">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="165a7-1872">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="165a7-1872">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-1873">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1873">Binary Mode</span></span>  
 <span data-ttu-id="165a7-1874">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-1874">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-1875">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-1875">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-1876">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-1876">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-1877">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="165a7-1877">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-1878">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1878">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="165a7-1879">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1879">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="165a7-1880">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1880">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-1881">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1881">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="165a7-1882">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="165a7-1882">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="165a7-1883">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-1883">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1884">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1884">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="165a7-1885">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1885">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-1886">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1886">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-1887">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1887">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1888">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1888">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1889">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1889">Required.</span>
          </span>
          <span data-ttu-id="165a7-1890">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1890">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-1891">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1891">Required.</span>
          </span>
          <span data-ttu-id="165a7-1892">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1892">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-1893">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1893">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1894">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="165a7-1895">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1895">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1896">仅在写入字符串时适用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="165a7-1897">指定是否将字符串的双字节字符串长度说明符写入文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="165a7-1898">默认值为 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1899">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1899">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-1900">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="165a7-1901">有关更多信息，请参见 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1902">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1902">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1903">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1903">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="165a7-1904">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1905">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1905">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="165a7-1906">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1906">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="165a7-1907">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1907">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="165a7-1908">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1908">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1909">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1909">Random Mode</span></span>  
 <span data-ttu-id="165a7-1910">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1911">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="165a7-1911">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1912">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1913">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-1913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="165a7-1914">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-1914">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="165a7-1915">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1915">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1916">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1916">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="165a7-1917">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-1917">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="165a7-1918">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1918">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="165a7-1919">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1919">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="165a7-1920">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="165a7-1920">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="165a7-1921">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1921">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1922">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1922">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1923">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1923">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="165a7-1924">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="165a7-1924">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="165a7-1925">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1925">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="165a7-1926">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1926">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-1927">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1927">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="165a7-1928">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1928">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1929">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1929">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1930">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1931">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1931">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="165a7-1932">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1932">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="165a7-1933">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="165a7-1934">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="165a7-1934">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="165a7-1935">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="165a7-1936">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="165a7-1936">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-1937">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1937">Binary Mode</span></span>  
 <span data-ttu-id="165a7-1938">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-1938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-1939">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-1939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-1940">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-1940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-1941">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="165a7-1941">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-1942">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1942">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="165a7-1943">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1943">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="165a7-1944">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1944">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-1945">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1945">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="165a7-1946">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="165a7-1946">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="165a7-1947">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-1947">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-1948">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1948">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="165a7-1949">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-1949">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-1950">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1950">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-1951">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1951">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-1952">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1952">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-1953">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1953">Required.</span>
          </span>
          <span data-ttu-id="165a7-1954">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1954">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-1955">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1955">Required.</span>
          </span>
          <span data-ttu-id="165a7-1956">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1956">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-1957">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1957">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1958">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1958">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="165a7-1959">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1959">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1960">仅当写入数组时使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1960">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="165a7-1961">指定是否将数组视为动态数组，以及是否写入用于描述字符串长度的数组说明符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1961">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="165a7-1962">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1962">Optional.</span>
          </span>
          <span data-ttu-id="165a7-1963">仅在写入字符串时适用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1963">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="165a7-1964">指定是否将字符串的双字节字符串长度说明符写入文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1964">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="165a7-1965">默认值为 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1965">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-1966">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1966">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-1967">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1967">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="165a7-1968">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-1968">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-1969">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-1969">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-1970">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1970">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="165a7-1971">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-1971">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-1972">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1972">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="165a7-1973">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1973">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="165a7-1974">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1974">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="165a7-1975">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1975">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-1976">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-1976">Random Mode</span></span>  
 <span data-ttu-id="165a7-1977">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-1977">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-1978">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="165a7-1978">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-1979">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-1979">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-1980">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-1980">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="165a7-1981">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-1981">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="165a7-1982">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1982">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="165a7-1983">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-1983">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="165a7-1984">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-1984">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="165a7-1985">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1985">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="165a7-1986">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="165a7-1986">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="165a7-1987">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="165a7-1987">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="165a7-1988">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-1988">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-1989">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-1989">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-1990">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1990">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="165a7-1991">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="165a7-1991">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="165a7-1992">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1992">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="165a7-1993">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-1993">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="165a7-1994">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-1994">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="165a7-1995">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-1995">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-1996">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-1996">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="165a7-1997">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-1997">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-1998">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-1998">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="165a7-1999">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-1999">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="165a7-2000">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="165a7-2001">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="165a7-2001">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="165a7-2002">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-2002">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="165a7-2003">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="165a7-2003">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-2004">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-2004">Binary Mode</span></span>  
 <span data-ttu-id="165a7-2005">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="165a7-2005">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="165a7-2006">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="165a7-2006">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="165a7-2007">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-2007">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-2008">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="165a7-2008">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="165a7-2009">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2009">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="165a7-2010">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="165a7-2010">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="165a7-2011">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-2011">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="165a7-2012">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2012">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="165a7-2013">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="165a7-2013">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="165a7-2014">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2014">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2015">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2015">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="165a7-2016">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2016">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-2017">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2017">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2018">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2018">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-2019">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2019">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2020">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2020">Required.</span>
          </span>
          <span data-ttu-id="165a7-2021">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2021">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-2022">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2022">Required.</span>
          </span>
          <span data-ttu-id="165a7-2023">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2023">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="165a7-2024">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2024">Optional.</span>
          </span>
          <span data-ttu-id="165a7-2025">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2025">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2026">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2026">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="165a7-2027">相比 <see langword="FilePutObject" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2027">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="165a7-2028">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2028">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2029">`FilePutObject`而不是使用函数`FilePut`以在编译时避免出现多义性，如果类型`Object`传递而不是另一种类型，如`Integer`， `Long`， `Short`，依次类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-2029">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="165a7-2030">`FilePutObject` 将写入和读取描述该对象的描述符。</span><span class="sxs-lookup"><span data-stu-id="165a7-2030">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="165a7-2031">如果你想要将写出`Variant`类型，`FilePutObject`是必需的。</span><span class="sxs-lookup"><span data-stu-id="165a7-2031">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="165a7-2032">如果你使用某个对象作为第二个参数，如有疑问，我们建议始终使用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2032">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="165a7-2033">`FilePutObject` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2033">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-2034">通常使用 `FileGetObject` 从文件中读取使用 `FilePutObject` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2034">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="165a7-2035">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-2035">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="165a7-2036">如果省略`RecordNumber`，`FilePutObject`上次写入下一个记录或字节`FileGetObject`或`FilePutObject`函数 (或记录号或字节指向由最后一个`Seek`函数)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2036">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="165a7-2037">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-2037">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="165a7-2038">`FilePutObject` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2038">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="165a7-2039">如果您使用`StringIsFixedLength`  =  `True`与`FilePutObject`，您只需使用相同`FileGetObject`，您必须还需确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-2039">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="165a7-2040">随机模式</span><span class="sxs-lookup"><span data-stu-id="165a7-2040">Random Mode</span></span>  
 <span data-ttu-id="165a7-2041">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="165a7-2041">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="165a7-2042">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePutObject`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="165a7-2042">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="165a7-2043">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="165a7-2043">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="165a7-2044">由于不能准确地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="165a7-2044">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="165a7-2045">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="165a7-2045">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="165a7-2046">如果写入的变量是包含一个数值类型的对象`FilePutObject`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2046">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="165a7-2047">例如，编写一个对象时包含一个整数`FilePutObject`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-2047">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="165a7-2048">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2048">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="165a7-2049">如果写入的变量是一个对象，包含一个字符串，`FilePutObject`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="165a7-2049">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="165a7-2050">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="165a7-2050">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="165a7-2051">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-2051">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="165a7-2052">如果写入的变量为数组，则 `RecordLength` 函数中 `FileOpen` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="165a7-2052">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="165a7-2053">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="165a7-2053">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="165a7-2054">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2054">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="165a7-2055">二进制模式</span><span class="sxs-lookup"><span data-stu-id="165a7-2055">Binary Mode</span></span>  
 <span data-ttu-id="165a7-2056">打开的文件中`Binary`模式下，所有`Random`模式规则适用，除外：</span><span class="sxs-lookup"><span data-stu-id="165a7-2056">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="165a7-2057">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="165a7-2057">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="165a7-2058">`FilePutObject` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="165a7-2058">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2059">此示例使用`FilePutObject`函数以将字符串写入文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2059">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-2060">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2060">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2061">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2061">Required.</span>
          </span>
          <span data-ttu-id="165a7-2062">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2062">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="165a7-2063">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2063">Required.</span>
          </span>
          <span data-ttu-id="165a7-2064">0 到 255（包括 0 和 255）范围内的数值表达式，它表示在开始新一行前每一行中所显示的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2064">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="165a7-2065">如果 <paramref name="RecordWidth" /> 等于 0，则行的长度没有限制。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2065">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="165a7-2066">
            <paramref name="RecordWidth" /> 的默认值为 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2066">The default value for <paramref name="RecordWidth" /> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2067">为用 <see langword="FileOpen" /> 函数打开的文件分配输出行宽。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2067">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="165a7-2068">此示例使用`FileWidth`函数设置文件的输出线条宽度。</span><span class="sxs-lookup"><span data-stu-id="165a7-2068">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2069">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2069">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2070">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2070">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="165a7-2071">返回一个 <see langword="Integer" /> 值，该值表示 <see langword="FileOpen" /> 函数可用的下一个文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2071">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-2072">返回一个 <see langword="Integer" /> 值，该值表示 <see langword="FileOpen" /> 函数可用的下一个文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2072">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2073">使用`FreeFile`提供尚未使用的文件号。</span><span class="sxs-lookup"><span data-stu-id="165a7-2073">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2074">此示例使用`FreeFile`函数以返回下一个可用的文件数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2074">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="165a7-2075">五个文件打开，以便在循环中，输出和一些示例数据写入到每个。</span><span class="sxs-lookup"><span data-stu-id="165a7-2075">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2076">正在使用的文件数超过 255。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2076">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-2077">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2077">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="165a7-2078">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2078">Required.</span>
          </span>
          <span data-ttu-id="165a7-2079">指定一个文件名、目录名或文件夹名的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2079">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="165a7-2080">
            <paramref name="PathName" /> 可以包含驱动器和目录或文件夹。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2080">
              <paramref name="PathName" /> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2081">返回一个表示文件、目录或文件夹的特性的 <see langword="FileAttribute" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2081">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="165a7-2082">相比 <see langword="FileAttribute" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2082">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="165a7-2083">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2083">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-2084">由 <see langword="GetAttr" /> 返回的值是下列枚举值的和：</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2084">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span>
          </span>
          <list type="table">
            <item>
              <term>
                <span data-ttu-id="165a7-2085">“值”</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-2085">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="165a7-2086">返回的常量</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-2086">Constant</span>
                </span>
              </description>
              <description>
                <span data-ttu-id="165a7-2087">描述</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-2087">Description</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Normal" />
              </term>
              <description>
                <see langword="vbNormal" />
              </description>
              <description>
                <span data-ttu-id="165a7-2088">正常。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-2088">Normal.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="ReadOnly" />
              </term>
              <description>
                <see langword="vbReadOnly" />
              </description>
              <description>
                <span data-ttu-id="165a7-2089">只读。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-2089">Read-only.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Hidden" />
              </term>
              <description>
                <see langword="vbHidden" />
              </description>
              <description>
                <span data-ttu-id="165a7-2090">隐藏。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-2090">Hidden.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="System" />
              </term>
              <description>
                <see langword="vbSystem" />
              </description>
              <description>
                <span data-ttu-id="165a7-2091">系统文件。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-2091">System file.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Directory" />
              </term>
              <description>
                <see langword="vbDirectory" />
              </description>
              <description>
                <span data-ttu-id="165a7-2092">目录或文件夹。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-2092">Directory or folder.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Archive" />
              </term>
              <description>
                <see langword="vbArchive" />
              </description>
              <description>
                <span data-ttu-id="165a7-2093">文件自上次备份后已更改。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-2093">File has changed since last backup.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Alias" />
              </term>
              <description>
                <see langword="vbAlias" />
              </description>
              <description>
                <span data-ttu-id="165a7-2094">文件具有不同的名称。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="165a7-2094">File has a different name.</span>
                </span>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="165a7-2095">这些枚举是由 Visual Basic 语言指定的。</span>
              <span class="sxs-lookup">
                <span data-stu-id="165a7-2095">These enumerations are specified by the Visual Basic language.</span>
              </span>
              <span data-ttu-id="165a7-2096">可以在代码中的任何位置使用这些名称以代替实际值。</span>
              <span class="sxs-lookup">
                <span data-stu-id="165a7-2096">The names can be used anywhere in your code in place of the actual values.</span>
              </span>
            </para>
          </block>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2097">若要确定设置了哪些属性，请使用`And`运算符执行返回的值的按位比较`GetAttr`函数和所需的各个文件属性的值。</span><span class="sxs-lookup"><span data-stu-id="165a7-2097">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="165a7-2098">如果结果不为零，该属性设置为指定的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2098">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="165a7-2099">例如，下面的返回值`And`表达式是零个 if`Archive`未设置属性：</span><span class="sxs-lookup"><span data-stu-id="165a7-2099">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="165a7-2100">如果返回非零值`Archive`属性设置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2100">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2101">此示例使用`GetAttr`函数来确定文件和目录或文件夹的属性。</span><span class="sxs-lookup"><span data-stu-id="165a7-2101">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2102">
            <paramref name="Pathname" /> 无效或包含通配符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2102">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="165a7-2103">目标文件不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2103">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md">
          <span data-ttu-id="165a7-2104">And 运算符 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2104">And Operator (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2105">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2105">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="165a7-2106">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2106">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2107">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2107">Required.</span>
          </span>
          <span data-ttu-id="165a7-2108">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2108">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-2109">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2109">Required.</span>
          </span>
          <span data-ttu-id="165a7-2110">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2110">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2111">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2111">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2112">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2112">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2113">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2113">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2114">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2114">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2115">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2115">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="165a7-2116">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2116">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2117">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-2117">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="165a7-2118">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2118">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="165a7-2119">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2119">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="165a7-2120">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2120">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="165a7-2121">数据</span><span class="sxs-lookup"><span data-stu-id="165a7-2121">Data</span></span>|<span data-ttu-id="165a7-2122">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="165a7-2122">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="165a7-2123">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="165a7-2123">Delimiting comma or blank line</span></span>|<span data-ttu-id="165a7-2124">空</span><span class="sxs-lookup"><span data-stu-id="165a7-2124">Empty</span></span>|  
|<span data-ttu-id="165a7-2125">#NULL #</span><span class="sxs-lookup"><span data-stu-id="165a7-2125">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="165a7-2126">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="165a7-2126">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="165a7-2127">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="165a7-2127">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="165a7-2128">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="165a7-2128">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="165a7-2129">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="165a7-2129">#ERROR `errornumber`#</span></span>|<span data-ttu-id="165a7-2130">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="165a7-2130">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="165a7-2131">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-2131">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2132">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="165a7-2132">The `Input` function is not localized.</span></span> <span data-ttu-id="165a7-2133">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="165a7-2133">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2134">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2134">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-2135">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2135">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2136">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2136">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="165a7-2137">此示例假定`TestFile`是一个文件，已使用对其写入数据的某些行`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2137">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2138">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2138">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2139">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2139">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2140">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2140">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2141">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2141">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2142">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2142">Required.</span>
          </span>
          <span data-ttu-id="165a7-2143">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2143">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-2144">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2144">Required.</span>
          </span>
          <span data-ttu-id="165a7-2145">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2145">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2146">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2146">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2147">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2147">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2148">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2148">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2149">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2149">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2150">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2150">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="165a7-2151">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2151">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2152">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-2152">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="165a7-2153">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2153">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="165a7-2154">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2154">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="165a7-2155">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2155">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="165a7-2156">数据</span><span class="sxs-lookup"><span data-stu-id="165a7-2156">Data</span></span>|<span data-ttu-id="165a7-2157">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="165a7-2157">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="165a7-2158">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="165a7-2158">Delimiting comma or blank line</span></span>|<span data-ttu-id="165a7-2159">空</span><span class="sxs-lookup"><span data-stu-id="165a7-2159">Empty</span></span>|  
|<span data-ttu-id="165a7-2160">#NULL #</span><span class="sxs-lookup"><span data-stu-id="165a7-2160">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="165a7-2161">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="165a7-2161">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="165a7-2162">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="165a7-2162">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="165a7-2163">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="165a7-2163">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="165a7-2164">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="165a7-2164">#ERROR `errornumber`#</span></span>|<span data-ttu-id="165a7-2165">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="165a7-2165">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="165a7-2166">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-2166">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2167">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="165a7-2167">The `Input` function is not localized.</span></span> <span data-ttu-id="165a7-2168">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="165a7-2168">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2169">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2169">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-2170">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2170">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2171">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2171">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="165a7-2172">此示例假定`TestFile`是一个文件，已使用对其写入数据的某些行`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2172">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2173">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2173">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2174">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2174">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2175">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2175">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2176">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2176">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2177">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2177">Required.</span>
          </span>
          <span data-ttu-id="165a7-2178">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2178">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-2179">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2179">Required.</span>
          </span>
          <span data-ttu-id="165a7-2180">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2180">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2181">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2181">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2182">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2182">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2183">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2183">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2184">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2184">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2185">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2185">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="165a7-2186">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2186">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2187">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-2187">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="165a7-2188">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2188">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="165a7-2189">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2189">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="165a7-2190">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2190">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="165a7-2191">数据</span><span class="sxs-lookup"><span data-stu-id="165a7-2191">Data</span></span>|<span data-ttu-id="165a7-2192">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="165a7-2192">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="165a7-2193">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="165a7-2193">Delimiting comma or blank line</span></span>|<span data-ttu-id="165a7-2194">空</span><span class="sxs-lookup"><span data-stu-id="165a7-2194">Empty</span></span>|  
|<span data-ttu-id="165a7-2195">#NULL #</span><span class="sxs-lookup"><span data-stu-id="165a7-2195">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="165a7-2196">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="165a7-2196">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="165a7-2197">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="165a7-2197">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="165a7-2198">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="165a7-2198">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="165a7-2199">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="165a7-2199">#ERROR `errornumber`#</span></span>|<span data-ttu-id="165a7-2200">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="165a7-2200">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="165a7-2201">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-2201">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2202">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="165a7-2202">The `Input` function is not localized.</span></span> <span data-ttu-id="165a7-2203">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="165a7-2203">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2204">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2204">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-2205">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2205">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2206">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2206">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="165a7-2207">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2207">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2208">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2208">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2209">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2209">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2210">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2210">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2211">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2211">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2212">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2212">Required.</span>
          </span>
          <span data-ttu-id="165a7-2213">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2213">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-2214">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2214">Required.</span>
          </span>
          <span data-ttu-id="165a7-2215">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2215">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2216">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2216">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2217">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2217">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2218">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2218">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2219">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2219">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2220">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2220">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="165a7-2221">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2221">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2222">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-2222">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="165a7-2223">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2223">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="165a7-2224">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2224">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="165a7-2225">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2225">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="165a7-2226">数据</span><span class="sxs-lookup"><span data-stu-id="165a7-2226">Data</span></span>|<span data-ttu-id="165a7-2227">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="165a7-2227">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="165a7-2228">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="165a7-2228">Delimiting comma or blank line</span></span>|<span data-ttu-id="165a7-2229">空</span><span class="sxs-lookup"><span data-stu-id="165a7-2229">Empty</span></span>|  
|<span data-ttu-id="165a7-2230">#NULL #</span><span class="sxs-lookup"><span data-stu-id="165a7-2230">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="165a7-2231">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="165a7-2231">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="165a7-2232">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="165a7-2232">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="165a7-2233">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="165a7-2233">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="165a7-2234">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="165a7-2234">#ERROR `errornumber`#</span></span>|<span data-ttu-id="165a7-2235">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="165a7-2235">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="165a7-2236">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-2236">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2237">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="165a7-2237">The `Input` function is not localized.</span></span> <span data-ttu-id="165a7-2238">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="165a7-2238">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2239">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2239">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-2240">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2240">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2241">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2241">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="165a7-2242">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2242">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2243">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2243">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2244">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2244">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2245">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2245">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2246">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2246">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2247">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2247">Required.</span>
          </span>
          <span data-ttu-id="165a7-2248">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2248">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-2249">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2249">Required.</span>
          </span>
          <span data-ttu-id="165a7-2250">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2250">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2251">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2251">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2252">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2252">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2253">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2253">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2254">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2254">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2255">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2255">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="165a7-2256">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2256">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2257">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-2257">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="165a7-2258">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2258">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="165a7-2259">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2259">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="165a7-2260">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2260">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="165a7-2261">数据</span><span class="sxs-lookup"><span data-stu-id="165a7-2261">Data</span></span>|<span data-ttu-id="165a7-2262">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="165a7-2262">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="165a7-2263">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="165a7-2263">Delimiting comma or blank line</span></span>|<span data-ttu-id="165a7-2264">空</span><span class="sxs-lookup"><span data-stu-id="165a7-2264">Empty</span></span>|  
|<span data-ttu-id="165a7-2265">#NULL #</span><span class="sxs-lookup"><span data-stu-id="165a7-2265">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="165a7-2266">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="165a7-2266">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="165a7-2267">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="165a7-2267">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="165a7-2268">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="165a7-2268">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="165a7-2269">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="165a7-2269">#ERROR `errornumber`#</span></span>|<span data-ttu-id="165a7-2270">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="165a7-2270">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="165a7-2271">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-2271">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2272">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="165a7-2272">The `Input` function is not localized.</span></span> <span data-ttu-id="165a7-2273">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="165a7-2273">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2274">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2274">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-2275">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2275">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2276">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2276">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="165a7-2277">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2277">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2278">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2278">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2279">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2279">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2280">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2280">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2281">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2281">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2282">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2282">Required.</span>
          </span>
          <span data-ttu-id="165a7-2283">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2283">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-2284">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2284">Required.</span>
          </span>
          <span data-ttu-id="165a7-2285">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2285">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2286">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2286">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2287">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2287">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2288">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2288">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2289">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2289">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2290">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2290">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="165a7-2291">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2291">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2292">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-2292">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="165a7-2293">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2293">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="165a7-2294">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2294">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="165a7-2295">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2295">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="165a7-2296">数据</span><span class="sxs-lookup"><span data-stu-id="165a7-2296">Data</span></span>|<span data-ttu-id="165a7-2297">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="165a7-2297">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="165a7-2298">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="165a7-2298">Delimiting comma or blank line</span></span>|<span data-ttu-id="165a7-2299">空</span><span class="sxs-lookup"><span data-stu-id="165a7-2299">Empty</span></span>|  
|<span data-ttu-id="165a7-2300">#NULL #</span><span class="sxs-lookup"><span data-stu-id="165a7-2300">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="165a7-2301">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="165a7-2301">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="165a7-2302">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="165a7-2302">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="165a7-2303">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="165a7-2303">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="165a7-2304">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="165a7-2304">#ERROR `errornumber`#</span></span>|<span data-ttu-id="165a7-2305">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="165a7-2305">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="165a7-2306">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-2306">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2307">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="165a7-2307">The `Input` function is not localized.</span></span> <span data-ttu-id="165a7-2308">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="165a7-2308">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2309">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2309">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-2310">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2310">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2311">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2311">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="165a7-2312">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2312">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2313">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2313">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2314">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2314">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2315">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2315">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2316">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2316">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2317">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2317">Required.</span>
          </span>
          <span data-ttu-id="165a7-2318">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2318">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-2319">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2319">Required.</span>
          </span>
          <span data-ttu-id="165a7-2320">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2320">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2321">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2321">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2322">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2322">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2323">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2323">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2324">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2324">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2325">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2325">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="165a7-2326">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2326">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2327">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-2327">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="165a7-2328">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2328">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="165a7-2329">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2329">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="165a7-2330">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2330">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="165a7-2331">数据</span><span class="sxs-lookup"><span data-stu-id="165a7-2331">Data</span></span>|<span data-ttu-id="165a7-2332">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="165a7-2332">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="165a7-2333">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="165a7-2333">Delimiting comma or blank line</span></span>|<span data-ttu-id="165a7-2334">空</span><span class="sxs-lookup"><span data-stu-id="165a7-2334">Empty</span></span>|  
|<span data-ttu-id="165a7-2335">#NULL #</span><span class="sxs-lookup"><span data-stu-id="165a7-2335">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="165a7-2336">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="165a7-2336">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="165a7-2337">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="165a7-2337">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="165a7-2338">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="165a7-2338">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="165a7-2339">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="165a7-2339">#ERROR `errornumber`#</span></span>|<span data-ttu-id="165a7-2340">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="165a7-2340">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="165a7-2341">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-2341">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2342">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="165a7-2342">The `Input` function is not localized.</span></span> <span data-ttu-id="165a7-2343">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="165a7-2343">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2344">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2344">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-2345">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2345">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2346">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2346">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="165a7-2347">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2347">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2348">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2348">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2349">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2349">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2350">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2350">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2351">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2351">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2352">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2352">Required.</span>
          </span>
          <span data-ttu-id="165a7-2353">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2353">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-2354">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2354">Required.</span>
          </span>
          <span data-ttu-id="165a7-2355">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2355">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2356">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2356">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2357">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2357">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2358">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2358">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2359">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2359">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2360">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2360">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="165a7-2361">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2361">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2362">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-2362">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="165a7-2363">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2363">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="165a7-2364">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2364">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="165a7-2365">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2365">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="165a7-2366">数据</span><span class="sxs-lookup"><span data-stu-id="165a7-2366">Data</span></span>|<span data-ttu-id="165a7-2367">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="165a7-2367">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="165a7-2368">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="165a7-2368">Delimiting comma or blank line</span></span>|<span data-ttu-id="165a7-2369">空</span><span class="sxs-lookup"><span data-stu-id="165a7-2369">Empty</span></span>|  
|<span data-ttu-id="165a7-2370">#NULL #</span><span class="sxs-lookup"><span data-stu-id="165a7-2370">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="165a7-2371">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="165a7-2371">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="165a7-2372">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="165a7-2372">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="165a7-2373">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="165a7-2373">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="165a7-2374">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="165a7-2374">#ERROR `errornumber`#</span></span>|<span data-ttu-id="165a7-2375">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="165a7-2375">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="165a7-2376">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-2376">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2377">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="165a7-2377">The `Input` function is not localized.</span></span> <span data-ttu-id="165a7-2378">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="165a7-2378">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2379">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2379">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-2380">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2380">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2381">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2381">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="165a7-2382">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2382">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2383">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2383">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2384">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2384">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2385">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2385">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2386">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2386">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2387">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2387">Required.</span>
          </span>
          <span data-ttu-id="165a7-2388">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2388">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-2389">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2389">Required.</span>
          </span>
          <span data-ttu-id="165a7-2390">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2390">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2391">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2391">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2392">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2392">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2393">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2393">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2394">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2394">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2395">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2395">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="165a7-2396">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2396">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2397">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-2397">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="165a7-2398">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2398">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="165a7-2399">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2399">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="165a7-2400">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2400">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="165a7-2401">数据</span><span class="sxs-lookup"><span data-stu-id="165a7-2401">Data</span></span>|<span data-ttu-id="165a7-2402">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="165a7-2402">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="165a7-2403">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="165a7-2403">Delimiting comma or blank line</span></span>|<span data-ttu-id="165a7-2404">空</span><span class="sxs-lookup"><span data-stu-id="165a7-2404">Empty</span></span>|  
|<span data-ttu-id="165a7-2405">#NULL #</span><span class="sxs-lookup"><span data-stu-id="165a7-2405">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="165a7-2406">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="165a7-2406">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="165a7-2407">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="165a7-2407">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="165a7-2408">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="165a7-2408">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="165a7-2409">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="165a7-2409">#ERROR `errornumber`#</span></span>|<span data-ttu-id="165a7-2410">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="165a7-2410">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="165a7-2411">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-2411">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2412">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="165a7-2412">The `Input` function is not localized.</span></span> <span data-ttu-id="165a7-2413">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="165a7-2413">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2414">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2414">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-2415">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2415">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2416">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2416">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="165a7-2417">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2417">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2418">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2418">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2419">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2419">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2420">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2420">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2421">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2421">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2422">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2422">Required.</span>
          </span>
          <span data-ttu-id="165a7-2423">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2423">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-2424">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2424">Required.</span>
          </span>
          <span data-ttu-id="165a7-2425">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2425">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2426">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2426">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2427">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2427">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2428">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2428">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2429">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2429">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2430">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2430">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="165a7-2431">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2431">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2432">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-2432">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="165a7-2433">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2433">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="165a7-2434">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2434">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="165a7-2435">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2435">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="165a7-2436">数据</span><span class="sxs-lookup"><span data-stu-id="165a7-2436">Data</span></span>|<span data-ttu-id="165a7-2437">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="165a7-2437">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="165a7-2438">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="165a7-2438">Delimiting comma or blank line</span></span>|<span data-ttu-id="165a7-2439">空</span><span class="sxs-lookup"><span data-stu-id="165a7-2439">Empty</span></span>|  
|<span data-ttu-id="165a7-2440">#NULL #</span><span class="sxs-lookup"><span data-stu-id="165a7-2440">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="165a7-2441">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="165a7-2441">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="165a7-2442">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="165a7-2442">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="165a7-2443">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="165a7-2443">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="165a7-2444">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="165a7-2444">#ERROR `errornumber`#</span></span>|<span data-ttu-id="165a7-2445">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="165a7-2445">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="165a7-2446">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-2446">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2447">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="165a7-2447">The `Input` function is not localized.</span></span> <span data-ttu-id="165a7-2448">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="165a7-2448">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2449">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2449">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-2450">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2450">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2451">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2451">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="165a7-2452">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2452">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2453">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2453">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2454">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2454">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2455">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2455">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2456">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2456">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2457">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2457">Required.</span>
          </span>
          <span data-ttu-id="165a7-2458">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2458">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-2459">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2459">Required.</span>
          </span>
          <span data-ttu-id="165a7-2460">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2460">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2461">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2461">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2462">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2462">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2463">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2463">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2464">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2464">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2465">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2465">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="165a7-2466">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2466">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2467">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-2467">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="165a7-2468">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2468">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="165a7-2469">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2469">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="165a7-2470">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2470">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="165a7-2471">数据</span><span class="sxs-lookup"><span data-stu-id="165a7-2471">Data</span></span>|<span data-ttu-id="165a7-2472">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="165a7-2472">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="165a7-2473">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="165a7-2473">Delimiting comma or blank line</span></span>|<span data-ttu-id="165a7-2474">空</span><span class="sxs-lookup"><span data-stu-id="165a7-2474">Empty</span></span>|  
|<span data-ttu-id="165a7-2475">#NULL #</span><span class="sxs-lookup"><span data-stu-id="165a7-2475">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="165a7-2476">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="165a7-2476">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="165a7-2477">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="165a7-2477">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="165a7-2478">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="165a7-2478">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="165a7-2479">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="165a7-2479">#ERROR `errornumber`#</span></span>|<span data-ttu-id="165a7-2480">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="165a7-2480">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="165a7-2481">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-2481">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2482">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="165a7-2482">The `Input` function is not localized.</span></span> <span data-ttu-id="165a7-2483">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="165a7-2483">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2484">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2484">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-2485">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2485">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2486">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2486">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="165a7-2487">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2487">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2488">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2488">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2489">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2489">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2490">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2490">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2491">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2491">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2492">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2492">Required.</span>
          </span>
          <span data-ttu-id="165a7-2493">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2493">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="165a7-2494">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2494">Required.</span>
          </span>
          <span data-ttu-id="165a7-2495">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2495">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2496">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2496">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2497">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2497">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2498">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2498">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2499">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2499">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2500">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2500">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="165a7-2501">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2501">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2502">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="165a7-2502">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="165a7-2503">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2503">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="165a7-2504">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2504">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="165a7-2505">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2505">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="165a7-2506">数据</span><span class="sxs-lookup"><span data-stu-id="165a7-2506">Data</span></span>|<span data-ttu-id="165a7-2507">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="165a7-2507">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="165a7-2508">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="165a7-2508">Delimiting comma or blank line</span></span>|<span data-ttu-id="165a7-2509">空</span><span class="sxs-lookup"><span data-stu-id="165a7-2509">Empty</span></span>|  
|<span data-ttu-id="165a7-2510">#NULL #</span><span class="sxs-lookup"><span data-stu-id="165a7-2510">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="165a7-2511">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="165a7-2511">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="165a7-2512">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="165a7-2512">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="165a7-2513">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="165a7-2513">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="165a7-2514">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="165a7-2514">#ERROR `errornumber`#</span></span>|<span data-ttu-id="165a7-2515">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="165a7-2515">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="165a7-2516">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-2516">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2517">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="165a7-2517">The `Input` function is not localized.</span></span> <span data-ttu-id="165a7-2518">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="165a7-2518">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2519">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2519">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-2520">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2520">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2521">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2521">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="165a7-2522">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2522">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2523">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2523">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2524">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2524">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2525">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2525">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2526">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2526">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2527">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2527">Required.</span>
          </span>
          <span data-ttu-id="165a7-2528">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2528">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="165a7-2529">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2529">Required.</span>
          </span>
          <span data-ttu-id="165a7-2530">用于指定要读取的字符数的任何有效数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2530">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2531">返回 <see langword="String" /> 值，该值包含以 <see langword="Input" /> 或 <see langword="Binary" /> 模式打开的文件中的字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2531">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="165a7-2532">相比 <see langword="InputString" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="165a7-2533">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-2534">返回 <see langword="String" /> 值，该值包含以 <see langword="Input" /> 或 <see langword="Binary" /> 模式打开的文件中的字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2534">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="165a7-2535">相比 <see langword="InputString" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2536">`InputString`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2536">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2537">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2537">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2538">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2538">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2539">与读取的数据`InputString`函数通常通过使用写入到文件`Print`或`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2539">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="165a7-2540">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2540">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="165a7-2541">与不同`Input`函数，`InputString`函数将返回它所读取的所有字符。</span><span class="sxs-lookup"><span data-stu-id="165a7-2541">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="165a7-2542">这包括逗号、 回车符、 换行符、 引号和前导空格。</span><span class="sxs-lookup"><span data-stu-id="165a7-2542">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="165a7-2543">使用文件打开以进行`Binary`访问，请尝试使用通过文件读取`InputString`直到函数`EOF`返回`True`生成一个错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-2543">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="165a7-2544">使用`LOF`并`Loc`函数而不是`EOF`通过读取二进制文件时`InputString`，或使用`FileGet`当你使用`EOF`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2544">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2545">当从文件读取，不要根据文件扩展名的文件的内容的安全决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-2545">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="165a7-2546">例如，名为 form1.vb 的文件可能不是 Visual Basic 源文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2546">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2547">此示例使用`InputString`函数来从文件一次读取一个字符，并将其打印到`Output`窗口。</span><span class="sxs-lookup"><span data-stu-id="165a7-2547">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="165a7-2548">此示例假定`MyFile`是具有示例数据的多个行的文本文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2548">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2549">
            <paramref name="FileNumber" /> 不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2549">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-2550">
            <paramref name="CharCount" />&lt; 0 或 &gt; 214。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2550">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2551">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2551">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2552">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2552">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2553">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2553">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="165a7-2554">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2554">Required.</span>
          </span>
          <span data-ttu-id="165a7-2555">指定要删除的一个或多个文件名的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2555">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="165a7-2556">
            <paramref name="PathName" /> 可以包含驱动器和目录或文件夹。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2556">
              <paramref name="PathName" /> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2557">从磁盘中删除文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2557">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="165a7-2558">相比 <see langword="Kill" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2558">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="165a7-2559">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2559">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2560">`Kill` 支持使用多个字符 (`*`) 和单字符 (`?`) 通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2560">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="165a7-2561">**安全说明**若要执行，`Kill`函数要求`Read`并`PathDiscovery`标志的<xref:System.Security.Permissions.FileIOPermission>要对其授予对执行代码。</span><span class="sxs-lookup"><span data-stu-id="165a7-2561">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="165a7-2562">有关详细信息，请参阅<xref:System.Security.SecurityException>[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="165a7-2562">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2563">此示例使用`Kill`函数从磁盘中删除文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2563">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2564">目标文件打开。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2564">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="165a7-2565">目标文件未找到。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2565">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="165a7-2566">权限被拒绝。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2566">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2567">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2567">Required.</span>
          </span>
          <span data-ttu-id="165a7-2568">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2568">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2569">从打开的顺序文件中读取一行并将其赋值给一个 <see langword="String" /> 变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2569">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-2570">从打开的顺序文件中读取一行并将其赋值给一个 <see langword="String" /> 变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2570">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2571">`LineInput`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2571">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2572">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2572">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2573">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2573">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2574">与读取的数据`LineInput`通常通过使用写入到文件`Print`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2574">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2575">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="165a7-2575">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="165a7-2576">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2576">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="165a7-2577">`LineInput`函数从文件中的一个字符读取一次直到它遇到回车符 (`Chr(13)`) 或回车符/换行符 (`Chr(13) + Chr(10)`) 序列。</span><span class="sxs-lookup"><span data-stu-id="165a7-2577">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="165a7-2578">回车/换行符序列将跳过而不是追加到字符字符串。</span><span class="sxs-lookup"><span data-stu-id="165a7-2578">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2579">通过使用从文件中读取`LineInput`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2579">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2580">此示例使用`LineInput`函数来从顺序文件中读取一行，并将其分配给一个变量。</span><span class="sxs-lookup"><span data-stu-id="165a7-2580">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="165a7-2581">此示例假定`TestFile`是具有示例数据的多个行的文本文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2581">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="165a7-2582">到达文件末尾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2582">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2583">
            <paramref name="FileNumber" /> 不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2583">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2584">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2584">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2585">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2585">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2586">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2586">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2587">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2587">Required.</span>
          </span>
          <span data-ttu-id="165a7-2588">任何有效的 <see langword="Integer" /> 文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2588">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2589">返回指定打开文件中当前读/写位置的 <see langword="Long" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2589">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-2590">返回指定打开文件中当前读/写位置的 <see langword="Long" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2590">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2591">`Loc`函数是从零开始的使用它来检索文件中的第一个字节将返回 0。</span><span class="sxs-lookup"><span data-stu-id="165a7-2591">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="165a7-2592">`Loc`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2592">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2593">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2593">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2594">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2594">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2595">下面介绍每种文件访问模式的返回值：</span><span class="sxs-lookup"><span data-stu-id="165a7-2595">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="165a7-2596">模式</span><span class="sxs-lookup"><span data-stu-id="165a7-2596">Mode</span></span>|<span data-ttu-id="165a7-2597">返回值</span><span class="sxs-lookup"><span data-stu-id="165a7-2597">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="165a7-2598">读取或写入到文件中的最后一个记录的数目。</span><span class="sxs-lookup"><span data-stu-id="165a7-2598">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="165a7-2599">除以 128 文件中的当前字节位置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2599">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="165a7-2600">但是，返回的信息`Loc`的顺序文件不是使用也不需要。</span><span class="sxs-lookup"><span data-stu-id="165a7-2600">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="165a7-2601">读取或写入的最后一个字节的位置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2601">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2602">此示例使用`Loc`函数以返回打开的文件中的当前读/写位置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2602">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="165a7-2603">此示例假定`MyFile`是具有示例数据的多个行的文本文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2603">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2604">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2604">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="165a7-2605">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2605">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="165a7-2606">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2606">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="165a7-2607">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2607">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2608">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2608">Required.</span>
          </span>
          <span data-ttu-id="165a7-2609">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2609">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2610">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2610">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="165a7-2611">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2611">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="165a7-2612">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2612">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2613">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2613">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="165a7-2614">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="165a7-2614">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="165a7-2615">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="165a7-2615">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="165a7-2616">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2616">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="165a7-2617">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="165a7-2617">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="165a7-2618">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2618">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2619">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2619">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="165a7-2620">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2620">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2621">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2621">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2622">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2622">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2623">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2623">Required.</span>
          </span>
          <span data-ttu-id="165a7-2624">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2624">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="165a7-2625">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2625">Optional.</span>
          </span>
          <span data-ttu-id="165a7-2626">唯一要锁定或取消锁定的记录号或字节数</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2626">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2627">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2627">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="165a7-2628">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2628">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="165a7-2629">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2629">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2630">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2630">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="165a7-2631">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="165a7-2631">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="165a7-2632">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="165a7-2632">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="165a7-2633">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2633">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="165a7-2634">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="165a7-2634">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="165a7-2635">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2635">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2636">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2636">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="165a7-2637">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2637">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2638">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2638">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2639">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2639">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2640">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2640">Required.</span>
          </span>
          <span data-ttu-id="165a7-2641">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2641">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="165a7-2642">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2642">Optional.</span>
          </span>
          <span data-ttu-id="165a7-2643">第一个要锁定或取消锁定的记录号或字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2643">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="165a7-2644">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2644">Optional.</span>
          </span>
          <span data-ttu-id="165a7-2645">最后一个要锁定或取消锁定的记录号或字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2645">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2646">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2646">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="165a7-2647">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2647">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="165a7-2648">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2648">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2649">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2649">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="165a7-2650">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="165a7-2650">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="165a7-2651">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="165a7-2651">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="165a7-2652">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2652">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="165a7-2653">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="165a7-2653">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="165a7-2654">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2654">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2655">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2655">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="165a7-2656">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2656">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2657">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2657">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2658">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2658">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2659">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2659">Required.</span>
          </span>
          <span data-ttu-id="165a7-2660">一个包含有效文件号的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2660">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2661">返回一个 <see langword="Long" /> 值，该值表示使用 <see langword="FileOpen" /> 函数打开的文件的大小（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2661">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="165a7-2662">相比 <see langword="LOF" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2662">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="165a7-2663">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2663">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-2664">返回一个 <see langword="Long" /> 值，该值表示使用 <see langword="FileOpen" /> 函数打开的文件的大小（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2664">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="165a7-2665">相比 <see langword="LOF" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2665">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2666">使用`FileLen`函数以获取未打开的文件的长度。</span><span class="sxs-lookup"><span data-stu-id="165a7-2666">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2667">此示例使用`LOF`函数来确定打开的文件的大小。</span><span class="sxs-lookup"><span data-stu-id="165a7-2667">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="165a7-2668">此示例假定`TestFile`是一个文本文件，其中包含示例数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2668">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2669">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2669">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-2670">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2670">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-2671">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2671">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="165a7-2672">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2672">Required.</span>
          </span>
          <span data-ttu-id="165a7-2673">标识要创建的目录的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2673">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="165a7-2674">
            <paramref name="Path" /> 可以包含驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2674">The <paramref name="Path" /> may include the drive.</span>
          </span>
          <span data-ttu-id="165a7-2675">如果未指定驱动器，则 <see langword="MkDir" /> 在当前驱动器上创建新目录。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2675">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2676">新建目录。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2676">Creates a new directory.</span>
          </span>
          <span data-ttu-id="165a7-2677">相比 <see langword="MkDir" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2677">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="165a7-2678">有关详情，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2678">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2679">此函数创建一个新目录。</span><span class="sxs-lookup"><span data-stu-id="165a7-2679">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2680">此示例使用`MkDir`函数来创建一个目录。</span><span class="sxs-lookup"><span data-stu-id="165a7-2680">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="165a7-2681">如果未指定驱动器，则当前驱动器上创建新目录。</span><span class="sxs-lookup"><span data-stu-id="165a7-2681">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-2682">
            <paramref name="Path" /> 未指定或为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2682">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="165a7-2683">权限被拒绝。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2683">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2684">目录已存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2684">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md">
          <span data-ttu-id="165a7-2685">如何：在 Visual Basic 中创建目录</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2685">How to: Create a Directory in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2686">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2686">Required.</span>
          </span>
          <span data-ttu-id="165a7-2687">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2687">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="165a7-2688">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2688">Optional.</span>
          </span>
          <span data-ttu-id="165a7-2689">要写入文件的零个或多个由逗号分隔的表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2689">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="165a7-2690">
            <paramref name="Output" /> 参数的设置是：</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2690">The <paramref name="Output" /> argument settings are:</span>
          </span>
          <span data-ttu-id="165a7-2691">
            <see langword="T:System.IO.IOException" />：文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2691">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="165a7-2692">
            <see langword="T:System.IO.IOException" />：<paramref name="FileNumber" /> 不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2692">
              <see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2693">将已设置显示格式的数据写入顺序文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2693">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2694">`Print`和`PrintLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2694">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2695">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2695">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2696">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2696">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2697">`Print` 不包括换行符末尾的行;但是，`PrintLine`包括换行符。</span><span class="sxs-lookup"><span data-stu-id="165a7-2697">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="165a7-2698">与写入的数据`Print`从文件通常通过使用读取`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2698">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="165a7-2699">如果省略`Output`有关`PrintLine`，该文件; 有关打印一个空行`Print`，没有输出。</span><span class="sxs-lookup"><span data-stu-id="165a7-2699">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="165a7-2700">用逗号分隔的多个表达式将对齐选项卡边界，但混合使用逗号和`TAB`可能会导致不一致的结果。</span><span class="sxs-lookup"><span data-stu-id="165a7-2700">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="165a7-2701">有关`Boolean`数据，而是`True`或`False`打印。</span><span class="sxs-lookup"><span data-stu-id="165a7-2701">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="165a7-2702">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2702">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="165a7-2703">日期数据写入该文件使用您的系统所识别的标准的短日期格式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2703">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="165a7-2704">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2704">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="165a7-2705">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="165a7-2705">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="165a7-2706">但是，如果`Output`列表中的数据`DBNull`，`Null`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2706">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="165a7-2707">有关`Error`数据，输出将显示为`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2707">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="165a7-2708">`Error`关键字不会转换而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2708">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="165a7-2709">通过使用写入到文件的所有数据`Print`是国际上通用的; 即，数据的正确格式使用相应的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="165a7-2709">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="165a7-2710">如果用户想要输出以供多个区域设置数据`Write`应使用。</span><span class="sxs-lookup"><span data-stu-id="165a7-2710">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="165a7-2711">通过使用对文件进行写入`Print`或`PrintLine`函数要求`Write`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2711">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-2712">有关更多信息，请参见<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2712">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2713">此示例使用`Print`和`PrintLine`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2713">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2714">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2714">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2715">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2715">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2716">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2716">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2717">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2717">Required.</span>
          </span>
          <span data-ttu-id="165a7-2718">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2718">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="165a7-2719">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2719">Optional.</span>
          </span>
          <span data-ttu-id="165a7-2720">要写入文件的零个或多个由逗号分隔的表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2720">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="165a7-2721">
            <paramref name="Output" /> 参数的设置是：</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2721">The <paramref name="Output" /> argument settings are:</span>
          </span>
          <span data-ttu-id="165a7-2722">
            <see langword="T:System.IO.IOException" />：文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2722">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="165a7-2723">
            <see langword="T:System.IO.IOException" />：<paramref name="FileNumber" /> 不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2723">
              <see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2724">将已设置显示格式的数据写入顺序文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2724">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2725">`Print`和`PrintLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2725">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2726">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2726">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2727">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2727">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2728">`Print` 不包括换行符末尾的行;但是，`PrintLine`包括换行符。</span><span class="sxs-lookup"><span data-stu-id="165a7-2728">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="165a7-2729">与写入的数据`Print`从文件通常通过使用读取`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2729">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="165a7-2730">如果省略`Output`有关`PrintLine`，该文件; 有关打印一个空行`Print`，没有输出。</span><span class="sxs-lookup"><span data-stu-id="165a7-2730">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="165a7-2731">用逗号分隔的多个表达式将对齐选项卡边界，但混合使用逗号和`TAB`可能会导致不一致的结果。</span><span class="sxs-lookup"><span data-stu-id="165a7-2731">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="165a7-2732">有关`Boolean`数据，而是`True`或`False`打印。</span><span class="sxs-lookup"><span data-stu-id="165a7-2732">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="165a7-2733">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2733">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="165a7-2734">日期数据写入文件，通过使用系统所识别的标准的短日期格式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2734">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="165a7-2735">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2735">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="165a7-2736">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="165a7-2736">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="165a7-2737">但是，如果`Output`列表中的数据`DBNull`，`Null`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2737">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="165a7-2738">有关`Error`数据，输出将显示为`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2738">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="165a7-2739">`Error`关键字不会转换而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2739">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="165a7-2740">通过使用写入到文件的所有数据`Print`是国际上通用的; 即，数据的正确格式使用相应的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="165a7-2740">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="165a7-2741">如果用户想要输出以供多个区域设置数据`Write`应使用。</span><span class="sxs-lookup"><span data-stu-id="165a7-2741">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="165a7-2742">通过使用对文件进行写入`Print`或`PrintLine`函数要求`Write`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-2742">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-2743">有关更多信息，请参见<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2743">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2744">此示例使用`Print`和`PrintLine`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2744">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2745">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2745">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-2746">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2746">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-2747">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2747">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="165a7-2748">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2748">Required.</span>
          </span>
          <span data-ttu-id="165a7-2749">指定现有文件名和位置的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2749">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="165a7-2750">
            <paramref name="OldPath" /> 可包含文件的目录和驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2750">
              <paramref name="OldPath" /> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="165a7-2751">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2751">Required.</span>
          </span>
          <span data-ttu-id="165a7-2752">指定新文件名和位置的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2752">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="165a7-2753">
            <paramref name="NewPath" /> 可包含目标位置的目录和驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2753">
              <paramref name="NewPath" /> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="165a7-2754">
            <paramref name="NewPath" /> 指定的文件名不能是已存在的文件名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2754">The file name specified by <paramref name="NewPath" /> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2755">重命名磁盘文件或目录。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2755">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="165a7-2756">相比 <see langword="Rename" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2756">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="165a7-2757">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2757">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2758">`Rename`函数重命名文件，并将其移动到另一个目录，如有必要。</span><span class="sxs-lookup"><span data-stu-id="165a7-2758">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="165a7-2759">`Rename`函数可以将一个文件，在驱动器，但它只能重命名现有目录时同时`NewPath`和`OldPath`位于同一驱动器上。</span><span class="sxs-lookup"><span data-stu-id="165a7-2759">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="165a7-2760">`Rename` 无法创建新文件或目录。</span><span class="sxs-lookup"><span data-stu-id="165a7-2760">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="165a7-2761">使用`Rename`函数对打开的文件会产生错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-2761">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="165a7-2762">重命名之前，必须关闭打开的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2762">You must close an open file before renaming it.</span></span> <span data-ttu-id="165a7-2763">`Rename` 参数不能包含多个字符 （\*） 和单字符 （？） 通配符。</span><span class="sxs-lookup"><span data-stu-id="165a7-2763">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="165a7-2764">当使用`Rename`将文件从受保护的位置复制到受保护的位置，则文件，将保留不太受限制的权限。</span><span class="sxs-lookup"><span data-stu-id="165a7-2764">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="165a7-2765">检查以确保没有引入可能的安全风险。</span><span class="sxs-lookup"><span data-stu-id="165a7-2765">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2766">此示例使用`Rename`函数重命名文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2766">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="165a7-2767">对于此示例中，假定已指定的目录存在。</span><span class="sxs-lookup"><span data-stu-id="165a7-2767">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-2768">路径无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2768">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="165a7-2769">
            <paramref name="OldPath" /> 文件不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2769">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2770">无法重命名为不同的设备。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2770">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">
          <span data-ttu-id="165a7-2771">如何：在 Visual Basic 中重命名文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2771">How to: Rename a File in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="165a7-2772">关闭所有使用 <see langword="FileOpen" /> 函数打开的磁盘文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2772">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="165a7-2773">相比 <see langword="Reset" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="165a7-2774">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2775">`Reset`函数将关闭打开的所有活动文件`FileOpen`函数，并具有相同的功能`FileClose()`不带任何参数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2775">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2776">此示例使用`Reset`函数来关闭所有打开的文件，并将所有文件缓冲区的内容写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="165a7-2776">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="165a7-2777">请注意，使用`Object`变量`FileNumber`作为一个字符串和数字。</span><span class="sxs-lookup"><span data-stu-id="165a7-2777">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md">
          <span data-ttu-id="165a7-2778">End 语句</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2778">End Statement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="165a7-2779">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2779">Required.</span>
          </span>
          <span data-ttu-id="165a7-2780">标识要移除的目录或文件夹的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2780">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="165a7-2781">
            <paramref name="Path" /> 可以包含驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2781">
              <paramref name="Path" /> can include the drive.</span>
          </span>
          <span data-ttu-id="165a7-2782">如果未指定驱动器，则 <see langword="RmDir" /> 移除当前驱动器上的目录。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2782">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2783">移除现有目录。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2783">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="165a7-2784">相比 <see langword="RmDir" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2784">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="165a7-2785">有关详情，请参阅<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2785">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2786">如果你尝试使用出错`RmDir`上包含文件的目录。</span><span class="sxs-lookup"><span data-stu-id="165a7-2786">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="165a7-2787">使用`Kill`函数删除所有文件，再尝试删除一个目录。</span><span class="sxs-lookup"><span data-stu-id="165a7-2787">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2788">此示例使用`RmDir`函数来删除现有目录。</span><span class="sxs-lookup"><span data-stu-id="165a7-2788">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-2789">
            <paramref name="Path" /> 未指定或为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2789">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2790">目标目录包含文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2790">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="165a7-2791">目录不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2791">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="165a7-2792">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2792">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="165a7-2793">相比 <see langword="Seek" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2793">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="165a7-2794">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2794">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2795">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2795">Required.</span>
          </span>
          <span data-ttu-id="165a7-2796">一个包含有效文件号的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2796">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2797">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2797">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="165a7-2798">相比 <see langword="Seek" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2798">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="165a7-2799">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2799">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-2800">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2800">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2801">`Seek` 返回 1 和 2,147,483,647 之间的值 (等效于 2 ^31-1)，非独占。</span><span class="sxs-lookup"><span data-stu-id="165a7-2801">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="165a7-2802">下面介绍每个文件访问模式的返回的值：</span><span class="sxs-lookup"><span data-stu-id="165a7-2802">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="165a7-2803">模式</span><span class="sxs-lookup"><span data-stu-id="165a7-2803">Mode</span></span>|<span data-ttu-id="165a7-2804">返回值</span><span class="sxs-lookup"><span data-stu-id="165a7-2804">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="165a7-2805">读取或写入的下一个记录的数目</span><span class="sxs-lookup"><span data-stu-id="165a7-2805">Number of the next record read or written</span></span>|  
|<span data-ttu-id="165a7-2806">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="165a7-2806">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="165a7-2807">下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2807">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="165a7-2808">在文件中的第一个字节位于位置 1，第二个字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-2808">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2809">此示例使用`Seek`函数以返回当前文件位置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2809">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="165a7-2810">该示例假定`TestFile`是包含记录的结构的一个文件`Record`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2810">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="165a7-2811">打开的文件中`Random`模式下，`Seek`返回下一条记录的数目。</span><span class="sxs-lookup"><span data-stu-id="165a7-2811">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="165a7-2812">而不在模式下打开的文件`Random`模式下，`Seek`返回下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2812">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="165a7-2813">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2813">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="165a7-2814">此示例使用`Seek`函数将位置设置为下一次读取或写入的文件中。</span><span class="sxs-lookup"><span data-stu-id="165a7-2814">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="165a7-2815">而不在模式下打开的文件`Random`模式下，`Seek`设置下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2815">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="165a7-2816">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2816">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2817">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2817">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-2818">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2818">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-2819">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2819">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2820">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2820">Required.</span>
          </span>
          <span data-ttu-id="165a7-2821">一个包含有效文件号的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2821">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="165a7-2822">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2822">Required.</span>
          </span>
          <span data-ttu-id="165a7-2823">一个 1 到 2,147,483,647 范围内（包括 1 和 2,147,483,647）的数字，用于指示下一个读取/写入操作应该发生的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2823">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2824">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2824">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="165a7-2825">相比 <see langword="Seek" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2825">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="165a7-2826">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2826">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2827">`Seek` 返回 1 和 2,147,483,647 之间的值 (等效于 2 ^31-1)，非独占。</span><span class="sxs-lookup"><span data-stu-id="165a7-2827">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="165a7-2828">下面介绍每个文件访问模式的返回的值：</span><span class="sxs-lookup"><span data-stu-id="165a7-2828">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="165a7-2829">模式</span><span class="sxs-lookup"><span data-stu-id="165a7-2829">Mode</span></span>|<span data-ttu-id="165a7-2830">返回值</span><span class="sxs-lookup"><span data-stu-id="165a7-2830">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="165a7-2831">读取或写入的下一个记录的数目</span><span class="sxs-lookup"><span data-stu-id="165a7-2831">Number of the next record read or written</span></span>|  
|<span data-ttu-id="165a7-2832">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="165a7-2832">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="165a7-2833">下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2833">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="165a7-2834">在文件中的第一个字节位于位置 1，第二个字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="165a7-2834">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2835">此示例使用`Seek`函数以返回当前文件位置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2835">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="165a7-2836">该示例假定`TestFile`是包含记录的结构的一个文件`Record`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2836">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="165a7-2837">打开的文件中`Random`模式下，`Seek`返回下一条记录的数目。</span><span class="sxs-lookup"><span data-stu-id="165a7-2837">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="165a7-2838">而不在模式下打开的文件`Random`模式下，`Seek`返回下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2838">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="165a7-2839">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2839">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="165a7-2840">此示例使用`Seek`函数将位置设置为下一次读取或写入的文件中。</span><span class="sxs-lookup"><span data-stu-id="165a7-2840">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="165a7-2841">而不在模式下打开的文件`Random`模式下，`Seek`设置下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2841">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="165a7-2842">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2842">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2843">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2843">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="165a7-2844">从文件读取 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2844">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="165a7-2845">写入文件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2845">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="165a7-2846">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2846">Required.</span>
          </span>
          <span data-ttu-id="165a7-2847">指定一个文件名的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2847">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="165a7-2848">
            <paramref name="PathName" /> 可以包含驱动器和目录或文件夹。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2848">
              <paramref name="PathName" /> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="165a7-2849">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2849">Required.</span>
          </span>
          <span data-ttu-id="165a7-2850">常量或数值表达式，所有这些值一起指定文件特性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2850">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2851">设置文件的特性信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2851">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="165a7-2852">相比 <see langword="SetAttr" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2852">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="165a7-2853">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2853">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2854">如果您尝试设置打开的文件的属性，会发生运行时错误。</span><span class="sxs-lookup"><span data-stu-id="165a7-2854">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="165a7-2855">`Attributes`参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="165a7-2855">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="165a7-2856">“值”</span><span class="sxs-lookup"><span data-stu-id="165a7-2856">Value</span></span>|<span data-ttu-id="165a7-2857">返回的常量</span><span class="sxs-lookup"><span data-stu-id="165a7-2857">Constant</span></span>|<span data-ttu-id="165a7-2858">描述</span><span class="sxs-lookup"><span data-stu-id="165a7-2858">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="165a7-2859">正常 （默认值）。</span><span class="sxs-lookup"><span data-stu-id="165a7-2859">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="165a7-2860">只读。</span><span class="sxs-lookup"><span data-stu-id="165a7-2860">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="165a7-2861">隐藏。</span><span class="sxs-lookup"><span data-stu-id="165a7-2861">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="165a7-2862">系统文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2862">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="165a7-2863">卷标</span><span class="sxs-lookup"><span data-stu-id="165a7-2863">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="165a7-2864">目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="165a7-2864">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="165a7-2865">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="165a7-2865">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="165a7-2866">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="165a7-2866">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2867">这些枚举是由 Visual Basic 语言指定的。</span><span class="sxs-lookup"><span data-stu-id="165a7-2867">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="165a7-2868">名称可以是任意位置在代码中使用而不是实际值。</span><span class="sxs-lookup"><span data-stu-id="165a7-2868">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2869">此示例使用`SetAttr`函数设置的文件的属性。</span><span class="sxs-lookup"><span data-stu-id="165a7-2869">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="165a7-2870">
            <paramref name="Attribute" /> 类型无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2870">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="165a7-2871">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2871">Required.</span>
          </span>
          <span data-ttu-id="165a7-2872">在显示或输出列表中下一个表达式之前要插入的空格数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2872">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2873">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2873">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-2874">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2874">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2875">如果`Count`小于输出行宽下, 一个输出位置立即遵循打印的空格数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2875">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="165a7-2876">如果`Count`大于输出行宽，`SPC`计算使用的公式的下一步打印位置：</span><span class="sxs-lookup"><span data-stu-id="165a7-2876">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="165a7-2877">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="165a7-2877">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="165a7-2878">例如，如果当前输出位置为 24，输出行的宽度为 80，并指定`SPC(90)`下, 一步的输出将从开始位置 34 （当前打印位置 + 90/80 的其余部分）。</span><span class="sxs-lookup"><span data-stu-id="165a7-2878">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="165a7-2879">如果当前的输出位置和输出行宽度之间的区别是小于`Count`(或`Count` `Mod` *宽度*)，则`SPC`函数将跳至下一行，并生成空间等于`Count`– (*宽度*–*小于*)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2879">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2880">请确保表格列的宽度足以允许较宽的字母。</span><span class="sxs-lookup"><span data-stu-id="165a7-2880">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2881">此示例使用`SPC`函数以定位输出文件中并在**输出**窗口。</span><span class="sxs-lookup"><span data-stu-id="165a7-2881">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md">
          <span data-ttu-id="165a7-2882">Mod 运算符 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2882">Mod Operator (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="165a7-2883">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2883">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="165a7-2884">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2884">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-2885">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2885">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2886">如果当前行上的当前打印位置大于`Column`，`TAB`将跳到列的值等于`Column`下一步的输出行上。</span><span class="sxs-lookup"><span data-stu-id="165a7-2886">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="165a7-2887">如果`Column`小于 1，`TAB`将打印位置移动到第 1 列。</span><span class="sxs-lookup"><span data-stu-id="165a7-2887">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="165a7-2888">如果`Column`大于输出行宽，`TAB`计算使用的公式的下一步打印位置：</span><span class="sxs-lookup"><span data-stu-id="165a7-2888">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="165a7-2889">Mod 列宽</span><span class="sxs-lookup"><span data-stu-id="165a7-2889">Column Mod width</span></span>  
  
 <span data-ttu-id="165a7-2890">例如，如果*宽度*是 80，并指定`TAB(90)`下, 一步的输出将从开始第 10 （90/80 的余数） 列。</span><span class="sxs-lookup"><span data-stu-id="165a7-2890">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="165a7-2891">如果`Column`小于当前打印位置，开始计算的输出位置的下一行上。</span><span class="sxs-lookup"><span data-stu-id="165a7-2891">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="165a7-2892">如果计算出的打印位置大于当前打印位置，打印开始计算打印位置在同一行。</span><span class="sxs-lookup"><span data-stu-id="165a7-2892">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="165a7-2893">输出行上最左侧的打印位置始终为 1。</span><span class="sxs-lookup"><span data-stu-id="165a7-2893">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="165a7-2894">当你使用`Print`或`PrintLine`函数来打印到文件，右侧的输出位置是输出文件，您可以使用设置的当前宽度`FileWidth`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2894">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="165a7-2895">`TAB`函数也可以用于`WriteLine`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2895">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="165a7-2896">它不能用于<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2896">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2897">请确保表格列的宽度足以包含较宽的字母。</span><span class="sxs-lookup"><span data-stu-id="165a7-2897">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2898">此示例使用`TAB`函数以定位输出文件中并在**输出**窗口。</span><span class="sxs-lookup"><span data-stu-id="165a7-2898">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md">
          <span data-ttu-id="165a7-2899">Mod 运算符 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2899">Mod Operator (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="165a7-2900">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2900">Optional.</span>
          </span>
          <span data-ttu-id="165a7-2901">在显示或输出列表中下一个表达式之前要移动到的列号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2901">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="165a7-2902">如果省略它，则 <see langword="TAB" /> 将插入点移动到下一个打印区域的开始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2902">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2903">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2903">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="165a7-2904">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2904">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2905">如果当前行上的当前打印位置大于`Column`，`TAB`将跳到列的值等于`Column`下一步的输出行上。</span><span class="sxs-lookup"><span data-stu-id="165a7-2905">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="165a7-2906">如果`Column`小于 1，`TAB`将打印位置移动到第 1 列。</span><span class="sxs-lookup"><span data-stu-id="165a7-2906">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="165a7-2907">如果`Column`大于输出行宽，`TAB`计算使用的公式的下一步打印位置：</span><span class="sxs-lookup"><span data-stu-id="165a7-2907">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="165a7-2908">Mod 列宽</span><span class="sxs-lookup"><span data-stu-id="165a7-2908">Column Mod width</span></span>  
  
 <span data-ttu-id="165a7-2909">例如，如果*宽度*是 80，并指定`TAB(90)`下, 一步的输出将从开始第 10 （90/80 的余数） 列。</span><span class="sxs-lookup"><span data-stu-id="165a7-2909">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="165a7-2910">如果`Column`小于当前打印位置，开始计算的输出位置的下一行上。</span><span class="sxs-lookup"><span data-stu-id="165a7-2910">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="165a7-2911">如果计算出的打印位置大于当前打印位置，打印开始计算打印位置在同一行。</span><span class="sxs-lookup"><span data-stu-id="165a7-2911">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="165a7-2912">输出行上最左侧的打印位置始终为 1。</span><span class="sxs-lookup"><span data-stu-id="165a7-2912">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="165a7-2913">当你使用`Print`或`PrintLine`函数来打印到文件，右侧的输出位置是输出文件，您可以使用设置的当前宽度`FileWidth`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2913">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="165a7-2914">`TAB`函数也可以用于`WriteLine`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2914">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="165a7-2915">它不能用于<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="165a7-2915">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="165a7-2916">请确保表格列的宽度足以包含较宽的字母。</span><span class="sxs-lookup"><span data-stu-id="165a7-2916">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2917">此示例使用`TAB`函数以定位输出文件中并在**输出**窗口。</span><span class="sxs-lookup"><span data-stu-id="165a7-2917">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md">
          <span data-ttu-id="165a7-2918">Mod 运算符 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2918">Mod Operator (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="165a7-2919">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2919">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="165a7-2920">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2920">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="165a7-2921">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2921">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2922">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2922">Required.</span>
          </span>
          <span data-ttu-id="165a7-2923">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2923">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2924">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2924">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="165a7-2925">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2925">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="165a7-2926">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2926">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2927">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2927">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="165a7-2928">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="165a7-2928">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="165a7-2929">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="165a7-2929">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="165a7-2930">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2930">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="165a7-2931">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="165a7-2931">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="165a7-2932">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2932">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2933">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2933">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="165a7-2934">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2934">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2935">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2935">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2936">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2936">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2937">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2937">Required.</span>
          </span>
          <span data-ttu-id="165a7-2938">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2938">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="165a7-2939">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2939">Optional.</span>
          </span>
          <span data-ttu-id="165a7-2940">唯一要锁定或取消锁定的记录号或字节数</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2940">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2941">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2941">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="165a7-2942">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2942">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="165a7-2943">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2943">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2944">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2944">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="165a7-2945">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="165a7-2945">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="165a7-2946">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="165a7-2946">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="165a7-2947">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2947">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="165a7-2948">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="165a7-2948">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="165a7-2949">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2949">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2950">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2950">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="165a7-2951">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2951">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2952">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2952">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2953">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2953">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2954">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2954">Required.</span>
          </span>
          <span data-ttu-id="165a7-2955">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2955">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="165a7-2956">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2956">Optional.</span>
          </span>
          <span data-ttu-id="165a7-2957">第一个要锁定或取消锁定的记录号或字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2957">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="165a7-2958">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2958">Optional.</span>
          </span>
          <span data-ttu-id="165a7-2959">最后一个要锁定或取消锁定的记录号或字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2959">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2960">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2960">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="165a7-2961">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2961">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="165a7-2962">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2962">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2963">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2963">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="165a7-2964">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="165a7-2964">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="165a7-2965">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="165a7-2965">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="165a7-2966">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2966">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="165a7-2967">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="165a7-2967">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="165a7-2968">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2968">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-2969">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="165a7-2969">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="165a7-2970">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2970">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-2971">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2971">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-2972">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2972">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-2973">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2973">Required.</span>
          </span>
          <span data-ttu-id="165a7-2974">包含任何有效文件数的 <see langword="Integer" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2974">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="165a7-2975">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2975">Optional.</span>
          </span>
          <span data-ttu-id="165a7-2976">要写入文件的一个或多个由逗号分隔的表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2976">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-2977">将数据写入一个顺序文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2977">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="165a7-2978">通常使用 <see langword="Input" /> 从文件中读取使用 <see langword="Write" /> 编写的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-2978">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-2979">`Write`和`WriteLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2979">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-2980">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-2980">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-2981">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-2981">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-2982">如果省略`Output`，向文件打印一个空行。</span><span class="sxs-lookup"><span data-stu-id="165a7-2982">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="165a7-2983">可以用逗号分隔多个表达式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2983">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="165a7-2984">与不同`Print`函数，`Write`函数之间插入逗号项和引号将字符串写入该文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2984">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="165a7-2985">无需显式分隔符放入列表。</span><span class="sxs-lookup"><span data-stu-id="165a7-2985">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="165a7-2986">当`Write`用于将数据写入到文件中，仅数字`Boolean`，日期、 null 和`Error`支持数据格式。</span><span class="sxs-lookup"><span data-stu-id="165a7-2986">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="165a7-2987">下面的通用假设遵循这样的数据始终能够阅读和正确解释使用`Input`，无论区域设置：</span><span class="sxs-lookup"><span data-stu-id="165a7-2987">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="165a7-2988">使用句点作为小数分隔符始终写入数值数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-2988">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="165a7-2989">有关`Boolean`数据，而是`#TRUE#`或`#FALSE#`打印。</span><span class="sxs-lookup"><span data-stu-id="165a7-2989">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="165a7-2990">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2990">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="165a7-2991">日期数据写入到使用通用日期格式的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2991">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="165a7-2992">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2992">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="165a7-2993">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="165a7-2993">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="165a7-2994">但是，对于 null 数据`#NULL#`写入。</span><span class="sxs-lookup"><span data-stu-id="165a7-2994">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="165a7-2995">有关`Error`数据，输出将显示为`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="165a7-2995">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="165a7-2996">`Error`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="165a7-2996">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="165a7-2997">`WriteLine` 将插入一个换行符 (即回车符/换行符，或`Chr(13) + Chr(10)`)，在其写入的最后一个字符后`Output`的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-2997">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="165a7-2998">您可以通过使用双引号引起来，在字符串中嵌入引号或""。</span><span class="sxs-lookup"><span data-stu-id="165a7-2998">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="165a7-2999">例如，应用于对象的</span><span class="sxs-lookup"><span data-stu-id="165a7-2999">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="165a7-3000">返回一个字符串值为`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="165a7-3000">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="165a7-3001">通过使用对文件进行写入`Write`或`WriteLine`函数要求`Append`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-3001">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-3002">有关更多信息，请参见<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-3002">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-3003">此示例使用`Write`函数将原始数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-3003">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="165a7-3004">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-3004">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-3005">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-3005">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-3006">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-3006">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-3007">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-3007">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="165a7-3008">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-3008">Required.</span>
          </span>
          <span data-ttu-id="165a7-3009">包含任何有效文件数的 <see langword="Integer" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-3009">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="165a7-3010">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-3010">Optional.</span>
          </span>
          <span data-ttu-id="165a7-3011">要写入文件的一个或多个由逗号分隔的表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-3011">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="165a7-3012">将数据写入一个顺序文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-3012">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="165a7-3013">通常使用 <see langword="Input" /> 从文件中读取使用 <see langword="Write" /> 编写的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-3013">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="165a7-3014">`Write`和`WriteLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-3014">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="165a7-3015">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="165a7-3015">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="165a7-3016">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="165a7-3016">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="165a7-3017">如果省略`Output`，向文件打印一个空行。</span><span class="sxs-lookup"><span data-stu-id="165a7-3017">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="165a7-3018">可以用逗号分隔多个表达式。</span><span class="sxs-lookup"><span data-stu-id="165a7-3018">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="165a7-3019">与不同`Print`函数，`Write`函数之间插入逗号项和引号将字符串写入该文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-3019">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="165a7-3020">无需显式分隔符放入列表。</span><span class="sxs-lookup"><span data-stu-id="165a7-3020">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="165a7-3021">当`Write`用于将数据写入到文件中，仅数字`Boolean`，日期、 null 和`Error`支持数据格式。</span><span class="sxs-lookup"><span data-stu-id="165a7-3021">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="165a7-3022">下面的通用假设遵循这样的数据始终能够阅读和正确解释使用`Input`，无论区域设置：</span><span class="sxs-lookup"><span data-stu-id="165a7-3022">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="165a7-3023">使用句点作为小数分隔符始终写入数值数据。</span><span class="sxs-lookup"><span data-stu-id="165a7-3023">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="165a7-3024">有关`Boolean`数据，而是`#TRUE#`或`#FALSE#`打印。</span><span class="sxs-lookup"><span data-stu-id="165a7-3024">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="165a7-3025">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="165a7-3025">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="165a7-3026">日期数据写入到使用通用日期格式的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-3026">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="165a7-3027">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-3027">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="165a7-3028">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="165a7-3028">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="165a7-3029">但是，对于 null 数据`#NULL#`写入。</span><span class="sxs-lookup"><span data-stu-id="165a7-3029">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="165a7-3030">有关`Error`数据，输出将显示为`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="165a7-3030">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="165a7-3031">`Error`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="165a7-3031">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="165a7-3032">`WriteLine` 将插入一个换行符 (即回车符/换行符，或`Chr(13) + Chr(10)`)，在其写入的最后一个字符后`Output`的文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-3032">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="165a7-3033">您可以通过使用双引号引起来，在字符串中嵌入引号或""。</span><span class="sxs-lookup"><span data-stu-id="165a7-3033">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="165a7-3034">例如，应用于对象的</span><span class="sxs-lookup"><span data-stu-id="165a7-3034">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="165a7-3035">返回一个字符串值为`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="165a7-3035">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="165a7-3036">通过使用对文件进行写入`Write`或`WriteLine`函数要求`Append`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="165a7-3036">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="165a7-3037">有关更多信息，请参见<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="165a7-3037">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="165a7-3038">此示例使用`Write`函数将原始数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="165a7-3038">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="165a7-3039">使用 Visual Basic 访问文件</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-3039">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="165a7-3040">如何：在 Visual Basic 中向文件内写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-3040">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="165a7-3041">如何： 使用 Streamwriter (Visual Basic 中) 的文件中写入文本</span>
          <span class="sxs-lookup">
            <span data-stu-id="165a7-3041">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>