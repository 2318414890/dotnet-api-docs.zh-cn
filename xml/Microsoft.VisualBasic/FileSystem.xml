<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="934f06896ded78a1be250bb2062ad8017ce8cb49" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58462094" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="bba99-101"><see langword="FileSystem" /> 模块包含用于执行文件、目录或文件夹以及系统操作的过程。</span><span class="sxs-lookup"><span data-stu-id="bba99-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="bba99-102">与使用 <see langword="My" /> 模块相比，<see langword="FileSystem" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="bba99-103">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-104">此模块支持的 Visual Basic 语言关键字和访问文件和文件夹的运行时库成员。</span><span class="sxs-lookup"><span data-stu-id="bba99-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-105">此示例使用`GetAttr`函数来确定文件和目录或文件夹的属性。</span><span class="sxs-lookup"><span data-stu-id="bba99-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md"><span data-ttu-id="bba99-106">目录和文件摘要</span><span class="sxs-lookup"><span data-stu-id="bba99-106">Directories and Files Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md"><span data-ttu-id="bba99-107">输入和输出摘要</span><span class="sxs-lookup"><span data-stu-id="bba99-107">Input and Output Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="bba99-108">关键字 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="bba99-109">Visual Basic 运行时库成员</span><span class="sxs-lookup"><span data-stu-id="bba99-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="bba99-110">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-110">Required.</span></span> <span data-ttu-id="bba99-111">一个字符串表达式，用于标识哪个目录或文件夹将成为新的默认目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="bba99-111">A string expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="bba99-112"><paramref name="Path" /> 可以包含驱动器。</span><span class="sxs-lookup"><span data-stu-id="bba99-112"><paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="bba99-113">如果未指定驱动器，则 <see langword="ChDir" /> 更改当前驱动器上的默认目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="bba99-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="bba99-114">更改当前目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="bba99-114">Changes the current directory or folder.</span></span> <span data-ttu-id="bba99-115">与 <see langword="My" /> 函数相比，<see langword="ChDir" /> 功能在文件 I/O 操作方面可提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="bba99-116">有关更多信息，请参见<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-117">`ChDir`函数更改默认目录，但不是在默认驱动器。</span><span class="sxs-lookup"><span data-stu-id="bba99-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="bba99-118">例如，如果默认驱动器为 C，以下语句更改驱动器 D 上的默认目录，但 C 仍保留默认的驱动器：</span><span class="sxs-lookup"><span data-stu-id="bba99-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="bba99-119">您可以进行相对目录更改为通过键入两个句点，如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-120">`ChDir`函数需要非托管的代码权限，这可能会影响在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="bba99-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="bba99-121">有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>和。</span><span class="sxs-lookup"><span data-stu-id="bba99-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-122">此示例使用`ChDir`函数来更改当前目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="bba99-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-123"><paramref name="Path" /> 为空。</span><span class="sxs-lookup"><span data-stu-id="bba99-123"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="bba99-124">指定的驱动器无效，或驱动器不可用。</span><span class="sxs-lookup"><span data-stu-id="bba99-124">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md"><span data-ttu-id="bba99-125">如何：在 Visual Basic 中分析文件路径</span><span class="sxs-lookup"><span data-stu-id="bba99-125">How to: Parse File Paths in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md"><span data-ttu-id="bba99-126">创建、删除和移动文件和目录 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bba99-127">更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="bba99-127">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="bba99-128">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-128">Required.</span></span> <span data-ttu-id="bba99-129">指定现有驱动器的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-129">String expression that specifies an existing drive.</span></span> <span data-ttu-id="bba99-130">如果提供一个零长度字符串 ("")，则当前驱动器不会更改。</span><span class="sxs-lookup"><span data-stu-id="bba99-130">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="bba99-131">如果 <paramref name="Drive" /> 参数为多字符字符串，<see langword="ChDrive" /> 将仅使用第一个字母。</span><span class="sxs-lookup"><span data-stu-id="bba99-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="bba99-132">更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="bba99-132">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-133">`ChDrive`函数需要非托管代码的权限，这可能会影响其在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="bba99-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="bba99-134">有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>并[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="bba99-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-135">此示例使用`ChDrive`函数来更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="bba99-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="bba99-136">如果驱动器不存在，该函数将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-137">指定的驱动器无效，或驱动器不可用。</span><span class="sxs-lookup"><span data-stu-id="bba99-137">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-138">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-138">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="bba99-139">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-139">Required.</span></span> <span data-ttu-id="bba99-140">指定现有驱动器的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-140">String expression that specifies an existing drive.</span></span> <span data-ttu-id="bba99-141">如果提供一个零长度字符串 ("")，则当前驱动器不会更改。</span><span class="sxs-lookup"><span data-stu-id="bba99-141">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="bba99-142">如果 <paramref name="Drive" /> 参数为多字符字符串，<see langword="ChDrive" /> 将仅使用第一个字母。</span><span class="sxs-lookup"><span data-stu-id="bba99-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="bba99-143">更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="bba99-143">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-144">`ChDrive`函数需要非托管代码的权限，这可能会影响其在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="bba99-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="bba99-145">有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>并[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="bba99-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-146">此示例使用`ChDrive`函数来更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="bba99-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="bba99-147">如果驱动器不存在，该函数将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-148">指定的驱动器无效，或驱动器不可用。</span><span class="sxs-lookup"><span data-stu-id="bba99-148">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-149">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-149">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bba99-150">返回表示当前路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-150">Returns a string representing the current path.</span></span> <span data-ttu-id="bba99-151">与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="bba99-152">有关详情，请参阅<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bba99-153">返回表示当前路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-153">Returns a string representing the current path.</span></span> <span data-ttu-id="bba99-154">与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="bba99-155">有关详情，请参阅<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="bba99-156">表示当前路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="bba99-157">此示例使用`CurDir`函数以返回当前路径。</span><span class="sxs-lookup"><span data-stu-id="bba99-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="bba99-158">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-158">Optional.</span></span> <span data-ttu-id="bba99-159">指定现有驱动器的 <see langword="Char" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-159"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="bba99-160">如果未指定驱动器或 <paramref name="Drive" /> 是长度为零的字符串 ("")，则 <see langword="CurDir" /> 返回当前驱动器的路径。</span><span class="sxs-lookup"><span data-stu-id="bba99-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="bba99-161">返回表示当前路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-161">Returns a string representing the current path.</span></span> <span data-ttu-id="bba99-162">与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="bba99-163">有关详情，请参阅<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="bba99-164">表示当前路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-164">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="bba99-165">此示例使用`CurDir`函数以返回当前路径。</span><span class="sxs-lookup"><span data-stu-id="bba99-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bba99-166">返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="bba99-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="bba99-167">与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="bba99-168">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bba99-169">返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="bba99-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="bba99-170">与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="bba99-171">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="bba99-172">一个字符串，表示与指定模式或文件特性匹配的文件、目录或文件夹的名称，或者表示驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="bba99-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-173">`Dir`函数支持多个字符的使用 (`*`) 和单字符 (`?`) 通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="bba99-174">`VbVolume` 返回而不是特定文件名的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="bba99-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="bba99-175">必须提供`PathName`第一次调用`Dir`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="bba99-176">若要检索的下一项，你可以后续调用`Dir`不带参数的函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-177">若要正确运行，`Dir`函数需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>并<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>标志的<xref:System.Security.Permissions.FileIOPermission>要对其授予对执行代码。</span><span class="sxs-lookup"><span data-stu-id="bba99-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="bba99-178">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，并[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="bba99-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="bba99-179">`Attributes`参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="bba99-180">值</span><span class="sxs-lookup"><span data-stu-id="bba99-180">Value</span></span>|<span data-ttu-id="bba99-181">返回的常量</span><span class="sxs-lookup"><span data-stu-id="bba99-181">Constant</span></span>|<span data-ttu-id="bba99-182">描述</span><span class="sxs-lookup"><span data-stu-id="bba99-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="bba99-183">默认。</span><span class="sxs-lookup"><span data-stu-id="bba99-183">Default.</span></span> <span data-ttu-id="bba99-184">指定文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="bba99-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="bba99-185">指定只读文件，以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="bba99-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="bba99-186">指定隐藏的文件，以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="bba99-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="bba99-187">指定系统文件以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="bba99-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="bba99-188">指定卷标签;如果指定任何其他属性，则`vbVolume`将被忽略。</span><span class="sxs-lookup"><span data-stu-id="bba99-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="bba99-189">指定目录或文件夹，以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="bba99-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="bba99-190">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="bba99-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="bba99-191">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="bba99-192">这些枚举所指定的 Visual Basic 语言并可以在任意位置而不是实际值在代码中。</span><span class="sxs-lookup"><span data-stu-id="bba99-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-193">此示例使用`Dir`函数检查是否存在某些文件和目录。</span><span class="sxs-lookup"><span data-stu-id="bba99-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0;netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0;netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="bba99-194">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-194">Optional.</span></span> <span data-ttu-id="bba99-195">一个字符串表达式，用于指定文件名、目录或文件夹名或者驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="bba99-195">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="bba99-196">如果未找到 <paramref name="PathName" />，则返回一个零长度字符串 (<see langword="&quot;&quot;" />)。</span><span class="sxs-lookup"><span data-stu-id="bba99-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Pathname"><span data-ttu-id="bba99-197">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-197">Optional.</span></span> <span data-ttu-id="bba99-198">一个字符串表达式，用于指定文件名、目录或文件夹名或者驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="bba99-198">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="bba99-199">如果未找到 <paramref name="Pathname" />，则返回一个零长度字符串 (<see langword="&quot;&quot;" />)。</span><span class="sxs-lookup"><span data-stu-id="bba99-199">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="Pathname" /> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="bba99-200">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-200">Optional.</span></span> <span data-ttu-id="bba99-201">其值指定文件特性的枚举或数值表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-201">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="bba99-202">如果省略，则 <see langword="Dir" /> 将返回与 <paramref name="Pathname" /> 匹配但不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-202">If omitted, <see langword="Dir" /> returns files that match <paramref name="Pathname" /> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="bba99-203">返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="bba99-203">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="bba99-204">与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-204">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="bba99-205">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-205">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="bba99-206">一个字符串，表示与指定模式或文件特性匹配的文件、目录或文件夹的名称，或者表示驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="bba99-206">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-207">`Dir`函数支持多个字符的使用 (`*`) 和单字符 (`?`) 通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-207">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="bba99-208">`VbVolume` 返回而不是特定文件名的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="bba99-208">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="bba99-209">必须提供`PathName`第一次调用`Dir`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-209">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="bba99-210">若要检索的下一项，你可以后续调用`Dir`不带任何参数的函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-210">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-211">若要正确运行，`Dir`函数需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>并<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>标志的<xref:System.Security.Permissions.FileIOPermission>要对其授予对执行代码。</span><span class="sxs-lookup"><span data-stu-id="bba99-211">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="bba99-212">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，并[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="bba99-212">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="bba99-213">`Attributes`参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-213">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="bba99-214">值</span><span class="sxs-lookup"><span data-stu-id="bba99-214">Value</span></span>|<span data-ttu-id="bba99-215">返回的常量</span><span class="sxs-lookup"><span data-stu-id="bba99-215">Constant</span></span>|<span data-ttu-id="bba99-216">描述</span><span class="sxs-lookup"><span data-stu-id="bba99-216">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="bba99-217">默认。</span><span class="sxs-lookup"><span data-stu-id="bba99-217">Default.</span></span> <span data-ttu-id="bba99-218">指定不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-218">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="bba99-219">指定只读文件，除了不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-219">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="bba99-220">指定隐藏的文件，除了不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-220">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="bba99-221">指定系统文件，除了不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-221">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="bba99-222">指定卷标签;如果指定任何其他属性，则`vbVolume`将被忽略。</span><span class="sxs-lookup"><span data-stu-id="bba99-222">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="bba99-223">指定目录或文件夹，以及不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-223">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="bba99-224">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="bba99-224">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="bba99-225">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-225">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="bba99-226">这些枚举所指定的 Visual Basic 语言，并可以代替实际值在代码中任意位置使用。</span><span class="sxs-lookup"><span data-stu-id="bba99-226">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-227">此示例使用`Dir`函数检查是否存在某些文件和目录。</span><span class="sxs-lookup"><span data-stu-id="bba99-227">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-228">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-228">Required.</span></span> <span data-ttu-id="bba99-229">一个包含任何有效文件号的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-229">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="bba99-230">当达到为进行 <see langword="True" /> 或顺序 <see langword="Random" /> 而打开的文件的结尾时，此方法返回布尔值 <see langword="Input" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-230">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="bba99-231">当达到为进行 <see langword="Random" /> 或顺序 <see langword="Input" /> 而打开的文件的结尾时，为布尔值 <see langword="True" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-231">A Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-232">使用`EOF`以避免通过尝试获取输入文件的末尾而产生的错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-232">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="bba99-233">`EOF`函数返回`False`直到达到文件末尾。</span><span class="sxs-lookup"><span data-stu-id="bba99-233">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="bba99-234">使用文件打开以进行`Random`或`Binary`访问权限，`EOF`返回`False`直到最后一个执行`FileGet`函数不能读取完整记录。</span><span class="sxs-lookup"><span data-stu-id="bba99-234">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="bba99-235">使用文件打开以进行`Binary`访问，请尝试通过文件使用读取`Input`直到函数`EOF`返回`True`生成一个错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-235">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="bba99-236">使用`LOF`并`Loc`函数而不是`EOF`使用二进制文件中读取时`Input`，或使用`Get`时使用`EOF`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-236">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="bba99-237">使用文件打开以进行`Output`，`EOF`始终返回`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-237">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-238">此示例使用`EOF`函数来检测文件的末尾。</span><span class="sxs-lookup"><span data-stu-id="bba99-238">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="bba99-239">此示例假定`Testfile`是一个文本文件，其中包含若干行文本。</span><span class="sxs-lookup"><span data-stu-id="bba99-239">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-240">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-240">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-241">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-241">Required.</span></span> <span data-ttu-id="bba99-242"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-242"><see langword="Integer" />.</span></span> <span data-ttu-id="bba99-243">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-243">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="bba99-244">返回一个枚举，该枚举表示使用 <see langword="FileOpen" /> 函数打开的文件的文件模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-244">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="bba99-245">与 <see langword="FileAttr" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-245">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="bba99-246">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-246">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="bba99-247">下列枚举值指示文件访问模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-247">The following enumeration values indicate the file access mode:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="bba99-248">值</span><span class="sxs-lookup"><span data-stu-id="bba99-248">Value</span></span> 
 </term><description> <span data-ttu-id="bba99-249">模式</span><span class="sxs-lookup"><span data-stu-id="bba99-249">Mode</span></span> 
 </description></item><item><term> <span data-ttu-id="bba99-250">1</span><span class="sxs-lookup"><span data-stu-id="bba99-250">1</span></span> 
 </term><description><see langword="OpenMode.Input" /></description></item><item><term> <span data-ttu-id="bba99-251">2</span><span class="sxs-lookup"><span data-stu-id="bba99-251">2</span></span> 
 </term><description><see langword="OpenMode.Output" /></description></item><item><term> <span data-ttu-id="bba99-252">4</span><span class="sxs-lookup"><span data-stu-id="bba99-252">4</span></span> 
 </term><description><see langword="OpenMode.Random" /></description></item><item><term> <span data-ttu-id="bba99-253">8</span><span class="sxs-lookup"><span data-stu-id="bba99-253">8</span></span> 
 </term><description><see langword="OpenMode.Append" /></description></item><item><term> <span data-ttu-id="bba99-254">32</span><span class="sxs-lookup"><span data-stu-id="bba99-254">32</span></span> 
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-255">此函数返回一个枚举，表示使用打开的文件的文件模式`FileOpen`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-255">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-256">此示例使用`FileAttr`函数以返回打开的文件的文件模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-256">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-257">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-257">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="bba99-258">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-258">Optional.</span></span> <span data-ttu-id="bba99-259">要关闭的 0 个或多个信道的参数数组。</span><span class="sxs-lookup"><span data-stu-id="bba99-259">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="bba99-260">关闭对用 <see langword="FileOpen" /> 函数打开的文件的输入/输出 (I/O)。</span><span class="sxs-lookup"><span data-stu-id="bba99-260">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="bba99-261"><see langword="My" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-261"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="bba99-262">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-262">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-263">`FileClose`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-263">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-264">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-264">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-265">有关详细信息，请参阅[如何：从文件使用 StreamReader 读取文本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)，[如何：使用 StreamWriter 向文件写入文本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)，和[演练：Visual Basic 中操作文件和目录](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-265">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="bba99-266">如果省略`FileNumbers`，打开的所有活动文件`FileOpen`函数将关闭。</span><span class="sxs-lookup"><span data-stu-id="bba99-266">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="bba99-267">当您关闭已打开的文件`Output`或`Append`，最终输出缓冲区写入到该文件的操作系统缓冲区。</span><span class="sxs-lookup"><span data-stu-id="bba99-267">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="bba99-268">所有关联的缓冲区空间使用的已关闭发布文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-268">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="bba99-269">当`FileClose`执行函数，而其文件的文件的关联数字结束。</span><span class="sxs-lookup"><span data-stu-id="bba99-269">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-270">此示例使用`FileClose`函数来关闭文件打开以进行`Input`。</span><span class="sxs-lookup"><span data-stu-id="bba99-270">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-271"><paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="bba99-271"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="bba99-272">End 语句</span><span class="sxs-lookup"><span data-stu-id="bba99-272">End Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md"><span data-ttu-id="bba99-273">Stop 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-273">Stop Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-274">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-274">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="bba99-275">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-275">Required.</span></span> <span data-ttu-id="bba99-276">指定要复制的文件的名称的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-276">A string expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="bba99-277"><paramref name="Source" /> 可以包含源文件的驱动器和目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="bba99-277"><paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="bba99-278">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-278">Required.</span></span> <span data-ttu-id="bba99-279">指定目标文件名的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-279">A string expression that specifies the destination file name.</span></span> <span data-ttu-id="bba99-280"><paramref name="Destination" /> 可包含目标文件的驱动器和目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="bba99-280"><paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="bba99-281">复制文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-281">Copies a file.</span></span> <span data-ttu-id="bba99-282">与 <see langword="FileCopy" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-282">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="bba99-283">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-283">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-284">如果尝试使用`FileCopy`函数上当前打开的文件，就会出错。</span><span class="sxs-lookup"><span data-stu-id="bba99-284">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="bba99-285">`FileCopy` 需要完全信任才能在本地驱动器上工作。</span><span class="sxs-lookup"><span data-stu-id="bba99-285">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-286">此示例使用`FileCopy`函数将一个文件复制到另一个。</span><span class="sxs-lookup"><span data-stu-id="bba99-286">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="bba99-287">在此示例中，假定`SrcFile`是包含数据的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-287">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-288"><paramref name="Source" /> 或 <paramref name="Destination" /> 无效或未指定。</span><span class="sxs-lookup"><span data-stu-id="bba99-288"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-289">文件已打开。</span><span class="sxs-lookup"><span data-stu-id="bba99-289">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="bba99-290">文件不存在。</span><span class="sxs-lookup"><span data-stu-id="bba99-290">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md"><span data-ttu-id="bba99-291">如何：在 Visual Basic 中在不同的目录中创建文件的副本</span><span class="sxs-lookup"><span data-stu-id="bba99-291">How to: Create a Copy of a File in a Different Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md"><span data-ttu-id="bba99-292">如何：在同一目录中创建文件副本 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-292">How to: Create a Copy of a File in the Same Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md"><span data-ttu-id="bba99-293">如何：在 Visual Basic 中将一个目录复制到另一个目录</span><span class="sxs-lookup"><span data-stu-id="bba99-293">How to: Copy a Directory to Another Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="bba99-294">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-294">Required.</span></span> <span data-ttu-id="bba99-295">指定一个文件名的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-295">A string expression that specifies a file name.</span></span> <span data-ttu-id="bba99-296"><paramref name="PathName" /> 可能包括目录或文件夹以及驱动器。</span><span class="sxs-lookup"><span data-stu-id="bba99-296"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="bba99-297">返回一个 <see langword="Date" /> 值，该值指示写入文件的日期和时间。</span><span class="sxs-lookup"><span data-stu-id="bba99-297">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="bba99-298">相比 <see langword="FileDateTime" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-298">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="bba99-299">有关详细信息，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-299">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns><span data-ttu-id="bba99-300"><see langword="Date" /> 值，该值指示文件的创建日期和时间或上次修改日期和时间。</span><span class="sxs-lookup"><span data-stu-id="bba99-300"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="bba99-301">此示例使用`FileDateTime`函数来确定的日期和时间文件已创建或上次修改时间。</span><span class="sxs-lookup"><span data-stu-id="bba99-301">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="bba99-302">日期和时间显示格式基于系统的区域设置。</span><span class="sxs-lookup"><span data-stu-id="bba99-302">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-303"><paramref name="PathName" /> 无效或包含通配符。</span><span class="sxs-lookup"><span data-stu-id="bba99-303"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="bba99-304">目标文件不存在。</span><span class="sxs-lookup"><span data-stu-id="bba99-304">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-305">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-305">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bba99-306">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="bba99-306">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="bba99-307">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-307">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="bba99-308">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-308">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-309">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-309">Required.</span></span> <span data-ttu-id="bba99-310">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-310">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-311">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-311">Required.</span></span> <span data-ttu-id="bba99-312">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-312">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-313">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-313">Optional.</span></span> <span data-ttu-id="bba99-314">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-314">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="bba99-315">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="bba99-315">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="bba99-316">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-316">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="bba99-317">有关详细信息，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-317">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-318">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-318">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-319">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="bba99-319">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="bba99-320">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-320">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-321">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="bba99-321">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-322">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-322">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="bba99-323">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-323">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-324">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-324">Random Mode</span></span>  
 <span data-ttu-id="bba99-325">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-325">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-326">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="bba99-326">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-327">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-327">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-328">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-328">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-329">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-329">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="bba99-330">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-330">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-331">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-331">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="bba99-332">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-332">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-333">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-333">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="bba99-334">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-334">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-335">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="bba99-335">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="bba99-336">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-336">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="bba99-337">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-337">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="bba99-338">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-338">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-339">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-339">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-340">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-340">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-341">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-341">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="bba99-342">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-342">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="bba99-343">描述符的 18 个字节：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="bba99-343">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="bba99-344">200 个字节的数据：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="bba99-344">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="bba99-345">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-345">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="bba99-346">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-347">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="bba99-347">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="bba99-348">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 加其长度等于 2 加上 8 倍的维度数的描述符：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-348">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-349">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-349">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="bba99-350">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-350">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="bba99-351">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-351">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-352">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-352">Binary Mode</span></span>  
 <span data-ttu-id="bba99-353">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-353">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-354">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-354">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-355">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-355">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-356">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="bba99-356">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-357">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-357">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="bba99-358">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-358">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="bba99-359">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-359">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-360">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-360">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="bba99-361">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-361">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-362"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-362"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-363">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-363">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-364">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-364">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-365">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-365">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-366">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-366">Required.</span></span> <span data-ttu-id="bba99-367">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-367">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-368">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-368">Required.</span></span> <span data-ttu-id="bba99-369">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-369">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-370">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-370">Optional.</span></span> <span data-ttu-id="bba99-371">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-371">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="bba99-372">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="bba99-372">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="bba99-373">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-373">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="bba99-374">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-374">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-375">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-375">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-376">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="bba99-376">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="bba99-377">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-377">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-378">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="bba99-378">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-379">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-379">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="bba99-380">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-380">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-381">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-381">Random Mode</span></span>  
 <span data-ttu-id="bba99-382">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-382">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-383">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="bba99-383">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-384">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-384">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-385">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-385">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-386">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-386">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="bba99-387">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-387">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-388">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-388">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="bba99-389">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-389">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-390">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-390">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="bba99-391">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-392">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="bba99-392">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="bba99-393">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-393">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="bba99-394">如果未使用说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-394">If the descriptor is not used.</span></span> <span data-ttu-id="bba99-395">然后，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-395">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="bba99-396">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-396">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-397">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-397">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-398">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-398">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-399">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-399">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="bba99-400">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-400">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="bba99-401">描述符的 18 个字节：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="bba99-401">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="bba99-402">200 个字节的数据：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="bba99-402">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="bba99-403">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-403">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="bba99-404">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-405">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="bba99-405">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="bba99-406">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 加其长度等于 2 加上 8 倍的维度数的描述符：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-406">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-407">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-407">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="bba99-408">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-408">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="bba99-409">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-409">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-410">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-410">Binary Mode</span></span>  
 <span data-ttu-id="bba99-411">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-411">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-412">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-412">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-413">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-413">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-414">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="bba99-414">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-415">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-415">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="bba99-416">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-416">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="bba99-417">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-417">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-418">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-418">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="bba99-419">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-419">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-420"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-420"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-421">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-422">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-422">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-423">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-423">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-424">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-424">Required.</span></span> <span data-ttu-id="bba99-425">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-425">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-426">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-426">Required.</span></span> <span data-ttu-id="bba99-427">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-427">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-428">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-428">Optional.</span></span> <span data-ttu-id="bba99-429">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-429">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="bba99-430">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="bba99-430">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="bba99-431">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-431">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="bba99-432">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-432">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-433">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-433">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-434">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="bba99-434">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="bba99-435">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-435">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-436">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="bba99-436">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-437">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-437">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="bba99-438">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-438">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-439">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-439">Random Mode</span></span>  
 <span data-ttu-id="bba99-440">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-440">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-441">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="bba99-441">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-442">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-442">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-443">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-443">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-444">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-444">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="bba99-445">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-445">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-446">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-446">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="bba99-447">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-447">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-448">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-448">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="bba99-449">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-449">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-450">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="bba99-450">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="bba99-451">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-451">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="bba99-452">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-452">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="bba99-453">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-453">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-454">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-454">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-455">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-455">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-456">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-456">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="bba99-457">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-457">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="bba99-458">描述符的 18 个字节：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="bba99-458">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="bba99-459">200 个字节的数据：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="bba99-459">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="bba99-460">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-460">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="bba99-461">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-462">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="bba99-462">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="bba99-463">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 加其长度等于 2 加上 8 倍的维度数的描述符：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-463">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-464">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-464">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="bba99-465">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-465">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="bba99-466">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-466">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-467">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-467">Binary Mode</span></span>  
 <span data-ttu-id="bba99-468">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-468">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-469">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-469">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-470">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-470">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-471">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="bba99-471">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-472">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-472">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="bba99-473">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-473">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="bba99-474">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-474">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-475">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-475">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="bba99-476">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-476">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-477"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-477"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-478">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-478">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-479">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-479">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-480">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-480">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-481">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-481">Required.</span></span> <span data-ttu-id="bba99-482">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-482">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-483">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-483">Required.</span></span> <span data-ttu-id="bba99-484">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-484">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-485">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-485">Optional.</span></span> <span data-ttu-id="bba99-486">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-486">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="bba99-487">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="bba99-487">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="bba99-488">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-488">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="bba99-489">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-489">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-490">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-490">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-491">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="bba99-491">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="bba99-492">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-492">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-493">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="bba99-493">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-494">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-494">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="bba99-495">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-495">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-496">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-496">Random Mode</span></span>  
 <span data-ttu-id="bba99-497">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-497">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-498">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="bba99-498">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-499">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-499">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-500">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-500">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-501">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-501">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="bba99-502">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-502">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-503">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-503">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="bba99-504">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-504">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-505">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-505">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="bba99-506">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-506">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-507">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="bba99-507">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="bba99-508">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-508">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="bba99-509">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-509">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="bba99-510">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-510">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-511">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-511">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-512">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-512">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-513">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-513">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="bba99-514">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-514">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="bba99-515">描述符的 18 个字节：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="bba99-515">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="bba99-516">200 个字节的数据：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="bba99-516">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="bba99-517">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-517">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="bba99-518">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-519">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="bba99-519">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="bba99-520">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 加其长度等于 2 加上 8 倍的维度数的描述符：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-520">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-521">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-521">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="bba99-522">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-522">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="bba99-523">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-523">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-524">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-524">Binary Mode</span></span>  
 <span data-ttu-id="bba99-525">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-525">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-526">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-526">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-527">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-527">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-528">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="bba99-528">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-529">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-529">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="bba99-530">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-530">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="bba99-531">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-531">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-532">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-532">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="bba99-533">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-533">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-534"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-534"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-535">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-535">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-536">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-536">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-537">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-537">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-538">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-538">Required.</span></span> <span data-ttu-id="bba99-539">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-539">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-540">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-540">Required.</span></span> <span data-ttu-id="bba99-541">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-541">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-542">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-542">Optional.</span></span> <span data-ttu-id="bba99-543">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-543">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="bba99-544">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="bba99-544">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="bba99-545">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="bba99-546">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-546">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-547">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-547">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-548">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="bba99-548">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="bba99-549">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-549">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-550">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="bba99-550">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-551">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-551">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="bba99-552">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-552">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-553">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-553">Random Mode</span></span>  
 <span data-ttu-id="bba99-554">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-554">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-555">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="bba99-555">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-556">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-556">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-557">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-557">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-558">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-558">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="bba99-559">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-559">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-560">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-560">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="bba99-561">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-561">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-562">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-562">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="bba99-563">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-563">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-564">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="bba99-564">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="bba99-565">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-565">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="bba99-566">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-566">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="bba99-567">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-568">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-569">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-569">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-570">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="bba99-571">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-571">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="bba99-572">描述符的 18 个字节：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="bba99-572">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="bba99-573">200 个字节的数据：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="bba99-573">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="bba99-574">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-574">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="bba99-575">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-576">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="bba99-576">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="bba99-577">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 加其长度等于 2 加上 8 倍的维度数的描述符：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-577">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-578">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-578">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="bba99-579">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-579">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="bba99-580">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-580">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-581">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-581">Binary Mode</span></span>  
 <span data-ttu-id="bba99-582">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-582">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-583">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-583">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-584">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-584">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-585">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="bba99-585">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-586">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-586">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="bba99-587">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-587">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="bba99-588">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-588">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-589">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-589">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="bba99-590">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-590">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-591"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-591"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-592">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-592">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-593">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-593">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-594">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-594">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-595">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-595">Required.</span></span> <span data-ttu-id="bba99-596">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-596">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-597">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-597">Required.</span></span> <span data-ttu-id="bba99-598">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-598">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-599">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-599">Optional.</span></span> <span data-ttu-id="bba99-600">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-600">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="bba99-601">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="bba99-601">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="bba99-602">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="bba99-603">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-604">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-604">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-605">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="bba99-605">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="bba99-606">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-606">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-607">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="bba99-607">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-608">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-608">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="bba99-609">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-609">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-610">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-610">Random Mode</span></span>  
 <span data-ttu-id="bba99-611">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-612">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="bba99-612">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-613">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-614">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-615">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-615">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="bba99-616">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-616">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-617">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-617">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="bba99-618">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-618">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-619">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-619">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="bba99-620">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-621">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="bba99-621">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="bba99-622">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-622">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="bba99-623">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-623">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="bba99-624">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-625">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-626">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-626">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-627">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="bba99-628">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-628">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="bba99-629">描述符的 18 个字节：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="bba99-629">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="bba99-630">200 个字节的数据：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="bba99-630">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="bba99-631">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-631">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="bba99-632">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-633">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="bba99-633">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="bba99-634">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 加其长度等于 2 加上 8 倍的维度数的描述符：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-634">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-635">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-635">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="bba99-636">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-636">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="bba99-637">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-637">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-638">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-638">Binary Mode</span></span>  
 <span data-ttu-id="bba99-639">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-640">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-641">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-642">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="bba99-642">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-643">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-643">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="bba99-644">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-644">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="bba99-645">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-645">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-646">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-646">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="bba99-647">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-647">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-648"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-648"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-649">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-649">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-650">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-650">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-651">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-652">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-652">Required.</span></span> <span data-ttu-id="bba99-653">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-654">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-654">Required.</span></span> <span data-ttu-id="bba99-655">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-655">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-656">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-656">Optional.</span></span> <span data-ttu-id="bba99-657">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="bba99-658">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="bba99-658">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="bba99-659">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="bba99-660">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-661">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-661">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-662">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="bba99-662">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="bba99-663">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-664">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="bba99-664">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-665">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-665">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="bba99-666">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-666">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-667">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-667">Random Mode</span></span>  
 <span data-ttu-id="bba99-668">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-668">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-669">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="bba99-669">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-670">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-670">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-671">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-671">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-672">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-672">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="bba99-673">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-673">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-674">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-674">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="bba99-675">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-675">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-676">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-676">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="bba99-677">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-677">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-678">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="bba99-678">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="bba99-679">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-679">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="bba99-680">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-680">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="bba99-681">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-682">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-683">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-683">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-684">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="bba99-685">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-685">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="bba99-686">描述符的 18 个字节：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="bba99-686">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="bba99-687">200 个字节的数据：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="bba99-687">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="bba99-688">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-688">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="bba99-689">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-690">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="bba99-690">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="bba99-691">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 加其长度等于 2 加上 8 倍的维度数的描述符：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-691">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-692">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="bba99-693">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-693">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="bba99-694">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-695">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-695">Binary Mode</span></span>  
 <span data-ttu-id="bba99-696">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-696">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-697">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-697">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-698">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-698">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-699">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="bba99-699">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-700">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-700">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="bba99-701">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-701">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="bba99-702">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-702">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-703">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-703">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="bba99-704">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-704">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-705"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-705"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-706">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-706">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-707">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-707">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-708">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-708">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-709">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-709">Required.</span></span> <span data-ttu-id="bba99-710">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-710">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-711">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-711">Required.</span></span> <span data-ttu-id="bba99-712">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-712">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-713">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-713">Optional.</span></span> <span data-ttu-id="bba99-714">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="bba99-715">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="bba99-715">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="bba99-716">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="bba99-717">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-718">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-718">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-719">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="bba99-719">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="bba99-720">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-721">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="bba99-721">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-722">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-722">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="bba99-723">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-723">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-724">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-724">Random Mode</span></span>  
 <span data-ttu-id="bba99-725">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-725">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-726">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="bba99-726">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-727">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-727">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-728">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-728">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-729">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-729">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="bba99-730">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-730">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-731">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-731">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="bba99-732">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-732">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-733">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-733">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="bba99-734">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-734">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-735">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="bba99-735">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="bba99-736">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-736">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="bba99-737">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-737">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="bba99-738">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-738">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-739">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-739">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-740">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-741">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-741">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="bba99-742">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-742">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="bba99-743">描述符的 18 个字节：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="bba99-743">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="bba99-744">200 个字节的数据：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="bba99-744">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="bba99-745">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-745">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="bba99-746">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-747">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="bba99-747">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="bba99-748">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 加其长度等于 2 加上 8 倍的维度数的描述符：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-748">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-749">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="bba99-750">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-750">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="bba99-751">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-752">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-752">Binary Mode</span></span>  
 <span data-ttu-id="bba99-753">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-753">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-754">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-754">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-755">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-755">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-756">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="bba99-756">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-757">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-757">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="bba99-758">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-758">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="bba99-759">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-759">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-760">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-760">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="bba99-761">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-761">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-762"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-762"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-763">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-763">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-764">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-764">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-765">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-765">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-766">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-766">Required.</span></span> <span data-ttu-id="bba99-767">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-767">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-768">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-768">Required.</span></span> <span data-ttu-id="bba99-769">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-769">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-770">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-770">Optional.</span></span> <span data-ttu-id="bba99-771">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-771">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="bba99-772">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="bba99-772">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="bba99-773">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="bba99-774">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-775">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-775">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-776">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="bba99-776">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="bba99-777">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-777">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-778">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="bba99-778">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-779">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-779">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="bba99-780">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-780">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-781">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-781">Random Mode</span></span>  
 <span data-ttu-id="bba99-782">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-783">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="bba99-783">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-784">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-785">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-786">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-786">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="bba99-787">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-787">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-788">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-788">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="bba99-789">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-789">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-790">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-790">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="bba99-791">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-791">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-792">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="bba99-792">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="bba99-793">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-793">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="bba99-794">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-794">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="bba99-795">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-795">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-796">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-796">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-797">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-798">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-798">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="bba99-799">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-799">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="bba99-800">描述符的 18 个字节：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="bba99-800">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="bba99-801">200 个字节的数据：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="bba99-801">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="bba99-802">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-802">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="bba99-803">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-804">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="bba99-804">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="bba99-805">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 加其长度等于 2 加上 8 倍的维度数的描述符：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-805">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-806">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="bba99-807">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-807">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="bba99-808">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-808">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-809">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-809">Binary Mode</span></span>  
 <span data-ttu-id="bba99-810">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-811">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-812">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-813">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="bba99-813">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-814">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-814">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="bba99-815">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-815">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="bba99-816">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-816">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-817">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-817">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="bba99-818">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-818">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-819"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-819"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-820">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-820">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-821">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-822">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-823">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-823">Required.</span></span> <span data-ttu-id="bba99-824">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-824">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-825">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-825">Required.</span></span> <span data-ttu-id="bba99-826">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-826">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-827">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-827">Optional.</span></span> <span data-ttu-id="bba99-828">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="bba99-829">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="bba99-829">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="bba99-830">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="bba99-831">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-832">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-832">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-833">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="bba99-833">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="bba99-834">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-834">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-835">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="bba99-835">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-836">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-836">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="bba99-837">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-837">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-838">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-838">Random Mode</span></span>  
 <span data-ttu-id="bba99-839">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-839">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-840">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="bba99-840">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-841">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-841">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-842">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-842">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-843">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-843">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="bba99-844">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-844">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-845">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-845">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="bba99-846">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-846">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-847">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-847">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="bba99-848">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-848">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-849">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="bba99-849">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="bba99-850">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-850">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="bba99-851">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-851">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="bba99-852">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-852">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-853">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-853">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-854">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-855">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-855">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="bba99-856">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-856">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="bba99-857">描述符的 18 个字节：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="bba99-857">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="bba99-858">200 个字节的数据：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="bba99-858">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="bba99-859">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-859">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="bba99-860">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-861">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="bba99-861">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="bba99-862">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 加其长度等于 2 加上 8 倍的维度数的描述符：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-862">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-863">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-863">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="bba99-864">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-864">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="bba99-865">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-865">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-866">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-866">Binary Mode</span></span>  
 <span data-ttu-id="bba99-867">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-867">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-868">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-868">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-869">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-869">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-870">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="bba99-870">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-871">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-871">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="bba99-872">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-872">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="bba99-873">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-873">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-874">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-874">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="bba99-875">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-875">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-876"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-876"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-877">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-877">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-878">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-878">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-879">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-879">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-880">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-880">Required.</span></span> <span data-ttu-id="bba99-881">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-881">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-882">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-882">Required.</span></span> <span data-ttu-id="bba99-883">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-883">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-884">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-884">Optional.</span></span> <span data-ttu-id="bba99-885">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-885">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="bba99-886">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="bba99-886">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="bba99-887">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-887">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="bba99-888">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-888">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-889">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-889">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-890">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="bba99-890">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="bba99-891">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-891">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-892">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="bba99-892">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-893">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-893">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="bba99-894">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-894">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-895">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-895">Random Mode</span></span>  
 <span data-ttu-id="bba99-896">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-896">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-897">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="bba99-897">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-898">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-898">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-899">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-899">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-900">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-900">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="bba99-901">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-901">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-902">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-902">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="bba99-903">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-903">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-904">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-904">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="bba99-905">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-905">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-906">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="bba99-906">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="bba99-907">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-907">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="bba99-908">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-908">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="bba99-909">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-909">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-910">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-910">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-911">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-911">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-912">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-912">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="bba99-913">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-913">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="bba99-914">描述符的 18 个字节：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="bba99-914">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="bba99-915">200 个字节的数据：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="bba99-915">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="bba99-916">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-916">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="bba99-917">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-918">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="bba99-918">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="bba99-919">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 加其长度等于 2 加上 8 倍的维度数的描述符：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-919">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-920">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-920">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="bba99-921">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-921">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="bba99-922">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-922">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-923">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-923">Binary Mode</span></span>  
 <span data-ttu-id="bba99-924">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-924">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-925">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-925">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-926">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-926">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-927">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="bba99-927">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-928">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-928">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="bba99-929">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-929">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="bba99-930">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-930">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-931">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-931">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="bba99-932">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-932">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-933"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-933"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-934">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-934">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-935">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-935">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-936">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-936">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-937">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-937">Required.</span></span> <span data-ttu-id="bba99-938">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-938">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-939">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-939">Required.</span></span> <span data-ttu-id="bba99-940">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-940">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-941">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-941">Optional.</span></span> <span data-ttu-id="bba99-942">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-942">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="bba99-943">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-943">Optional.</span></span> <span data-ttu-id="bba99-944">仅在写入字符串时适用。</span><span class="sxs-lookup"><span data-stu-id="bba99-944">Applies only when writing a string.</span></span> <span data-ttu-id="bba99-945">指定是否为描述长度的字符串写入一个双字节说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-945">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="bba99-946">默认值为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-946">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="bba99-947">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="bba99-947">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="bba99-948">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-948">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="bba99-949">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-949">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-950">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-950">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-951">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="bba99-951">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="bba99-952">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-952">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-953">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="bba99-953">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-954">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-954">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="bba99-955">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-955">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-956">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-956">Random Mode</span></span>  
 <span data-ttu-id="bba99-957">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-957">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-958">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="bba99-958">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-959">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-959">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-960">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-960">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-961">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-961">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="bba99-962">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-962">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-963">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-963">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="bba99-964">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-964">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-965">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-965">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="bba99-966">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-966">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-967">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="bba99-967">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="bba99-968">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-968">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="bba99-969">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-969">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="bba99-970">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-970">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-971">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-971">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-972">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-972">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-973">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-973">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="bba99-974">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-974">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="bba99-975">描述符的 18 个字节：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="bba99-975">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="bba99-976">200 个字节的数据：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="bba99-976">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="bba99-977">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-977">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="bba99-978">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-979">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="bba99-979">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="bba99-980">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 加其长度等于 2 加上 8 倍的维度数的描述符：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-980">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-981">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-981">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="bba99-982">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-982">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="bba99-983">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-983">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-984">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-984">Binary Mode</span></span>  
 <span data-ttu-id="bba99-985">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-985">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-986">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-986">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-987">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-987">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-988">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="bba99-988">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-989">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-989">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="bba99-990">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-990">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="bba99-991">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-991">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-992">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-992">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="bba99-993">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-993">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-994"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-994"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-995">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-996">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-996">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-997">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-997">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-998">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-998">Required.</span></span> <span data-ttu-id="bba99-999">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-999">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1000">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1000">Required.</span></span> <span data-ttu-id="bba99-1001">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-1001">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1002">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1002">Optional.</span></span> <span data-ttu-id="bba99-1003">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1003">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="bba99-1004">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1004">Optional.</span></span> <span data-ttu-id="bba99-1005">仅当写入数组时使用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1005">Applies only when writing an array.</span></span> <span data-ttu-id="bba99-1006">指定是否将数组视为动态数组，以及是否需要描述数组大小和边界的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1006">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="bba99-1007">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1007">Optional.</span></span> <span data-ttu-id="bba99-1008">仅在写入字符串时适用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1008">Applies only when writing a string.</span></span> <span data-ttu-id="bba99-1009">指定是否为描述长度的字符串写入一个双字节说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1009">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="bba99-1010">默认值为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1010">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="bba99-1011">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1011">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="bba99-1012">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="bba99-1013">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1014">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1014">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1015">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1015">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="bba99-1016">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1016">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1017">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="bba99-1017">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-1018">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-1018">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="bba99-1019">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1019">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1020">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1020">Random Mode</span></span>  
 <span data-ttu-id="bba99-1021">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1021">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1022">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="bba99-1022">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1023">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1023">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1024">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-1024">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-1025">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1025">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1026">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1026">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1027">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1027">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="bba99-1028">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1028">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1029">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1029">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="bba99-1030">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1030">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-1031">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1031">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="bba99-1032">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1032">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="bba99-1033">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-1033">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="bba99-1034">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1034">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1035">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1035">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-1036">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1036">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-1037">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1037">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="bba99-1038">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-1038">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="bba99-1039">描述符的 18 个字节：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="bba99-1039">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="bba99-1040">200 个字节的数据：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="bba99-1040">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="bba99-1041">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1041">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="bba99-1042">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-1043">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="bba99-1043">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="bba99-1044">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 加其长度等于 2 加上 8 倍的维度数的描述符：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1044">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-1045">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1045">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="bba99-1046">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1046">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="bba99-1047">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1047">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-1048">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1048">Binary Mode</span></span>  
 <span data-ttu-id="bba99-1049">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-1049">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-1050">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-1050">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-1051">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1051">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-1052">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1052">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-1053">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1053">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="bba99-1054">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1054">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="bba99-1055">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1055">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-1056">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1056">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="bba99-1057">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-1057">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-1058"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-1058"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-1059">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-1059">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-1060">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1060">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1061">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1061">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1062">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1062">Required.</span></span> <span data-ttu-id="bba99-1063">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1063">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1064">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1064">Required.</span></span> <span data-ttu-id="bba99-1065">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-1065">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1066">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1066">Optional.</span></span> <span data-ttu-id="bba99-1067">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1067">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="bba99-1068">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1068">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="bba99-1069">相比 <see langword="FileGetObject" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1069">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="bba99-1070">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1070">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1071">`FileGetObject`而不是使用函数`FileGet`以在编译时避免出现多义性，如果类型`Object`返回而不是另一种类型，如`Integer`， `Long`， `Short`，依次类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1071">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="bba99-1072">如果你想要将写出`Variant`类型，`FileGetObject`是必需的。</span><span class="sxs-lookup"><span data-stu-id="bba99-1072">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="bba99-1073">如果你使用某个对象作为第二个参数，如有疑问，始终建议你使用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1073">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="bba99-1074">`FileGetObject` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1074">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1075">与读取的数据`FileGetObject`通常与编写`FilePutObject`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1075">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="bba99-1076">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1076">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1077">如果省略`RecordNumber`，`FileGetObject`上次读取记录号或字节`FileGetObject`或`FilePutObject`函数 (或指向的最后一个`Seek`函数)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1077">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1078">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1078">Random Mode</span></span>  
 <span data-ttu-id="bba99-1079">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1079">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1080">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGetObject`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="bba99-1080">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1081">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1081">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1082">由于不能准确地确定填充的数据量，它是已记录的长度与读取的数据的长度匹配一个好办法。</span><span class="sxs-lookup"><span data-stu-id="bba99-1082">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="bba99-1083">如果读入的变量是一个字符串，默认情况下`FileGetObject`读取一个包含字符串长度的双字节说明符，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1083">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1084">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1084">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1085">Visual Basic 6.0 和早期版本支持固定长度的字符串和读取到文件时，则不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1085">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="bba99-1086">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1086">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1087">如果读入的变量为数组，则 `RecordLength` 函数中 `FileOpen` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1087">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-1088">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1088">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1089">其长度等于 2 加上 8 倍的维度数：2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="bba99-1089">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="bba99-1090">例如，以下数组声明需要 218 个字节时将数组写入到磁盘：</span><span class="sxs-lookup"><span data-stu-id="bba99-1090">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="bba99-1091">分发了 218 个字节，如下所示：为描述符分发了 18 个字节 (2 + 8 \* 2)，为数据分发了 100 个字节 (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1091">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="bba99-1092">`FileGetObject` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="bba99-1092">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="bba99-1093">在磁盘上，用户定义类型的动态数组 (使用编写`FilePutObject`) 加其长度等于 2 加上 8 倍的维度数的描述符：2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="bba99-1093">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="bba99-1094">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素，包括任何数组和其描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1094">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="bba99-1095"><xref:Microsoft.VisualBasic.VBFixedStringAttribute>类可应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1095">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-1096">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1096">Binary Mode</span></span>  
 <span data-ttu-id="bba99-1097">打开的文件中`Binary`模式下，所有的`Random`规则适用，但以下情况例外：</span><span class="sxs-lookup"><span data-stu-id="bba99-1097">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="bba99-1098">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1098">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-1099">`FileGetObject` 读取所有变量从磁盘连续，也就是说，记录之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="bba99-1099">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-1100">对于在结构中，数组以外的任何数组`FileGetObject`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1100">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="bba99-1101">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1101">No descriptor is read.</span></span>  
  
 <span data-ttu-id="bba99-1102">`FileGetObject` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1102">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-1103">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1103">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-1104">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-1104">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="bba99-1105">例如，名为 form1.vb 的文件可能不是 Visual Basic 源文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1105">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1106">下面的示例测试文件中读取一条记录，然后检索它。</span><span class="sxs-lookup"><span data-stu-id="bba99-1106">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-1107">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1107">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1108">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1108">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="bba99-1109">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1109">Required.</span></span> <span data-ttu-id="bba99-1110">指定一个文件的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1110">A string expression that specifies a file.</span></span> <span data-ttu-id="bba99-1111"><paramref name="PathName" /> 可能包括目录或文件夹以及驱动器。</span><span class="sxs-lookup"><span data-stu-id="bba99-1111"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="bba99-1112">返回一个值，该值以字节为单位指定文件长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1112">Returns a value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="bba99-1113">相比 <see langword="FileLen" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="bba99-1114">有关详情，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1114">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="bba99-1115">文件的长度（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1115">The length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1116">如果指定的文件打开时`FileLen`调用函数，返回的值表示它已打开时的文件的大小。</span><span class="sxs-lookup"><span data-stu-id="bba99-1116">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-1117">若要获取当前打开的文件的长度，请使用`LOF`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1117">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1118">此示例使用`FileLen`函数以返回文件的长度以字节为单位。</span><span class="sxs-lookup"><span data-stu-id="bba99-1118">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="bba99-1119">在此示例中，假定`TestFile`是包含一些数据的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1119">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="bba99-1120">文件不存在。</span><span class="sxs-lookup"><span data-stu-id="bba99-1120">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-1121">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-1121">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1122">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1122">Required.</span></span> <span data-ttu-id="bba99-1123">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1123">Any valid file number.</span></span> <span data-ttu-id="bba99-1124">可使用 <see langword="FreeFile" /> 函数获取下一个可用的文件号。</span><span class="sxs-lookup"><span data-stu-id="bba99-1124">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="bba99-1125">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1125">Required.</span></span> <span data-ttu-id="bba99-1126">一个指定文件名的字符串表达式，其中可包含目录或文件夹以及驱动器。</span><span class="sxs-lookup"><span data-stu-id="bba99-1126">A string expression that specifies a file name - may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="bba99-1127">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1127">Required.</span></span> <span data-ttu-id="bba99-1128">指定文件模式的枚举：<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" /> 或 <see langword="Random" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1128">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="bba99-1129">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.OpenMode" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1129">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="bba99-1130">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1130">Optional.</span></span> <span data-ttu-id="bba99-1131">一个枚举，它指定对打开的文件所允许进行的操作：<see langword="Read" />、<see langword="Write" /> 或 <see langword="ReadWrite" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1131">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="bba99-1132">默认为 <see langword="ReadWrite" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1132">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="bba99-1133">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.OpenAccess" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1133">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="bba99-1134">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1134">Optional.</span></span> <span data-ttu-id="bba99-1135">一个枚举，它指定不允许其他进程对打开的文件所进行的操作：<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" /> 和 <see langword="Lock Read Write" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1135">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="bba99-1136">默认为 <see langword="Lock Read Write" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1136">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="bba99-1137">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.OpenShare" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1137">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="bba99-1138">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1138">Optional.</span></span> <span data-ttu-id="bba99-1139">小于或等于 32,767（字节）的数字。</span><span class="sxs-lookup"><span data-stu-id="bba99-1139">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="bba99-1140">对于为进行随机访问而打开的文件，此值是记录的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1140">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="bba99-1141">对于顺序文件，此值是缓冲的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1141">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="bba99-1142">打开一个文件以进行输入或输出。</span><span class="sxs-lookup"><span data-stu-id="bba99-1142">Opens a file for input or output.</span></span> <span data-ttu-id="bba99-1143">相比 <see langword="FileOpen" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1143">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="bba99-1144">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1144">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1145">`FileOpen`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-1145">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-1146">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-1146">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-1147">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1147">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-1148">可以对其执行任何 I/O 操作之前，必须打开一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1148">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="bba99-1149">`FileOpen` 对文件的 I/O 分配缓冲区，并确定要使用缓冲区的访问模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1149">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-1150">写入到文件时，应用程序可能需要创建一个文件，如果尝试写入的文件不存在。</span><span class="sxs-lookup"><span data-stu-id="bba99-1150">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="bba99-1151">若要执行此操作，必须在其中创建文件的目录的权限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1151">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="bba99-1152">但是，如果指定的文件`FileName`确实存在，应用程序需求`Write`仅对文件本身的权限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1152">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="bba99-1153">可能的为了提高安全性，任何位置创建文件在部署和授予过程`Write`权限到该文件唯一，而不是整个目录。</span><span class="sxs-lookup"><span data-stu-id="bba99-1153">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="bba99-1154">为了提高安全性，请将数据写入到的根目录或 Program Files 目录而不是用户目录中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1154">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="bba99-1155">若要打开的通道可在使用`FreeFile()`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1155">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-1156">`FileOpen`函数需要`Read`从访问`FileIOPermissionAccess`枚举，它可能会影响它在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="bba99-1156">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="bba99-1157">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-1157">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1158">此示例演示了的各种用法`FileOpen`函数，以使输入和输出到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1158">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="bba99-1159">以下代码打开文件`TestFile`在`Input`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1159">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="bba99-1160">此示例打开中的文件`Binary`进行只写操作的模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1160">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="bba99-1161">下面的示例打开中的文件`Random`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1161">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="bba99-1162">该文件包含的记录是结构`Person`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1162">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="bba99-1163">此代码示例将打开的文件中`Output`模式; 任何进程可以读取或写入文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1163">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="bba99-1164">此代码示例将打开的文件中`Binary`模式进行读取; 其他进程无法读取文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1164">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-1165">记录长度是负数（并且不等于 -1）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1165">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-1166"><paramref name="FileName" /> 已经打开，或 <paramref name="FileName" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-1166"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-1167">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1167">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1168">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1168">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bba99-1169">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1169">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="bba99-1170">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1170">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="bba99-1171">有关更多信息，请参见 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1171">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1172">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1172">Required.</span></span> <span data-ttu-id="bba99-1173">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1173">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1174">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1174">Required.</span></span> <span data-ttu-id="bba99-1175">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1175">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1176">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1176">Optional.</span></span> <span data-ttu-id="bba99-1177">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1177">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="bba99-1178">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1178">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="bba99-1179">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1179">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="bba99-1180">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1180">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1181">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1181">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1182">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1182">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="bba99-1183">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1183">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1184">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1184">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="bba99-1185">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1185">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="bba99-1186">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1186">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="bba99-1187">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1187">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1188">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1188">Random Mode</span></span>  
 <span data-ttu-id="bba99-1189">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1189">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1190">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="bba99-1190">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1191">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1191">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1192">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-1192">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="bba99-1193">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-1193">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="bba99-1194">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1194">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1195">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1195">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="bba99-1196">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-1196">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="bba99-1197">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1197">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="bba99-1198">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1198">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="bba99-1199">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="bba99-1199">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="bba99-1200">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1201">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1201">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1202">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1202">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="bba99-1203">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="bba99-1203">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="bba99-1204">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1204">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="bba99-1205">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1205">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-1206">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1206">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="bba99-1207">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1207">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1208">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1208">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-1209">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-1210">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1210">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="bba99-1211">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1211">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="bba99-1212">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="bba99-1213">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="bba99-1213">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="bba99-1214">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1214">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="bba99-1215">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="bba99-1215">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-1216">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1216">Binary Mode</span></span>  
 <span data-ttu-id="bba99-1217">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-1217">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-1218">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-1218">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-1219">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1219">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-1220">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="bba99-1220">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-1221">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1221">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="bba99-1222">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1222">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="bba99-1223">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1223">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-1224">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1224">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="bba99-1225">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="bba99-1225">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="bba99-1226">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-1226">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1227">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1227">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="bba99-1228">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1228">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-1229"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-1229"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-1230">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-1230">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1231">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1231">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1232">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1232">Required.</span></span> <span data-ttu-id="bba99-1233">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1233">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1234">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1234">Required.</span></span> <span data-ttu-id="bba99-1235">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1235">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1236">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1236">Optional.</span></span> <span data-ttu-id="bba99-1237">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1237">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="bba99-1238">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1238">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="bba99-1239">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1239">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="bba99-1240">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1240">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1241">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1241">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1242">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1242">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="bba99-1243">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1243">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1244">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1244">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="bba99-1245">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1245">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="bba99-1246">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1246">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="bba99-1247">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1247">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1248">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1248">Random Mode</span></span>  
 <span data-ttu-id="bba99-1249">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1249">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1250">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="bba99-1250">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1251">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1251">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1252">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-1252">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="bba99-1253">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-1253">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="bba99-1254">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1254">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1255">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1255">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="bba99-1256">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-1256">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="bba99-1257">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1257">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="bba99-1258">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1258">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="bba99-1259">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="bba99-1259">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="bba99-1260">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1261">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1261">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1262">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1262">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="bba99-1263">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="bba99-1263">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="bba99-1264">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1264">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="bba99-1265">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1265">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-1266">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1266">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="bba99-1267">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1267">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1268">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1268">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-1269">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-1270">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1270">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="bba99-1271">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1271">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="bba99-1272">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1272">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="bba99-1273">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="bba99-1273">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="bba99-1274">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1274">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="bba99-1275">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="bba99-1275">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-1276">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1276">Binary Mode</span></span>  
 <span data-ttu-id="bba99-1277">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-1277">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-1278">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-1278">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-1279">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1279">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-1280">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="bba99-1280">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-1281">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1281">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="bba99-1282">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1282">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="bba99-1283">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1283">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-1284">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1284">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="bba99-1285">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="bba99-1285">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="bba99-1286">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-1286">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1287">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1287">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="bba99-1288">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1288">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-1289"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-1289"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-1290">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-1290">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1291">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1291">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1292">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1292">Required.</span></span> <span data-ttu-id="bba99-1293">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1293">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1294">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1294">Required.</span></span> <span data-ttu-id="bba99-1295">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1295">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1296">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1296">Optional.</span></span> <span data-ttu-id="bba99-1297">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="bba99-1298">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1298">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="bba99-1299">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="bba99-1300">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1301">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1302">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="bba99-1303">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1304">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="bba99-1305">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="bba99-1306">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="bba99-1307">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1308">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1308">Random Mode</span></span>  
 <span data-ttu-id="bba99-1309">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1310">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="bba99-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1311">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1312">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="bba99-1313">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="bba99-1314">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1315">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="bba99-1316">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="bba99-1317">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="bba99-1318">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="bba99-1319">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="bba99-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="bba99-1320">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1321">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1322">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="bba99-1323">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="bba99-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="bba99-1324">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="bba99-1325">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-1326">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="bba99-1327">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1328">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-1329">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-1330">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="bba99-1331">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="bba99-1332">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="bba99-1333">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="bba99-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="bba99-1334">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="bba99-1335">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="bba99-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-1336">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1336">Binary Mode</span></span>  
 <span data-ttu-id="bba99-1337">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-1338">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-1339">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-1340">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="bba99-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-1341">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="bba99-1342">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="bba99-1343">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-1344">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="bba99-1345">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="bba99-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="bba99-1346">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1347">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="bba99-1348">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-1349"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-1349"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-1350">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-1350">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1351">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1351">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1352">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1352">Required.</span></span> <span data-ttu-id="bba99-1353">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1353">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1354">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1354">Required.</span></span> <span data-ttu-id="bba99-1355">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1355">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1356">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1356">Optional.</span></span> <span data-ttu-id="bba99-1357">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="bba99-1358">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1358">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="bba99-1359">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="bba99-1360">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1361">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1362">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="bba99-1363">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1364">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="bba99-1365">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="bba99-1366">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="bba99-1367">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1368">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1368">Random Mode</span></span>  
 <span data-ttu-id="bba99-1369">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1370">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="bba99-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1371">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1372">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="bba99-1373">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="bba99-1374">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1375">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="bba99-1376">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="bba99-1377">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="bba99-1378">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="bba99-1379">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="bba99-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="bba99-1380">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1381">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1382">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="bba99-1383">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="bba99-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="bba99-1384">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="bba99-1385">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-1386">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="bba99-1387">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1388">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-1389">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-1390">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="bba99-1391">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="bba99-1392">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="bba99-1393">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="bba99-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="bba99-1394">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="bba99-1395">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="bba99-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-1396">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1396">Binary Mode</span></span>  
 <span data-ttu-id="bba99-1397">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-1398">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-1399">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-1400">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="bba99-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-1401">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="bba99-1402">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="bba99-1403">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-1404">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="bba99-1405">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="bba99-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="bba99-1406">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1407">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="bba99-1408">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-1409"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-1409"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-1410">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-1410">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1411">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1411">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1412">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1412">Required.</span></span> <span data-ttu-id="bba99-1413">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1413">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1414">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1414">Required.</span></span> <span data-ttu-id="bba99-1415">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1415">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1416">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1416">Optional.</span></span> <span data-ttu-id="bba99-1417">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1417">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="bba99-1418">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1418">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="bba99-1419">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1419">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="bba99-1420">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1420">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1421">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1421">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1422">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1422">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="bba99-1423">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1423">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1424">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1424">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="bba99-1425">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1425">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="bba99-1426">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1426">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="bba99-1427">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1427">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1428">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1428">Random Mode</span></span>  
 <span data-ttu-id="bba99-1429">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1429">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1430">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="bba99-1430">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1431">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1431">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1432">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-1432">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="bba99-1433">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-1433">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="bba99-1434">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1434">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1435">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1435">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="bba99-1436">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-1436">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="bba99-1437">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1437">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="bba99-1438">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="bba99-1439">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="bba99-1439">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="bba99-1440">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1440">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1441">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1441">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1442">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1442">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="bba99-1443">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="bba99-1443">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="bba99-1444">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1444">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="bba99-1445">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1445">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-1446">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1446">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="bba99-1447">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1447">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1448">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1448">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-1449">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-1450">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1450">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="bba99-1451">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1451">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="bba99-1452">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1452">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="bba99-1453">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="bba99-1453">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="bba99-1454">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1454">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="bba99-1455">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="bba99-1455">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-1456">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1456">Binary Mode</span></span>  
 <span data-ttu-id="bba99-1457">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-1457">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-1458">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-1458">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-1459">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1459">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-1460">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="bba99-1460">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-1461">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1461">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="bba99-1462">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1462">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="bba99-1463">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1463">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-1464">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1464">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="bba99-1465">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="bba99-1465">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="bba99-1466">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-1466">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1467">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1467">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="bba99-1468">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1468">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-1469"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-1469"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-1470">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-1470">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1471">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1471">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1472">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1472">Required.</span></span> <span data-ttu-id="bba99-1473">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1473">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1474">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1474">Required.</span></span> <span data-ttu-id="bba99-1475">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1475">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1476">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1476">Optional.</span></span> <span data-ttu-id="bba99-1477">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1477">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="bba99-1478">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1478">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="bba99-1479">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="bba99-1480">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1481">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1481">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1482">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1482">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="bba99-1483">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1483">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1484">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1484">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="bba99-1485">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1485">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="bba99-1486">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1486">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="bba99-1487">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1487">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1488">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1488">Random Mode</span></span>  
 <span data-ttu-id="bba99-1489">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1489">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1490">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="bba99-1490">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1491">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1491">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1492">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-1492">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="bba99-1493">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-1493">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="bba99-1494">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1494">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1495">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1495">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="bba99-1496">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-1496">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="bba99-1497">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1497">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="bba99-1498">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="bba99-1499">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="bba99-1499">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="bba99-1500">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1500">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1501">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1501">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1502">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1502">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="bba99-1503">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="bba99-1503">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="bba99-1504">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1504">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="bba99-1505">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1505">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-1506">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1506">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="bba99-1507">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1508">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-1509">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-1510">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="bba99-1511">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1511">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="bba99-1512">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1512">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="bba99-1513">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="bba99-1513">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="bba99-1514">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1514">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="bba99-1515">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="bba99-1515">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-1516">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1516">Binary Mode</span></span>  
 <span data-ttu-id="bba99-1517">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-1517">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-1518">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-1518">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-1519">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1519">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-1520">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="bba99-1520">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-1521">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1521">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="bba99-1522">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1522">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="bba99-1523">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1523">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-1524">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1524">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="bba99-1525">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="bba99-1525">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="bba99-1526">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-1526">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1527">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1527">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="bba99-1528">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1528">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-1529"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-1529"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-1530">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-1530">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1531">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1531">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1532">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1532">Required.</span></span> <span data-ttu-id="bba99-1533">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1533">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1534">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1534">Required.</span></span> <span data-ttu-id="bba99-1535">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1535">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1536">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1536">Optional.</span></span> <span data-ttu-id="bba99-1537">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1537">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="bba99-1538">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1538">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="bba99-1539">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1539">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="bba99-1540">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1540">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1541">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1541">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1542">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1542">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="bba99-1543">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1543">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1544">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1544">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="bba99-1545">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1545">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="bba99-1546">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1546">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="bba99-1547">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1547">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1548">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1548">Random Mode</span></span>  
 <span data-ttu-id="bba99-1549">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1549">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1550">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="bba99-1550">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1551">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1551">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1552">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-1552">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="bba99-1553">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-1553">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="bba99-1554">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1554">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1555">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1555">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="bba99-1556">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-1556">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="bba99-1557">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1557">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="bba99-1558">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1558">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="bba99-1559">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="bba99-1559">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="bba99-1560">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1560">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1561">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1561">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1562">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1562">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="bba99-1563">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="bba99-1563">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="bba99-1564">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1564">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="bba99-1565">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1565">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-1566">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1566">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="bba99-1567">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1568">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-1569">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-1570">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="bba99-1571">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1571">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="bba99-1572">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="bba99-1573">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="bba99-1573">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="bba99-1574">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1574">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="bba99-1575">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="bba99-1575">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-1576">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1576">Binary Mode</span></span>  
 <span data-ttu-id="bba99-1577">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-1577">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-1578">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-1578">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-1579">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1579">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-1580">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="bba99-1580">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-1581">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1581">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="bba99-1582">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1582">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="bba99-1583">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1583">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-1584">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1584">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="bba99-1585">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="bba99-1585">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="bba99-1586">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-1586">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1587">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1587">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="bba99-1588">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1588">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-1589"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-1589"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-1590">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-1590">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1591">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1591">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1592">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1592">Required.</span></span> <span data-ttu-id="bba99-1593">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1593">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1594">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1594">Required.</span></span> <span data-ttu-id="bba99-1595">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1595">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1596">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1596">Optional.</span></span> <span data-ttu-id="bba99-1597">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="bba99-1598">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1598">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="bba99-1599">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="bba99-1600">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1601">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1601">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1602">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1602">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="bba99-1603">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1604">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1604">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="bba99-1605">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1605">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="bba99-1606">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1606">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="bba99-1607">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1607">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1608">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1608">Random Mode</span></span>  
 <span data-ttu-id="bba99-1609">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1609">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1610">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="bba99-1610">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1611">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1611">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1612">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-1612">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="bba99-1613">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-1613">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="bba99-1614">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1614">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1615">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1615">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="bba99-1616">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-1616">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="bba99-1617">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1617">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="bba99-1618">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1618">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="bba99-1619">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="bba99-1619">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="bba99-1620">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1621">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1621">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1622">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1622">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="bba99-1623">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="bba99-1623">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="bba99-1624">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1624">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="bba99-1625">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1625">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-1626">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1626">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="bba99-1627">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1627">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1628">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1628">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-1629">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-1630">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1630">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="bba99-1631">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1631">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="bba99-1632">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="bba99-1633">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="bba99-1633">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="bba99-1634">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="bba99-1635">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="bba99-1635">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-1636">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1636">Binary Mode</span></span>  
 <span data-ttu-id="bba99-1637">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-1637">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-1638">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-1638">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-1639">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1639">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-1640">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="bba99-1640">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-1641">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1641">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="bba99-1642">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1642">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="bba99-1643">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1643">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-1644">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1644">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="bba99-1645">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="bba99-1645">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="bba99-1646">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-1646">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1647">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1647">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="bba99-1648">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1648">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-1649"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-1649"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-1650">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-1650">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1651">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1652">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1652">Required.</span></span> <span data-ttu-id="bba99-1653">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1654">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1654">Required.</span></span> <span data-ttu-id="bba99-1655">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1655">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1656">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1656">Optional.</span></span> <span data-ttu-id="bba99-1657">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="bba99-1658">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1658">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="bba99-1659">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="bba99-1660">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1661">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1661">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1662">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1662">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="bba99-1663">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1664">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1664">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="bba99-1665">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1665">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="bba99-1666">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1666">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="bba99-1667">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1667">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1668">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1668">Random Mode</span></span>  
 <span data-ttu-id="bba99-1669">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1669">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1670">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="bba99-1670">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1671">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1671">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1672">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-1672">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="bba99-1673">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-1673">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="bba99-1674">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1674">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1675">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1675">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="bba99-1676">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-1676">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="bba99-1677">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1677">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="bba99-1678">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1678">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="bba99-1679">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="bba99-1679">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="bba99-1680">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1681">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1681">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1682">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1682">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="bba99-1683">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="bba99-1683">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="bba99-1684">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1684">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="bba99-1685">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1685">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-1686">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1686">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="bba99-1687">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1687">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1688">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1688">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-1689">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-1690">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1690">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="bba99-1691">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1691">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="bba99-1692">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="bba99-1693">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="bba99-1693">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="bba99-1694">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="bba99-1695">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="bba99-1695">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-1696">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1696">Binary Mode</span></span>  
 <span data-ttu-id="bba99-1697">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-1697">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-1698">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-1698">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-1699">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1699">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-1700">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="bba99-1700">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-1701">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1701">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="bba99-1702">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1702">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="bba99-1703">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1703">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-1704">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1704">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="bba99-1705">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="bba99-1705">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="bba99-1706">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-1706">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1707">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1707">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="bba99-1708">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1708">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-1709"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-1709"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-1710">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-1710">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1711">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1711">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1712">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1712">Required.</span></span> <span data-ttu-id="bba99-1713">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1714">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1714">Required.</span></span> <span data-ttu-id="bba99-1715">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1716">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1716">Optional.</span></span> <span data-ttu-id="bba99-1717">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="bba99-1718">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="bba99-1719">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="bba99-1720">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1721">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1722">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="bba99-1723">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1724">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="bba99-1725">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="bba99-1726">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="bba99-1727">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1728">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1728">Random Mode</span></span>  
 <span data-ttu-id="bba99-1729">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1730">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="bba99-1730">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1731">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1732">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="bba99-1733">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="bba99-1734">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1735">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="bba99-1736">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="bba99-1737">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="bba99-1738">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="bba99-1739">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="bba99-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="bba99-1740">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1741">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1742">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="bba99-1743">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="bba99-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="bba99-1744">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="bba99-1745">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-1746">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="bba99-1747">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1748">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-1749">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-1750">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="bba99-1751">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="bba99-1752">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="bba99-1753">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="bba99-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="bba99-1754">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="bba99-1755">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="bba99-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-1756">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1756">Binary Mode</span></span>  
 <span data-ttu-id="bba99-1757">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-1758">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-1759">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-1760">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="bba99-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-1761">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="bba99-1762">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="bba99-1763">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-1764">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="bba99-1765">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="bba99-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="bba99-1766">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1767">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="bba99-1768">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-1769"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-1770">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1771">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1771">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1772">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1772">Required.</span></span> <span data-ttu-id="bba99-1773">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1773">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1774">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1774">Required.</span></span> <span data-ttu-id="bba99-1775">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1775">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1776">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1776">Optional.</span></span> <span data-ttu-id="bba99-1777">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1777">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="bba99-1778">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1778">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="bba99-1779">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="bba99-1780">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1781">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1781">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1782">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1782">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="bba99-1783">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1783">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1784">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1784">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="bba99-1785">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1785">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="bba99-1786">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1786">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="bba99-1787">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1787">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1788">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1788">Random Mode</span></span>  
 <span data-ttu-id="bba99-1789">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1789">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1790">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="bba99-1790">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1791">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1791">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1792">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-1792">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="bba99-1793">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-1793">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="bba99-1794">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1794">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1795">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1795">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="bba99-1796">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-1796">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="bba99-1797">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1797">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="bba99-1798">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1798">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="bba99-1799">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="bba99-1799">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="bba99-1800">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1800">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1801">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1801">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1802">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1802">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="bba99-1803">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="bba99-1803">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="bba99-1804">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1804">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="bba99-1805">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-1806">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1806">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="bba99-1807">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1807">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1808">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1808">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-1809">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-1810">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1810">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="bba99-1811">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1811">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="bba99-1812">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1812">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="bba99-1813">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="bba99-1813">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="bba99-1814">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1814">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="bba99-1815">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="bba99-1815">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-1816">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1816">Binary Mode</span></span>  
 <span data-ttu-id="bba99-1817">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-1817">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-1818">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-1818">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-1819">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1819">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-1820">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="bba99-1820">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-1821">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1821">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="bba99-1822">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1822">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="bba99-1823">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1823">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-1824">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1824">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="bba99-1825">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="bba99-1825">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="bba99-1826">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-1826">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1827">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1827">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="bba99-1828">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1828">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-1829"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-1829"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-1830">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-1830">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1831">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1831">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1832">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1832">Required.</span></span> <span data-ttu-id="bba99-1833">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1833">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1834">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1834">Required.</span></span> <span data-ttu-id="bba99-1835">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1835">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1836">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1836">Optional.</span></span> <span data-ttu-id="bba99-1837">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1837">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="bba99-1838">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1838">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="bba99-1839">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1839">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="bba99-1840">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1840">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1841">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1841">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1842">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1842">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="bba99-1843">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1843">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1844">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1844">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="bba99-1845">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1845">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="bba99-1846">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1846">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="bba99-1847">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1847">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1848">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1848">Random Mode</span></span>  
 <span data-ttu-id="bba99-1849">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1849">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1850">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="bba99-1850">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1851">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1851">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1852">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-1852">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="bba99-1853">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-1853">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="bba99-1854">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1854">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1855">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1855">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="bba99-1856">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-1856">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="bba99-1857">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1857">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="bba99-1858">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1858">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="bba99-1859">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="bba99-1859">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="bba99-1860">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1861">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1861">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1862">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1862">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="bba99-1863">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="bba99-1863">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="bba99-1864">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1864">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="bba99-1865">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1865">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-1866">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1866">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="bba99-1867">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1867">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1868">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1868">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-1869">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-1870">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1870">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="bba99-1871">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1871">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="bba99-1872">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="bba99-1873">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="bba99-1873">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="bba99-1874">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1874">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="bba99-1875">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="bba99-1875">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-1876">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1876">Binary Mode</span></span>  
 <span data-ttu-id="bba99-1877">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-1877">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-1878">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-1878">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-1879">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1879">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-1880">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="bba99-1880">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-1881">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1881">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="bba99-1882">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1882">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="bba99-1883">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1883">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-1884">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1884">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="bba99-1885">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="bba99-1885">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="bba99-1886">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-1886">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1887">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1887">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="bba99-1888">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1888">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-1889"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-1889"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-1890">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-1890">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1891">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1891">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1892">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1892">Required.</span></span> <span data-ttu-id="bba99-1893">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1893">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1894">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1894">Required.</span></span> <span data-ttu-id="bba99-1895">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1895">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1896">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1896">Optional.</span></span> <span data-ttu-id="bba99-1897">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1897">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="bba99-1898">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1898">Optional.</span></span> <span data-ttu-id="bba99-1899">仅在写入字符串时适用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1899">Applies only when writing a string.</span></span> <span data-ttu-id="bba99-1900">指定是否将字符串的双字节字符串长度说明符写入文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1900">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="bba99-1901">默认值为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1901">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="bba99-1902">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1902">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="bba99-1903">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1903">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="bba99-1904">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1904">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1905">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1905">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1906">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1906">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="bba99-1907">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1907">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1908">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1908">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="bba99-1909">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1909">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="bba99-1910">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1910">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="bba99-1911">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1911">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1912">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1912">Random Mode</span></span>  
 <span data-ttu-id="bba99-1913">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1913">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1914">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="bba99-1914">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1915">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1915">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1916">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-1916">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="bba99-1917">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-1917">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="bba99-1918">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1918">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1919">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1919">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="bba99-1920">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-1920">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="bba99-1921">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1921">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="bba99-1922">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="bba99-1923">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="bba99-1923">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="bba99-1924">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1925">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1925">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1926">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1926">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="bba99-1927">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="bba99-1927">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="bba99-1928">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1928">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="bba99-1929">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1929">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-1930">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1930">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="bba99-1931">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1931">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1932">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1932">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-1933">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-1934">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1934">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="bba99-1935">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1935">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="bba99-1936">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1936">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="bba99-1937">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="bba99-1937">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="bba99-1938">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-1938">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="bba99-1939">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="bba99-1939">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-1940">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1940">Binary Mode</span></span>  
 <span data-ttu-id="bba99-1941">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-1941">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-1942">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-1942">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-1943">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1943">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-1944">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="bba99-1944">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-1945">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1945">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="bba99-1946">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1946">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="bba99-1947">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1947">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-1948">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1948">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="bba99-1949">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="bba99-1949">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="bba99-1950">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-1950">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-1951">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1951">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="bba99-1952">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-1952">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-1953"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-1953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-1954">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-1954">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-1955">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-1955">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-1956">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1956">Required.</span></span> <span data-ttu-id="bba99-1957">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1957">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-1958">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-1958">Required.</span></span> <span data-ttu-id="bba99-1959">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1959">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-1960">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1960">Optional.</span></span> <span data-ttu-id="bba99-1961">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-1961">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="bba99-1962">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1962">Optional.</span></span> <span data-ttu-id="bba99-1963">仅当写入数组时使用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1963">Applies only when writing an array.</span></span> <span data-ttu-id="bba99-1964">指定是否将数组视为动态数组，以及是否写入用于描述字符串长度的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1964">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="bba99-1965">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-1965">Optional.</span></span> <span data-ttu-id="bba99-1966">仅在写入字符串时适用。</span><span class="sxs-lookup"><span data-stu-id="bba99-1966">Applies only when writing a string.</span></span> <span data-ttu-id="bba99-1967">指定是否将字符串的双字节字符串长度说明符写入文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1967">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="bba99-1968">默认值为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1968">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="bba99-1969">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-1969">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="bba99-1970">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-1970">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="bba99-1971">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-1971">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-1972">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-1972">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-1973">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1973">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="bba99-1974">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-1975">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1975">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="bba99-1976">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="bba99-1977">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1977">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="bba99-1978">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1978">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-1979">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-1979">Random Mode</span></span>  
 <span data-ttu-id="bba99-1980">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-1981">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="bba99-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-1982">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-1983">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-1983">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="bba99-1984">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="bba99-1985">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-1985">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="bba99-1986">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-1986">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="bba99-1987">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-1987">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="bba99-1988">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1988">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="bba99-1989">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="bba99-1990">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="bba99-1990">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="bba99-1991">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-1991">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-1992">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-1992">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-1993">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1993">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="bba99-1994">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="bba99-1994">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="bba99-1995">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1995">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="bba99-1996">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-1996">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="bba99-1997">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-1997">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="bba99-1998">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-1998">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-1999">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-1999">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="bba99-2000">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-2001">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-2001">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="bba99-2002">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2002">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="bba99-2003">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-2003">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="bba99-2004">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="bba99-2004">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="bba99-2005">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-2005">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="bba99-2006">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="bba99-2006">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-2007">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-2007">Binary Mode</span></span>  
 <span data-ttu-id="bba99-2008">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="bba99-2008">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="bba99-2009">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="bba99-2009">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="bba99-2010">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-2010">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-2011">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="bba99-2011">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="bba99-2012">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2012">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="bba99-2013">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="bba99-2013">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="bba99-2014">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-2014">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="bba99-2015">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2015">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="bba99-2016">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="bba99-2016">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="bba99-2017">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2017">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2018">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2018">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="bba99-2019">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2019">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-2020"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="bba99-2020"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2021">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2021">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-2022">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-2022">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2023">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2023">Required.</span></span> <span data-ttu-id="bba99-2024">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2024">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-2025">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2025">Required.</span></span> <span data-ttu-id="bba99-2026">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2026">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="bba99-2027">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-2027">Optional.</span></span> <span data-ttu-id="bba99-2028">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="bba99-2028">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="bba99-2029">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-2029">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="bba99-2030">相比 <see langword="FilePutObject" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-2030">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="bba99-2031">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2031">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2032">`FilePutObject`而不是使用函数`FilePut`以在编译时避免出现多义性，如果类型`Object`传递而不是另一种类型，如`Integer`， `Long`， `Short`，依次类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-2032">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="bba99-2033">`FilePutObject` 将写入和读取描述该对象的描述符。</span><span class="sxs-lookup"><span data-stu-id="bba99-2033">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="bba99-2034">如果你想要将写出`Variant`类型，`FilePutObject`是必需的。</span><span class="sxs-lookup"><span data-stu-id="bba99-2034">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="bba99-2035">如果你使用某个对象作为第二个参数，如有疑问，我们建议始终使用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2035">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="bba99-2036">`FilePutObject` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2036">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-2037">通常使用 `FileGetObject` 从文件中读取使用 `FilePutObject` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2037">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="bba99-2038">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-2038">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="bba99-2039">如果省略`RecordNumber`，`FilePutObject`上次写入下一个记录或字节`FileGetObject`或`FilePutObject`函数 (或记录号或字节指向由最后一个`Seek`函数)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2039">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="bba99-2040">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-2040">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="bba99-2041">`FilePutObject` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2041">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="bba99-2042">如果您使用`StringIsFixedLength`  =  `True`与`FilePutObject`，您只需使用相同`FileGetObject`，您必须还需确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-2042">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="bba99-2043">随机模式</span><span class="sxs-lookup"><span data-stu-id="bba99-2043">Random Mode</span></span>  
 <span data-ttu-id="bba99-2044">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="bba99-2044">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="bba99-2045">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePutObject`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="bba99-2045">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="bba99-2046">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="bba99-2046">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="bba99-2047">由于不能准确地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="bba99-2047">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="bba99-2048">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bba99-2048">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="bba99-2049">如果写入的变量是包含一个数值类型的对象`FilePutObject`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2049">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="bba99-2050">例如，编写一个对象时包含一个整数`FilePutObject`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-2050">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="bba99-2051">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2051">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="bba99-2052">如果写入的变量是一个对象，包含一个字符串，`FilePutObject`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="bba99-2052">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="bba99-2053">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="bba99-2053">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="bba99-2054">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-2054">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="bba99-2055">如果写入的变量为数组，则 `RecordLength` 函数中 `FileOpen` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="bba99-2055">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="bba99-2056">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="bba99-2056">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="bba99-2057">其长度等于 2 加上 8 倍的维度数：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2057">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="bba99-2058">二进制模式</span><span class="sxs-lookup"><span data-stu-id="bba99-2058">Binary Mode</span></span>  
 <span data-ttu-id="bba99-2059">打开的文件中`Binary`模式下，所有`Random`模式规则适用，除外：</span><span class="sxs-lookup"><span data-stu-id="bba99-2059">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="bba99-2060">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="bba99-2060">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="bba99-2061">`FilePutObject` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="bba99-2061">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2062">此示例使用`FilePutObject`函数以将字符串写入文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2062">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-2063">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-2063">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2064">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2064">Required.</span></span> <span data-ttu-id="bba99-2065">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2065">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="bba99-2066">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2066">Required.</span></span> <span data-ttu-id="bba99-2067">0 到 255（包括 0 和 255）范围内的数值表达式，它表示在开始新一行前每一行中所显示的字符数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2067">Numeric expression in the range 0-255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="bba99-2068">如果 <paramref name="RecordWidth" /> 等于 0，则行的长度没有限制。</span><span class="sxs-lookup"><span data-stu-id="bba99-2068">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="bba99-2069"><paramref name="RecordWidth" /> 的默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="bba99-2069">The default value for <paramref name="RecordWidth" /> is 0.</span></span></param>
        <summary><span data-ttu-id="bba99-2070">为用 <see langword="FileOpen" /> 函数打开的文件分配输出行宽。</span><span class="sxs-lookup"><span data-stu-id="bba99-2070">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="bba99-2071">此示例使用`FileWidth`函数设置文件的输出线条宽度。</span><span class="sxs-lookup"><span data-stu-id="bba99-2071">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2072">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2073">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2073">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bba99-2074">返回一个 <see langword="Integer" /> 值，该值表示 <see langword="FileOpen" /> 函数可用的下一个文件号。</span><span class="sxs-lookup"><span data-stu-id="bba99-2074">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="bba99-2075">一个整数值，该值表示 <see langword="FileOpen" /> 函数可用的下一个文件号。</span><span class="sxs-lookup"><span data-stu-id="bba99-2075">An integer value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2076">使用`FreeFile`提供尚未使用的文件号。</span><span class="sxs-lookup"><span data-stu-id="bba99-2076">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2077">此示例使用`FreeFile`函数以返回下一个可用的文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2077">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="bba99-2078">五个文件打开，以便在循环中，输出和一些示例数据写入到每个。</span><span class="sxs-lookup"><span data-stu-id="bba99-2078">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2079">正在使用的文件数超过 255。</span><span class="sxs-lookup"><span data-stu-id="bba99-2079">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-2080">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-2080">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="bba99-2081">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2081">Required.</span></span> <span data-ttu-id="bba99-2082">指定一个文件名、目录名或文件夹名的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2082">A string expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="bba99-2083"><paramref name="PathName" /> 可以包含驱动器和目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="bba99-2083"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="bba99-2084">返回一个表示文件、目录或文件夹的特性的 <see langword="FileAttribute" /> 值。</span><span class="sxs-lookup"><span data-stu-id="bba99-2084">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="bba99-2085">相比 <see langword="FileAttribute" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-2085">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="bba99-2086">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2086">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="bba99-2087">由 <see langword="GetAttr" /> 返回的值是下列枚举值的和：</span><span class="sxs-lookup"><span data-stu-id="bba99-2087">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="bba99-2088">值</span><span class="sxs-lookup"><span data-stu-id="bba99-2088">Value</span></span> 
 </term><description> <span data-ttu-id="bba99-2089">返回的常量</span><span class="sxs-lookup"><span data-stu-id="bba99-2089">Constant</span></span> 
 </description><description> <span data-ttu-id="bba99-2090">描述</span><span class="sxs-lookup"><span data-stu-id="bba99-2090">Description</span></span> 
 </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> <span data-ttu-id="bba99-2091">正常。</span><span class="sxs-lookup"><span data-stu-id="bba99-2091">Normal.</span></span>  
  
 </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> <span data-ttu-id="bba99-2092">只读。</span><span class="sxs-lookup"><span data-stu-id="bba99-2092">Read-only.</span></span>  
  
 </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> <span data-ttu-id="bba99-2093">隐藏。</span><span class="sxs-lookup"><span data-stu-id="bba99-2093">Hidden.</span></span>  
  
 </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> <span data-ttu-id="bba99-2094">系统文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2094">System file.</span></span>  
  
 </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> <span data-ttu-id="bba99-2095">目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="bba99-2095">Directory or folder.</span></span>  
  
 </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> <span data-ttu-id="bba99-2096">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="bba99-2096">File has changed since last backup.</span></span>  
  
 </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> <span data-ttu-id="bba99-2097">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-2097">File has a different name.</span></span>  
  
 </description></item></list><block subset="none" type="note"><para>  
 <span data-ttu-id="bba99-2098">这些枚举是由 Visual Basic 语言指定的。</span><span class="sxs-lookup"><span data-stu-id="bba99-2098">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="bba99-2099">可以在代码中的任何位置使用这些名称以代替实际值。</span><span class="sxs-lookup"><span data-stu-id="bba99-2099">The names can be used anywhere in your code in place of the actual values.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2100">若要确定设置了哪些属性，请使用`And`运算符执行返回的值的按位比较`GetAttr`函数和所需的各个文件属性的值。</span><span class="sxs-lookup"><span data-stu-id="bba99-2100">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="bba99-2101">如果结果不为零，该属性设置为指定的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2101">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="bba99-2102">例如，下面的返回值`And`表达式是零个 if`Archive`未设置属性：</span><span class="sxs-lookup"><span data-stu-id="bba99-2102">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="bba99-2103">如果返回非零值`Archive`属性设置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2103">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2104">此示例使用`GetAttr`函数来确定文件和目录或文件夹的属性。</span><span class="sxs-lookup"><span data-stu-id="bba99-2104">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2105"><paramref name="Pathname" /> 无效或包含通配符。</span><span class="sxs-lookup"><span data-stu-id="bba99-2105"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="bba99-2106">目标文件不存在。</span><span class="sxs-lookup"><span data-stu-id="bba99-2106">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md"><span data-ttu-id="bba99-2107">And 运算符 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-2107">And Operator (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2108">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2108">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bba99-2109">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2109">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2110">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2110">Required.</span></span> <span data-ttu-id="bba99-2111">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2111">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-2112">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2112">Required.</span></span> <span data-ttu-id="bba99-2113">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2113">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="bba99-2114">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2114">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2115">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2115">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2116">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2116">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2117">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2117">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2118">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2118">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="bba99-2119">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2119">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2120">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-2120">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="bba99-2121">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2121">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="bba99-2122">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2122">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="bba99-2123">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2123">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="bba99-2124">数据</span><span class="sxs-lookup"><span data-stu-id="bba99-2124">Data</span></span>|<span data-ttu-id="bba99-2125">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="bba99-2125">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="bba99-2126">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="bba99-2126">Delimiting comma or blank line</span></span>|<span data-ttu-id="bba99-2127">空</span><span class="sxs-lookup"><span data-stu-id="bba99-2127">Empty</span></span>|  
|<span data-ttu-id="bba99-2128">#NULL#</span><span class="sxs-lookup"><span data-stu-id="bba99-2128">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="bba99-2129">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="bba99-2129">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="bba99-2130">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="bba99-2130">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="bba99-2131">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="bba99-2131">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="bba99-2132">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="bba99-2132">#ERROR `errornumber`#</span></span>|<span data-ttu-id="bba99-2133">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="bba99-2133">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="bba99-2134">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-2134">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2135">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="bba99-2135">The `Input` function is not localized.</span></span> <span data-ttu-id="bba99-2136">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="bba99-2136">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2137">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2137">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-2138">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2138">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2139">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2139">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="bba99-2140">此示例假定`TestFile`是一个文件，已使用对其写入数据的某些行`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2140">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2141">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2141">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2142">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2142">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2143">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2143">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2144">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2144">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2145">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2145">Required.</span></span> <span data-ttu-id="bba99-2146">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2146">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-2147">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2147">Required.</span></span> <span data-ttu-id="bba99-2148">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2148">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="bba99-2149">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2149">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2150">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2150">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2151">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2151">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2152">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2152">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2153">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2153">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="bba99-2154">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2154">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2155">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-2155">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="bba99-2156">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2156">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="bba99-2157">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2157">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="bba99-2158">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2158">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="bba99-2159">数据</span><span class="sxs-lookup"><span data-stu-id="bba99-2159">Data</span></span>|<span data-ttu-id="bba99-2160">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="bba99-2160">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="bba99-2161">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="bba99-2161">Delimiting comma or blank line</span></span>|<span data-ttu-id="bba99-2162">空</span><span class="sxs-lookup"><span data-stu-id="bba99-2162">Empty</span></span>|  
|<span data-ttu-id="bba99-2163">#NULL#</span><span class="sxs-lookup"><span data-stu-id="bba99-2163">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="bba99-2164">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="bba99-2164">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="bba99-2165">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="bba99-2165">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="bba99-2166">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="bba99-2166">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="bba99-2167">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="bba99-2167">#ERROR `errornumber`#</span></span>|<span data-ttu-id="bba99-2168">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="bba99-2168">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="bba99-2169">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-2169">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2170">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="bba99-2170">The `Input` function is not localized.</span></span> <span data-ttu-id="bba99-2171">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="bba99-2171">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2172">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2172">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-2173">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2173">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2174">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2174">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="bba99-2175">此示例假定`TestFile`是一个文件，已使用对其写入数据的某些行`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2175">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2176">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2176">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2177">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2177">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2178">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2178">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2179">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2179">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2180">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2180">Required.</span></span> <span data-ttu-id="bba99-2181">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2181">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-2182">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2182">Required.</span></span> <span data-ttu-id="bba99-2183">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2183">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="bba99-2184">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2184">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2185">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2185">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2186">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2186">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2187">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2187">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2188">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2188">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="bba99-2189">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2189">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2190">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-2190">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="bba99-2191">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2191">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="bba99-2192">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2192">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="bba99-2193">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2193">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="bba99-2194">数据</span><span class="sxs-lookup"><span data-stu-id="bba99-2194">Data</span></span>|<span data-ttu-id="bba99-2195">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="bba99-2195">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="bba99-2196">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="bba99-2196">Delimiting comma or blank line</span></span>|<span data-ttu-id="bba99-2197">空</span><span class="sxs-lookup"><span data-stu-id="bba99-2197">Empty</span></span>|  
|<span data-ttu-id="bba99-2198">#NULL#</span><span class="sxs-lookup"><span data-stu-id="bba99-2198">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="bba99-2199">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="bba99-2199">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="bba99-2200">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="bba99-2200">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="bba99-2201">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="bba99-2201">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="bba99-2202">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="bba99-2202">#ERROR `errornumber`#</span></span>|<span data-ttu-id="bba99-2203">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="bba99-2203">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="bba99-2204">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-2204">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2205">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="bba99-2205">The `Input` function is not localized.</span></span> <span data-ttu-id="bba99-2206">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="bba99-2206">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2207">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2207">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-2208">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2208">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2209">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2209">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="bba99-2210">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2210">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2211">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2211">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2212">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2212">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2213">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2213">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2214">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2214">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2215">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2215">Required.</span></span> <span data-ttu-id="bba99-2216">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2216">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-2217">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2217">Required.</span></span> <span data-ttu-id="bba99-2218">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2218">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="bba99-2219">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2219">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2220">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2220">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2221">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2221">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2222">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2222">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2223">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2223">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="bba99-2224">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2224">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2225">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-2225">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="bba99-2226">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2226">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="bba99-2227">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2227">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="bba99-2228">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2228">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="bba99-2229">数据</span><span class="sxs-lookup"><span data-stu-id="bba99-2229">Data</span></span>|<span data-ttu-id="bba99-2230">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="bba99-2230">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="bba99-2231">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="bba99-2231">Delimiting comma or blank line</span></span>|<span data-ttu-id="bba99-2232">空</span><span class="sxs-lookup"><span data-stu-id="bba99-2232">Empty</span></span>|  
|<span data-ttu-id="bba99-2233">#NULL#</span><span class="sxs-lookup"><span data-stu-id="bba99-2233">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="bba99-2234">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="bba99-2234">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="bba99-2235">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="bba99-2235">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="bba99-2236">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="bba99-2236">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="bba99-2237">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="bba99-2237">#ERROR `errornumber`#</span></span>|<span data-ttu-id="bba99-2238">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="bba99-2238">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="bba99-2239">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-2239">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2240">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="bba99-2240">The `Input` function is not localized.</span></span> <span data-ttu-id="bba99-2241">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="bba99-2241">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2242">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2242">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-2243">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2243">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2244">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2244">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="bba99-2245">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2245">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2246">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2246">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2247">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2247">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2248">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2248">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2249">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2249">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2250">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2250">Required.</span></span> <span data-ttu-id="bba99-2251">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2251">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-2252">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2252">Required.</span></span> <span data-ttu-id="bba99-2253">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2253">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="bba99-2254">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2254">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2255">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2255">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2256">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2256">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2257">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2257">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2258">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2258">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="bba99-2259">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2259">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2260">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-2260">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="bba99-2261">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2261">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="bba99-2262">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2262">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="bba99-2263">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2263">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="bba99-2264">数据</span><span class="sxs-lookup"><span data-stu-id="bba99-2264">Data</span></span>|<span data-ttu-id="bba99-2265">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="bba99-2265">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="bba99-2266">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="bba99-2266">Delimiting comma or blank line</span></span>|<span data-ttu-id="bba99-2267">空</span><span class="sxs-lookup"><span data-stu-id="bba99-2267">Empty</span></span>|  
|<span data-ttu-id="bba99-2268">#NULL#</span><span class="sxs-lookup"><span data-stu-id="bba99-2268">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="bba99-2269">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="bba99-2269">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="bba99-2270">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="bba99-2270">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="bba99-2271">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="bba99-2271">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="bba99-2272">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="bba99-2272">#ERROR `errornumber`#</span></span>|<span data-ttu-id="bba99-2273">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="bba99-2273">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="bba99-2274">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-2274">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2275">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="bba99-2275">The `Input` function is not localized.</span></span> <span data-ttu-id="bba99-2276">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="bba99-2276">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2277">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2277">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-2278">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2278">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2279">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2279">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="bba99-2280">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2280">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2281">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2281">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2282">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2282">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2283">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2283">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2284">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2284">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2285">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2285">Required.</span></span> <span data-ttu-id="bba99-2286">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2286">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-2287">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2287">Required.</span></span> <span data-ttu-id="bba99-2288">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2288">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="bba99-2289">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2289">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2290">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2290">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2291">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2291">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2292">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2292">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2293">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2293">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="bba99-2294">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2294">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2295">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-2295">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="bba99-2296">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2296">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="bba99-2297">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2297">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="bba99-2298">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2298">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="bba99-2299">数据</span><span class="sxs-lookup"><span data-stu-id="bba99-2299">Data</span></span>|<span data-ttu-id="bba99-2300">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="bba99-2300">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="bba99-2301">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="bba99-2301">Delimiting comma or blank line</span></span>|<span data-ttu-id="bba99-2302">空</span><span class="sxs-lookup"><span data-stu-id="bba99-2302">Empty</span></span>|  
|<span data-ttu-id="bba99-2303">#NULL#</span><span class="sxs-lookup"><span data-stu-id="bba99-2303">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="bba99-2304">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="bba99-2304">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="bba99-2305">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="bba99-2305">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="bba99-2306">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="bba99-2306">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="bba99-2307">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="bba99-2307">#ERROR `errornumber`#</span></span>|<span data-ttu-id="bba99-2308">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="bba99-2308">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="bba99-2309">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-2309">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2310">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="bba99-2310">The `Input` function is not localized.</span></span> <span data-ttu-id="bba99-2311">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="bba99-2311">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2312">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2312">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-2313">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2313">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2314">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2314">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="bba99-2315">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2315">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2316">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2316">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2317">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2317">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2318">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2318">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2319">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2319">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2320">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2320">Required.</span></span> <span data-ttu-id="bba99-2321">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2321">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-2322">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2322">Required.</span></span> <span data-ttu-id="bba99-2323">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2323">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="bba99-2324">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2324">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2325">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2325">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2326">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2326">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2327">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2327">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2328">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2328">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="bba99-2329">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2329">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2330">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-2330">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="bba99-2331">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2331">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="bba99-2332">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2332">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="bba99-2333">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2333">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="bba99-2334">数据</span><span class="sxs-lookup"><span data-stu-id="bba99-2334">Data</span></span>|<span data-ttu-id="bba99-2335">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="bba99-2335">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="bba99-2336">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="bba99-2336">Delimiting comma or blank line</span></span>|<span data-ttu-id="bba99-2337">空</span><span class="sxs-lookup"><span data-stu-id="bba99-2337">Empty</span></span>|  
|<span data-ttu-id="bba99-2338">#NULL#</span><span class="sxs-lookup"><span data-stu-id="bba99-2338">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="bba99-2339">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="bba99-2339">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="bba99-2340">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="bba99-2340">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="bba99-2341">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="bba99-2341">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="bba99-2342">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="bba99-2342">#ERROR `errornumber`#</span></span>|<span data-ttu-id="bba99-2343">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="bba99-2343">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="bba99-2344">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-2344">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2345">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="bba99-2345">The `Input` function is not localized.</span></span> <span data-ttu-id="bba99-2346">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="bba99-2346">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2347">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2347">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-2348">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2348">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2349">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2349">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="bba99-2350">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2350">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2351">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2351">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2352">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2352">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2353">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2353">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2354">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2354">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2355">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2355">Required.</span></span> <span data-ttu-id="bba99-2356">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2356">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-2357">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2357">Required.</span></span> <span data-ttu-id="bba99-2358">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2358">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="bba99-2359">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2359">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2360">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2360">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2361">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2361">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2362">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2362">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2363">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2363">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="bba99-2364">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2364">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2365">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-2365">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="bba99-2366">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2366">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="bba99-2367">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2367">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="bba99-2368">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2368">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="bba99-2369">数据</span><span class="sxs-lookup"><span data-stu-id="bba99-2369">Data</span></span>|<span data-ttu-id="bba99-2370">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="bba99-2370">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="bba99-2371">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="bba99-2371">Delimiting comma or blank line</span></span>|<span data-ttu-id="bba99-2372">空</span><span class="sxs-lookup"><span data-stu-id="bba99-2372">Empty</span></span>|  
|<span data-ttu-id="bba99-2373">#NULL#</span><span class="sxs-lookup"><span data-stu-id="bba99-2373">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="bba99-2374">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="bba99-2374">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="bba99-2375">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="bba99-2375">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="bba99-2376">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="bba99-2376">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="bba99-2377">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="bba99-2377">#ERROR `errornumber`#</span></span>|<span data-ttu-id="bba99-2378">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="bba99-2378">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="bba99-2379">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-2379">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2380">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="bba99-2380">The `Input` function is not localized.</span></span> <span data-ttu-id="bba99-2381">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="bba99-2381">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2382">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2382">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-2383">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2383">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2384">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2384">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="bba99-2385">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2385">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2386">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2386">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2387">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2387">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2388">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2388">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2389">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2389">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2390">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2390">Required.</span></span> <span data-ttu-id="bba99-2391">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2391">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-2392">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2392">Required.</span></span> <span data-ttu-id="bba99-2393">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2393">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="bba99-2394">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2394">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2395">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2395">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2396">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2396">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2397">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2397">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2398">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2398">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="bba99-2399">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2399">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2400">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-2400">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="bba99-2401">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2401">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="bba99-2402">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2402">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="bba99-2403">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2403">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="bba99-2404">数据</span><span class="sxs-lookup"><span data-stu-id="bba99-2404">Data</span></span>|<span data-ttu-id="bba99-2405">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="bba99-2405">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="bba99-2406">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="bba99-2406">Delimiting comma or blank line</span></span>|<span data-ttu-id="bba99-2407">空</span><span class="sxs-lookup"><span data-stu-id="bba99-2407">Empty</span></span>|  
|<span data-ttu-id="bba99-2408">#NULL#</span><span class="sxs-lookup"><span data-stu-id="bba99-2408">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="bba99-2409">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="bba99-2409">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="bba99-2410">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="bba99-2410">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="bba99-2411">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="bba99-2411">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="bba99-2412">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="bba99-2412">#ERROR `errornumber`#</span></span>|<span data-ttu-id="bba99-2413">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="bba99-2413">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="bba99-2414">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-2414">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2415">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="bba99-2415">The `Input` function is not localized.</span></span> <span data-ttu-id="bba99-2416">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="bba99-2416">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2417">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2417">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-2418">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2418">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2419">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2419">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="bba99-2420">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2420">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2421">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2422">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2422">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2423">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2423">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2424">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2424">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2425">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2425">Required.</span></span> <span data-ttu-id="bba99-2426">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2426">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-2427">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2427">Required.</span></span> <span data-ttu-id="bba99-2428">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2428">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="bba99-2429">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2429">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2430">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2430">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2431">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2431">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2432">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2432">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2433">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2433">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="bba99-2434">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2434">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2435">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-2435">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="bba99-2436">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2436">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="bba99-2437">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2437">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="bba99-2438">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2438">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="bba99-2439">数据</span><span class="sxs-lookup"><span data-stu-id="bba99-2439">Data</span></span>|<span data-ttu-id="bba99-2440">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="bba99-2440">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="bba99-2441">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="bba99-2441">Delimiting comma or blank line</span></span>|<span data-ttu-id="bba99-2442">空</span><span class="sxs-lookup"><span data-stu-id="bba99-2442">Empty</span></span>|  
|<span data-ttu-id="bba99-2443">#NULL#</span><span class="sxs-lookup"><span data-stu-id="bba99-2443">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="bba99-2444">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="bba99-2444">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="bba99-2445">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="bba99-2445">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="bba99-2446">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="bba99-2446">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="bba99-2447">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="bba99-2447">#ERROR `errornumber`#</span></span>|<span data-ttu-id="bba99-2448">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="bba99-2448">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="bba99-2449">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-2449">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2450">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="bba99-2450">The `Input` function is not localized.</span></span> <span data-ttu-id="bba99-2451">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="bba99-2451">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2452">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2452">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-2453">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2453">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2454">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2454">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="bba99-2455">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2455">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2456">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2456">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2457">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2457">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2458">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2458">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2459">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2459">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2460">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2460">Required.</span></span> <span data-ttu-id="bba99-2461">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2461">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-2462">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2462">Required.</span></span> <span data-ttu-id="bba99-2463">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2463">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="bba99-2464">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2464">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2465">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2465">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2466">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2466">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2467">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2467">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2468">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2468">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="bba99-2469">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2469">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2470">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-2470">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="bba99-2471">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2471">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="bba99-2472">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2472">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="bba99-2473">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2473">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="bba99-2474">数据</span><span class="sxs-lookup"><span data-stu-id="bba99-2474">Data</span></span>|<span data-ttu-id="bba99-2475">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="bba99-2475">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="bba99-2476">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="bba99-2476">Delimiting comma or blank line</span></span>|<span data-ttu-id="bba99-2477">空</span><span class="sxs-lookup"><span data-stu-id="bba99-2477">Empty</span></span>|  
|<span data-ttu-id="bba99-2478">#NULL#</span><span class="sxs-lookup"><span data-stu-id="bba99-2478">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="bba99-2479">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="bba99-2479">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="bba99-2480">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="bba99-2480">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="bba99-2481">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="bba99-2481">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="bba99-2482">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="bba99-2482">#ERROR `errornumber`#</span></span>|<span data-ttu-id="bba99-2483">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="bba99-2483">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="bba99-2484">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-2484">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2485">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="bba99-2485">The `Input` function is not localized.</span></span> <span data-ttu-id="bba99-2486">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="bba99-2486">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2487">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2487">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-2488">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2488">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2489">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2489">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="bba99-2490">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2490">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2491">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2491">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2492">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2492">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2493">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2493">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2494">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2494">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2495">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2495">Required.</span></span> <span data-ttu-id="bba99-2496">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2496">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="bba99-2497">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2497">Required.</span></span> <span data-ttu-id="bba99-2498">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2498">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="bba99-2499">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2499">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2500">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2500">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2501">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2501">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2502">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2502">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2503">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2503">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="bba99-2504">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2504">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2505">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="bba99-2505">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="bba99-2506">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2506">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="bba99-2507">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2507">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="bba99-2508">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2508">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="bba99-2509">数据</span><span class="sxs-lookup"><span data-stu-id="bba99-2509">Data</span></span>|<span data-ttu-id="bba99-2510">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="bba99-2510">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="bba99-2511">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="bba99-2511">Delimiting comma or blank line</span></span>|<span data-ttu-id="bba99-2512">空</span><span class="sxs-lookup"><span data-stu-id="bba99-2512">Empty</span></span>|  
|<span data-ttu-id="bba99-2513">#NULL#</span><span class="sxs-lookup"><span data-stu-id="bba99-2513">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="bba99-2514">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="bba99-2514">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="bba99-2515">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="bba99-2515">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="bba99-2516">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="bba99-2516">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="bba99-2517">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="bba99-2517">#ERROR `errornumber`#</span></span>|<span data-ttu-id="bba99-2518">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="bba99-2518">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="bba99-2519">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-2519">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2520">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="bba99-2520">The `Input` function is not localized.</span></span> <span data-ttu-id="bba99-2521">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="bba99-2521">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2522">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2522">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-2523">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2523">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2524">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2524">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="bba99-2525">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2525">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2526">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2526">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2527">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2527">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2528">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2528">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2529">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2529">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2530">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2530">Required.</span></span> <span data-ttu-id="bba99-2531">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2531">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="bba99-2532">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2532">Required.</span></span> <span data-ttu-id="bba99-2533">用于指定要读取的字符数的任何有效数值表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2533">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="bba99-2534">返回 <see langword="String" /> 值，该值包含以 <see langword="Input" /> 或 <see langword="Binary" /> 模式打开的文件中的字符。</span><span class="sxs-lookup"><span data-stu-id="bba99-2534">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="bba99-2535">相比 <see langword="InputString" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="bba99-2536">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="bba99-2537">一个字符串，该字符串包含以 <see langword="Input" /> 或 <see langword="Binary" /> 模式打开的文件中的字符。</span><span class="sxs-lookup"><span data-stu-id="bba99-2537">A string that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="bba99-2538">相比 <see langword="InputString" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-2538">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2539">`InputString`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2539">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2540">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2540">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2541">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2541">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2542">与读取的数据`InputString`函数通常通过使用写入到文件`Print`或`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2542">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="bba99-2543">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2543">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="bba99-2544">与不同`Input`函数，`InputString`函数将返回它所读取的所有字符。</span><span class="sxs-lookup"><span data-stu-id="bba99-2544">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="bba99-2545">这包括逗号、 回车符、 换行符、 引号和前导空格。</span><span class="sxs-lookup"><span data-stu-id="bba99-2545">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="bba99-2546">使用文件打开以进行`Binary`访问，请尝试使用通过文件读取`InputString`直到函数`EOF`返回`True`生成一个错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-2546">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="bba99-2547">使用`LOF`并`Loc`函数而不是`EOF`通过读取二进制文件时`InputString`，或使用`FileGet`当你使用`EOF`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2547">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2548">当从文件读取，不要根据文件扩展名的文件的内容的安全决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-2548">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="bba99-2549">例如，名为 form1.vb 的文件可能不是 Visual Basic 源文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2549">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2550">此示例使用`InputString`函数来从文件一次读取一个字符，并将其打印到`Output`窗口。</span><span class="sxs-lookup"><span data-stu-id="bba99-2550">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="bba99-2551">此示例假定`MyFile`是具有示例数据的多个行的文本文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2551">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2552"><paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="bba99-2552"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-2553"><paramref name="CharCount" />&lt; 0 或 &gt; 214。</span><span class="sxs-lookup"><span data-stu-id="bba99-2553"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2554">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2554">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2555">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2555">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2556">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2556">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="bba99-2557">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2557">Required.</span></span> <span data-ttu-id="bba99-2558">指定要删除的一个或多个文件名的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2558">A string expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="bba99-2559"><paramref name="PathName" /> 可以包含驱动器和目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="bba99-2559"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="bba99-2560">从磁盘中删除文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2560">Deletes files from a disk.</span></span> <span data-ttu-id="bba99-2561">相比 <see langword="Kill" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-2561">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="bba99-2562">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2562">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2563">`Kill` 支持使用多个字符 (`*`) 和单字符 (`?`) 通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2563">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="bba99-2564">**安全说明**若要执行，`Kill`函数要求`Read`并`PathDiscovery`标志的<xref:System.Security.Permissions.FileIOPermission>要对其授予对执行代码。</span><span class="sxs-lookup"><span data-stu-id="bba99-2564">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="bba99-2565">有关详细信息，请参阅<xref:System.Security.SecurityException>[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="bba99-2565">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2566">此示例使用`Kill`函数从磁盘中删除文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2566">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2567">目标文件打开。</span><span class="sxs-lookup"><span data-stu-id="bba99-2567">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="bba99-2568">目标文件未找到。</span><span class="sxs-lookup"><span data-stu-id="bba99-2568">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="bba99-2569">权限被拒绝。</span><span class="sxs-lookup"><span data-stu-id="bba99-2569">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2570">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2570">Required.</span></span> <span data-ttu-id="bba99-2571">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2571">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="bba99-2572">从打开的顺序文件中读取一行并将其赋值给一个 <see langword="String" /> 变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2572">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="bba99-2573">从打开的顺序文件中读取一行并将其赋值给一个 <see langword="String" /> 变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2573">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2574">`LineInput`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2574">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2575">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2575">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2576">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2576">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2577">与读取的数据`LineInput`通常通过使用写入到文件`Print`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2577">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2578">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="bba99-2578">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="bba99-2579">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2579">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="bba99-2580">`LineInput`函数从文件中的一个字符读取一次直到它遇到回车符 (`Chr(13)`) 或回车符/换行符 (`Chr(13) + Chr(10)`) 序列。</span><span class="sxs-lookup"><span data-stu-id="bba99-2580">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="bba99-2581">回车/换行符序列将跳过而不是追加到字符字符串。</span><span class="sxs-lookup"><span data-stu-id="bba99-2581">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2582">通过使用从文件中读取`LineInput`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2582">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2583">此示例使用`LineInput`函数来从顺序文件中读取一行，并将其分配给一个变量。</span><span class="sxs-lookup"><span data-stu-id="bba99-2583">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="bba99-2584">此示例假定`TestFile`是具有示例数据的多个行的文本文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2584">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="bba99-2585">到达文件末尾。</span><span class="sxs-lookup"><span data-stu-id="bba99-2585">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2586"><paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="bba99-2586"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2587">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2587">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2588">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2588">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2589">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2589">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2590">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2590">Required.</span></span> <span data-ttu-id="bba99-2591">任何有效的 <see langword="Integer" /> 文件号。</span><span class="sxs-lookup"><span data-stu-id="bba99-2591">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="bba99-2592">返回指定打开文件中当前读/写位置的值。</span><span class="sxs-lookup"><span data-stu-id="bba99-2592">Returns a value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="bba99-2593">打开文件中当前读/写位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2593">The current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2594">`Loc`函数是从零开始的使用它来检索文件中的第一个字节将返回 0。</span><span class="sxs-lookup"><span data-stu-id="bba99-2594">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="bba99-2595">`Loc`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2595">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2596">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2596">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2597">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2597">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2598">下面介绍每种文件访问模式的返回值：</span><span class="sxs-lookup"><span data-stu-id="bba99-2598">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="bba99-2599">模式</span><span class="sxs-lookup"><span data-stu-id="bba99-2599">Mode</span></span>|<span data-ttu-id="bba99-2600">返回值</span><span class="sxs-lookup"><span data-stu-id="bba99-2600">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="bba99-2601">读取或写入到文件中的最后一个记录的数目。</span><span class="sxs-lookup"><span data-stu-id="bba99-2601">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="bba99-2602">除以 128 文件中的当前字节位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2602">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="bba99-2603">但是，返回的信息`Loc`的顺序文件不是使用也不需要。</span><span class="sxs-lookup"><span data-stu-id="bba99-2603">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="bba99-2604">读取或写入的最后一个字节的位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2604">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2605">此示例使用`Loc`函数以返回打开的文件中的当前读/写位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2605">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="bba99-2606">此示例假定`MyFile`是具有示例数据的多个行的文本文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2606">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2607">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2607">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bba99-2608">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="bba99-2608">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="bba99-2609">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2609">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="bba99-2610">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2610">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2611">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2611">Required.</span></span> <span data-ttu-id="bba99-2612">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2612">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="bba99-2613">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="bba99-2613">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="bba99-2614">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2614">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="bba99-2615">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2615">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2616">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2616">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="bba99-2617">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="bba99-2617">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="bba99-2618">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="bba99-2618">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="bba99-2619">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2619">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="bba99-2620">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="bba99-2620">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="bba99-2621">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2621">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2622">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2622">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="bba99-2623">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2623">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2624">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2624">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2625">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2625">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2626">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2626">Required.</span></span> <span data-ttu-id="bba99-2627">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2627">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="bba99-2628">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-2628">Optional.</span></span> <span data-ttu-id="bba99-2629">唯一要锁定或取消锁定的记录号或字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2629">Number of the only record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="bba99-2630">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="bba99-2630">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="bba99-2631">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="bba99-2632">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2633">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2633">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="bba99-2634">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="bba99-2634">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="bba99-2635">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="bba99-2635">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="bba99-2636">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2636">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="bba99-2637">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="bba99-2637">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="bba99-2638">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2638">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2639">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2639">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="bba99-2640">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2640">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2641">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2641">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2642">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2642">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2643">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2643">Required.</span></span> <span data-ttu-id="bba99-2644">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2644">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="bba99-2645">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-2645">Optional.</span></span> <span data-ttu-id="bba99-2646">第一个要锁定或取消锁定的记录号或字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2646">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="bba99-2647">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-2647">Optional.</span></span> <span data-ttu-id="bba99-2648">最后一个要锁定或取消锁定的记录号或字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2648">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="bba99-2649">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="bba99-2649">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="bba99-2650">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="bba99-2651">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2652">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2652">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="bba99-2653">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="bba99-2653">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="bba99-2654">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="bba99-2654">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="bba99-2655">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2655">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="bba99-2656">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="bba99-2656">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="bba99-2657">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2657">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2658">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2658">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="bba99-2659">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2659">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2660">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2660">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2661">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2661">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2662">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2662">Required.</span></span> <span data-ttu-id="bba99-2663">一个包含有效文件号的整数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2663">An integer that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="bba99-2664">返回使用 <see langword="FileOpen" /> 函数打开的文件的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="bba99-2664">Returns the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="bba99-2665">相比 <see langword="LOF" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-2665">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="bba99-2666">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2666">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="bba99-2667">使用 <see langword="FileOpen" /> 函数打开的文件的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="bba99-2667">The size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="bba99-2668">相比 <see langword="LOF" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-2668">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2669">使用`FileLen`函数以获取未打开的文件的长度。</span><span class="sxs-lookup"><span data-stu-id="bba99-2669">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2670">此示例使用`LOF`函数来确定打开的文件的大小。</span><span class="sxs-lookup"><span data-stu-id="bba99-2670">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="bba99-2671">此示例假定`TestFile`是一个文本文件，其中包含示例数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2671">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2672">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2672">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-2673">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-2673">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-2674">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-2674">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="bba99-2675">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2675">Required.</span></span> <span data-ttu-id="bba99-2676">标识要创建的目录的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2676">A string expression that identifies the directory to be created.</span></span> <span data-ttu-id="bba99-2677"><paramref name="Path" /> 可以包含驱动器。</span><span class="sxs-lookup"><span data-stu-id="bba99-2677">The <paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="bba99-2678">如果未指定驱动器，则 <see langword="MkDir" /> 在当前驱动器上创建新目录。</span><span class="sxs-lookup"><span data-stu-id="bba99-2678">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="bba99-2679">新建目录。</span><span class="sxs-lookup"><span data-stu-id="bba99-2679">Creates a new directory.</span></span> <span data-ttu-id="bba99-2680">相比 <see langword="MkDir" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="bba99-2681">有关详情，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2681">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2682">此函数创建一个新目录。</span><span class="sxs-lookup"><span data-stu-id="bba99-2682">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2683">此示例使用`MkDir`函数来创建一个目录。</span><span class="sxs-lookup"><span data-stu-id="bba99-2683">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="bba99-2684">如果未指定驱动器，则当前驱动器上创建新目录。</span><span class="sxs-lookup"><span data-stu-id="bba99-2684">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-2685"><paramref name="Path" /> 未指定或为空。</span><span class="sxs-lookup"><span data-stu-id="bba99-2685"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="bba99-2686">权限被拒绝。</span><span class="sxs-lookup"><span data-stu-id="bba99-2686">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2687">目录已存在。</span><span class="sxs-lookup"><span data-stu-id="bba99-2687">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md"><span data-ttu-id="bba99-2688">如何：在 Visual Basic 中创建目录</span><span class="sxs-lookup"><span data-stu-id="bba99-2688">How to: Create a Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2689">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2689">Required.</span></span> <span data-ttu-id="bba99-2690">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2690">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="bba99-2691">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-2691">Optional.</span></span> <span data-ttu-id="bba99-2692">要写入文件的零个或多个由逗号分隔的表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2692">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="bba99-2693"><paramref name="Output" /> 参数的设置是：</span><span class="sxs-lookup"><span data-stu-id="bba99-2693">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="bba99-2694"><see langword="T:System.IO.IOException" />：文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2694"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="bba99-2695"><see langword="T:System.IO.IOException" />：<paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="bba99-2695"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="bba99-2696">将已设置显示格式的数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2696">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2697">`Print`和`PrintLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2697">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2698">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2698">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2699">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2699">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2700">`Print` 不包括换行符末尾的行;但是，`PrintLine`包括换行符。</span><span class="sxs-lookup"><span data-stu-id="bba99-2700">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="bba99-2701">与写入的数据`Print`从文件通常通过使用读取`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2701">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="bba99-2702">如果省略`Output`有关`PrintLine`，该文件; 有关打印一个空行`Print`，没有输出。</span><span class="sxs-lookup"><span data-stu-id="bba99-2702">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="bba99-2703">用逗号分隔的多个表达式将对齐选项卡边界，但混合使用逗号和`TAB`可能会导致不一致的结果。</span><span class="sxs-lookup"><span data-stu-id="bba99-2703">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="bba99-2704">有关`Boolean`数据，而是`True`或`False`打印。</span><span class="sxs-lookup"><span data-stu-id="bba99-2704">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="bba99-2705">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2705">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="bba99-2706">日期数据写入该文件使用您的系统所识别的标准的短日期格式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2706">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="bba99-2707">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2707">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="bba99-2708">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="bba99-2708">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="bba99-2709">但是，如果`Output`列表中的数据`DBNull`，`Null`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2709">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="bba99-2710">有关`Error`数据，输出将显示为`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2710">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="bba99-2711">`Error`关键字不会转换而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2711">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="bba99-2712">通过使用写入到文件的所有数据`Print`是国际上通用的; 即，数据的正确格式使用相应的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="bba99-2712">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="bba99-2713">如果用户想要输出以供多个区域设置数据`Write`应使用。</span><span class="sxs-lookup"><span data-stu-id="bba99-2713">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="bba99-2714">通过使用对文件进行写入`Print`或`PrintLine`函数要求`Write`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2714">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-2715">有关更多信息，请参见<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2715">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2716">此示例使用`Print`和`PrintLine`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2716">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2717">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2717">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2718">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2718">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2719">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2719">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2720">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2720">Required.</span></span> <span data-ttu-id="bba99-2721">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2721">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="bba99-2722">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-2722">Optional.</span></span> <span data-ttu-id="bba99-2723">要写入文件的零个或多个由逗号分隔的表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2723">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="bba99-2724"><paramref name="Output" /> 参数的设置是：</span><span class="sxs-lookup"><span data-stu-id="bba99-2724">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="bba99-2725"><see langword="T:System.IO.IOException" />：文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2725"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="bba99-2726"><see langword="T:System.IO.IOException" />：<paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="bba99-2726"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="bba99-2727">将已设置显示格式的数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2727">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2728">`Print`和`PrintLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2728">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2729">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2729">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2730">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2730">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2731">`Print` 不包括换行符末尾的行;但是，`PrintLine`包括换行符。</span><span class="sxs-lookup"><span data-stu-id="bba99-2731">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="bba99-2732">与写入的数据`Print`从文件通常通过使用读取`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2732">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="bba99-2733">如果省略`Output`有关`PrintLine`，该文件; 有关打印一个空行`Print`，没有输出。</span><span class="sxs-lookup"><span data-stu-id="bba99-2733">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="bba99-2734">用逗号分隔的多个表达式将对齐选项卡边界，但混合使用逗号和`TAB`可能会导致不一致的结果。</span><span class="sxs-lookup"><span data-stu-id="bba99-2734">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="bba99-2735">有关`Boolean`数据，而是`True`或`False`打印。</span><span class="sxs-lookup"><span data-stu-id="bba99-2735">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="bba99-2736">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2736">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="bba99-2737">日期数据写入文件，通过使用系统所识别的标准的短日期格式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2737">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="bba99-2738">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2738">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="bba99-2739">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="bba99-2739">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="bba99-2740">但是，如果`Output`列表中的数据`DBNull`，`Null`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2740">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="bba99-2741">有关`Error`数据，输出将显示为`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2741">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="bba99-2742">`Error`关键字不会转换而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2742">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="bba99-2743">通过使用写入到文件的所有数据`Print`是国际上通用的; 即，数据的正确格式使用相应的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="bba99-2743">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="bba99-2744">如果用户想要输出以供多个区域设置数据`Write`应使用。</span><span class="sxs-lookup"><span data-stu-id="bba99-2744">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="bba99-2745">通过使用对文件进行写入`Print`或`PrintLine`函数要求`Write`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-2745">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-2746">有关更多信息，请参见<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2746">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2747">此示例使用`Print`和`PrintLine`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2747">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2748">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2748">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-2749">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2749">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-2750">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-2750">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="bba99-2751">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2751">Required.</span></span> <span data-ttu-id="bba99-2752">指定现有文件名和位置的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2752">A string expression that specifies the existing file name and location.</span></span> <span data-ttu-id="bba99-2753"><paramref name="OldPath" /> 可包含文件的目录和驱动器。</span><span class="sxs-lookup"><span data-stu-id="bba99-2753"><paramref name="OldPath" /> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="bba99-2754">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2754">Required.</span></span> <span data-ttu-id="bba99-2755">指定新文件名和位置的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2755">A string expression that specifies the new file name and location.</span></span> <span data-ttu-id="bba99-2756"><paramref name="NewPath" /> 可包含目标位置的目录和驱动器。</span><span class="sxs-lookup"><span data-stu-id="bba99-2756"><paramref name="NewPath" /> may include directory and drive of the destination location.</span></span> <span data-ttu-id="bba99-2757"><paramref name="NewPath" /> 指定的文件名不能是已存在的文件名。</span><span class="sxs-lookup"><span data-stu-id="bba99-2757">The file name specified by <paramref name="NewPath" /> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="bba99-2758">重命名磁盘文件或目录。</span><span class="sxs-lookup"><span data-stu-id="bba99-2758">Renames a disk file or directory.</span></span> <span data-ttu-id="bba99-2759">相比 <see langword="Rename" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-2759">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="bba99-2760">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2760">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2761">`Rename`函数重命名文件，并将其移动到另一个目录，如有必要。</span><span class="sxs-lookup"><span data-stu-id="bba99-2761">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="bba99-2762">`Rename`函数可以将一个文件，在驱动器，但它只能重命名现有目录时同时`NewPath`和`OldPath`位于同一驱动器上。</span><span class="sxs-lookup"><span data-stu-id="bba99-2762">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="bba99-2763">`Rename` 无法创建新文件或目录。</span><span class="sxs-lookup"><span data-stu-id="bba99-2763">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="bba99-2764">使用`Rename`函数对打开的文件会产生错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-2764">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="bba99-2765">重命名之前，必须关闭打开的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2765">You must close an open file before renaming it.</span></span> <span data-ttu-id="bba99-2766">`Rename` 参数不能包含多个字符 （\*） 和单字符 （？） 通配符。</span><span class="sxs-lookup"><span data-stu-id="bba99-2766">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bba99-2767">当使用`Rename`将文件从受保护的位置复制到受保护的位置，则文件，将保留不太受限制的权限。</span><span class="sxs-lookup"><span data-stu-id="bba99-2767">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="bba99-2768">检查以确保没有引入可能的安全风险。</span><span class="sxs-lookup"><span data-stu-id="bba99-2768">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2769">此示例使用`Rename`函数重命名文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2769">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="bba99-2770">对于此示例中，假定已指定的目录存在。</span><span class="sxs-lookup"><span data-stu-id="bba99-2770">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-2771">路径无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2771">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="bba99-2772"><paramref name="OldPath" /> 文件不存在。</span><span class="sxs-lookup"><span data-stu-id="bba99-2772"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2773">无法重命名为不同的设备。</span><span class="sxs-lookup"><span data-stu-id="bba99-2773">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md"><span data-ttu-id="bba99-2774">如何：在 Visual Basic 中重命名文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2774">How to: Rename a File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bba99-2775">关闭所有使用 <see langword="FileOpen" /> 函数打开的磁盘文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2775">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="bba99-2776">相比 <see langword="Reset" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-2776">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="bba99-2777">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2777">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2778">`Reset`函数将关闭打开的所有活动文件`FileOpen`函数，并具有相同的功能`FileClose()`不带任何参数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2778">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2779">此示例使用`Reset`函数来关闭所有打开的文件，并将所有文件缓冲区的内容写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="bba99-2779">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="bba99-2780">请注意，使用`Object`变量`FileNumber`作为一个字符串和数字。</span><span class="sxs-lookup"><span data-stu-id="bba99-2780">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="bba99-2781">End 语句</span><span class="sxs-lookup"><span data-stu-id="bba99-2781">End Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="bba99-2782">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2782">Required.</span></span> <span data-ttu-id="bba99-2783">标识要移除的目录或文件夹的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2783">A string expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="bba99-2784"><paramref name="Path" /> 可以包含驱动器。</span><span class="sxs-lookup"><span data-stu-id="bba99-2784"><paramref name="Path" /> can include the drive.</span></span> <span data-ttu-id="bba99-2785">如果未指定驱动器，则 <see langword="RmDir" /> 移除当前驱动器上的目录。</span><span class="sxs-lookup"><span data-stu-id="bba99-2785">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="bba99-2786">移除现有目录。</span><span class="sxs-lookup"><span data-stu-id="bba99-2786">Removes an existing directory.</span></span> <span data-ttu-id="bba99-2787">相比 <see langword="RmDir" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-2787">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="bba99-2788">有关详情，请参阅<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2788">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2789">如果你尝试使用出错`RmDir`上包含文件的目录。</span><span class="sxs-lookup"><span data-stu-id="bba99-2789">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="bba99-2790">使用`Kill`函数删除所有文件，再尝试删除一个目录。</span><span class="sxs-lookup"><span data-stu-id="bba99-2790">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2791">此示例使用`RmDir`函数来删除现有目录。</span><span class="sxs-lookup"><span data-stu-id="bba99-2791">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-2792"><paramref name="Path" /> 未指定或为空。</span><span class="sxs-lookup"><span data-stu-id="bba99-2792"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2793">目标目录包含文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2793">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="bba99-2794">目录不存在。</span><span class="sxs-lookup"><span data-stu-id="bba99-2794">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bba99-2795">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2795">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="bba99-2796">相比 <see langword="Seek" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-2796">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="bba99-2797">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2797">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2798">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2798">Required.</span></span> <span data-ttu-id="bba99-2799">一个包含有效文件号的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2799">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="bba99-2800">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2800">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="bba99-2801">相比 <see langword="Seek" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-2801">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="bba99-2802">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2802">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="bba99-2803">一个 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2803">A <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2804">`Seek` 返回 1 和 2,147,483,647 之间的值 (等效于 2 ^31-1)，非独占。</span><span class="sxs-lookup"><span data-stu-id="bba99-2804">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="bba99-2805">下面介绍每个文件访问模式的返回的值：</span><span class="sxs-lookup"><span data-stu-id="bba99-2805">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="bba99-2806">模式</span><span class="sxs-lookup"><span data-stu-id="bba99-2806">Mode</span></span>|<span data-ttu-id="bba99-2807">返回值</span><span class="sxs-lookup"><span data-stu-id="bba99-2807">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="bba99-2808">读取或写入的下一个记录的数目</span><span class="sxs-lookup"><span data-stu-id="bba99-2808">Number of the next record read or written</span></span>|  
|<span data-ttu-id="bba99-2809">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="bba99-2809">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="bba99-2810">下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2810">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="bba99-2811">在文件中的第一个字节位于位置 1，第二个字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-2811">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2812">此示例使用`Seek`函数以返回当前文件位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2812">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="bba99-2813">该示例假定`TestFile`是包含记录的结构的一个文件`Record`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2813">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="bba99-2814">打开的文件中`Random`模式下，`Seek`返回下一条记录的数目。</span><span class="sxs-lookup"><span data-stu-id="bba99-2814">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="bba99-2815">而不在模式下打开的文件`Random`模式下，`Seek`返回下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2815">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="bba99-2816">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2816">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="bba99-2817">此示例使用`Seek`函数将位置设置为下一次读取或写入的文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-2817">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="bba99-2818">而不在模式下打开的文件`Random`模式下，`Seek`设置下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2818">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="bba99-2819">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2819">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2820">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2820">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-2821">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-2821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-2822">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-2822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2823">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2823">Required.</span></span> <span data-ttu-id="bba99-2824">一个包含有效文件号的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2824">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="bba99-2825">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2825">Required.</span></span> <span data-ttu-id="bba99-2826">一个 1 到 2,147,483,647 范围内（包括 1 和 2,147,483,647）的数字，用于指示下一个读取/写入操作应该发生的位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2826">Number in the range 1-2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="bba99-2827">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2827">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="bba99-2828">相比 <see langword="Seek" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-2828">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="bba99-2829">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2829">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2830">`Seek` 返回 1 和 2,147,483,647 之间的值 (等效于 2 ^31-1)，非独占。</span><span class="sxs-lookup"><span data-stu-id="bba99-2830">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="bba99-2831">下面介绍每个文件访问模式的返回的值：</span><span class="sxs-lookup"><span data-stu-id="bba99-2831">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="bba99-2832">模式</span><span class="sxs-lookup"><span data-stu-id="bba99-2832">Mode</span></span>|<span data-ttu-id="bba99-2833">返回值</span><span class="sxs-lookup"><span data-stu-id="bba99-2833">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="bba99-2834">读取或写入的下一个记录的数目</span><span class="sxs-lookup"><span data-stu-id="bba99-2834">Number of the next record read or written</span></span>|  
|<span data-ttu-id="bba99-2835">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="bba99-2835">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="bba99-2836">下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2836">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="bba99-2837">在文件中的第一个字节位于位置 1，第二个字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="bba99-2837">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2838">此示例使用`Seek`函数以返回当前文件位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2838">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="bba99-2839">该示例假定`TestFile`是包含记录的结构的一个文件`Record`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2839">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="bba99-2840">打开的文件中`Random`模式下，`Seek`返回下一条记录的数目。</span><span class="sxs-lookup"><span data-stu-id="bba99-2840">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="bba99-2841">而不在模式下打开的文件`Random`模式下，`Seek`返回下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2841">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="bba99-2842">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2842">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="bba99-2843">此示例使用`Seek`函数将位置设置为下一次读取或写入的文件中。</span><span class="sxs-lookup"><span data-stu-id="bba99-2843">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="bba99-2844">而不在模式下打开的文件`Random`模式下，`Seek`设置下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2844">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="bba99-2845">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2845">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2846">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2846">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="bba99-2847">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-2847">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="bba99-2848">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-2848">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="bba99-2849">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2849">Required.</span></span> <span data-ttu-id="bba99-2850">指定一个文件名的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2850">A string expression that specifies a file name.</span></span> <span data-ttu-id="bba99-2851"><paramref name="PathName" /> 可以包含驱动器和目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="bba99-2851"><paramref name="PathName" /> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="bba99-2852">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2852">Required.</span></span> <span data-ttu-id="bba99-2853">常量或数值表达式，所有这些值一起指定文件特性。</span><span class="sxs-lookup"><span data-stu-id="bba99-2853">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="bba99-2854">设置文件的特性信息。</span><span class="sxs-lookup"><span data-stu-id="bba99-2854">Sets attribute information for a file.</span></span> <span data-ttu-id="bba99-2855">相比 <see langword="SetAttr" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="bba99-2855">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="bba99-2856">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2856">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2857">如果您尝试设置打开的文件的属性，会发生运行时错误。</span><span class="sxs-lookup"><span data-stu-id="bba99-2857">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="bba99-2858">`Attributes`参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="bba99-2858">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="bba99-2859">值</span><span class="sxs-lookup"><span data-stu-id="bba99-2859">Value</span></span>|<span data-ttu-id="bba99-2860">返回的常量</span><span class="sxs-lookup"><span data-stu-id="bba99-2860">Constant</span></span>|<span data-ttu-id="bba99-2861">描述</span><span class="sxs-lookup"><span data-stu-id="bba99-2861">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="bba99-2862">正常 （默认值）。</span><span class="sxs-lookup"><span data-stu-id="bba99-2862">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="bba99-2863">只读。</span><span class="sxs-lookup"><span data-stu-id="bba99-2863">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="bba99-2864">隐藏。</span><span class="sxs-lookup"><span data-stu-id="bba99-2864">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="bba99-2865">系统文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2865">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="bba99-2866">卷标</span><span class="sxs-lookup"><span data-stu-id="bba99-2866">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="bba99-2867">目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="bba99-2867">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="bba99-2868">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="bba99-2868">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="bba99-2869">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="bba99-2869">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2870">这些枚举是由 Visual Basic 语言指定的。</span><span class="sxs-lookup"><span data-stu-id="bba99-2870">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="bba99-2871">名称可以是任意位置在代码中使用而不是实际值。</span><span class="sxs-lookup"><span data-stu-id="bba99-2871">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2872">此示例使用`SetAttr`函数设置的文件的属性。</span><span class="sxs-lookup"><span data-stu-id="bba99-2872">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bba99-2873"><paramref name="Attribute" /> 类型无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2873"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="bba99-2874">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2874">Required.</span></span> <span data-ttu-id="bba99-2875">在显示或输出列表中下一个表达式之前要插入的空格数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2875">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="bba99-2876">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="bba99-2876">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="bba99-2877">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="bba99-2877">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2878">如果`Count`小于输出行宽下, 一个输出位置立即遵循打印的空格数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2878">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="bba99-2879">如果`Count`大于输出行宽，`SPC`计算使用的公式的下一步打印位置：</span><span class="sxs-lookup"><span data-stu-id="bba99-2879">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="bba99-2880">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="bba99-2880">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="bba99-2881">例如，如果当前输出位置为 24，输出行的宽度为 80，并指定`SPC(90)`下, 一步的输出将从开始位置 34 （当前打印位置 + 90/80 的其余部分）。</span><span class="sxs-lookup"><span data-stu-id="bba99-2881">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="bba99-2882">如果当前的输出位置和输出行宽度之间的区别是小于`Count`(或`Count` `Mod` *宽度*)，则`SPC`函数将跳至下一行，并生成空间等于`Count`-(*宽度* - *小于*)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2882">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` - (*width* - *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2883">请确保表格列的宽度足以允许较宽的字母。</span><span class="sxs-lookup"><span data-stu-id="bba99-2883">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2884">此示例使用`SPC`函数以定位输出文件中并在**输出**窗口。</span><span class="sxs-lookup"><span data-stu-id="bba99-2884">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="bba99-2885">Mod 运算符 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-2885">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bba99-2886">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="bba99-2886">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bba99-2887">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="bba99-2887">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="bba99-2888">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="bba99-2888">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2889">如果当前行上的当前打印位置大于`Column`，`TAB`将跳到列的值等于`Column`下一步的输出行上。</span><span class="sxs-lookup"><span data-stu-id="bba99-2889">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="bba99-2890">如果`Column`小于 1，`TAB`将打印位置移动到第 1 列。</span><span class="sxs-lookup"><span data-stu-id="bba99-2890">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="bba99-2891">如果`Column`大于输出行宽，`TAB`计算使用的公式的下一步打印位置：</span><span class="sxs-lookup"><span data-stu-id="bba99-2891">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="bba99-2892">Mod 列宽</span><span class="sxs-lookup"><span data-stu-id="bba99-2892">Column Mod width</span></span>  
  
 <span data-ttu-id="bba99-2893">例如，如果*宽度*是 80，并指定`TAB(90)`下, 一步的输出将从开始第 10 （90/80 的余数） 列。</span><span class="sxs-lookup"><span data-stu-id="bba99-2893">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="bba99-2894">如果`Column`小于当前打印位置，开始计算的输出位置的下一行上。</span><span class="sxs-lookup"><span data-stu-id="bba99-2894">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="bba99-2895">如果计算出的打印位置大于当前打印位置，打印开始计算打印位置在同一行。</span><span class="sxs-lookup"><span data-stu-id="bba99-2895">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="bba99-2896">输出行上最左侧的打印位置始终为 1。</span><span class="sxs-lookup"><span data-stu-id="bba99-2896">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="bba99-2897">当你使用`Print`或`PrintLine`函数来打印到文件，右侧的输出位置是输出文件，您可以使用设置的当前宽度`FileWidth`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2897">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="bba99-2898">`TAB`函数也可以用于`WriteLine`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2898">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="bba99-2899">它不能用于<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2899">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2900">请确保表格列的宽度足以包含较宽的字母。</span><span class="sxs-lookup"><span data-stu-id="bba99-2900">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2901">此示例使用`TAB`函数以定位输出文件中并在**输出**窗口。</span><span class="sxs-lookup"><span data-stu-id="bba99-2901">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="bba99-2902">Mod 运算符 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-2902">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="bba99-2903">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-2903">Optional.</span></span> <span data-ttu-id="bba99-2904">在显示或输出列表中下一个表达式之前要移动到的列号。</span><span class="sxs-lookup"><span data-stu-id="bba99-2904">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="bba99-2905">如果省略它，则 <see langword="TAB" /> 将插入点移动到下一个打印区域的开始位置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2905">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="bba99-2906">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="bba99-2906">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="bba99-2907">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="bba99-2907">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2908">如果当前行上的当前打印位置大于`Column`，`TAB`将跳到列的值等于`Column`下一步的输出行上。</span><span class="sxs-lookup"><span data-stu-id="bba99-2908">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="bba99-2909">如果`Column`小于 1，`TAB`将打印位置移动到第 1 列。</span><span class="sxs-lookup"><span data-stu-id="bba99-2909">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="bba99-2910">如果`Column`大于输出行宽，`TAB`计算使用的公式的下一步打印位置：</span><span class="sxs-lookup"><span data-stu-id="bba99-2910">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="bba99-2911">Mod 列宽</span><span class="sxs-lookup"><span data-stu-id="bba99-2911">Column Mod width</span></span>  
  
 <span data-ttu-id="bba99-2912">例如，如果*宽度*是 80，并指定`TAB(90)`下, 一步的输出将从开始第 10 （90/80 的余数） 列。</span><span class="sxs-lookup"><span data-stu-id="bba99-2912">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="bba99-2913">如果`Column`小于当前打印位置，开始计算的输出位置的下一行上。</span><span class="sxs-lookup"><span data-stu-id="bba99-2913">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="bba99-2914">如果计算出的打印位置大于当前打印位置，打印开始计算打印位置在同一行。</span><span class="sxs-lookup"><span data-stu-id="bba99-2914">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="bba99-2915">输出行上最左侧的打印位置始终为 1。</span><span class="sxs-lookup"><span data-stu-id="bba99-2915">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="bba99-2916">当你使用`Print`或`PrintLine`函数来打印到文件，右侧的输出位置是输出文件，您可以使用设置的当前宽度`FileWidth`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2916">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="bba99-2917">`TAB`函数也可以用于`WriteLine`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2917">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="bba99-2918">它不能用于<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="bba99-2918">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bba99-2919">请确保表格列的宽度足以包含较宽的字母。</span><span class="sxs-lookup"><span data-stu-id="bba99-2919">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2920">此示例使用`TAB`函数以定位输出文件中并在**输出**窗口。</span><span class="sxs-lookup"><span data-stu-id="bba99-2920">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="bba99-2921">Mod 运算符 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="bba99-2921">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bba99-2922">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="bba99-2922">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="bba99-2923">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2923">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="bba99-2924">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2924">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2925">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2925">Required.</span></span> <span data-ttu-id="bba99-2926">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2926">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="bba99-2927">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="bba99-2927">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="bba99-2928">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2928">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="bba99-2929">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2929">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2930">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2930">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="bba99-2931">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="bba99-2931">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="bba99-2932">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="bba99-2932">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="bba99-2933">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2933">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="bba99-2934">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="bba99-2934">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="bba99-2935">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2935">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2936">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2936">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="bba99-2937">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2937">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2938">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2938">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2939">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2939">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2940">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2940">Required.</span></span> <span data-ttu-id="bba99-2941">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2941">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="bba99-2942">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-2942">Optional.</span></span> <span data-ttu-id="bba99-2943">唯一要锁定或取消锁定的记录号或字节数</span><span class="sxs-lookup"><span data-stu-id="bba99-2943">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="bba99-2944">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="bba99-2944">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="bba99-2945">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2945">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="bba99-2946">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2946">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2947">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2947">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="bba99-2948">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="bba99-2948">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="bba99-2949">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="bba99-2949">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="bba99-2950">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2950">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="bba99-2951">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="bba99-2951">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="bba99-2952">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2952">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2953">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2953">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="bba99-2954">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2954">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2955">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2955">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2956">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2956">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2957">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2957">Required.</span></span> <span data-ttu-id="bba99-2958">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2958">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="bba99-2959">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-2959">Optional.</span></span> <span data-ttu-id="bba99-2960">第一个要锁定或取消锁定的记录号或字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2960">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="bba99-2961">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-2961">Optional.</span></span> <span data-ttu-id="bba99-2962">最后一个要锁定或取消锁定的记录号或字节数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2962">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="bba99-2963">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="bba99-2963">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="bba99-2964">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2964">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="bba99-2965">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="bba99-2965">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2966">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2966">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="bba99-2967">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="bba99-2967">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="bba99-2968">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="bba99-2968">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="bba99-2969">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2969">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="bba99-2970">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="bba99-2970">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="bba99-2971">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2971">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-2972">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="bba99-2972">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="bba99-2973">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2973">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-2974">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-2974">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-2975">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-2975">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-2976">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-2976">Required.</span></span> <span data-ttu-id="bba99-2977">包含任何有效文件数的 <see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2977">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="bba99-2978">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-2978">Optional.</span></span> <span data-ttu-id="bba99-2979">要写入文件的一个或多个由逗号分隔的表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2979">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="bba99-2980">将数据写入一个顺序文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2980">Writes data to a sequential file.</span></span> <span data-ttu-id="bba99-2981">通常使用 <see langword="Input" /> 从文件中读取使用 <see langword="Write" /> 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2981">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-2982">`Write`和`WriteLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2982">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-2983">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-2983">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-2984">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-2984">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-2985">如果省略`Output`，向文件打印一个空行。</span><span class="sxs-lookup"><span data-stu-id="bba99-2985">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="bba99-2986">可以用逗号分隔多个表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2986">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="bba99-2987">与不同`Print`函数，`Write`函数之间插入逗号项和引号将字符串写入该文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2987">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="bba99-2988">无需显式分隔符放入列表。</span><span class="sxs-lookup"><span data-stu-id="bba99-2988">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="bba99-2989">当`Write`用于将数据写入到文件中，仅数字`Boolean`，日期、 null 和`Error`支持数据格式。</span><span class="sxs-lookup"><span data-stu-id="bba99-2989">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="bba99-2990">下面的通用假设遵循这样的数据始终能够阅读和正确解释使用`Input`，无论区域设置：</span><span class="sxs-lookup"><span data-stu-id="bba99-2990">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="bba99-2991">使用句点作为小数分隔符始终写入数值数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-2991">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="bba99-2992">有关`Boolean`数据，而是`#TRUE#`或`#FALSE#`打印。</span><span class="sxs-lookup"><span data-stu-id="bba99-2992">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="bba99-2993">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2993">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="bba99-2994">日期数据写入到使用通用日期格式的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2994">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="bba99-2995">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-2995">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="bba99-2996">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="bba99-2996">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="bba99-2997">但是，对于 null 数据`#NULL#`写入。</span><span class="sxs-lookup"><span data-stu-id="bba99-2997">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="bba99-2998">有关`Error`数据，输出将显示为`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="bba99-2998">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="bba99-2999">`Error`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="bba99-2999">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="bba99-3000">`WriteLine` 将插入一个换行符 (即回车符/换行符，或`Chr(13) + Chr(10)`)，在其写入的最后一个字符后`Output`的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-3000">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="bba99-3001">您可以通过使用双引号引起来，在字符串中嵌入引号或""。</span><span class="sxs-lookup"><span data-stu-id="bba99-3001">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="bba99-3002">例如，应用于对象的</span><span class="sxs-lookup"><span data-stu-id="bba99-3002">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="bba99-3003">返回一个字符串值为`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="bba99-3003">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="bba99-3004">通过使用对文件进行写入`Write`或`WriteLine`函数要求`Append`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-3004">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-3005">有关更多信息，请参见<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-3005">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-3006">此示例使用`Write`函数将原始数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-3006">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="bba99-3007">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="bba99-3007">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-3008">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-3008">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-3009">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-3009">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-3010">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-3010">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="bba99-3011">必需。</span><span class="sxs-lookup"><span data-stu-id="bba99-3011">Required.</span></span> <span data-ttu-id="bba99-3012">包含任何有效文件数的 <see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-3012">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="bba99-3013">可选。</span><span class="sxs-lookup"><span data-stu-id="bba99-3013">Optional.</span></span> <span data-ttu-id="bba99-3014">要写入文件的一个或多个由逗号分隔的表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-3014">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="bba99-3015">将数据写入一个顺序文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-3015">Writes data to a sequential file.</span></span> <span data-ttu-id="bba99-3016">通常使用 <see langword="Input" /> 从文件中读取使用 <see langword="Write" /> 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-3016">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bba99-3017">`Write`和`WriteLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-3017">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="bba99-3018">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="bba99-3018">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="bba99-3019">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="bba99-3019">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="bba99-3020">如果省略`Output`，向文件打印一个空行。</span><span class="sxs-lookup"><span data-stu-id="bba99-3020">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="bba99-3021">可以用逗号分隔多个表达式。</span><span class="sxs-lookup"><span data-stu-id="bba99-3021">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="bba99-3022">与不同`Print`函数，`Write`函数之间插入逗号项和引号将字符串写入该文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-3022">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="bba99-3023">无需显式分隔符放入列表。</span><span class="sxs-lookup"><span data-stu-id="bba99-3023">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="bba99-3024">当`Write`用于将数据写入到文件中，仅数字`Boolean`，日期、 null 和`Error`支持数据格式。</span><span class="sxs-lookup"><span data-stu-id="bba99-3024">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="bba99-3025">下面的通用假设遵循这样的数据始终能够阅读和正确解释使用`Input`，无论区域设置：</span><span class="sxs-lookup"><span data-stu-id="bba99-3025">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="bba99-3026">使用句点作为小数分隔符始终写入数值数据。</span><span class="sxs-lookup"><span data-stu-id="bba99-3026">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="bba99-3027">有关`Boolean`数据，而是`#TRUE#`或`#FALSE#`打印。</span><span class="sxs-lookup"><span data-stu-id="bba99-3027">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="bba99-3028">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="bba99-3028">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="bba99-3029">日期数据写入到使用通用日期格式的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-3029">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="bba99-3030">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-3030">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="bba99-3031">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="bba99-3031">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="bba99-3032">但是，对于 null 数据`#NULL#`写入。</span><span class="sxs-lookup"><span data-stu-id="bba99-3032">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="bba99-3033">有关`Error`数据，输出将显示为`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="bba99-3033">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="bba99-3034">`Error`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="bba99-3034">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="bba99-3035">`WriteLine` 将插入一个换行符 (即回车符/换行符，或`Chr(13) + Chr(10)`)，在其写入的最后一个字符后`Output`的文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-3035">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="bba99-3036">您可以通过使用双引号引起来，在字符串中嵌入引号或""。</span><span class="sxs-lookup"><span data-stu-id="bba99-3036">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="bba99-3037">例如，应用于对象的</span><span class="sxs-lookup"><span data-stu-id="bba99-3037">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="bba99-3038">返回一个字符串值为`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="bba99-3038">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="bba99-3039">通过使用对文件进行写入`Write`或`WriteLine`函数要求`Append`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="bba99-3039">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="bba99-3040">有关更多信息，请参见<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="bba99-3040">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bba99-3041">此示例使用`Write`函数将原始数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="bba99-3041">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="bba99-3042">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="bba99-3042">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="bba99-3043">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-3043">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="bba99-3044">如何：向具有 Streamwriter (Visual Basic 中) 的文件写入文本</span><span class="sxs-lookup"><span data-stu-id="bba99-3044">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>