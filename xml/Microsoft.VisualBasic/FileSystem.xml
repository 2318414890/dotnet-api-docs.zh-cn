<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="76423e19c418e3145c1946201eeb07bad53c0200" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39908789" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a9bc6-101">
        <see langword="FileSystem" /> 模块包含用于执行文件、目录或文件夹以及系统操作的过程。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a9bc6-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="a9bc6-102">与使用 <see langword="My" /> 模块相比，<see langword="FileSystem" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a9bc6-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="a9bc6-103">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a9bc6-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-104">此模块支持的 Visual Basic 语言关键字和访问文件和文件夹的运行时库成员。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-105">此示例使用`GetAttr`函数来确定文件和目录或文件夹的属性。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="a9bc6-106">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-106">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-107">一个 <see langword="String" /> 表达式，用于标识哪个目录或文件夹将成为新的默认目录或文件夹。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="a9bc6-108">
            <c>Path</c> 可以包含驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-108">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="a9bc6-109">如果未指定驱动器，则 <see langword="ChDir" /> 更改当前驱动器上的默认目录或文件夹。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-110">更改当前目录或文件夹。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-110">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="a9bc6-111">与 <see langword="My" /> 函数相比，<see langword="ChDir" /> 功能在文件 I/O 操作方面可提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-112">有关详细信息，请参阅<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-113">`ChDir`函数更改默认目录，但不是在默认驱动器。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="a9bc6-114">例如，如果默认驱动器为 C，以下语句更改驱动器 D 上的默认目录，但 C 仍保留默认的驱动器：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="a9bc6-115">您可以进行相对目录更改为通过键入两个句点，如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-116">`ChDir`函数需要非托管的代码权限，这可能会影响在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="a9bc6-117">有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-118">此示例使用`ChDir`函数来更改当前目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-119">
            <paramref name="Path" /> 为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-119">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="a9bc6-120">指定的驱动器无效，或驱动器不可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-120">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a9bc6-121">更改当前驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-121">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="a9bc6-122">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-122">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-123">指定现有驱动器的字符串表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-123">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="a9bc6-124">如果提供一个零长度字符串 ("")，则当前驱动器不会更改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-124">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="a9bc6-125">如果 <c>Drive</c> 参数为多字符字符串，<see langword="ChDrive" /> 将仅使用第一个字母。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-126">更改当前驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-126">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-127">`ChDrive`函数需要非托管代码的权限，这可能会影响其在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="a9bc6-128">有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>并[代码访问权限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-129">此示例使用`ChDrive`函数来更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="a9bc6-130">如果驱动器不存在，该函数将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-131">指定的驱动器无效，或驱动器不可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-131">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="a9bc6-132">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-132">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-133">指定现有驱动器的字符串表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-133">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="a9bc6-134">如果提供一个零长度字符串 ("")，则当前驱动器不会更改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-134">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="a9bc6-135">如果 <c>Drive</c> 参数为多字符字符串，<see langword="ChDrive" /> 将仅使用第一个字母。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-136">更改当前驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-136">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-137">`ChDrive`函数需要非托管代码的权限，这可能会影响其在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="a9bc6-138">有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>并[代码访问权限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-139">此示例使用`ChDrive`函数来更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="a9bc6-140">如果驱动器不存在，该函数将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-141">指定的驱动器无效，或驱动器不可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-141">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a9bc6-142">返回表示当前路径的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-142">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="a9bc6-143">与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="a9bc6-144">有关详情，请参阅<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a9bc6-145">返回表示当前路径的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-145">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="a9bc6-146">与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="a9bc6-147">有关详情，请参阅<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-148">表示当前路径的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-148">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a9bc6-149">此示例使用`CurDir`函数以返回当前路径。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="a9bc6-150">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-150">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-151">指定现有驱动器的 <see langword="Char" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-151">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="a9bc6-152">如果未指定驱动器或 <c>Drive</c> 是零长度字符串 ("")，则 <see langword="CurDir" /> 返回当前驱动器的路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-153">返回表示当前路径的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="a9bc6-154">与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="a9bc6-155">有关详情，请参阅<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-156">表示当前路径的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a9bc6-157">此示例使用`CurDir`函数以返回当前路径。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a9bc6-158">返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="a9bc6-159">与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-160">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a9bc6-161">返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="a9bc6-162">与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-163">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-164">一个字符串，表示与指定模式或文件特性匹配的文件、目录或文件夹的名称，或者表示驱动器卷标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-165">`Dir`函数支持多个字符的使用 (`*`) 和单字符 (`?`) 通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="a9bc6-166">`VbVolume` 返回而不是特定文件名的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="a9bc6-167">必须提供`PathName`第一次调用`Dir`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="a9bc6-168">若要检索的下一项，你可以后续调用`Dir`不带参数的函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-169">若要正确运行，`Dir`函数需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>并<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>标志的<xref:System.Security.Permissions.FileIOPermission>要对其授予对执行代码。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="a9bc6-170">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，并[代码访问权限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="a9bc6-171">`Attributes`参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="a9bc6-172">值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-172">Value</span></span>|<span data-ttu-id="a9bc6-173">常量</span><span class="sxs-lookup"><span data-stu-id="a9bc6-173">Constant</span></span>|<span data-ttu-id="a9bc6-174">描述</span><span class="sxs-lookup"><span data-stu-id="a9bc6-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="a9bc6-175">默认值。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-175">Default.</span></span> <span data-ttu-id="a9bc6-176">指定文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="a9bc6-177">指定只读文件，以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="a9bc6-178">指定隐藏的文件，以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="a9bc6-179">指定系统文件以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="a9bc6-180">指定卷标签;如果指定任何其他属性，则`vbVolume`将被忽略。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="a9bc6-181">指定目录或文件夹，以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="a9bc6-182">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="a9bc6-183">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-184">这些枚举所指定的 Visual Basic 语言并可以在任意位置而不是实际值在代码中。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-185">此示例使用`Dir`函数检查是否存在某些文件和目录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="a9bc6-186">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-186">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-187">
            <see langword="String" /> 表达式，用于指定文件名、目录或文件夹名或者驱动器卷标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-187">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="a9bc6-188">如果未找到 <c>PathName</c>，则返回一个零长度字符串 (<see langword="&quot;&quot;" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes">
          <span data-ttu-id="a9bc6-189">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-189">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-190">其值指定文件特性的枚举或数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="a9bc6-191">如果省略，则 <see langword="Dir" /> 将返回与 <c>PathName</c> 匹配但不具有任何特性的文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-192">返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="a9bc6-193">与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-194">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-195">一个字符串，表示与指定模式或文件特性匹配的文件、目录或文件夹的名称，或者表示驱动器卷标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-196">`Dir`函数支持多个字符的使用 (`*`) 和单字符 (`?`) 通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="a9bc6-197">`VbVolume` 返回而不是特定文件名的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="a9bc6-198">必须提供`PathName`第一次调用`Dir`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="a9bc6-199">若要检索的下一项，你可以后续调用`Dir`不带任何参数的函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-200">若要正确运行，`Dir`函数需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>并<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>标志的<xref:System.Security.Permissions.FileIOPermission>要对其授予对执行代码。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="a9bc6-201">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，并[代码访问权限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="a9bc6-202">`Attributes`参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="a9bc6-203">值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-203">Value</span></span>|<span data-ttu-id="a9bc6-204">常量</span><span class="sxs-lookup"><span data-stu-id="a9bc6-204">Constant</span></span>|<span data-ttu-id="a9bc6-205">描述</span><span class="sxs-lookup"><span data-stu-id="a9bc6-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="a9bc6-206">默认值。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-206">Default.</span></span> <span data-ttu-id="a9bc6-207">指定不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="a9bc6-208">指定只读文件，除了不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="a9bc6-209">指定隐藏的文件，除了不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="a9bc6-210">指定系统文件，除了不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="a9bc6-211">指定卷标签;如果指定任何其他属性，则`vbVolume`将被忽略。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="a9bc6-212">指定目录或文件夹，以及不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="a9bc6-213">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="a9bc6-214">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-215">这些枚举所指定的 Visual Basic 语言，并可以代替实际值在代码中任意位置使用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-216">此示例使用`Dir`函数检查是否存在某些文件和目录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-217">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-217">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-218">一个包含任何有效文件号的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-218">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-219">当达到为进行 <see langword="True" /> 或顺序 <see langword="Random" /> 而打开的文件的结尾时，此方法返回布尔值 <see langword="Input" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-220">当达到为进行 <see langword="True" /> 或顺序 <see langword="Random" /> 而打开的文件的结尾时，此方法返回布尔值 <see langword="Input" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-221">使用`EOF`以避免通过尝试获取输入文件的末尾而产生的错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="a9bc6-222">`EOF`函数返回`False`直到达到文件末尾。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="a9bc6-223">使用文件打开以进行`Random`或`Binary`访问权限，`EOF`返回`False`直到最后一个执行`FileGet`函数不能读取完整记录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="a9bc6-224">使用文件打开以进行`Binary`访问，请尝试通过文件使用读取`Input`直到函数`EOF`返回`True`生成一个错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="a9bc6-225">使用`LOF`并`Loc`函数而不是`EOF`使用二进制文件中读取时`Input`，或使用`Get`时使用`EOF`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="a9bc6-226">使用文件打开以进行`Output`，`EOF`始终返回`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-227">此示例使用`EOF`函数来检测文件的末尾。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="a9bc6-228">此示例假定`Testfile`是一个文本文件，其中包含若干行文本。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-229">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-229">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-230">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-230">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-231">
            <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-231">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="a9bc6-232">任何有效的文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-232">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-233">返回一个枚举，该枚举表示使用 <see langword="FileOpen" /> 函数打开的文件的文件模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-234">与 <see langword="FileAttr" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-235">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-236">下列枚举值指示文件访问模式：</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-236">The following enumeration values indicate the file access mode:</span>
          </span>
          <span data-ttu-id="a9bc6-237">
            <list type="table">
              <item>
                <term> 值 </term>
                <description> 模式 </description>
              </item>
              <item>
                <term> 1 </term>
                <description>
                  <see langword="OpenMode.Input" />
                </description>
              </item>
              <item>
                <term> 2 </term>
                <description>
                  <see langword="OpenMode.Output" />
                </description>
              </item>
              <item>
                <term> 4 </term>
                <description>
                  <see langword="OpenMode.Random" />
                </description>
              </item>
              <item>
                <term> 8 </term>
                <description>
                  <see langword="OpenMode.Append" />
                </description>
              </item>
              <item>
                <term> 32 </term>
                <description>
                  <see langword="OpenMode.Binary" />
                </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-237">
              <list type="table">
                <item>
                  <term> Value  </term>
                  <description> Mode  </description>
                </item>
                <item>
                  <term> 1  </term>
                  <description>
                    <see langword="OpenMode.Input" />
                  </description>
                </item>
                <item>
                  <term> 2  </term>
                  <description>
                    <see langword="OpenMode.Output" />
                  </description>
                </item>
                <item>
                  <term> 4  </term>
                  <description>
                    <see langword="OpenMode.Random" />
                  </description>
                </item>
                <item>
                  <term> 8  </term>
                  <description>
                    <see langword="OpenMode.Append" />
                  </description>
                </item>
                <item>
                  <term> 32  </term>
                  <description>
                    <see langword="OpenMode.Binary" />
                  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-238">此函数返回一个枚举，表示使用打开的文件的文件模式`FileOpen`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-238">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-239">此示例使用`FileAttr`函数以返回打开的文件的文件模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-239">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="a9bc6-240">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-240">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-241">要关闭的 0 个或多个信道的参数数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-241">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-242">关闭对用 <see langword="FileOpen" /> 函数打开的文件的输入/输出 (I/O)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-242">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-243">
            <see langword="My" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-243">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="a9bc6-244">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-244">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-245">`FileClose`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-245">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-246">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-246">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-247">有关详细信息，请参阅[如何： 使用 StreamReader 文件中读取文本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)，[如何： 使用 StreamWriter 向文件写入文本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)，和[演练： 中操作文件和目录Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-247">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="a9bc6-248">如果省略`FileNumbers`，打开的所有活动文件`FileOpen`函数将关闭。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-248">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="a9bc6-249">当您关闭已打开的文件`Output`或`Append`，最终输出缓冲区写入到该文件的操作系统缓冲区。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-249">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="a9bc6-250">所有关联的缓冲区空间使用的已关闭发布文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-250">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="a9bc6-251">当`FileClose`执行函数，而其文件的文件的关联数字结束。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-251">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-252">此示例使用`FileClose`函数来关闭文件打开以进行`Input`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-252">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-253">
            <paramref name="FileNumber" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-253">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="a9bc6-254">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-254">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-255">指定要复制的文件的名称的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-255">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="a9bc6-256">
            <c>Source</c> 可以包含源文件的目录或文件夹以及驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-256">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="a9bc6-257">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-257">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-258">指定目标文件名的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-258">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="a9bc6-259">
            <c>Destination</c> 可以包含目标文件的目录或文件夹以及驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-259">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-260">复制文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-260">Copies a file.</span>
          </span>
          <span data-ttu-id="a9bc6-261">与 <see langword="FileCopy" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-261">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="a9bc6-262">有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-262">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-263">如果尝试使用`FileCopy`函数上当前打开的文件，就会出错。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-263">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="a9bc6-264">`FileCopy` 需要完全信任才能在本地驱动器上工作。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-264">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-265">此示例使用`FileCopy`函数将一个文件复制到另一个。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-265">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="a9bc6-266">在此示例中，假定`SrcFile`是包含数据的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-266">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-267">
            <paramref name="Source" /> 或 <paramref name="Destination" /> 无效或未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-267">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-268">文件已打开。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-268">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="a9bc6-269">文件不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-269">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="a9bc6-270">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-270">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-271">指定一个文件名的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-271">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="a9bc6-272">
            <c>PathName</c> 可以包含目录或文件夹以及驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-272">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-273">返回一个 <see langword="Date" /> 值，该值指示写入文件的日期和时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-273">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="a9bc6-274">与 <see langword="My" /> 相比，<see langword="FileDateTime" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-274">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="a9bc6-275">有关详细信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-275">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-276">
            <see langword="Date" /> 值，该值指示文件的创建日期和时间或上次修改日期和时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-276">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a9bc6-277">此示例使用`FileDateTime`函数来确定的日期和时间文件已创建或上次修改时间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-277">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="a9bc6-278">日期和时间显示格式基于系统的区域设置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-278">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-279">
            <paramref name="PathName" /> 无效或包含通配符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-279">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="a9bc6-280">目标文件不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-280">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a9bc6-281">将打开的磁盘文件中的数据读取到变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-281">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="a9bc6-282">与 <see langword="My" /> 相比，<see langword="FileGet" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-282">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="a9bc6-283">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-283">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-284">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-284">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-285">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-285">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-286">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-286">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-287">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-287">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-288">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-288">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-289">开始读取处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-289">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-290">将打开的磁盘文件中的数据读取到变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-290">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="a9bc6-291">与 <see langword="My" /> 相比，<see langword="FileGet" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-291">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="a9bc6-292">有关详细信息，请参见<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-292">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-293">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-293">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-294">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-294">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="a9bc6-295">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-295">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-296">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-296">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-297">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-297">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-298">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-298">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-299">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-299">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-300">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-300">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-301">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-301">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-302">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-302">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-303">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-303">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-304">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-304">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-305">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-305">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-306">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-306">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="a9bc6-307">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-307">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-308">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-308">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="a9bc6-309">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-309">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-310">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-310">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="a9bc6-311">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-311">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="a9bc6-312">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-312">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="a9bc6-313">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-313">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-314">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-314">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-315">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-315">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-316">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-316">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="a9bc6-317">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-317">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="a9bc6-318">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="a9bc6-318">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="a9bc6-319">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-319">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="a9bc6-320">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-320">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="a9bc6-321">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-321">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-322">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-322">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-323">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-323">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-324">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-324">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="a9bc6-325">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-325">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="a9bc6-326">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-326">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-327">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-327">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-328">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-328">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-329">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-329">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-330">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-330">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-331">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-331">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-332">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-332">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="a9bc6-333">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-333">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="a9bc6-334">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-334">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-335">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-335">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="a9bc6-336">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-336">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-337">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-337">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-338">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-338">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-339">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-339">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-340">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-340">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-341">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-341">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-342">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-342">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-343">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-343">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-344">开始读取处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-344">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-345">将打开的磁盘文件中的数据读取到变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-345">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="a9bc6-346">与 <see langword="My" /> 相比，<see langword="FileGet" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-346">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="a9bc6-347">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-347">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-348">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-348">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-349">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-349">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="a9bc6-350">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-350">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-351">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-351">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-352">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-352">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-353">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-353">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-354">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-354">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-355">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-355">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-356">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-356">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-357">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-357">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-358">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-358">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-359">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-359">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-360">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-360">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-361">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-361">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="a9bc6-362">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-362">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-363">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-363">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="a9bc6-364">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-364">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-365">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-365">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="a9bc6-366">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-366">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="a9bc6-367">如果未使用说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-367">If the descriptor is not used.</span></span> <span data-ttu-id="a9bc6-368">然后，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-368">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="a9bc6-369">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-369">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-370">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-370">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-371">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-371">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-372">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-372">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="a9bc6-373">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-373">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="a9bc6-374">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="a9bc6-374">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="a9bc6-375">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-375">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="a9bc6-376">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-376">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="a9bc6-377">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-377">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-378">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-378">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-379">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-379">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-380">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-380">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="a9bc6-381">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-381">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="a9bc6-382">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-382">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-383">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-383">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-384">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-384">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-385">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-385">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-386">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-386">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-387">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-387">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-388">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-388">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="a9bc6-389">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-389">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="a9bc6-390">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-390">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-391">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-391">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="a9bc6-392">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-392">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-393">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-393">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-394">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-394">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-395">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-395">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-396">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-396">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-397">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-397">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-398">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-398">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-399">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-399">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-400">开始读取处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-400">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-401">将打开的磁盘文件中的数据读取到变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-401">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="a9bc6-402">与 <see langword="My" /> 相比，<see langword="FileGet" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-402">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="a9bc6-403">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-403">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-404">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-404">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-405">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-405">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="a9bc6-406">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-406">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-407">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-407">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-408">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-408">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-409">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-409">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-410">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-410">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-411">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-411">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-412">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-412">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-413">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-413">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-414">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-414">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-415">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-415">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-416">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-416">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-417">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-417">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="a9bc6-418">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-418">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-419">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-419">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="a9bc6-420">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-420">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-421">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-421">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="a9bc6-422">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-422">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="a9bc6-423">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-423">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="a9bc6-424">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-424">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-425">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-425">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-426">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-426">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-427">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-427">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="a9bc6-428">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-428">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="a9bc6-429">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="a9bc6-429">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="a9bc6-430">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-430">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="a9bc6-431">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-431">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="a9bc6-432">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-432">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-433">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-433">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-434">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-434">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-435">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-435">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="a9bc6-436">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-436">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="a9bc6-437">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-437">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-438">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-438">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-439">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-439">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-440">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-440">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-441">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-441">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-442">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-442">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-443">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-443">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="a9bc6-444">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-444">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="a9bc6-445">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-445">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-446">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-446">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="a9bc6-447">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-447">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-448">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-448">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-449">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-449">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-450">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-450">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-451">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-451">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-452">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-452">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-453">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-453">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-454">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-454">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-455">开始读取处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-455">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-456">将打开的磁盘文件中的数据读取到变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-456">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="a9bc6-457">与 <see langword="My" /> 相比，<see langword="FileGet" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-457">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="a9bc6-458">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-458">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-459">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-459">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-460">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-460">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="a9bc6-461">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-461">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-462">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-462">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-463">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-463">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-464">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-464">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-465">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-465">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-466">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-466">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-467">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-467">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-468">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-468">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-469">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-469">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-470">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-470">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-471">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-471">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-472">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-472">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="a9bc6-473">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-473">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-474">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-474">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="a9bc6-475">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-475">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-476">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-476">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="a9bc6-477">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-477">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="a9bc6-478">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-478">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="a9bc6-479">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-479">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-480">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-480">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-481">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-481">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-482">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-482">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="a9bc6-483">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-483">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="a9bc6-484">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="a9bc6-484">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="a9bc6-485">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-485">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="a9bc6-486">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-486">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="a9bc6-487">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-487">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-488">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-488">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-489">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-489">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-490">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-490">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="a9bc6-491">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-491">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="a9bc6-492">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-492">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-493">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-493">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-494">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-494">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-495">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-495">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-496">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-496">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-497">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-497">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-498">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-498">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="a9bc6-499">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-499">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="a9bc6-500">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-500">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-501">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-501">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="a9bc6-502">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-502">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-503">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-503">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-504">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-504">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-505">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-505">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-506">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-506">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-507">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-507">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-508">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-508">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-509">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-509">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-510">开始读取处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-510">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-511">将打开的磁盘文件中的数据读取到变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-511">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="a9bc6-512">与 <see langword="My" /> 相比，<see langword="FileGet" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-512">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="a9bc6-513">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-513">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-514">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-514">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-515">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-515">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="a9bc6-516">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-516">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-517">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-517">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-518">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-518">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-519">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-519">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-520">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-520">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-521">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-521">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-522">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-522">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-523">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-523">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-524">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-524">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-525">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-525">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-526">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-526">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-527">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-527">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="a9bc6-528">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-528">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-529">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-529">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="a9bc6-530">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-530">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-531">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-531">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="a9bc6-532">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-532">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="a9bc6-533">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-533">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="a9bc6-534">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-534">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-535">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-535">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-536">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-536">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-537">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-537">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="a9bc6-538">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-538">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="a9bc6-539">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="a9bc6-539">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="a9bc6-540">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-540">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="a9bc6-541">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-541">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="a9bc6-542">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-542">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-543">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-543">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-544">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-544">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-545">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-545">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="a9bc6-546">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-546">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="a9bc6-547">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-547">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-548">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-548">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-549">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-549">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-550">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-550">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-551">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-551">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-552">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-552">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-553">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-553">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="a9bc6-554">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-554">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="a9bc6-555">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-555">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-556">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-556">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="a9bc6-557">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-557">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-558">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-558">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-559">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-559">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-560">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-560">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-561">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-561">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-562">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-562">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-563">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-563">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-564">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-564">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-565">开始读取处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-565">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-566">将打开的磁盘文件中的数据读取到变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-566">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="a9bc6-567">与 <see langword="My" /> 相比，<see langword="FileGet" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-567">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="a9bc6-568">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-568">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-569">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-569">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-570">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-570">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="a9bc6-571">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-571">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-572">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-572">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-573">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-573">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-574">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-574">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-575">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-575">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-576">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-576">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-577">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-577">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-578">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-578">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-579">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-579">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-580">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-580">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-581">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-581">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-582">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-582">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="a9bc6-583">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-583">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-584">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-584">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="a9bc6-585">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-585">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-586">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-586">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="a9bc6-587">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-587">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="a9bc6-588">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-588">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="a9bc6-589">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-589">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-590">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-590">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-591">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-591">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-592">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-592">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="a9bc6-593">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-593">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="a9bc6-594">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="a9bc6-594">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="a9bc6-595">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-595">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="a9bc6-596">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-596">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="a9bc6-597">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-597">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-598">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-598">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-599">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-599">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-600">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-600">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="a9bc6-601">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-601">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="a9bc6-602">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-602">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-603">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-603">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-604">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-604">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-605">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-605">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-606">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-606">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-607">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-607">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-608">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-608">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="a9bc6-609">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-609">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="a9bc6-610">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-610">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-611">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-611">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="a9bc6-612">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-612">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-613">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-613">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-614">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-614">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-615">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-615">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-616">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-616">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-617">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-617">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-618">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-618">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-619">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-619">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-620">开始读取处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-620">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-621">将打开的磁盘文件中的数据读取到变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-621">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="a9bc6-622">与 <see langword="My" /> 相比，<see langword="FileGet" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-622">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="a9bc6-623">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-623">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-624">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-624">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-625">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-625">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="a9bc6-626">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-626">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-627">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-627">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-628">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-628">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-629">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-629">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-630">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-630">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-631">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-631">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-632">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-632">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-633">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-633">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-634">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-634">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-635">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-635">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-636">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-636">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-637">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-637">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="a9bc6-638">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-638">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-639">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-639">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="a9bc6-640">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-640">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-641">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-641">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="a9bc6-642">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-642">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="a9bc6-643">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-643">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="a9bc6-644">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-644">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-645">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-645">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-646">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-646">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-647">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-647">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="a9bc6-648">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-648">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="a9bc6-649">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="a9bc6-649">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="a9bc6-650">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-650">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="a9bc6-651">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-651">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="a9bc6-652">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-652">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-653">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-653">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-654">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-654">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-655">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-655">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="a9bc6-656">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-656">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="a9bc6-657">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-657">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-658">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-658">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-659">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-659">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-660">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-660">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-661">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-661">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-662">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-662">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-663">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-663">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="a9bc6-664">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-664">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="a9bc6-665">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-665">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-666">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-666">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="a9bc6-667">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-667">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-668">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-668">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-669">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-669">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-670">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-670">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-671">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-671">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-672">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-672">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-673">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-673">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-674">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-674">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-675">开始读取处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-675">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-676">将打开的磁盘文件中的数据读取到变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-676">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="a9bc6-677">与 <see langword="My" /> 相比，<see langword="FileGet" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-677">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="a9bc6-678">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-678">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-679">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-679">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-680">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-680">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="a9bc6-681">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-681">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-682">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-682">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-683">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-683">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-684">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-684">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-685">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-685">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-686">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-686">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-687">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-687">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-688">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-688">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-689">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-689">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-690">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-690">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-691">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-691">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-692">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-692">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="a9bc6-693">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-693">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-694">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-694">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="a9bc6-695">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-695">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-696">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-696">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="a9bc6-697">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-697">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="a9bc6-698">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-698">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="a9bc6-699">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-699">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-700">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-700">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-701">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-701">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-702">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-702">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="a9bc6-703">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-703">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="a9bc6-704">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="a9bc6-704">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="a9bc6-705">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-705">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="a9bc6-706">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-706">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="a9bc6-707">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-707">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-708">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-708">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-709">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-709">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-710">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-710">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="a9bc6-711">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-711">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="a9bc6-712">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-712">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-713">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-713">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-714">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-714">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-715">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-715">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-716">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-716">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-717">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-717">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-718">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-718">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="a9bc6-719">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-719">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="a9bc6-720">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-720">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-721">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-721">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="a9bc6-722">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-722">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-723">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-723">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-724">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-724">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-725">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-725">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-726">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-726">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-727">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-727">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-728">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-728">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-729">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-729">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-730">开始读取处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-730">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-731">将打开的磁盘文件中的数据读取到变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-731">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="a9bc6-732">与 <see langword="My" /> 相比，<see langword="FileGet" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-732">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="a9bc6-733">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-733">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-734">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-734">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-735">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-735">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="a9bc6-736">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-736">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-737">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-737">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-738">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-738">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-739">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-739">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-740">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-740">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-741">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-741">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-742">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-742">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-743">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-743">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-744">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-744">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-745">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-745">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-746">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-746">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-747">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-747">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="a9bc6-748">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-748">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-749">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-749">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="a9bc6-750">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-750">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-751">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-751">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="a9bc6-752">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-752">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="a9bc6-753">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-753">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="a9bc6-754">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-754">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-755">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-755">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-756">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-756">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-757">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-757">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="a9bc6-758">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-758">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="a9bc6-759">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="a9bc6-759">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="a9bc6-760">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-760">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="a9bc6-761">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-761">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="a9bc6-762">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-762">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-763">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-763">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-764">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-764">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-765">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-765">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="a9bc6-766">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-766">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="a9bc6-767">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-767">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-768">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-768">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-769">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-769">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-770">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-770">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-771">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-771">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-772">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-772">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-773">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-773">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="a9bc6-774">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-774">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="a9bc6-775">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-775">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-776">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-776">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="a9bc6-777">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-777">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-778">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-778">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-779">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-779">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-780">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-780">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-781">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-781">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-782">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-782">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-783">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-783">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-784">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-784">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-785">开始读取处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-785">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-786">将打开的磁盘文件中的数据读取到变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-786">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="a9bc6-787">与 <see langword="My" /> 相比，<see langword="FileGet" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-787">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="a9bc6-788">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-788">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-789">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-789">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-790">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-790">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="a9bc6-791">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-791">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-792">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-792">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-793">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-793">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-794">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-794">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-795">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-795">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-796">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-796">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-797">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-797">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-798">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-798">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-799">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-799">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-800">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-800">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-801">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-801">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-802">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-802">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="a9bc6-803">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-803">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-804">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-804">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="a9bc6-805">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-806">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-806">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="a9bc6-807">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-807">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="a9bc6-808">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-808">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="a9bc6-809">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-809">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-810">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-810">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-811">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-811">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-812">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-812">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="a9bc6-813">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-813">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="a9bc6-814">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="a9bc6-814">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="a9bc6-815">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-815">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="a9bc6-816">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-816">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="a9bc6-817">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-817">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-818">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-818">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-819">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-819">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-820">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-820">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="a9bc6-821">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-821">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="a9bc6-822">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-822">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-823">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-823">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-824">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-824">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-825">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-825">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-826">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-826">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-827">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-827">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-828">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-828">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="a9bc6-829">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-829">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="a9bc6-830">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-830">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-831">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-831">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="a9bc6-832">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-832">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-833">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-833">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-834">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-834">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-835">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-835">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-836">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-836">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-837">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-837">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-838">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-838">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-839">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-839">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-840">开始读取处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-840">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-841">将打开的磁盘文件中的数据读取到变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-841">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="a9bc6-842">与 <see langword="My" /> 相比，<see langword="FileGet" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-842">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="a9bc6-843">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-843">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-844">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-844">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-845">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-845">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="a9bc6-846">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-846">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-847">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-847">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-848">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-848">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-849">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-849">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-850">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-850">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-851">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-851">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-852">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-852">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-853">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-853">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-854">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-854">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-855">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-855">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-856">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-856">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-857">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-857">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="a9bc6-858">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-858">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-859">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-859">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="a9bc6-860">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-860">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-861">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-861">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="a9bc6-862">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-862">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="a9bc6-863">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-863">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="a9bc6-864">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-864">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-865">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-865">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-866">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-866">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-867">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-867">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="a9bc6-868">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-868">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="a9bc6-869">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="a9bc6-869">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="a9bc6-870">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-870">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="a9bc6-871">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-871">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="a9bc6-872">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-873">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-873">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-874">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-874">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-875">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-875">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="a9bc6-876">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-876">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="a9bc6-877">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-877">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-878">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-878">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-879">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-879">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-880">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-880">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-881">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-881">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-882">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-882">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-883">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-883">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="a9bc6-884">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-884">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="a9bc6-885">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-885">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-886">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-886">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="a9bc6-887">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-887">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-888">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-888">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-889">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-889">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-890">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-890">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-891">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-891">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-892">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-892">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-893">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-893">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-894">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-894">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-895">开始读取处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-895">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="a9bc6-896">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-896">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-897">仅在写入字符串时适用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-897">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="a9bc6-898">指定是否为描述长度的字符串写入一个双字节说明符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-898">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="a9bc6-899">默认值为 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-899">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-900">将打开的磁盘文件中的数据读取到变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-900">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="a9bc6-901">与 <see langword="My" /> 相比，<see langword="FileGet" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-901">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="a9bc6-902">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-902">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-903">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-903">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-904">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-904">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="a9bc6-905">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-905">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-906">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-906">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-907">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-907">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-908">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-908">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-909">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-909">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-910">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-911">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-911">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-912">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-913">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-914">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-914">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-915">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-915">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-916">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-916">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="a9bc6-917">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-917">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-918">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-918">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="a9bc6-919">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-919">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-920">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-920">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="a9bc6-921">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-921">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="a9bc6-922">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-922">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="a9bc6-923">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-923">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-924">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-924">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-925">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-925">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-926">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-926">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="a9bc6-927">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-927">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="a9bc6-928">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="a9bc6-928">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="a9bc6-929">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-929">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="a9bc6-930">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-930">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="a9bc6-931">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-931">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-932">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-932">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-933">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-933">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-934">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-934">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="a9bc6-935">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-935">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="a9bc6-936">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-936">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-937">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-937">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-938">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-939">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-940">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-941">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-941">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-942">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-942">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="a9bc6-943">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-943">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="a9bc6-944">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-944">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-945">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-945">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="a9bc6-946">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-946">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-947">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-947">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-948">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-948">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-949">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-949">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-950">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-950">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-951">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-951">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-952">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-952">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-953">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-953">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-954">开始读取处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-954">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="a9bc6-955">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-955">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-956">仅当写入数组时使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-956">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="a9bc6-957">指定是否将数组视为动态数组，以及是否需要描述数组大小和边界的数组说明符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-957">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="a9bc6-958">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-958">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-959">仅在写入字符串时适用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-959">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="a9bc6-960">指定是否为描述长度的字符串写入一个双字节说明符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-960">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="a9bc6-961">默认值为 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-961">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-962">将打开的磁盘文件中的数据读取到变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-962">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="a9bc6-963">与 <see langword="My" /> 相比，<see langword="FileGet" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-963">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="a9bc6-964">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-964">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-965">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-965">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-966">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-966">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="a9bc6-967">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-967">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-968">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-968">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-969">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-969">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-970">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-970">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-971">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-971">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-972">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-972">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-973">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-973">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-974">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-974">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-975">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-975">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-976">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-976">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-977">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-977">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-978">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-978">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="a9bc6-979">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-979">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-980">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-980">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="a9bc6-981">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-981">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-982">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-982">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="a9bc6-983">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-983">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="a9bc6-984">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-984">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="a9bc6-985">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-985">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-986">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-986">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-987">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-987">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-988">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-988">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="a9bc6-989">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-989">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="a9bc6-990">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="a9bc6-990">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="a9bc6-991">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-991">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="a9bc6-992">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-992">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="a9bc6-993">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-993">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-994">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-994">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-995">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-995">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-996">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-996">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="a9bc6-997">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-997">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="a9bc6-998">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-998">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-999">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-999">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1000">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1000">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-1001">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1001">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-1002">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1002">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1003">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1003">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1004">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1004">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="a9bc6-1005">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1005">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="a9bc6-1006">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1006">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1007">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1007">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="a9bc6-1008">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1008">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1009">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1009">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1010">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1010">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1011">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1011">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1012">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1012">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1013">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1013">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1014">数据读入到其中的有效变量名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1014">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1015">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1015">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1016">开始读取处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1016">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1017">将打开的磁盘文件中的数据读取到变量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1017">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="a9bc6-1018">与 <see langword="My" /> 相比，<see langword="FileGetObject" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1018">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1019">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1019">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1020">`FileGetObject`而不是使用函数`FileGet`以在编译时避免出现多义性，如果类型`Object`返回而不是另一种类型，如`Integer`， `Long`， `Short`，依次类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1020">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="a9bc6-1021">如果你想要将写出`Variant`类型，`FileGetObject`是必需的。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1021">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="a9bc6-1022">如果你使用某个对象作为第二个参数，如有疑问，始终建议你使用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1022">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="a9bc6-1023">`FileGetObject` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1023">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1024">与读取的数据`FileGetObject`通常与编写`FilePutObject`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1024">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="a9bc6-1025">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1025">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1026">如果省略`RecordNumber`，`FileGetObject`上次读取记录号或字节`FileGetObject`或`FilePutObject`函数 (或指向的最后一个`Seek`函数)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1026">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1027">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1027">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1028">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1028">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1029">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGetObject`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1029">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1030">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1030">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1031">由于不能准确地确定填充的数据量，它是已记录的长度与读取的数据的长度匹配一个好办法。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1031">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="a9bc6-1032">如果读入的变量是一个字符串，默认情况下`FileGetObject`读取一个包含字符串长度的双字节说明符，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1032">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-1033">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1033">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1034">Visual Basic 6.0 和早期版本支持固定长度的字符串和读取到文件时，则不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1034">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="a9bc6-1035">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1035">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1036">如果读入的变量为数组，则 `RecordLength` 函数中 `FileOpen` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1036">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1037">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1037">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1038">其长度等于 2 + 8 倍的维度数： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1038">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="a9bc6-1039">例如，以下数组声明需要 218 个字节时将数组写入到磁盘：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1039">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="a9bc6-1040">分发了 218 个字节，如下所示：为描述符分发了 18 个字节 (2 + 8 \* 2)，为数据分发了 100 个字节 (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1040">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="a9bc6-1041">`FileGetObject` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1041">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-1042">在磁盘上，用户定义类型的动态数组 (使用编写`FilePutObject`) 其长度等于 2 加上 8 倍的维度数的描述符前缀为： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1042">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="a9bc6-1043">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素，包括任何数组和其描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1043">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="a9bc6-1044"><xref:Microsoft.VisualBasic.VBFixedStringAttribute>类可应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1044">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1045">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1045">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1046">打开的文件中`Binary`模式下，所有的`Random`规则适用，但以下情况例外：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1046">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="a9bc6-1047">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1047">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1048">`FileGetObject` 读取所有变量从磁盘连续，也就是说，记录之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1048">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1049">对于在结构中，数组以外的任何数组`FileGetObject`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1049">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="a9bc6-1050">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1050">No descriptor is read.</span></span>  
  
 <span data-ttu-id="a9bc6-1051">`FileGetObject` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1051">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1052">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1052">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-1053">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1053">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-1054">例如，名为 form1.vb 的文件可能不是 Visual Basic 源文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1054">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1055">下面的示例测试文件中读取一条记录，然后检索它。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1055">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="a9bc6-1056">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1056">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1057">指定一个文件的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1057">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="a9bc6-1058">
            <c>PathName</c> 可以包含目录或文件夹以及驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1058">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1059">返回指定文件长度（以字节为单位）的 <see langword="Long" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1059">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="a9bc6-1060">相比 <see langword="FileLen" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1060">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1061">有关详情，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1061">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-1062">
            <see langword="Long" /> 值，该值指定文件长度（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1062">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1063">如果指定的文件打开时`FileLen`调用函数，返回的值表示它已打开时的文件的大小。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1063">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-1064">若要获取当前打开的文件的长度，请使用`LOF`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1064">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1065">此示例使用`FileLen`函数以返回文件的长度以字节为单位。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1065">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="a9bc6-1066">在此示例中，假定`TestFile`是包含一些数据的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1066">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="a9bc6-1067">文件不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1067">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1068">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1068">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1069">任何有效的文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1069">Any valid file number.</span>
          </span>
          <span data-ttu-id="a9bc6-1070">可使用 <see langword="FreeFile" /> 函数获取下一个可用的文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1070">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="a9bc6-1071">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1071">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1072">一个指定文件名的 <see langword="String" /> 表达式，其中可包含目录或文件夹以及驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1072">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="a9bc6-1073">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1073">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1074">指定文件模式的枚举：<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" /> 或 <see langword="Random" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1074">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1075">有关详细信息，请参阅<see cref="T:Microsoft.VisualBasic.OpenMode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1075">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="a9bc6-1076">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1076">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1077">一个枚举，它指定对打开的文件所允许进行的操作：<see langword="Read" />、<see langword="Write" /> 或 <see langword="ReadWrite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1077">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1078">默认为 <see langword="ReadWrite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1078">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1079">有关详细信息，请参阅<see cref="T:Microsoft.VisualBasic.OpenAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1079">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="a9bc6-1080">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1080">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1081">一个枚举，它指定不允许其他进程对打开的文件所进行的操作：<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" /> 和 <see langword="Lock Read Write" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1081">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1082">默认为 <see langword="Lock Read Write" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1082">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1083">有关详细信息，请参阅<see cref="T:Microsoft.VisualBasic.OpenShare" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1083">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="a9bc6-1084">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1084">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1085">小于或等于 32,767（字节）的数字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1085">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="a9bc6-1086">对于为进行随机访问而打开的文件，此值是记录的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1086">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="a9bc6-1087">对于顺序文件，此值是缓冲的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1087">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1088">打开一个文件以进行输入或输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1088">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="a9bc6-1089">与 <see langword="My" /> 相比，<see langword="FileOpen" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1089">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1090">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1090">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1091">`FileOpen`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1091">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-1092">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1092">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-1093">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1093">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-1094">可以对其执行任何 I/O 操作之前，必须打开一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1094">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="a9bc6-1095">`FileOpen` 对文件的 I/O 分配缓冲区，并确定要使用缓冲区的访问模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1095">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-1096">写入到文件时，应用程序可能需要创建一个文件，如果尝试写入的文件不存在。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1096">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="a9bc6-1097">若要执行此操作，必须在其中创建文件的目录的权限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1097">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="a9bc6-1098">但是，如果指定的文件`FileName`确实存在，应用程序需求`Write`仅对文件本身的权限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1098">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="a9bc6-1099">可能的为了提高安全性，任何位置创建文件在部署和授予过程`Write`权限到该文件唯一，而不是整个目录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1099">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="a9bc6-1100">为了提高安全性，请将数据写入到的根目录或 Program Files 目录而不是用户目录中。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1100">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="a9bc6-1101">若要打开的通道可在使用`FreeFile()`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1101">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-1102">`FileOpen`函数需要`Read`从访问`FileIOPermissionAccess`枚举，它可能会影响它在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1102">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="a9bc6-1103">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1103">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1104">此示例演示了的各种用法`FileOpen`函数，以使输入和输出到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1104">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="a9bc6-1105">以下代码打开文件`TestFile`在`Input`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1105">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="a9bc6-1106">此示例打开中的文件`Binary`进行只写操作的模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1106">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="a9bc6-1107">下面的示例打开中的文件`Random`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1107">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="a9bc6-1108">该文件包含的记录是结构`Person`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1108">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="a9bc6-1109">此代码示例将打开的文件中`Output`模式; 任何进程可以读取或写入文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1109">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="a9bc6-1110">此代码示例将打开的文件中`Binary`模式进行读取; 其他进程无法读取文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1110">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1111">记录长度是负数（并且不等于 -1）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1111">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1112">
            <paramref name="FileName" /> 已经打开，或 <paramref name="FileName" /> 无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1112">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a9bc6-1113">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1113">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1114">与 <see langword="My" /> 相比，<see langword="FilePut" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1114">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1115">有关更多信息，请参见 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1115">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1116">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1116">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1117">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1117">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1118">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1118">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1119">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1119">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1120">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1120">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1121">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1121">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1122">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1122">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1123">与 <see langword="My" /> 相比，<see langword="FilePut" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1123">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1124">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1124">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1125">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1125">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1126">使用 `FilePut` 写入的数据通常要用 `FileGet` 来从文件中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1126">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="a9bc6-1127">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1127">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1128">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1128">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="a9bc6-1129">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1129">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="a9bc6-1130">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1130">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="a9bc6-1131">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1131">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1132">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1132">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1133">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1133">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1134">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1134">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1135">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1135">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1136">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1136">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="a9bc6-1137">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1137">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="a9bc6-1138">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1138">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-1139">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1139">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="a9bc6-1140">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1140">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="a9bc6-1141">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1141">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="a9bc6-1142">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1142">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="a9bc6-1143">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1143">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="a9bc6-1144">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1144">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1145">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1145">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1146">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1146">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="a9bc6-1147">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1147">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="a9bc6-1148">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1148">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="a9bc6-1149">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1149">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-1150">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1150">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="a9bc6-1151">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1151">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1152">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1152">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-1153">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1153">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1154">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1154">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="a9bc6-1155">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1155">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="a9bc6-1156">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1156">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1157">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1157">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-1158">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1158">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a9bc6-1159">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1159">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1160">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1160">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1161">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1161">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-1162">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1162">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-1163">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1163">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1164">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1164">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1165">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1165">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="a9bc6-1166">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1166">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1167">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1167">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1168">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1168">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="a9bc6-1169">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1169">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="a9bc6-1170">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1170">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1171">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1171">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="a9bc6-1172">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1172">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1173">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1173">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1174">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1174">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1175">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1175">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1176">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1176">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1177">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1177">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1178">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1178">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1179">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1179">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1180">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1180">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1181">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1181">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1182">与 <see langword="My" /> 相比，<see langword="FilePut" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1182">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1183">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1183">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1184">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1184">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1185">使用 `FilePut` 写入的数据通常要用 `FileGet` 来从文件中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1185">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="a9bc6-1186">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1186">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1187">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1187">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="a9bc6-1188">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1188">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="a9bc6-1189">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1189">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="a9bc6-1190">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1190">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1191">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1191">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1192">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1192">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1193">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1193">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1194">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1194">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1195">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1195">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="a9bc6-1196">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1196">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="a9bc6-1197">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1197">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-1198">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1198">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="a9bc6-1199">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1199">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="a9bc6-1200">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1200">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="a9bc6-1201">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1201">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="a9bc6-1202">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1202">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="a9bc6-1203">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1203">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1204">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1204">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1205">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1205">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="a9bc6-1206">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1206">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="a9bc6-1207">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1207">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="a9bc6-1208">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1208">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-1209">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1209">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="a9bc6-1210">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1210">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1211">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1211">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-1212">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1213">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1213">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="a9bc6-1214">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1214">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="a9bc6-1215">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1215">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1216">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1216">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-1217">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1217">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a9bc6-1218">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1218">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1219">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1219">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1220">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1220">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-1221">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1221">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-1222">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1222">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1223">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1223">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1224">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1224">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="a9bc6-1225">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1225">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1226">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1226">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1227">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1227">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="a9bc6-1228">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1228">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="a9bc6-1229">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1229">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1230">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1230">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="a9bc6-1231">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1231">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1232">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1232">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1233">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1233">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1234">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1234">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1235">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1235">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1236">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1236">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1237">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1237">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1238">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1238">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1239">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1239">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1240">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1240">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1241">与 <see langword="My" /> 相比，<see langword="FilePut" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1241">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1242">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1242">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1243">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1243">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1244">使用 `FilePut` 写入的数据通常要用 `FileGet` 来从文件中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1244">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="a9bc6-1245">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1245">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1246">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1246">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="a9bc6-1247">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1247">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="a9bc6-1248">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1248">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="a9bc6-1249">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1249">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1250">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1250">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1251">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1251">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1252">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1252">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1253">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1253">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1254">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1254">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="a9bc6-1255">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1255">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="a9bc6-1256">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1256">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-1257">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1257">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="a9bc6-1258">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1258">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="a9bc6-1259">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1259">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="a9bc6-1260">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="a9bc6-1261">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1261">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="a9bc6-1262">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1262">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1263">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1263">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1264">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1264">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="a9bc6-1265">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1265">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="a9bc6-1266">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1266">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="a9bc6-1267">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1267">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-1268">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1268">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="a9bc6-1269">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1269">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1270">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1270">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-1271">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1271">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1272">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1272">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="a9bc6-1273">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1273">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="a9bc6-1274">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1274">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1275">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1275">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-1276">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1276">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a9bc6-1277">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1277">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1278">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1278">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1279">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1279">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-1280">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1280">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-1281">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1281">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1282">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1282">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1283">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1283">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="a9bc6-1284">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1284">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1285">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1285">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1286">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1286">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="a9bc6-1287">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1287">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="a9bc6-1288">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1288">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1289">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1289">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="a9bc6-1290">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1290">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1291">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1291">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1292">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1292">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1293">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1293">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1294">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1294">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1295">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1295">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1296">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1296">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1297">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1297">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1298">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1298">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1299">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1299">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1300">与 <see langword="My" /> 相比，<see langword="FilePut" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1300">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1301">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1301">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1302">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1302">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1303">使用 `FilePut` 写入的数据通常要用 `FileGet` 来从文件中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1303">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="a9bc6-1304">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1304">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1305">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1305">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="a9bc6-1306">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1306">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="a9bc6-1307">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1307">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="a9bc6-1308">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1308">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1309">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1309">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1310">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1310">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1311">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1311">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1312">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1312">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1313">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1313">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="a9bc6-1314">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1314">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="a9bc6-1315">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1315">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-1316">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1316">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="a9bc6-1317">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1317">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="a9bc6-1318">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1318">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="a9bc6-1319">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1319">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="a9bc6-1320">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1320">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="a9bc6-1321">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1321">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1322">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1322">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1323">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1323">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="a9bc6-1324">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1324">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="a9bc6-1325">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1325">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="a9bc6-1326">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1326">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-1327">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1327">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="a9bc6-1328">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1328">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1329">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1329">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-1330">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1330">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1331">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1331">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="a9bc6-1332">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1332">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="a9bc6-1333">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1333">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1334">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1334">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-1335">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1335">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a9bc6-1336">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1336">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1337">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1337">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1338">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1338">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-1339">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1339">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-1340">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1340">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1341">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1341">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1342">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1342">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="a9bc6-1343">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1343">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1344">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1344">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1345">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1345">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="a9bc6-1346">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1346">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="a9bc6-1347">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1347">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1348">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1348">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="a9bc6-1349">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1349">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1350">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1350">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1351">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1351">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1352">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1352">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1353">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1353">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1354">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1354">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1355">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1355">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1356">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1356">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1357">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1358">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1358">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1359">与 <see langword="My" /> 相比，<see langword="FilePut" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1360">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1361">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1362">使用 `FilePut` 写入的数据通常要用 `FileGet` 来从文件中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="a9bc6-1363">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1364">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="a9bc6-1365">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="a9bc6-1366">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="a9bc6-1367">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1368">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1368">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1369">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1370">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1371">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1372">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="a9bc6-1373">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="a9bc6-1374">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-1375">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="a9bc6-1376">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="a9bc6-1377">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="a9bc6-1378">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="a9bc6-1379">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="a9bc6-1380">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1381">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1382">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="a9bc6-1383">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="a9bc6-1384">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="a9bc6-1385">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-1386">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="a9bc6-1387">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1388">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-1389">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1390">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="a9bc6-1391">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="a9bc6-1392">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1393">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-1394">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a9bc6-1395">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1396">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1396">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1397">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-1398">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-1399">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1400">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1401">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="a9bc6-1402">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1403">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1404">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="a9bc6-1405">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="a9bc6-1406">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1407">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="a9bc6-1408">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1409">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1409">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1410">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1410">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1411">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1411">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1412">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1412">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1413">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1413">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1414">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1414">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1415">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1415">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1416">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1416">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1417">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1417">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1418">与 <see langword="My" /> 相比，<see langword="FilePut" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1418">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1419">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1419">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1420">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1420">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1421">使用 `FilePut` 写入的数据通常要用 `FileGet` 来从文件中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1421">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="a9bc6-1422">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1422">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1423">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1423">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="a9bc6-1424">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1424">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="a9bc6-1425">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1425">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="a9bc6-1426">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1426">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1427">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1427">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1428">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1428">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1429">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1429">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1430">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1430">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1431">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1431">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="a9bc6-1432">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1432">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="a9bc6-1433">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1433">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-1434">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1434">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="a9bc6-1435">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1435">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="a9bc6-1436">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1436">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="a9bc6-1437">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1437">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="a9bc6-1438">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1438">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="a9bc6-1439">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1439">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1440">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1440">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1441">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1441">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="a9bc6-1442">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1442">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="a9bc6-1443">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1443">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="a9bc6-1444">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1444">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-1445">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1445">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="a9bc6-1446">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1446">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1447">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1447">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-1448">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1448">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1449">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1449">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="a9bc6-1450">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1450">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="a9bc6-1451">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1451">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1452">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1452">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-1453">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1453">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a9bc6-1454">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1454">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1455">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1455">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1456">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1456">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-1457">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1457">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-1458">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1458">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1459">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1459">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1460">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1460">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="a9bc6-1461">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1461">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1462">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1462">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1463">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1463">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="a9bc6-1464">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1464">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="a9bc6-1465">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1465">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1466">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1466">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="a9bc6-1467">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1467">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1468">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1468">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1469">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1469">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1470">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1470">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1471">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1471">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1472">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1472">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1473">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1473">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1474">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1474">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1475">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1475">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1476">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1476">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1477">与 <see langword="My" /> 相比，<see langword="FilePut" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1477">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1478">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1478">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1479">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1479">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1480">使用 `FilePut` 写入的数据通常要用 `FileGet` 来从文件中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1480">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="a9bc6-1481">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1481">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1482">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1482">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="a9bc6-1483">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1483">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="a9bc6-1484">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1484">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="a9bc6-1485">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1485">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1486">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1486">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1487">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1487">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1488">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1488">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1489">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1489">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1490">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1490">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="a9bc6-1491">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1491">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="a9bc6-1492">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1492">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-1493">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1493">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="a9bc6-1494">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1494">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="a9bc6-1495">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1495">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="a9bc6-1496">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1496">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="a9bc6-1497">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1497">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="a9bc6-1498">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1499">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1499">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1500">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1500">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="a9bc6-1501">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1501">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="a9bc6-1502">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1502">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="a9bc6-1503">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1503">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-1504">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1504">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="a9bc6-1505">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1505">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1506">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1506">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-1507">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1507">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1508">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1508">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="a9bc6-1509">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1509">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="a9bc6-1510">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1510">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1511">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1511">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-1512">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1512">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a9bc6-1513">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1513">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1514">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1514">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1515">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1515">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-1516">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1516">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-1517">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1517">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1518">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1518">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1519">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1519">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="a9bc6-1520">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1520">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1521">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1521">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1522">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1522">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="a9bc6-1523">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1523">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="a9bc6-1524">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1524">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1525">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1525">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="a9bc6-1526">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1526">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1527">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1527">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1528">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1528">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1529">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1529">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1530">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1530">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1531">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1531">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1532">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1532">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1533">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1533">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1534">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1534">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1535">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1535">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1536">与 <see langword="My" /> 相比，<see langword="FilePut" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1536">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1537">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1537">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1538">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1538">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1539">使用 `FilePut` 写入的数据通常要用 `FileGet` 来从文件中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1539">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="a9bc6-1540">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1540">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1541">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1541">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="a9bc6-1542">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1542">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="a9bc6-1543">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1543">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="a9bc6-1544">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1544">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1545">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1545">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1546">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1546">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1547">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1547">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1548">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1548">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1549">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1549">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="a9bc6-1550">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1550">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="a9bc6-1551">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1551">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-1552">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1552">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="a9bc6-1553">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1553">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="a9bc6-1554">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1554">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="a9bc6-1555">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1555">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="a9bc6-1556">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1556">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="a9bc6-1557">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1557">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1558">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1558">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1559">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1559">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="a9bc6-1560">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1560">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="a9bc6-1561">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1561">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="a9bc6-1562">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1562">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-1563">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1563">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="a9bc6-1564">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1565">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-1566">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1566">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1567">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="a9bc6-1568">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1568">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="a9bc6-1569">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1570">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1570">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-1571">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1571">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a9bc6-1572">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1572">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1573">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1573">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1574">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1574">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-1575">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1575">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-1576">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1576">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1577">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1577">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1578">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1578">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="a9bc6-1579">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1579">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1580">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1580">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1581">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1581">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="a9bc6-1582">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1582">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="a9bc6-1583">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1583">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1584">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1584">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="a9bc6-1585">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1585">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1586">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1586">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1587">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1587">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1588">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1588">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1589">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1589">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1590">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1590">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1591">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1591">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1592">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1592">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1593">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1593">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1594">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1594">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1595">与 <see langword="My" /> 相比，<see langword="FilePut" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1595">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1596">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1596">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1597">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1597">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1598">使用 `FilePut` 写入的数据通常要用 `FileGet` 来从文件中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1598">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="a9bc6-1599">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1599">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1600">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1600">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="a9bc6-1601">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1601">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="a9bc6-1602">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1602">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="a9bc6-1603">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1603">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1604">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1604">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1605">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1605">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1606">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1606">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1607">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1607">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1608">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1608">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="a9bc6-1609">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1609">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="a9bc6-1610">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1610">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-1611">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1611">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="a9bc6-1612">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1612">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="a9bc6-1613">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1613">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="a9bc6-1614">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1614">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="a9bc6-1615">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1615">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="a9bc6-1616">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1616">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1617">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1617">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1618">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1618">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="a9bc6-1619">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1619">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="a9bc6-1620">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1620">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="a9bc6-1621">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1621">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-1622">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1622">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="a9bc6-1623">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1623">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1624">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1624">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-1625">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1625">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1626">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1626">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="a9bc6-1627">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1627">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="a9bc6-1628">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1628">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1629">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1629">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-1630">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1630">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a9bc6-1631">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1631">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1632">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1632">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1633">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1633">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-1634">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1634">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-1635">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1635">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1636">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1636">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1637">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1637">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="a9bc6-1638">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1638">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1639">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1639">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1640">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1640">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="a9bc6-1641">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1641">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="a9bc6-1642">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1642">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1643">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1643">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="a9bc6-1644">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1644">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1645">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1645">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1646">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1646">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1647">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1647">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1648">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1648">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1649">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1649">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1650">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1650">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1651">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1651">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1652">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1652">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1653">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1653">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1654">与 <see langword="My" /> 相比，<see langword="FilePut" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1654">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1655">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1655">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1656">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1656">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1657">使用 `FilePut` 写入的数据通常要用 `FileGet` 来从文件中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1657">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="a9bc6-1658">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1658">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1659">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1659">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="a9bc6-1660">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1660">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="a9bc6-1661">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1661">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="a9bc6-1662">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1662">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1663">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1663">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1664">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1664">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1665">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1665">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1666">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1666">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1667">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1667">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="a9bc6-1668">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1668">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="a9bc6-1669">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1669">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-1670">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1670">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="a9bc6-1671">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1671">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="a9bc6-1672">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1672">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="a9bc6-1673">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1673">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="a9bc6-1674">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1674">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="a9bc6-1675">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1675">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1676">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1676">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1677">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1677">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="a9bc6-1678">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1678">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="a9bc6-1679">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1679">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="a9bc6-1680">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1680">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-1681">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1681">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="a9bc6-1682">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1682">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1683">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1683">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-1684">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1684">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1685">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1685">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="a9bc6-1686">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1686">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="a9bc6-1687">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1687">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1688">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1688">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-1689">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1689">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a9bc6-1690">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1690">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1691">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1691">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1692">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1692">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-1693">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1693">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-1694">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1694">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1695">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1695">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1696">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1696">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="a9bc6-1697">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1697">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1698">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1698">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1699">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1699">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="a9bc6-1700">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1700">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="a9bc6-1701">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1701">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1702">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1702">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="a9bc6-1703">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1703">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1704">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1704">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1705">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1705">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1706">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1706">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1707">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1707">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1708">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1708">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1709">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1709">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1710">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1710">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1711">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1711">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1712">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1712">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1713">与 <see langword="My" /> 相比，<see langword="FilePut" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1713">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1714">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1714">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1715">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1715">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1716">使用 `FilePut` 写入的数据通常要用 `FileGet` 来从文件中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1716">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="a9bc6-1717">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1717">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1718">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1718">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="a9bc6-1719">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1719">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="a9bc6-1720">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1720">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="a9bc6-1721">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1721">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1722">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1722">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1723">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1723">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1724">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1724">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1725">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1725">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1726">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1726">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="a9bc6-1727">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1727">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="a9bc6-1728">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1728">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-1729">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1729">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="a9bc6-1730">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1730">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="a9bc6-1731">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1731">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="a9bc6-1732">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1732">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="a9bc6-1733">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1733">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="a9bc6-1734">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1734">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1735">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1735">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1736">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1736">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="a9bc6-1737">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1737">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="a9bc6-1738">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1738">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="a9bc6-1739">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1739">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-1740">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1740">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="a9bc6-1741">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1741">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1742">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1742">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-1743">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1743">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1744">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1744">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="a9bc6-1745">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1745">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="a9bc6-1746">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1747">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1747">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-1748">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1748">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a9bc6-1749">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1749">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1750">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1750">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1751">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1751">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-1752">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1752">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-1753">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1753">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1754">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1754">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1755">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1755">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="a9bc6-1756">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1756">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1757">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1757">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1758">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1758">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="a9bc6-1759">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1759">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="a9bc6-1760">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1760">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1761">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1761">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="a9bc6-1762">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1762">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1763">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1763">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1764">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1764">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1765">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1765">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1766">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1766">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1767">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1767">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1768">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1768">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1769">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1769">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1770">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1770">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1771">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1771">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1772">与 <see langword="My" /> 相比，<see langword="FilePut" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1772">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1773">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1773">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1774">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1774">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1775">使用 `FilePut` 写入的数据通常要用 `FileGet` 来从文件中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1775">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="a9bc6-1776">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1776">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1777">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1777">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="a9bc6-1778">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1778">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="a9bc6-1779">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1779">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="a9bc6-1780">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1780">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1781">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1781">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1782">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1783">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1783">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1784">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1785">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="a9bc6-1786">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1786">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="a9bc6-1787">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1787">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-1788">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1788">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="a9bc6-1789">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1789">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="a9bc6-1790">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1790">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="a9bc6-1791">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1791">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="a9bc6-1792">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1792">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="a9bc6-1793">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1793">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1794">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1794">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1795">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1795">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="a9bc6-1796">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1796">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="a9bc6-1797">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1797">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="a9bc6-1798">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1798">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-1799">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1799">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="a9bc6-1800">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1800">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1801">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1801">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-1802">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1802">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1803">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1803">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="a9bc6-1804">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1804">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="a9bc6-1805">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1805">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1806">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1806">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-1807">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1807">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a9bc6-1808">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1808">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1809">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1809">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1810">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-1811">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-1812">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1813">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1813">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1814">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1814">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="a9bc6-1815">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1815">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1816">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1816">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1817">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1817">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="a9bc6-1818">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1818">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="a9bc6-1819">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1819">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1820">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1820">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="a9bc6-1821">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1821">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1822">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1822">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1823">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1823">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1824">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1824">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1825">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1825">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1826">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1826">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1827">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1827">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1828">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1828">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1829">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1829">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="a9bc6-1830">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1830">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1831">仅在写入字符串时适用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1831">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="a9bc6-1832">指定是否将字符串的双字节字符串长度说明符写入文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1832">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="a9bc6-1833">默认值为 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1833">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1834">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1834">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1835">与 <see langword="My" /> 相比，<see langword="FilePut" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1835">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1836">有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1836">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1837">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1837">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1838">使用 `FilePut` 写入的数据通常要用 `FileGet` 来从文件中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1838">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="a9bc6-1839">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1839">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1840">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1840">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="a9bc6-1841">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1841">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="a9bc6-1842">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1842">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="a9bc6-1843">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1843">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1844">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1844">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1845">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1845">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1846">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1846">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1847">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1847">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1848">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1848">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="a9bc6-1849">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1849">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="a9bc6-1850">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1850">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-1851">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1851">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="a9bc6-1852">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1852">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="a9bc6-1853">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1853">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="a9bc6-1854">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="a9bc6-1855">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1855">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="a9bc6-1856">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1856">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1857">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1857">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1858">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1858">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="a9bc6-1859">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1859">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="a9bc6-1860">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1860">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="a9bc6-1861">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1861">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-1862">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1862">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="a9bc6-1863">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1863">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1864">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1864">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-1865">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1865">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1866">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1866">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="a9bc6-1867">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1867">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="a9bc6-1868">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1868">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1869">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1869">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-1870">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1870">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a9bc6-1871">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1871">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1872">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1872">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1873">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1873">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-1874">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1874">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-1875">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1875">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1876">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1876">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1877">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1877">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="a9bc6-1878">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1878">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1879">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1879">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1880">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1880">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="a9bc6-1881">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1881">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="a9bc6-1882">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1882">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1883">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1883">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="a9bc6-1884">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1884">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1885">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1885">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1886">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1886">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1887">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1887">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1888">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1888">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1889">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1889">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1890">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1890">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1891">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1891">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1892">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1892">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="a9bc6-1893">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1893">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1894">仅当写入数组时使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1894">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="a9bc6-1895">指定是否将数组视为动态数组，以及是否写入用于描述字符串长度的数组说明符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1895">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="a9bc6-1896">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1896">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1897">仅在写入字符串时适用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1897">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="a9bc6-1898">指定是否将字符串的双字节字符串长度说明符写入文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1898">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="a9bc6-1899">默认值为 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1899">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1900">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1900">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1901">与 <see langword="My" /> 相比，<see langword="FilePut" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1901">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1902">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1902">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1903">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1903">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1904">使用 `FilePut` 写入的数据通常要用 `FileGet` 来从文件中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1904">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="a9bc6-1905">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1905">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1906">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1906">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="a9bc6-1907">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1907">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="a9bc6-1908">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1908">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="a9bc6-1909">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1909">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1910">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1910">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1911">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1911">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1912">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1912">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1913">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1913">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1914">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1914">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="a9bc6-1915">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1915">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="a9bc6-1916">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1916">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="a9bc6-1917">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1917">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="a9bc6-1918">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1918">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="a9bc6-1919">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1919">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="a9bc6-1920">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1920">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="a9bc6-1921">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1921">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="a9bc6-1922">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1923">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1923">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1924">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1924">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="a9bc6-1925">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1925">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="a9bc6-1926">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1926">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="a9bc6-1927">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1927">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="a9bc6-1928">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1928">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="a9bc6-1929">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1929">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1930">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1930">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="a9bc6-1931">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1931">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1932">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1932">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="a9bc6-1933">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1933">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="a9bc6-1934">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1934">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1935">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1935">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="a9bc6-1936">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1936">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a9bc6-1937">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1937">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1938">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1938">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1939">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1939">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="a9bc6-1940">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1940">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="a9bc6-1941">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1941">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1942">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1942">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="a9bc6-1943">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1943">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="a9bc6-1944">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1944">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-1945">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1945">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="a9bc6-1946">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1946">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="a9bc6-1947">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1947">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="a9bc6-1948">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1948">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1949">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1949">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="a9bc6-1950">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1950">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-1951">
            <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1951">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-1952">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1952">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1953">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1953">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1954">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1954">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-1955">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1955">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1956">有效变量名，它包含写入磁盘的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1956">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="a9bc6-1957">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1957">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-1958">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1958">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1959">将变量中得数据写入磁盘文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1959">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="a9bc6-1960">与 <see langword="My" /> 相比，<see langword="FilePutObject" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1960">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="a9bc6-1961">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1961">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-1962">`FilePutObject`而不是使用函数`FilePut`以在编译时避免出现多义性，如果类型`Object`传递而不是另一种类型，如`Integer`， `Long`， `Short`，依次类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1962">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="a9bc6-1963">`FilePutObject` 将写入和读取描述该对象的描述符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1963">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="a9bc6-1964">如果你想要将写出`Variant`类型，`FilePutObject`是必需的。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1964">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="a9bc6-1965">如果你使用某个对象作为第二个参数，如有疑问，我们建议始终使用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1965">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="a9bc6-1966">`FilePutObject` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1966">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-1967">使用 `FilePutObject` 写入的数据通常要用 `FileGetObject` 来从文件中读取。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1967">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="a9bc6-1968">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1968">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="a9bc6-1969">如果省略`RecordNumber`，`FilePutObject`上次写入下一个记录或字节`FileGetObject`或`FilePutObject`函数 (或记录号或字节指向由最后一个`Seek`函数)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1969">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="a9bc6-1970">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1970">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="a9bc6-1971">`FilePutObject` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1971">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="a9bc6-1972">如果您使用`StringIsFixedLength`  =  `True`与`FilePutObject`，您只需使用相同`FileGetObject`，您必须还需确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1972">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="a9bc6-1973">随机模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1973">Random Mode</span></span>  
 <span data-ttu-id="a9bc6-1974">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1974">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="a9bc6-1975">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePutObject`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1975">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="a9bc6-1976">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1976">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="a9bc6-1977">由于不能准确地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1977">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="a9bc6-1978">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1978">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="a9bc6-1979">如果写入的变量是包含一个数值类型的对象`FilePutObject`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1979">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="a9bc6-1980">例如，编写一个对象时包含一个整数`FilePutObject`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1980">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="a9bc6-1981">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1981">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="a9bc6-1982">如果写入的变量是一个对象，包含一个字符串，`FilePutObject`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1982">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="a9bc6-1983">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1983">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="a9bc6-1984">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1984">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="a9bc6-1985">如果写入的变量为数组，则 `RecordLength` 函数中 `FileOpen` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1985">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="a9bc6-1986">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1986">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="a9bc6-1987">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1987">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="a9bc6-1988">二进制模式</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1988">Binary Mode</span></span>  
 <span data-ttu-id="a9bc6-1989">打开的文件中`Binary`模式下，所有`Random`模式规则适用，除外：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1989">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="a9bc6-1990">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1990">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="a9bc6-1991">`FilePutObject` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1991">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-1992">此示例使用`FilePutObject`函数以将字符串写入文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-1992">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-1993">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1993">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1994">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1994">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="a9bc6-1995">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1995">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-1996">0 到 255（包括 0 和 255）范围内的数值表达式，它表示在开始新一行前每一行中所显示的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1996">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="a9bc6-1997">如果 <c>RecordWidth</c> 等于 0，则行的长度没有限制。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1997">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="a9bc6-1998">
            <c>RecordWidth</c> 的默认值为 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1998">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-1999">为用 <see langword="FileOpen" /> 函数打开的文件分配输出行宽。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-1999">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a9bc6-2000">此示例使用`FileWidth`函数设置文件的输出线条宽度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2000">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2001">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2001">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a9bc6-2002">返回一个 <see langword="Integer" /> 值，该值表示 <see langword="FileOpen" /> 函数可用的下一个文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-2003">返回一个 <see langword="Integer" /> 值，该值表示 <see langword="FileOpen" /> 函数可用的下一个文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2003">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2004">使用`FreeFile`提供尚未使用的文件号。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2004">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2005">此示例使用`FreeFile`函数以返回下一个可用的文件数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2005">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="a9bc6-2006">五个文件打开，以便在循环中，输出和一些示例数据写入到每个。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2006">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2007">正在使用的文件数超过 255。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2007">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="a9bc6-2008">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2008">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2009">指定一个文件名、目录名或文件夹名的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2009">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="a9bc6-2010">
            <c>PathName</c> 可以包含目录或文件夹以及驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2010">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2011">返回一个表示文件、目录或文件夹的特性的 <see langword="FileAttribute" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2011">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="a9bc6-2012">与 <see langword="My" /> 相比，<see langword="FileAttribute" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2013">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-2014">由 <see langword="GetAttr" /> 返回的值是下列枚举值的和：</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2014">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span>
          </span>
          <span data-ttu-id="a9bc6-2015">
            <list type="table">
              <item>
                <term> 值 </term>
                <description> 常量 </description>
                <description> 说明 </description>
              </item>
              <item>
                <term>
                  <see langword="Normal" />
                </term>
                <description>
                  <see langword="vbNormal" />
                </description>
                <description> 正常。</description>
              </item>
              <item>
                <term>
                  <see langword="ReadOnly" />
                </term>
                <description>
                  <see langword="vbReadOnly" />
                </description>
                <description> 只读。</description>
              </item>
              <item>
                <term>
                  <see langword="Hidden" />
                </term>
                <description>
                  <see langword="vbHidden" />
                </description>
                <description> 隐藏。</description>
              </item>
              <item>
                <term>
                  <see langword="System" />
                </term>
                <description>
                  <see langword="vbSystem" />
                </description>
                <description> 系统文件。</description>
              </item>
              <item>
                <term>
                  <see langword="Directory" />
                </term>
                <description>
                  <see langword="vbDirectory" />
                </description>
                <description> 目录或文件夹。</description>
              </item>
              <item>
                <term>
                  <see langword="Archive" />
                </term>
                <description>
                  <see langword="vbArchive" />
                </description>
                <description> 文件自上次备份后已更改。</description>
              </item>
              <item>
                <term>
                  <see langword="Alias" />
                </term>
                <description>
                  <see langword="vbAlias" />
                </description>
                <description> 文件具有不同的名称。</description>
              </item>
            </list>
            <block subset="none" type="note">
              <para> 这些枚举是由 Visual Basic 语言指定的。可以在代码中的任何位置使用这些名称以代替实际值。</para>
            </block>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2015">
              <list type="table">
                <item>
                  <term> Value  </term>
                  <description> Constant  </description>
                  <description> Description  </description>
                </item>
                <item>
                  <term>
                    <see langword="Normal" />
                  </term>
                  <description>
                    <see langword="vbNormal" />
                  </description>
                  <description> Normal.  </description>
                </item>
                <item>
                  <term>
                    <see langword="ReadOnly" />
                  </term>
                  <description>
                    <see langword="vbReadOnly" />
                  </description>
                  <description> Read-only.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Hidden" />
                  </term>
                  <description>
                    <see langword="vbHidden" />
                  </description>
                  <description> Hidden.  </description>
                </item>
                <item>
                  <term>
                    <see langword="System" />
                  </term>
                  <description>
                    <see langword="vbSystem" />
                  </description>
                  <description> System file.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Directory" />
                  </term>
                  <description>
                    <see langword="vbDirectory" />
                  </description>
                  <description> Directory or folder.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Archive" />
                  </term>
                  <description>
                    <see langword="vbArchive" />
                  </description>
                  <description> File has changed since last backup.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Alias" />
                  </term>
                  <description>
                    <see langword="vbAlias" />
                  </description>
                  <description> File has a different name.  </description>
                </item>
              </list>
              <block subset="none" type="note">
                <para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para>
              </block>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2016">若要确定设置了哪些属性，请使用`And`运算符执行返回的值的按位比较`GetAttr`函数和所需的各个文件属性的值。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2016">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="a9bc6-2017">如果结果不为零，该属性设置为指定的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2017">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="a9bc6-2018">例如，下面的返回值`And`表达式是零个 if`Archive`未设置属性：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2018">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="a9bc6-2019">如果返回非零值`Archive`属性设置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2019">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2020">此示例使用`GetAttr`函数来确定文件和目录或文件夹的属性。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2020">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2021">
            <paramref name="Pathname" /> 无效或包含通配符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2021">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="a9bc6-2022">目标文件不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2022">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a9bc6-2023">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2023">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2024">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2024">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2025">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2025">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-2026">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2026">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2027">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2027">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2028">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2028">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2029">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2029">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2030">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2030">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2031">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2031">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2032">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2032">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="a9bc6-2033">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2033">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2034">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2034">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-2035">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2035">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="a9bc6-2036">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2036">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="a9bc6-2037">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2037">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="a9bc6-2038">数据</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2038">Data</span></span>|<span data-ttu-id="a9bc6-2039">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2039">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="a9bc6-2040">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2040">Delimiting comma or blank line</span></span>|<span data-ttu-id="a9bc6-2041">空</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2041">Empty</span></span>|  
|<span data-ttu-id="a9bc6-2042">#NULL #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2042">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="a9bc6-2043">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2043">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="a9bc6-2044">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2044">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="a9bc6-2045">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2045">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="a9bc6-2046">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2046">#ERROR `errornumber`#</span></span>|<span data-ttu-id="a9bc6-2047">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2047">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="a9bc6-2048">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2048">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2049">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2049">The `Input` function is not localized.</span></span> <span data-ttu-id="a9bc6-2050">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2050">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2051">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2051">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2052">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2052">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2053">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2053">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="a9bc6-2054">此示例假定`TestFile`是一个文件，已使用对其写入数据的某些行`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2054">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2055">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2055">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2056">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2056">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2057">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2057">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-2058">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2058">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2059">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2059">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2060">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2060">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2061">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2061">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2062">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2062">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2063">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2063">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2064">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2064">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="a9bc6-2065">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2065">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2066">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2066">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-2067">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2067">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="a9bc6-2068">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2068">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="a9bc6-2069">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2069">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="a9bc6-2070">数据</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2070">Data</span></span>|<span data-ttu-id="a9bc6-2071">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2071">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="a9bc6-2072">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2072">Delimiting comma or blank line</span></span>|<span data-ttu-id="a9bc6-2073">空</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2073">Empty</span></span>|  
|<span data-ttu-id="a9bc6-2074">#NULL #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2074">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="a9bc6-2075">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2075">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="a9bc6-2076">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2076">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="a9bc6-2077">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2077">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="a9bc6-2078">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2078">#ERROR `errornumber`#</span></span>|<span data-ttu-id="a9bc6-2079">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2079">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="a9bc6-2080">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2080">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2081">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2081">The `Input` function is not localized.</span></span> <span data-ttu-id="a9bc6-2082">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2082">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2083">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2083">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2084">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2084">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2085">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2085">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="a9bc6-2086">此示例假定`TestFile`是一个文件，已使用对其写入数据的某些行`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2086">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2087">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2087">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2088">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2088">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2089">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2089">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-2090">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2090">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2091">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2091">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2092">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2092">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2093">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2093">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2094">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2094">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2095">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2095">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2096">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2096">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="a9bc6-2097">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2097">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2098">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2098">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-2099">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2099">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="a9bc6-2100">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2100">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="a9bc6-2101">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2101">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="a9bc6-2102">数据</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2102">Data</span></span>|<span data-ttu-id="a9bc6-2103">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2103">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="a9bc6-2104">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2104">Delimiting comma or blank line</span></span>|<span data-ttu-id="a9bc6-2105">空</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2105">Empty</span></span>|  
|<span data-ttu-id="a9bc6-2106">#NULL #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2106">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="a9bc6-2107">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2107">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="a9bc6-2108">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2108">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="a9bc6-2109">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2109">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="a9bc6-2110">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2110">#ERROR `errornumber`#</span></span>|<span data-ttu-id="a9bc6-2111">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2111">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="a9bc6-2112">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2112">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2113">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2113">The `Input` function is not localized.</span></span> <span data-ttu-id="a9bc6-2114">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2114">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2115">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2115">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2116">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2116">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2117">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2117">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="a9bc6-2118">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2118">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2119">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2119">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2120">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2120">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2121">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2121">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-2122">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2122">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2123">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2123">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2124">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2124">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2125">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2125">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2126">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2126">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2127">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2127">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2128">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2128">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="a9bc6-2129">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2129">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2130">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2130">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-2131">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2131">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="a9bc6-2132">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2132">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="a9bc6-2133">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2133">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="a9bc6-2134">数据</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2134">Data</span></span>|<span data-ttu-id="a9bc6-2135">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2135">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="a9bc6-2136">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2136">Delimiting comma or blank line</span></span>|<span data-ttu-id="a9bc6-2137">空</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2137">Empty</span></span>|  
|<span data-ttu-id="a9bc6-2138">#NULL #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2138">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="a9bc6-2139">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2139">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="a9bc6-2140">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2140">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="a9bc6-2141">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2141">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="a9bc6-2142">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2142">#ERROR `errornumber`#</span></span>|<span data-ttu-id="a9bc6-2143">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2143">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="a9bc6-2144">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2144">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2145">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2145">The `Input` function is not localized.</span></span> <span data-ttu-id="a9bc6-2146">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2146">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2147">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2147">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2148">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2148">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2149">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2149">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="a9bc6-2150">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2150">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2151">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2151">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2152">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2152">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2153">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2153">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-2154">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2154">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2155">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2155">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2156">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2156">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2157">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2157">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2158">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2158">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2159">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2159">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2160">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2160">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="a9bc6-2161">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2161">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2162">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2162">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-2163">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2163">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="a9bc6-2164">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2164">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="a9bc6-2165">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2165">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="a9bc6-2166">数据</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2166">Data</span></span>|<span data-ttu-id="a9bc6-2167">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2167">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="a9bc6-2168">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2168">Delimiting comma or blank line</span></span>|<span data-ttu-id="a9bc6-2169">空</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2169">Empty</span></span>|  
|<span data-ttu-id="a9bc6-2170">#NULL #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2170">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="a9bc6-2171">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2171">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="a9bc6-2172">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2172">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="a9bc6-2173">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2173">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="a9bc6-2174">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2174">#ERROR `errornumber`#</span></span>|<span data-ttu-id="a9bc6-2175">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2175">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="a9bc6-2176">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2176">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2177">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2177">The `Input` function is not localized.</span></span> <span data-ttu-id="a9bc6-2178">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2178">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2179">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2179">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2180">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2180">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2181">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2181">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="a9bc6-2182">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2182">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2183">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2183">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2184">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2184">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2185">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2185">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-2186">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2186">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2187">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2187">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2188">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2188">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2189">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2189">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2190">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2190">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2191">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2191">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2192">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2192">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="a9bc6-2193">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2193">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2194">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2194">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-2195">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2195">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="a9bc6-2196">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2196">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="a9bc6-2197">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2197">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="a9bc6-2198">数据</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2198">Data</span></span>|<span data-ttu-id="a9bc6-2199">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2199">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="a9bc6-2200">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2200">Delimiting comma or blank line</span></span>|<span data-ttu-id="a9bc6-2201">空</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2201">Empty</span></span>|  
|<span data-ttu-id="a9bc6-2202">#NULL #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2202">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="a9bc6-2203">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2203">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="a9bc6-2204">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2204">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="a9bc6-2205">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2205">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="a9bc6-2206">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2206">#ERROR `errornumber`#</span></span>|<span data-ttu-id="a9bc6-2207">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2207">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="a9bc6-2208">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2208">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2209">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2209">The `Input` function is not localized.</span></span> <span data-ttu-id="a9bc6-2210">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2210">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2211">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2211">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2212">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2212">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2213">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2213">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="a9bc6-2214">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2214">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2215">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2215">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2216">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2216">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2217">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2217">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-2218">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2218">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2219">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2219">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2220">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2220">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2221">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2221">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2222">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2222">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2223">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2223">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2224">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2224">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="a9bc6-2225">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2225">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2226">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2226">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-2227">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2227">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="a9bc6-2228">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2228">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="a9bc6-2229">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2229">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="a9bc6-2230">数据</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2230">Data</span></span>|<span data-ttu-id="a9bc6-2231">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2231">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="a9bc6-2232">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2232">Delimiting comma or blank line</span></span>|<span data-ttu-id="a9bc6-2233">空</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2233">Empty</span></span>|  
|<span data-ttu-id="a9bc6-2234">#NULL #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2234">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="a9bc6-2235">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2235">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="a9bc6-2236">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2236">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="a9bc6-2237">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2237">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="a9bc6-2238">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2238">#ERROR `errornumber`#</span></span>|<span data-ttu-id="a9bc6-2239">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2239">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="a9bc6-2240">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2240">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2241">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2241">The `Input` function is not localized.</span></span> <span data-ttu-id="a9bc6-2242">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2242">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2243">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2243">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2244">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2244">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2245">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2245">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="a9bc6-2246">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2246">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2247">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2247">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2248">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2248">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2249">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2249">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-2250">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2250">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2251">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2251">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2252">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2252">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2253">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2253">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2254">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2254">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2255">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2255">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2256">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2256">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="a9bc6-2257">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2257">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2258">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2258">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-2259">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2259">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="a9bc6-2260">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2260">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="a9bc6-2261">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2261">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="a9bc6-2262">数据</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2262">Data</span></span>|<span data-ttu-id="a9bc6-2263">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2263">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="a9bc6-2264">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2264">Delimiting comma or blank line</span></span>|<span data-ttu-id="a9bc6-2265">空</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2265">Empty</span></span>|  
|<span data-ttu-id="a9bc6-2266">#NULL #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2266">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="a9bc6-2267">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2267">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="a9bc6-2268">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2268">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="a9bc6-2269">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2269">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="a9bc6-2270">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2270">#ERROR `errornumber`#</span></span>|<span data-ttu-id="a9bc6-2271">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2271">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="a9bc6-2272">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2272">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2273">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2273">The `Input` function is not localized.</span></span> <span data-ttu-id="a9bc6-2274">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2274">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2275">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2275">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2276">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2276">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2277">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2277">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="a9bc6-2278">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2278">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2279">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2279">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2280">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2280">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2281">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2281">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-2282">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2282">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2283">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2283">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2284">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2284">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2285">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2285">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2286">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2286">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2287">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2287">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2288">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2288">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="a9bc6-2289">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2289">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2290">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2290">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-2291">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2291">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="a9bc6-2292">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2292">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="a9bc6-2293">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2293">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="a9bc6-2294">数据</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2294">Data</span></span>|<span data-ttu-id="a9bc6-2295">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2295">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="a9bc6-2296">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2296">Delimiting comma or blank line</span></span>|<span data-ttu-id="a9bc6-2297">空</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2297">Empty</span></span>|  
|<span data-ttu-id="a9bc6-2298">#NULL #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2298">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="a9bc6-2299">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2299">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="a9bc6-2300">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2300">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="a9bc6-2301">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2301">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="a9bc6-2302">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2302">#ERROR `errornumber`#</span></span>|<span data-ttu-id="a9bc6-2303">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2303">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="a9bc6-2304">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2304">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2305">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2305">The `Input` function is not localized.</span></span> <span data-ttu-id="a9bc6-2306">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2306">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2307">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2307">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2308">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2308">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2309">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2309">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="a9bc6-2310">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2310">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2311">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2311">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2312">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2312">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2313">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2313">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-2314">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2314">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2315">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2315">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2316">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2316">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2317">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2317">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2318">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2318">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2319">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2319">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2320">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2320">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="a9bc6-2321">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2321">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2322">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2322">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-2323">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2323">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="a9bc6-2324">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2324">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="a9bc6-2325">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2325">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="a9bc6-2326">数据</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2326">Data</span></span>|<span data-ttu-id="a9bc6-2327">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2327">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="a9bc6-2328">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2328">Delimiting comma or blank line</span></span>|<span data-ttu-id="a9bc6-2329">空</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2329">Empty</span></span>|  
|<span data-ttu-id="a9bc6-2330">#NULL #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2330">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="a9bc6-2331">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2331">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="a9bc6-2332">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2332">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="a9bc6-2333">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2333">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="a9bc6-2334">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2334">#ERROR `errornumber`#</span></span>|<span data-ttu-id="a9bc6-2335">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2335">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="a9bc6-2336">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2336">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2337">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2337">The `Input` function is not localized.</span></span> <span data-ttu-id="a9bc6-2338">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2338">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2339">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2339">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2340">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2340">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2341">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2341">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="a9bc6-2342">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2342">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2343">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2343">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2344">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2344">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2345">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2345">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-2346">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2346">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2347">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2347">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2348">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2348">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2349">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2349">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2350">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2350">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2351">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2351">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2352">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2352">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="a9bc6-2353">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2353">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2354">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2354">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-2355">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2355">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="a9bc6-2356">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2356">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="a9bc6-2357">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2357">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="a9bc6-2358">数据</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2358">Data</span></span>|<span data-ttu-id="a9bc6-2359">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2359">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="a9bc6-2360">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2360">Delimiting comma or blank line</span></span>|<span data-ttu-id="a9bc6-2361">空</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2361">Empty</span></span>|  
|<span data-ttu-id="a9bc6-2362">#NULL #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2362">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="a9bc6-2363">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2363">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="a9bc6-2364">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2364">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="a9bc6-2365">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2365">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="a9bc6-2366">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2366">#ERROR `errornumber`#</span></span>|<span data-ttu-id="a9bc6-2367">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2367">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="a9bc6-2368">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2368">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2369">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2369">The `Input` function is not localized.</span></span> <span data-ttu-id="a9bc6-2370">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2370">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2371">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2371">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2372">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2372">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2373">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2373">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="a9bc6-2374">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2374">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2375">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2375">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2376">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2376">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2377">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2377">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="a9bc6-2378">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2378">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2379">被赋以从文件中读取的值的变量不能是数组或对象变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2379">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2380">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2380">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2381">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2381">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2382">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2382">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2383">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2383">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2384">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2384">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="a9bc6-2385">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2385">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2386">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2386">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-2387">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2387">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="a9bc6-2388">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2388">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="a9bc6-2389">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2389">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="a9bc6-2390">数据</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2390">Data</span></span>|<span data-ttu-id="a9bc6-2391">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2391">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="a9bc6-2392">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2392">Delimiting comma or blank line</span></span>|<span data-ttu-id="a9bc6-2393">空</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2393">Empty</span></span>|  
|<span data-ttu-id="a9bc6-2394">#NULL #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2394">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="a9bc6-2395">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2395">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="a9bc6-2396">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2396">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="a9bc6-2397">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2397">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="a9bc6-2398">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2398">#ERROR `errornumber`#</span></span>|<span data-ttu-id="a9bc6-2399">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2399">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="a9bc6-2400">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2400">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2401">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2401">The `Input` function is not localized.</span></span> <span data-ttu-id="a9bc6-2402">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2402">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2403">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2403">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2404">有关详情，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2404">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2405">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2405">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="a9bc6-2406">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2406">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2407">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2407">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2408">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2408">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2409">任何有效文件数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2409">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="a9bc6-2410">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2410">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2411">用于指定要读取的字符数的任何有效数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2411">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2412">返回 <see langword="String" /> 值，该值包含以 <see langword="Input" /> 或 <see langword="Binary" /> 模式打开的文件中的字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2412">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="a9bc6-2413">与 <see langword="My" /> 相比，<see langword="InputString" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2413">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2414">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2414">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-2415">返回 <see langword="String" /> 值，该值包含以 <see langword="Input" /> 或 <see langword="Binary" /> 模式打开的文件中的字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2415">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="a9bc6-2416">与 <see langword="My" /> 相比，<see langword="InputString" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2416">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2417">`InputString`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2417">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2418">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2418">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2419">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2419">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2420">与读取的数据`InputString`函数通常通过使用写入到文件`Print`或`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2420">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="a9bc6-2421">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2421">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="a9bc6-2422">与不同`Input`函数，`InputString`函数将返回它所读取的所有字符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2422">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="a9bc6-2423">这包括逗号、 回车符、 换行符、 引号和前导空格。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2423">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="a9bc6-2424">使用文件打开以进行`Binary`访问，请尝试使用通过文件读取`InputString`直到函数`EOF`返回`True`生成一个错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2424">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="a9bc6-2425">使用`LOF`并`Loc`函数而不是`EOF`通过读取二进制文件时`InputString`，或使用`FileGet`当你使用`EOF`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2425">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2426">当从文件读取，不要根据文件扩展名的文件的内容的安全决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2426">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-2427">例如，名为 form1.vb 的文件可能不是 Visual Basic 源文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2427">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2428">此示例使用`InputString`函数来从文件一次读取一个字符，并将其打印到`Output`窗口。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2428">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="a9bc6-2429">此示例假定`MyFile`是具有示例数据的多个行的文本文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2429">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2430">
            <paramref name="FileNumber" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2430">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-2431">
            <paramref name="CharCount" />&lt; 0 或 &gt; 214。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2431">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="a9bc6-2432">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2432">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2433">指定要删除的一个或多个文件名的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2433">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="a9bc6-2434">
            <c>PathName</c> 可以包含目录或文件夹以及驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2434">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2435">从磁盘中删除文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2435">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="a9bc6-2436">与 <see langword="My" /> 相比，<see langword="Kill" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2436">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2437">有关详细信息，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2437">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2438">`Kill` 支持使用多个字符 (`*`) 和单字符 (`?`) 通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2438">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="a9bc6-2439">**安全说明**若要执行，`Kill`函数要求`Read`并`PathDiscovery`标志的<xref:System.Security.Permissions.FileIOPermission>要对其授予对执行代码。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2439">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="a9bc6-2440">有关详细信息，请参阅<xref:System.Security.SecurityException>[代码访问权限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2440">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2441">此示例使用`Kill`函数从磁盘中删除文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2441">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2442">目标文件打开。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2442">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="a9bc6-2443">目标文件未找到。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2443">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="a9bc6-2444">权限被拒绝。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2444">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2445">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2445">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2446">任何有效的文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2446">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2447">从打开的顺序文件中读取一行并将其赋值给一个 <see langword="String" /> 变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2447">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-2448">从打开的顺序文件中读取一行并将其赋值给一个 <see langword="String" /> 变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2448">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2449">`LineInput`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2449">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2450">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2450">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2451">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2451">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2452">与读取的数据`LineInput`通常通过使用写入到文件`Print`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2452">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2453">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2453">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="a9bc6-2454">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2454">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="a9bc6-2455">`LineInput`函数从文件中的一个字符读取一次直到它遇到回车符 (`Chr(13)`) 或回车符/换行符 (`Chr(13) + Chr(10)`) 序列。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2455">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="a9bc6-2456">回车/换行符序列将跳过而不是追加到字符字符串。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2456">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2457">通过使用从文件中读取`LineInput`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2457">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2458">此示例使用`LineInput`函数来从顺序文件中读取一行，并将其分配给一个变量。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2458">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="a9bc6-2459">此示例假定`TestFile`是具有示例数据的多个行的文本文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2459">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="a9bc6-2460">到达文件末尾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2460">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2461">
            <paramref name="FileNumber" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2461">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2462">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2462">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2463">任何有效的 <see langword="Integer" /> 文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2463">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2464">返回指定打开文件中当前读/写位置的 <see langword="Long" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2464">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-2465">返回指定打开文件中当前读/写位置的 <see langword="Long" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2465">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2466">`Loc`函数是从零开始的使用它来检索文件中的第一个字节将返回 0。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2466">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="a9bc6-2467">`Loc`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2467">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2468">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2468">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2469">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2469">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2470">下面介绍每种文件访问模式的返回值：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2470">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="a9bc6-2471">Mode</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2471">Mode</span></span>|<span data-ttu-id="a9bc6-2472">返回值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2472">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="a9bc6-2473">读取或写入到文件中的最后一个记录的数目。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2473">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="a9bc6-2474">除以 128 文件中的当前字节位置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2474">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="a9bc6-2475">但是，返回的信息`Loc`的顺序文件不是使用也不需要。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2475">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="a9bc6-2476">读取或写入的最后一个字节的位置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2476">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2477">此示例使用`Loc`函数以返回打开的文件中的当前读/写位置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2477">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="a9bc6-2478">此示例假定`MyFile`是具有示例数据的多个行的文本文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2478">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2479">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2479">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a9bc6-2480">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2480">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-2481">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2481">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2482">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2482">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2483">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2483">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2484">任何有效的文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2484">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2485">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2485">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-2486">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2486">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2487">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2487">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2488">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2488">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="a9bc6-2489">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2489">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="a9bc6-2490">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2490">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="a9bc6-2491">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2491">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="a9bc6-2492">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2492">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="a9bc6-2493">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2493">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2494">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2494">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="a9bc6-2495">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2495">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2496">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2496">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2497">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2497">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2498">任何有效的文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2498">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="a9bc6-2499">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2499">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-2500">唯一要锁定或取消锁定的记录号或字节数</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2500">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2501">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2501">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-2502">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2502">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2503">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2503">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2504">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2504">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="a9bc6-2505">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2505">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="a9bc6-2506">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2506">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="a9bc6-2507">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2507">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="a9bc6-2508">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2508">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="a9bc6-2509">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2509">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2510">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2510">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="a9bc6-2511">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2511">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2512">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2512">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2513">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2513">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2514">任何有效的文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2514">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="a9bc6-2515">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2515">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-2516">第一个要锁定或取消锁定的记录号或字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2516">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="a9bc6-2517">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2517">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-2518">最后一个要锁定或取消锁定的记录号或字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2518">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2519">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2519">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-2520">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2520">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2521">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2521">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2522">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2522">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="a9bc6-2523">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2523">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="a9bc6-2524">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2524">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="a9bc6-2525">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2525">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="a9bc6-2526">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2526">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="a9bc6-2527">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2527">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2528">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2528">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="a9bc6-2529">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2529">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2530">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2530">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2531">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2531">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2532">一个包含有效文件号的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2532">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2533">返回一个 <see langword="Long" /> 值，该值表示使用 <see langword="FileOpen" /> 函数打开的文件的大小（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2533">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-2534">与 <see langword="My" /> 相比，<see langword="LOF" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2534">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2535">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2535">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-2536">返回一个 <see langword="Long" /> 值，该值表示使用 <see langword="FileOpen" /> 函数打开的文件的大小（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2536">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-2537">与 <see langword="My" /> 相比，<see langword="LOF" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2537">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2538">使用`FileLen`函数以获取未打开的文件的长度。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2538">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2539">此示例使用`LOF`函数来确定打开的文件的大小。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2539">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="a9bc6-2540">此示例假定`TestFile`是一个文本文件，其中包含示例数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2540">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2541">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2541">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="a9bc6-2542">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2542">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2543">标识要创建的目录的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2543">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="a9bc6-2544">
            <c>Path</c> 可以包含驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2544">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="a9bc6-2545">如果未指定驱动器，则 <see langword="MkDir" /> 在当前驱动器上创建新目录。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2545">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2546">创建一个新目录。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2546">Creates a new directory.</span>
          </span>
          <span data-ttu-id="a9bc6-2547">与 <see langword="My" /> 相比，<see langword="MkDir" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2547">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2548">有关详情，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2548">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2549">此函数创建一个新目录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2549">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2550">此示例使用`MkDir`函数来创建一个目录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2550">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="a9bc6-2551">如果未指定驱动器，则当前驱动器上创建新目录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2551">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-2552">
            <paramref name="Path" /> 未指定或为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2552">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="a9bc6-2553">权限被拒绝。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2553">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2554">目录已存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2554">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2555">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2555">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2556">任何有效的文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2556">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="a9bc6-2557">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2557">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-2558">要写入文件中的零个或多个用逗号分隔的表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2558">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="a9bc6-2559">
            <c>Output</c> 参数的设置是：</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2559">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="a9bc6-2560">
            <see langword="T:System.IO.IOException" />：文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2560">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="a9bc6-2561">
            <see langword="T:System.IO.IOException" />：<c>FileNumber</c> 不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2561">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2562">将为显示而格式化的数据写入顺序文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2562">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2563">`Print`和`PrintLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2563">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2564">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2564">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2565">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2565">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2566">`Print` 不包括换行符末尾的行;但是，`PrintLine`包括换行符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2566">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="a9bc6-2567">与写入的数据`Print`从文件通常通过使用读取`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2567">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="a9bc6-2568">如果省略`Output`有关`PrintLine`，该文件; 有关打印一个空行`Print`，没有输出。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2568">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="a9bc6-2569">用逗号分隔的多个表达式将对齐选项卡边界，但混合使用逗号和`TAB`可能会导致不一致的结果。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2569">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="a9bc6-2570">有关`Boolean`数据，而是`True`或`False`打印。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2570">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="a9bc6-2571">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2571">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="a9bc6-2572">日期数据写入该文件使用您的系统所识别的标准的短日期格式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2572">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="a9bc6-2573">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2573">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="a9bc6-2574">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2574">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="a9bc6-2575">但是，如果`Output`列表中的数据`DBNull`，`Null`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2575">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="a9bc6-2576">有关`Error`数据，输出将显示为`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2576">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="a9bc6-2577">`Error`关键字不会转换而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2577">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="a9bc6-2578">通过使用写入到文件的所有数据`Print`是国际上通用的; 即，数据的正确格式使用相应的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2578">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="a9bc6-2579">如果用户想要输出以供多个区域设置数据`Write`应使用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2579">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="a9bc6-2580">通过使用对文件进行写入`Print`或`PrintLine`函数要求`Write`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2580">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2581">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2581">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2582">此示例使用`Print`和`PrintLine`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2582">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2583">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2583">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2584">任何有效的文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2584">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="a9bc6-2585">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2585">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-2586">要写入文件中的零个或多个用逗号分隔的表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2586">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="a9bc6-2587">
            <c>Output</c> 参数的设置是：</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2587">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="a9bc6-2588">
            <see langword="T:System.IO.IOException" />：文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2588">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="a9bc6-2589">
            <see langword="T:System.IO.IOException" />：<c>FileNumber</c> 不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2589">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2590">将为显示而格式化的数据写入顺序文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2590">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2591">`Print`和`PrintLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2591">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2592">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2592">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2593">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2593">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2594">`Print` 不包括换行符末尾的行;但是，`PrintLine`包括换行符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2594">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="a9bc6-2595">与写入的数据`Print`从文件通常通过使用读取`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2595">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="a9bc6-2596">如果省略`Output`有关`PrintLine`，该文件; 有关打印一个空行`Print`，没有输出。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2596">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="a9bc6-2597">用逗号分隔的多个表达式将对齐选项卡边界，但混合使用逗号和`TAB`可能会导致不一致的结果。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2597">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="a9bc6-2598">有关`Boolean`数据，而是`True`或`False`打印。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2598">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="a9bc6-2599">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2599">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="a9bc6-2600">日期数据写入文件，通过使用系统所识别的标准的短日期格式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2600">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="a9bc6-2601">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2601">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="a9bc6-2602">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2602">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="a9bc6-2603">但是，如果`Output`列表中的数据`DBNull`，`Null`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2603">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="a9bc6-2604">有关`Error`数据，输出将显示为`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2604">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="a9bc6-2605">`Error`关键字不会转换而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2605">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="a9bc6-2606">通过使用写入到文件的所有数据`Print`是国际上通用的; 即，数据的正确格式使用相应的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2606">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="a9bc6-2607">如果用户想要输出以供多个区域设置数据`Write`应使用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2607">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="a9bc6-2608">通过使用对文件进行写入`Print`或`PrintLine`函数要求`Write`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2608">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2609">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2609">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2610">此示例使用`Print`和`PrintLine`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2610">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="a9bc6-2611">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2611">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2612">指定现有文件名和位置的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2612">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="a9bc6-2613">
            <c>OldPath</c> 可以包含文件的目录和驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2613">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="a9bc6-2614">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2614">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2615">指定新文件名和位置的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2615">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="a9bc6-2616">
            <c>NewPath</c> 可以包含目标位置的目录和驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2616">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="a9bc6-2617">
            <c>NewPath</c> 指定的文件名不能是已存在的文件名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2617">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2618">重命名磁盘文件或目录。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2618">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="a9bc6-2619">与 <see langword="My" /> 相比，<see langword="Rename" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2619">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2620">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2620">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2621">`Rename`函数重命名文件，并将其移动到另一个目录，如有必要。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2621">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="a9bc6-2622">`Rename`函数可以将一个文件，在驱动器，但它只能重命名现有目录时同时`NewPath`和`OldPath`位于同一驱动器上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2622">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="a9bc6-2623">`Rename` 无法创建新文件或目录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2623">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="a9bc6-2624">使用`Rename`函数对打开的文件会产生错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2624">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="a9bc6-2625">重命名之前，必须关闭打开的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2625">You must close an open file before renaming it.</span></span> <span data-ttu-id="a9bc6-2626">`Rename` 参数不能包含多个字符 （\*） 和单字符 （？） 通配符。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2626">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9bc6-2627">当使用`Rename`将文件从受保护的位置复制到受保护的位置，则文件，将保留不太受限制的权限。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2627">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="a9bc6-2628">检查以确保没有引入可能的安全风险。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2628">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2629">此示例使用`Rename`函数重命名文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2629">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="a9bc6-2630">对于此示例中，假定已指定的目录存在。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2630">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-2631">路径无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2631">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="a9bc6-2632">
            <paramref name="OldPath" /> 文件不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2632">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2633">无法重命名为不同的设备。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2633">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a9bc6-2634">关闭所有使用 <see langword="FileOpen" /> 函数打开的磁盘文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2634">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-2635">与 <see langword="My" /> 相比，<see langword="Reset" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2635">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2636">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2636">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2637">`Reset`函数将关闭打开的所有活动文件`FileOpen`函数，并具有相同的功能`FileClose()`不带任何参数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2637">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2638">此示例使用`Reset`函数来关闭所有打开的文件，并将所有文件缓冲区的内容写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2638">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="a9bc6-2639">请注意，使用`Object`变量`FileNumber`作为一个字符串和数字。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2639">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="a9bc6-2640">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2640">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2641">标识要移除的目录或文件夹的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2641">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="a9bc6-2642">
            <c>Path</c> 可以包含驱动器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2642">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="a9bc6-2643">如果未指定驱动器，则 <see langword="RmDir" /> 移除当前驱动器上的目录。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2643">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2644">移除现有目录。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2644">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="a9bc6-2645">与 <see langword="My" /> 相比，<see langword="RmDir" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2645">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2646">有关详情，请参阅<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2646">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2647">如果你尝试使用出错`RmDir`上包含文件的目录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2647">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="a9bc6-2648">使用`Kill`函数删除所有文件，再尝试删除一个目录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2648">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2649">此示例使用`RmDir`函数来删除现有目录。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2649">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-2650">
            <paramref name="Path" /> 未指定或为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2650">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2651">目标目录包含文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2651">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="a9bc6-2652">目录不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2652">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a9bc6-2653">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2653">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-2654">与 <see langword="My" /> 相比，<see langword="Seek" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2654">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2655">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2655">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2656">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2656">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2657">一个包含有效文件号的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2657">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2658">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2658">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-2659">与 <see langword="My" /> 相比，<see langword="Seek" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2660">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-2661">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2661">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2662">`Seek` 返回 1 和 2,147,483,647 之间的值 (等效于 2 ^31-1)，非独占。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2662">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="a9bc6-2663">下面介绍每个文件访问模式的返回的值：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2663">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="a9bc6-2664">Mode</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2664">Mode</span></span>|<span data-ttu-id="a9bc6-2665">返回值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2665">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="a9bc6-2666">读取或写入的下一个记录的数目</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2666">Number of the next record read or written</span></span>|  
|<span data-ttu-id="a9bc6-2667">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2667">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="a9bc6-2668">下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2668">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="a9bc6-2669">在文件中的第一个字节位于位置 1，第二个字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2669">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2670">此示例使用`Seek`函数以返回当前文件位置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2670">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="a9bc6-2671">该示例假定`TestFile`是包含记录的结构的一个文件`Record`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2671">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="a9bc6-2672">打开的文件中`Random`模式下，`Seek`返回下一条记录的数目。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2672">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="a9bc6-2673">而不在模式下打开的文件`Random`模式下，`Seek`返回下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2673">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="a9bc6-2674">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2674">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="a9bc6-2675">此示例使用`Seek`函数将位置设置为下一次读取或写入的文件中。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2675">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="a9bc6-2676">而不在模式下打开的文件`Random`模式下，`Seek`设置下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2676">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="a9bc6-2677">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2677">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2678">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2678">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2679">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2679">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2680">一个包含有效文件号的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2680">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="a9bc6-2681">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2681">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2682">一个 1 到 2,147,483,647 范围内（包括 1 和 2,147,483,647）的数字，用于指示下一个读取/写入操作应该发生的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2682">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2683">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2683">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-2684">与 <see langword="My" /> 相比，<see langword="Seek" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2684">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2685">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2685">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2686">`Seek` 返回 1 和 2,147,483,647 之间的值 (等效于 2 ^31-1)，非独占。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2686">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="a9bc6-2687">下面介绍每个文件访问模式的返回的值：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2687">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="a9bc6-2688">Mode</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2688">Mode</span></span>|<span data-ttu-id="a9bc6-2689">返回值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2689">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="a9bc6-2690">读取或写入的下一个记录的数目</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2690">Number of the next record read or written</span></span>|  
|<span data-ttu-id="a9bc6-2691">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2691">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="a9bc6-2692">下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2692">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="a9bc6-2693">在文件中的第一个字节位于位置 1，第二个字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2693">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2694">此示例使用`Seek`函数以返回当前文件位置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2694">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="a9bc6-2695">该示例假定`TestFile`是包含记录的结构的一个文件`Record`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2695">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="a9bc6-2696">打开的文件中`Random`模式下，`Seek`返回下一条记录的数目。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2696">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="a9bc6-2697">而不在模式下打开的文件`Random`模式下，`Seek`返回下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2697">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="a9bc6-2698">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2698">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="a9bc6-2699">此示例使用`Seek`函数将位置设置为下一次读取或写入的文件中。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2699">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="a9bc6-2700">而不在模式下打开的文件`Random`模式下，`Seek`设置下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2700">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="a9bc6-2701">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2701">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2702">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2702">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="a9bc6-2703">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2703">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2704">指定一个文件名的 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2704">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="a9bc6-2705">
            <c>PathName</c> 可以包含驱动器和目录或文件夹。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2705">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="a9bc6-2706">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2706">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2707">常量或数值表达式，所有这些值一起指定文件特性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2707">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2708">设置文件的特性信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2708">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="a9bc6-2709">与 <see langword="My" /> 相比，<see langword="SetAttr" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2709">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2710">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2710">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2711">如果您尝试设置打开的文件的属性，会发生运行时错误。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2711">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="a9bc6-2712">`Attributes`参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2712">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="a9bc6-2713">值</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2713">Value</span></span>|<span data-ttu-id="a9bc6-2714">常量</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2714">Constant</span></span>|<span data-ttu-id="a9bc6-2715">描述</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2715">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="a9bc6-2716">正常 （默认值）。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2716">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="a9bc6-2717">只读。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2717">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="a9bc6-2718">隐藏。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2718">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="a9bc6-2719">系统文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2719">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="a9bc6-2720">卷标</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2720">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="a9bc6-2721">目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2721">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="a9bc6-2722">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2722">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="a9bc6-2723">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2723">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2724">这些枚举是由 Visual Basic 语言指定的。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2724">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="a9bc6-2725">名称可以是任意位置在代码中使用而不是实际值。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2725">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2726">此示例使用`SetAttr`函数设置的文件的属性。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2726">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a9bc6-2727">
            <paramref name="Attribute" /> 类型无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2727">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="a9bc6-2728">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2728">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2729">在显示或输出列表中下一个表达式之前要插入的空格数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2729">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2730">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2730">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-2731">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2731">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2732">如果`Count`小于输出行宽下, 一个输出位置立即遵循打印的空格数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2732">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="a9bc6-2733">如果`Count`大于输出行宽，`SPC`计算使用的公式的下一步打印位置：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2733">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="a9bc6-2734">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2734">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="a9bc6-2735">例如，如果当前输出位置为 24，输出行的宽度为 80，并指定`SPC(90)`下, 一步的输出将从开始位置 34 （当前打印位置 + 90/80 的其余部分）。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2735">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="a9bc6-2736">如果当前的输出位置和输出行宽度之间的区别是小于`Count`(或`Count` `Mod` *宽度*)，则`SPC`函数将跳至下一行，并生成空间等于`Count`– (*宽度*–*小于*)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2736">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2737">请确保表格列的宽度足以允许较宽的字母。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2737">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2738">此示例使用`SPC`函数以定位输出文件中并在**输出**窗口。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2738">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a9bc6-2739">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2739">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a9bc6-2740">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2740">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-2741">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2741">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2742">如果当前行上的当前打印位置大于`Column`，`TAB`将跳到列的值等于`Column`下一步的输出行上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2742">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="a9bc6-2743">如果`Column`小于 1，`TAB`将打印位置移动到第 1 列。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2743">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="a9bc6-2744">如果`Column`大于输出行宽，`TAB`计算使用的公式的下一步打印位置：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2744">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="a9bc6-2745">Mod 列宽</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2745">Column Mod width</span></span>  
  
 <span data-ttu-id="a9bc6-2746">例如，如果*宽度*是 80，并指定`TAB(90)`下, 一步的输出将从开始第 10 （90/80 的余数） 列。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2746">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="a9bc6-2747">如果`Column`小于当前打印位置，开始计算的输出位置的下一行上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2747">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="a9bc6-2748">如果计算出的打印位置大于当前打印位置，打印开始计算打印位置在同一行。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2748">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="a9bc6-2749">输出行上最左侧的打印位置始终为 1。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2749">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="a9bc6-2750">当你使用`Print`或`PrintLine`函数来打印到文件，右侧的输出位置是输出文件，您可以使用设置的当前宽度`FileWidth`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2750">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="a9bc6-2751">`TAB`函数也可以用于`WriteLine`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2751">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="a9bc6-2752">它不能用于<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2752">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2753">请确保表格列的宽度足以包含较宽的字母。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2753">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2754">此示例使用`TAB`函数以定位输出文件中并在**输出**窗口。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2754">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="a9bc6-2755">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2755">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-2756">在显示或输出列表中下一个表达式之前要移动到的列号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2756">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="a9bc6-2757">如果省略它，则 <see langword="TAB" /> 将插入点移动到下一个打印区域的开始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2757">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2758">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2758">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bc6-2759">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2759">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2760">如果当前行上的当前打印位置大于`Column`，`TAB`将跳到列的值等于`Column`下一步的输出行上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2760">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="a9bc6-2761">如果`Column`小于 1，`TAB`将打印位置移动到第 1 列。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2761">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="a9bc6-2762">如果`Column`大于输出行宽，`TAB`计算使用的公式的下一步打印位置：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2762">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="a9bc6-2763">Mod 列宽</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2763">Column Mod width</span></span>  
  
 <span data-ttu-id="a9bc6-2764">例如，如果*宽度*是 80，并指定`TAB(90)`下, 一步的输出将从开始第 10 （90/80 的余数） 列。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2764">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="a9bc6-2765">如果`Column`小于当前打印位置，开始计算的输出位置的下一行上。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2765">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="a9bc6-2766">如果计算出的打印位置大于当前打印位置，打印开始计算打印位置在同一行。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2766">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="a9bc6-2767">输出行上最左侧的打印位置始终为 1。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2767">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="a9bc6-2768">当你使用`Print`或`PrintLine`函数来打印到文件，右侧的输出位置是输出文件，您可以使用设置的当前宽度`FileWidth`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2768">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="a9bc6-2769">`TAB`函数也可以用于`WriteLine`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2769">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="a9bc6-2770">它不能用于<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2770">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9bc6-2771">请确保表格列的宽度足以包含较宽的字母。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2771">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2772">此示例使用`TAB`函数以定位输出文件中并在**输出**窗口。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2772">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a9bc6-2773">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2773">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-2774">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2774">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2775">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2775">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2776">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2776">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2777">任何有效的文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2777">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2778">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2778">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-2779">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2780">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2781">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2781">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="a9bc6-2782">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2782">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="a9bc6-2783">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2783">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="a9bc6-2784">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2784">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="a9bc6-2785">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2785">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="a9bc6-2786">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2786">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2787">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2787">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="a9bc6-2788">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2788">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2789">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2789">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2790">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2790">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2791">任何有效的文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2791">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="a9bc6-2792">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2792">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-2793">唯一要锁定或取消锁定的记录号或字节数</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2793">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2794">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2794">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-2795">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2795">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2796">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2796">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2797">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2797">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="a9bc6-2798">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2798">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="a9bc6-2799">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2799">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="a9bc6-2800">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2800">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="a9bc6-2801">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2801">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="a9bc6-2802">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2802">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2803">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2803">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="a9bc6-2804">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2804">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2805">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2805">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2806">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2806">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2807">任何有效的文件号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2807">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="a9bc6-2808">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2808">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-2809">第一个要锁定或取消锁定的记录号或字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2809">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="a9bc6-2810">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2810">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-2811">最后一个要锁定或取消锁定的记录号或字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2811">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2812">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2812">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="a9bc6-2813">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2813">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="a9bc6-2814">有关详情，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2814">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2815">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2815">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="a9bc6-2816">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2816">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="a9bc6-2817">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2817">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="a9bc6-2818">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2818">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="a9bc6-2819">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2819">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="a9bc6-2820">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2820">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2821">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2821">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="a9bc6-2822">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2822">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2823">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2823">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2824">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2824">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2825">包含任何有效文件数的 <see langword="Integer" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2825">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="a9bc6-2826">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2826">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-2827">要写入文件的一个或多个用逗号分隔的表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2827">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2828">向顺序文件写入数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2828">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="a9bc6-2829">使用 <see langword="Write" /> 写入的数据通常要用 <see langword="Input" /> 来从文件中读取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2829">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2830">`Write`和`WriteLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2830">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2831">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2831">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2832">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2832">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2833">如果省略`Output`，向文件打印一个空行。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2833">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="a9bc6-2834">可以用逗号分隔多个表达式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2834">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="a9bc6-2835">与不同`Print`函数，`Write`函数之间插入逗号项和引号将字符串写入该文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2835">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="a9bc6-2836">无需显式分隔符放入列表。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2836">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="a9bc6-2837">当`Write`用于将数据写入到文件中，仅数字`Boolean`，日期、 null 和`Error`支持数据格式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2837">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="a9bc6-2838">下面的通用假设遵循这样的数据始终能够阅读和正确解释使用`Input`，无论区域设置：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2838">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="a9bc6-2839">使用句点作为小数分隔符始终写入数值数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2839">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="a9bc6-2840">有关`Boolean`数据，而是`#TRUE#`或`#FALSE#`打印。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2840">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="a9bc6-2841">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2841">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="a9bc6-2842">日期数据写入到使用通用日期格式的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2842">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="a9bc6-2843">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2843">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="a9bc6-2844">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2844">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="a9bc6-2845">但是，对于 null 数据`#NULL#`写入。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2845">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-2846">有关`Error`数据，输出将显示为`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2846">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="a9bc6-2847">`Error`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2847">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="a9bc6-2848">`WriteLine` 将插入一个换行符 (即回车符/换行符，或`Chr(13) + Chr(10)`)，在其写入的最后一个字符后`Output`的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2848">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="a9bc6-2849">您可以通过使用双引号引起来，在字符串中嵌入引号或""。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2849">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="a9bc6-2850">例如，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2850">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="a9bc6-2851">返回一个字符串值为`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2851">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="a9bc6-2852">通过使用对文件进行写入`Write`或`WriteLine`函数要求`Append`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2852">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2853">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2853">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2854">此示例使用`Write`函数将原始数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2854">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="a9bc6-2855">文件模式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2855">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="a9bc6-2856">必需。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2856">Required.</span>
          </span>
          <span data-ttu-id="a9bc6-2857">包含任何有效文件数的 <see langword="Integer" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2857">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="a9bc6-2858">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2858">Optional.</span>
          </span>
          <span data-ttu-id="a9bc6-2859">要写入文件的一个或多个用逗号分隔的表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2859">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bc6-2860">向顺序文件写入数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2860">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="a9bc6-2861">使用 <see langword="Write" /> 写入的数据通常要用 <see langword="Input" /> 来从文件中读取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bc6-2861">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bc6-2862">`Write`和`WriteLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2862">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="a9bc6-2863">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2863">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="a9bc6-2864">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2864">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="a9bc6-2865">如果省略`Output`，向文件打印一个空行。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2865">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="a9bc6-2866">可以用逗号分隔多个表达式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2866">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="a9bc6-2867">与不同`Print`函数，`Write`函数之间插入逗号项和引号将字符串写入该文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2867">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="a9bc6-2868">无需显式分隔符放入列表。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2868">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="a9bc6-2869">当`Write`用于将数据写入到文件中，仅数字`Boolean`，日期、 null 和`Error`支持数据格式。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2869">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="a9bc6-2870">下面的通用假设遵循这样的数据始终能够阅读和正确解释使用`Input`，无论区域设置：</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2870">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="a9bc6-2871">使用句点作为小数分隔符始终写入数值数据。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2871">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="a9bc6-2872">有关`Boolean`数据，而是`#TRUE#`或`#FALSE#`打印。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2872">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="a9bc6-2873">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2873">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="a9bc6-2874">日期数据写入到使用通用日期格式的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2874">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="a9bc6-2875">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2875">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="a9bc6-2876">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2876">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="a9bc6-2877">但是，对于 null 数据`#NULL#`写入。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2877">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="a9bc6-2878">有关`Error`数据，输出将显示为`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2878">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="a9bc6-2879">`Error`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2879">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="a9bc6-2880">`WriteLine` 将插入一个换行符 (即回车符/换行符，或`Chr(13) + Chr(10)`)，在其写入的最后一个字符后`Output`的文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2880">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="a9bc6-2881">您可以通过使用双引号引起来，在字符串中嵌入引号或""。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2881">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="a9bc6-2882">例如，</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2882">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="a9bc6-2883">返回一个字符串值为`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2883">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="a9bc6-2884">通过使用对文件进行写入`Write`或`WriteLine`函数要求`Append`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2884">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="a9bc6-2885">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2885">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9bc6-2886">此示例使用`Write`函数将原始数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="a9bc6-2886">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>