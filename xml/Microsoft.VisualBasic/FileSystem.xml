<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="698d4c7779138119bfe452e95602b55a06711e5b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37712139" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e3e04-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e3e04-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="e3e04-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e3e04-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="e3e04-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e3e04-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-104">此模块支持的 Visual Basic 语言关键字和访问文件和文件夹的运行时库成员。</span><span class="sxs-lookup"><span data-stu-id="e3e04-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-105">此示例使用`GetAttr`函数来确定文件和目录或文件夹的属性。</span><span class="sxs-lookup"><span data-stu-id="e3e04-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="e3e04-106">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-106">Required.</span>
          </span>
          <span data-ttu-id="e3e04-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="e3e04-108">
            <c>Path</c> may include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-108">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="e3e04-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-110">Changes the current directory or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-110">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="e3e04-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-113">`ChDir`函数更改默认目录，但不是在默认驱动器。</span><span class="sxs-lookup"><span data-stu-id="e3e04-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="e3e04-114">例如，如果默认驱动器为 C，以下语句更改驱动器 D 上的默认目录，但 C 仍保留默认的驱动器：</span><span class="sxs-lookup"><span data-stu-id="e3e04-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="e3e04-115">您可以进行相对目录更改为通过键入两个句点，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-116">`ChDir`函数需要非托管的代码权限，这可能会影响在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="e3e04-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="e3e04-117">有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-118">此示例使用`ChDir`函数来更改当前目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="e3e04-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-119">
            <paramref name="Path" /> is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-119">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="e3e04-120">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-120">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3e04-121">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-121">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="e3e04-122">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-122">Required.</span>
          </span>
          <span data-ttu-id="e3e04-123">String expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-123">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="e3e04-124">If you supply a zero-length string (""), the current drive does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-124">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="e3e04-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-126">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-126">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-127">`ChDrive`函数需要非托管代码的权限，这可能会影响其在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="e3e04-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="e3e04-128">有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>并[代码访问权限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-129">此示例使用`ChDrive`函数来更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="e3e04-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="e3e04-130">如果驱动器不存在，该函数将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-131">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-131">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="e3e04-132">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-132">Required.</span>
          </span>
          <span data-ttu-id="e3e04-133">String expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-133">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="e3e04-134">If you supply a zero-length string (""), the current drive does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-134">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="e3e04-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-136">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-136">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-137">`ChDrive`函数需要非托管代码的权限，这可能会影响其在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="e3e04-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="e3e04-138">有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>并[代码访问权限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-139">此示例使用`ChDrive`函数来更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="e3e04-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="e3e04-140">如果驱动器不存在，该函数将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-141">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-141">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3e04-142">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-142">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="e3e04-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="e3e04-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e3e04-145">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-145">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="e3e04-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="e3e04-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-148">A string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-148">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e3e04-149">此示例使用`CurDir`函数以返回当前路径。</span><span class="sxs-lookup"><span data-stu-id="e3e04-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="e3e04-150">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-150">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-151">
            <see langword="Char" /> expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-151">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="e3e04-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-153">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="e3e04-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="e3e04-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-156">A string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e3e04-157">此示例使用`CurDir`函数以返回当前路径。</span><span class="sxs-lookup"><span data-stu-id="e3e04-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3e04-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="e3e04-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e3e04-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="e3e04-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-165">`Dir`函数支持多个字符的使用 (`*`) 和单字符 (`?`) 通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="e3e04-166">`VbVolume` 返回而不是特定文件名的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="e3e04-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="e3e04-167">必须提供`PathName`第一次调用`Dir`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="e3e04-168">若要检索的下一项，你可以后续调用`Dir`不带参数的函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-169">若要正确运行，`Dir`函数需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>并<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>标志的<xref:System.Security.Permissions.FileIOPermission>要对其授予对执行代码。</span><span class="sxs-lookup"><span data-stu-id="e3e04-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="e3e04-170">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，并[代码访问权限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="e3e04-171">`Attributes`参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="e3e04-172">“值”</span><span class="sxs-lookup"><span data-stu-id="e3e04-172">Value</span></span>|<span data-ttu-id="e3e04-173">返回的常量</span><span class="sxs-lookup"><span data-stu-id="e3e04-173">Constant</span></span>|<span data-ttu-id="e3e04-174">描述</span><span class="sxs-lookup"><span data-stu-id="e3e04-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="e3e04-175">默认。</span><span class="sxs-lookup"><span data-stu-id="e3e04-175">Default.</span></span> <span data-ttu-id="e3e04-176">指定文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="e3e04-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="e3e04-177">指定只读文件，以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="e3e04-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="e3e04-178">指定隐藏的文件，以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="e3e04-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="e3e04-179">指定系统文件以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="e3e04-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="e3e04-180">指定卷标签;如果指定任何其他属性，则`vbVolume`将被忽略。</span><span class="sxs-lookup"><span data-stu-id="e3e04-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="e3e04-181">指定目录或文件夹，以及文件而无需属性。</span><span class="sxs-lookup"><span data-stu-id="e3e04-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="e3e04-182">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="e3e04-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="e3e04-183">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="e3e04-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-184">这些枚举所指定的 Visual Basic 语言并可以在任意位置而不是实际值在代码中。</span><span class="sxs-lookup"><span data-stu-id="e3e04-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-185">此示例使用`Dir`函数检查是否存在某些文件和目录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="e3e04-186">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-186">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-187">
            <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-187">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="e3e04-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes">
          <span data-ttu-id="e3e04-189">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-189">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="e3e04-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="e3e04-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-196">`Dir`函数支持多个字符的使用 (`*`) 和单字符 (`?`) 通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="e3e04-197">`VbVolume` 返回而不是特定文件名的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="e3e04-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="e3e04-198">必须提供`PathName`第一次调用`Dir`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="e3e04-199">若要检索的下一项，你可以后续调用`Dir`不带任何参数的函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-200">若要正确运行，`Dir`函数需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>并<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>标志的<xref:System.Security.Permissions.FileIOPermission>要对其授予对执行代码。</span><span class="sxs-lookup"><span data-stu-id="e3e04-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="e3e04-201">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，并[代码访问权限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="e3e04-202">`Attributes`参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="e3e04-203">“值”</span><span class="sxs-lookup"><span data-stu-id="e3e04-203">Value</span></span>|<span data-ttu-id="e3e04-204">返回的常量</span><span class="sxs-lookup"><span data-stu-id="e3e04-204">Constant</span></span>|<span data-ttu-id="e3e04-205">描述</span><span class="sxs-lookup"><span data-stu-id="e3e04-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="e3e04-206">默认。</span><span class="sxs-lookup"><span data-stu-id="e3e04-206">Default.</span></span> <span data-ttu-id="e3e04-207">指定不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="e3e04-208">指定只读文件，除了不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="e3e04-209">指定隐藏的文件，除了不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="e3e04-210">指定系统文件，除了不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="e3e04-211">指定卷标签;如果指定任何其他属性，则`vbVolume`将被忽略。</span><span class="sxs-lookup"><span data-stu-id="e3e04-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="e3e04-212">指定目录或文件夹，以及不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="e3e04-213">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="e3e04-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="e3e04-214">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="e3e04-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-215">这些枚举所指定的 Visual Basic 语言，并可以代替实际值在代码中任意位置使用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-216">此示例使用`Dir`函数检查是否存在某些文件和目录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-217">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-217">Required.</span>
          </span>
          <span data-ttu-id="e3e04-218">An <see langword="Integer" /> that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-218">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-221">使用`EOF`以避免通过尝试获取输入文件的末尾而产生的错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="e3e04-222">`EOF`函数返回`False`直到达到文件末尾。</span><span class="sxs-lookup"><span data-stu-id="e3e04-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="e3e04-223">使用文件打开以进行`Random`或`Binary`访问权限，`EOF`返回`False`直到最后一个执行`FileGet`函数不能读取完整记录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="e3e04-224">使用文件打开以进行`Binary`访问，请尝试通过文件使用读取`Input`直到函数`EOF`返回`True`生成一个错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="e3e04-225">使用`LOF`并`Loc`函数而不是`EOF`使用二进制文件中读取时`Input`，或使用`Get`时使用`EOF`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="e3e04-226">使用文件打开以进行`Output`，`EOF`始终返回`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-227">此示例使用`EOF`函数来检测文件的末尾。</span><span class="sxs-lookup"><span data-stu-id="e3e04-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="e3e04-228">此示例假定`Testfile`是一个文本文件，其中包含若干行文本。</span><span class="sxs-lookup"><span data-stu-id="e3e04-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-229">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-229">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-230">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-230">Required.</span>
          </span>
          <span data-ttu-id="e3e04-231">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-231">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="e3e04-232">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-232">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-236">The following enumeration values indicate the file access mode:  <list type="table"><item><term> Value  </term><description> Mode  </description></item><item><term> 1  </term><description><see langword="OpenMode.Input" /></description></item><item><term> 2  </term><description><see langword="OpenMode.Output" /></description></item><item><term> 4  </term><description><see langword="OpenMode.Random" /></description></item><item><term> 8  </term><description><see langword="OpenMode.Append" /></description></item><item><term> 32  </term><description><see langword="OpenMode.Binary" /></description></item></list></span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-236">The following enumeration values indicate the file access mode:  <list type="table"><item><term> Value  </term><description> Mode  </description></item><item><term> 1  </term><description><see langword="OpenMode.Input" /></description></item><item><term> 2  </term><description><see langword="OpenMode.Output" /></description></item><item><term> 4  </term><description><see langword="OpenMode.Random" /></description></item><item><term> 8  </term><description><see langword="OpenMode.Append" /></description></item><item><term> 32  </term><description><see langword="OpenMode.Binary" /></description></item></list></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-237">此函数返回一个枚举，表示使用打开的文件的文件模式`FileOpen`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-237">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-238">此示例使用`FileAttr`函数以返回打开的文件的文件模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-238">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="e3e04-239">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-239">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-240">Parameter array of 0 or more channels to be closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-240">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-241">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-241">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-242">
            <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-242">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="e3e04-243">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-243">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-244">`FileClose`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-244">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-245">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-245">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-246">有关详细信息，请参阅[如何： 使用 StreamReader 文件中读取文本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)，[如何： 使用 StreamWriter 向文件写入文本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)，和[演练： 中操作文件和目录Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-246">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="e3e04-247">如果省略`FileNumbers`，打开的所有活动文件`FileOpen`函数将关闭。</span><span class="sxs-lookup"><span data-stu-id="e3e04-247">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="e3e04-248">当您关闭已打开的文件`Output`或`Append`，最终输出缓冲区写入到该文件的操作系统缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e3e04-248">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="e3e04-249">所有关联的缓冲区空间使用的已关闭发布文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-249">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="e3e04-250">当`FileClose`执行函数，而其文件的文件的关联数字结束。</span><span class="sxs-lookup"><span data-stu-id="e3e04-250">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-251">此示例使用`FileClose`函数来关闭文件打开以进行`Input`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-251">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-252">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-252">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="e3e04-253">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-253">Required.</span>
          </span>
          <span data-ttu-id="e3e04-254">
            <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-254">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="e3e04-255">
            <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-255">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="e3e04-256">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-256">Required.</span>
          </span>
          <span data-ttu-id="e3e04-257">
            <see langword="String" /> expression that specifies the destination file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-257">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="e3e04-258">
            <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-258">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-259">Copies a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-259">Copies a file.</span>
          </span>
          <span data-ttu-id="e3e04-260">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-260">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="e3e04-261">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-261">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-262">如果尝试使用`FileCopy`函数上当前打开的文件，就会出错。</span><span class="sxs-lookup"><span data-stu-id="e3e04-262">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="e3e04-263">`FileCopy` 需要完全信任才能在本地驱动器上工作。</span><span class="sxs-lookup"><span data-stu-id="e3e04-263">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-264">此示例使用`FileCopy`函数将一个文件复制到另一个。</span><span class="sxs-lookup"><span data-stu-id="e3e04-264">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="e3e04-265">在此示例中，假定`SrcFile`是包含数据的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-265">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-266">
            <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-266">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-267">File is already open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-267">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="e3e04-268">File does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-268">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="e3e04-269">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-269">Required.</span>
          </span>
          <span data-ttu-id="e3e04-270">
            <see langword="String" /> expression that specifies a file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-270">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="e3e04-271">
            <c>PathName</c> may include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-271">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-272">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-272">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="e3e04-273">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-273">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="e3e04-274">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-274">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-275">
            <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-275">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e3e04-276">此示例使用`FileDateTime`函数来确定的日期和时间文件已创建或上次修改时间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-276">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="e3e04-277">日期和时间显示格式基于系统的区域设置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-277">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-278">
            <paramref name="PathName" /> is invalid or contains wildcards.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-278">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="e3e04-279">Target file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-279">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3e04-280">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-280">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="e3e04-281">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-281">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="e3e04-282">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-282">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-283">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-283">Required.</span>
          </span>
          <span data-ttu-id="e3e04-284">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-284">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-285">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-285">Required.</span>
          </span>
          <span data-ttu-id="e3e04-286">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-286">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-287">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-287">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-288">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-288">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-289">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-289">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="e3e04-290">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-290">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="e3e04-291">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-291">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-292">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-292">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-293">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-293">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="e3e04-294">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-294">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-295">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="e3e04-295">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-296">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-296">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="e3e04-297">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-297">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-298">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-298">Random Mode</span></span>  
 <span data-ttu-id="e3e04-299">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-299">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-300">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-300">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-301">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-301">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-302">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-302">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-303">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-303">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-304">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-304">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-305">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-305">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="e3e04-306">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-306">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-307">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-307">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="e3e04-308">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-308">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-309">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-309">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="e3e04-310">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-310">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="e3e04-311">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-311">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="e3e04-312">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-312">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-313">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-313">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-314">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-314">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-315">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-315">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="e3e04-316">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-316">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="e3e04-317">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="e3e04-317">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="e3e04-318">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-318">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="e3e04-319">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-319">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="e3e04-320">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-320">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-321">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="e3e04-321">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="e3e04-322">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-322">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-323">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-323">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="e3e04-324">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-324">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="e3e04-325">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-325">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-326">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-326">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-327">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-327">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-328">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-328">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-329">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-329">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-330">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-330">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-331">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-331">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="e3e04-332">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-332">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="e3e04-333">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-333">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-334">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-334">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="e3e04-335">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-335">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-336">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-336">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-337">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-337">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-338">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-338">Required.</span>
          </span>
          <span data-ttu-id="e3e04-339">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-339">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-340">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-340">Required.</span>
          </span>
          <span data-ttu-id="e3e04-341">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-341">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-342">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-342">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-343">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-343">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-344">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-344">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="e3e04-345">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-345">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="e3e04-346">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-346">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-347">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-347">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-348">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-348">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="e3e04-349">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-349">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-350">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="e3e04-350">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-351">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-351">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="e3e04-352">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-352">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-353">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-353">Random Mode</span></span>  
 <span data-ttu-id="e3e04-354">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-354">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-355">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-355">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-356">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-356">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-357">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-357">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-358">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-358">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-359">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-359">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-360">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-360">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="e3e04-361">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-361">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-362">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-362">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="e3e04-363">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-363">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-364">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-364">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="e3e04-365">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-365">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="e3e04-366">如果未使用说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-366">If the descriptor is not used.</span></span> <span data-ttu-id="e3e04-367">然后，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-367">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="e3e04-368">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-368">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-369">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-369">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-370">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-370">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-371">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-371">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="e3e04-372">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-372">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="e3e04-373">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="e3e04-373">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="e3e04-374">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-374">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="e3e04-375">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-375">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="e3e04-376">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-376">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-377">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="e3e04-377">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="e3e04-378">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-378">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-379">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-379">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="e3e04-380">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-380">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="e3e04-381">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-381">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-382">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-382">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-383">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-383">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-384">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-384">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-385">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-385">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-386">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-386">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-387">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-387">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="e3e04-388">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-388">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="e3e04-389">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-389">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-390">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-390">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="e3e04-391">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-391">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-392">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-392">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-393">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-393">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-394">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-394">Required.</span>
          </span>
          <span data-ttu-id="e3e04-395">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-395">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-396">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-396">Required.</span>
          </span>
          <span data-ttu-id="e3e04-397">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-397">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-398">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-398">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-399">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-399">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-400">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-400">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="e3e04-401">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-401">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="e3e04-402">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-402">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-403">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-403">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-404">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-404">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="e3e04-405">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-405">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-406">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="e3e04-406">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-407">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-407">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="e3e04-408">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-408">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-409">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-409">Random Mode</span></span>  
 <span data-ttu-id="e3e04-410">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-410">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-411">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-411">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-412">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-412">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-413">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-413">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-414">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-414">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-415">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-415">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-416">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-416">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="e3e04-417">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-417">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-418">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-418">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="e3e04-419">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-419">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-420">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-420">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="e3e04-421">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-421">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="e3e04-422">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-422">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="e3e04-423">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-423">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-424">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-424">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-425">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-425">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-426">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-426">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="e3e04-427">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-427">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="e3e04-428">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="e3e04-428">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="e3e04-429">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-429">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="e3e04-430">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-430">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="e3e04-431">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-431">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-432">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="e3e04-432">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="e3e04-433">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-433">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-434">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-434">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="e3e04-435">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-435">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="e3e04-436">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-436">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-437">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-437">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-438">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-438">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-439">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-439">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-440">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-440">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-441">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-441">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-442">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-442">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="e3e04-443">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-443">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="e3e04-444">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-444">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-445">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-445">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="e3e04-446">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-446">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-447">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-447">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-448">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-448">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-449">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-449">Required.</span>
          </span>
          <span data-ttu-id="e3e04-450">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-450">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-451">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-451">Required.</span>
          </span>
          <span data-ttu-id="e3e04-452">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-452">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-453">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-453">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-454">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-454">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-455">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-455">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="e3e04-456">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-456">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="e3e04-457">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-457">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-458">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-458">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-459">与读取的数据`FileGet`通常写入到一个文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-459">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="e3e04-460">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-460">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-461">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="e3e04-461">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-462">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-462">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="e3e04-463">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-463">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-464">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-464">Random Mode</span></span>  
 <span data-ttu-id="e3e04-465">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-465">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-466">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-466">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-467">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-467">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-468">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-468">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-469">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-469">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-470">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-470">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-471">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-471">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="e3e04-472">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-472">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-473">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-473">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="e3e04-474">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-474">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-475">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-475">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="e3e04-476">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-476">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="e3e04-477">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-477">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="e3e04-478">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-478">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-479">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-479">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-480">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-480">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-481">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-481">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="e3e04-482">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-482">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="e3e04-483">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="e3e04-483">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="e3e04-484">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-484">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="e3e04-485">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-485">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="e3e04-486">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-486">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-487">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="e3e04-487">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="e3e04-488">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-488">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-489">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-489">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="e3e04-490">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-490">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="e3e04-491">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-491">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-492">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-492">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-493">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-493">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-494">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-494">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-495">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-495">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-496">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-496">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-497">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-497">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="e3e04-498">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-498">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="e3e04-499">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-499">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-500">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-500">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="e3e04-501">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-501">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-502">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-502">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-503">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-503">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-504">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-504">Required.</span>
          </span>
          <span data-ttu-id="e3e04-505">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-505">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-506">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-506">Required.</span>
          </span>
          <span data-ttu-id="e3e04-507">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-507">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-508">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-508">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-509">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-509">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-510">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-510">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="e3e04-511">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-511">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="e3e04-512">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-512">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-513">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-513">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-514">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-514">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="e3e04-515">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-515">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-516">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="e3e04-516">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-517">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-517">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="e3e04-518">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-518">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-519">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-519">Random Mode</span></span>  
 <span data-ttu-id="e3e04-520">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-520">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-521">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-521">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-522">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-522">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-523">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-523">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-524">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-524">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-525">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-525">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-526">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-526">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="e3e04-527">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-527">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-528">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-528">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="e3e04-529">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-529">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-530">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-530">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="e3e04-531">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-531">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="e3e04-532">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-532">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="e3e04-533">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-533">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-534">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-534">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-535">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-535">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-536">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-536">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="e3e04-537">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-537">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="e3e04-538">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="e3e04-538">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="e3e04-539">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-539">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="e3e04-540">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-540">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="e3e04-541">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-541">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-542">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="e3e04-542">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="e3e04-543">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-543">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-544">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-544">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="e3e04-545">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-545">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="e3e04-546">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-546">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-547">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-547">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-548">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-548">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-549">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-549">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-550">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-550">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-551">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-551">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-552">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-552">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="e3e04-553">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-553">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="e3e04-554">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-554">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-555">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-555">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="e3e04-556">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-556">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-557">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-557">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-558">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-558">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-559">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-559">Required.</span>
          </span>
          <span data-ttu-id="e3e04-560">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-560">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-561">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-561">Required.</span>
          </span>
          <span data-ttu-id="e3e04-562">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-562">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-563">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-563">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-564">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-564">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-565">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-565">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="e3e04-566">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-566">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="e3e04-567">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-567">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-568">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-568">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-569">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-569">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="e3e04-570">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-570">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-571">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="e3e04-571">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-572">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-572">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="e3e04-573">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-573">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-574">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-574">Random Mode</span></span>  
 <span data-ttu-id="e3e04-575">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-575">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-576">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-576">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-577">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-577">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-578">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-578">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-579">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-579">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-580">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-580">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-581">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-581">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="e3e04-582">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-582">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-583">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-583">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="e3e04-584">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-584">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-585">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-585">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="e3e04-586">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-586">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="e3e04-587">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-587">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="e3e04-588">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-588">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-589">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-589">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-590">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-590">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-591">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-591">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="e3e04-592">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-592">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="e3e04-593">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="e3e04-593">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="e3e04-594">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-594">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="e3e04-595">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-595">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="e3e04-596">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-596">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-597">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="e3e04-597">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="e3e04-598">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-598">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-599">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-599">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="e3e04-600">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-600">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="e3e04-601">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-601">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-602">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-602">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-603">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-603">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-604">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-604">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-605">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-605">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-606">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-606">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-607">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-607">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="e3e04-608">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-608">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="e3e04-609">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-609">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-610">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-610">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="e3e04-611">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-611">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-612">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-612">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-613">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-613">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-614">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-614">Required.</span>
          </span>
          <span data-ttu-id="e3e04-615">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-615">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-616">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-616">Required.</span>
          </span>
          <span data-ttu-id="e3e04-617">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-617">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-618">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-618">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-619">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-619">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-620">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-620">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="e3e04-621">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-621">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="e3e04-622">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-622">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-623">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-623">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-624">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-624">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="e3e04-625">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-625">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-626">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="e3e04-626">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-627">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-627">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="e3e04-628">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-628">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-629">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-629">Random Mode</span></span>  
 <span data-ttu-id="e3e04-630">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-630">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-631">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-631">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-632">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-632">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-633">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-633">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-634">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-634">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-635">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-635">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-636">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-636">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="e3e04-637">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-637">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-638">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-638">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="e3e04-639">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-639">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-640">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-640">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="e3e04-641">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-641">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="e3e04-642">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-642">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="e3e04-643">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-643">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-644">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-644">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-645">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-645">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-646">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-646">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="e3e04-647">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-647">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="e3e04-648">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="e3e04-648">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="e3e04-649">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-649">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="e3e04-650">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-650">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="e3e04-651">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-651">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-652">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="e3e04-652">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="e3e04-653">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-653">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-654">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-654">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="e3e04-655">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-655">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="e3e04-656">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-656">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-657">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-657">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-658">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-658">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-659">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-659">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-660">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-660">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-661">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-661">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-662">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-662">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="e3e04-663">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-663">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="e3e04-664">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-664">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-665">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-665">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="e3e04-666">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-666">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-667">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-667">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-668">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-668">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-669">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-669">Required.</span>
          </span>
          <span data-ttu-id="e3e04-670">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-670">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-671">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-671">Required.</span>
          </span>
          <span data-ttu-id="e3e04-672">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-672">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-673">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-673">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-674">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-674">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-675">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-675">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="e3e04-676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="e3e04-677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-678">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-678">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-679">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-679">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="e3e04-680">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-680">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-681">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="e3e04-681">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-682">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-682">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="e3e04-683">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-683">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-684">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-684">Random Mode</span></span>  
 <span data-ttu-id="e3e04-685">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-685">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-686">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-686">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-687">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-687">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-688">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-688">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-689">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-689">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-690">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-690">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-691">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-691">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="e3e04-692">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-692">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-693">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-693">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="e3e04-694">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-694">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-695">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-695">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="e3e04-696">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-696">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="e3e04-697">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-697">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="e3e04-698">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-698">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-699">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-699">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-700">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-700">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-701">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-701">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="e3e04-702">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-702">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="e3e04-703">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="e3e04-703">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="e3e04-704">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-704">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="e3e04-705">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-705">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="e3e04-706">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-706">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-707">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="e3e04-707">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="e3e04-708">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-708">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-709">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-709">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="e3e04-710">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-710">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="e3e04-711">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-711">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-712">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-712">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-713">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-713">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-714">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-714">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-715">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-715">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-716">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-716">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-717">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-717">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="e3e04-718">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-718">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="e3e04-719">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-719">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-720">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-720">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="e3e04-721">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-721">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-722">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-722">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-723">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-723">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-724">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-724">Required.</span>
          </span>
          <span data-ttu-id="e3e04-725">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-725">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-726">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-726">Required.</span>
          </span>
          <span data-ttu-id="e3e04-727">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-727">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-728">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-728">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-729">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-729">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-730">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-730">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="e3e04-731">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-731">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="e3e04-732">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-732">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-733">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-733">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-734">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-734">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="e3e04-735">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-735">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-736">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="e3e04-736">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-737">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-737">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="e3e04-738">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-738">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-739">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-739">Random Mode</span></span>  
 <span data-ttu-id="e3e04-740">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-740">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-741">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-741">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-742">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-742">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-743">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-743">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-744">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-744">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-745">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-745">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-746">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-746">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="e3e04-747">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-747">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-748">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-748">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="e3e04-749">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-749">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-750">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-750">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="e3e04-751">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-751">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="e3e04-752">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-752">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="e3e04-753">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-753">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-754">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-754">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-755">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-755">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-756">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-756">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="e3e04-757">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-757">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="e3e04-758">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="e3e04-758">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="e3e04-759">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-759">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="e3e04-760">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-760">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="e3e04-761">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-761">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-762">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="e3e04-762">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="e3e04-763">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-763">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-764">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-764">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="e3e04-765">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-765">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="e3e04-766">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-766">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-767">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-767">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-768">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-768">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-769">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-769">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-770">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-770">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-771">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-771">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-772">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-772">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="e3e04-773">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-773">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="e3e04-774">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-774">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-775">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-775">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="e3e04-776">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-776">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-777">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-777">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-778">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-778">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-779">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-779">Required.</span>
          </span>
          <span data-ttu-id="e3e04-780">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-780">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-781">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-781">Required.</span>
          </span>
          <span data-ttu-id="e3e04-782">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-782">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-783">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-783">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-784">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-784">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-785">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-785">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="e3e04-786">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-786">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="e3e04-787">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-787">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-788">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-788">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-789">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-789">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="e3e04-790">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-790">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-791">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="e3e04-791">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-792">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-792">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="e3e04-793">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-793">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-794">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-794">Random Mode</span></span>  
 <span data-ttu-id="e3e04-795">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-795">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-796">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-796">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-797">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-797">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-798">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-798">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-799">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-799">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-800">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-800">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-801">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-801">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="e3e04-802">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-802">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-803">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-803">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="e3e04-804">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-804">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-805">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-805">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="e3e04-806">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-806">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="e3e04-807">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-807">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="e3e04-808">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-808">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-809">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-809">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-810">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-810">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-811">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-811">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="e3e04-812">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-812">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="e3e04-813">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="e3e04-813">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="e3e04-814">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-814">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="e3e04-815">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-815">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="e3e04-816">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-816">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-817">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="e3e04-817">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="e3e04-818">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-818">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-819">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-819">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="e3e04-820">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-820">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="e3e04-821">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-821">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-822">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-822">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-823">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-823">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-824">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-824">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-825">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-825">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-826">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-826">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-827">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-827">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="e3e04-828">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-828">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="e3e04-829">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-829">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-830">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-830">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="e3e04-831">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-831">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-832">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-832">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-833">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-833">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-834">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-834">Required.</span>
          </span>
          <span data-ttu-id="e3e04-835">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-835">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-836">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-836">Required.</span>
          </span>
          <span data-ttu-id="e3e04-837">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-837">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-838">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-838">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-839">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-839">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-840">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-840">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="e3e04-841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="e3e04-842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-843">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-843">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-844">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-844">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="e3e04-845">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-845">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-846">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="e3e04-846">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-847">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-847">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="e3e04-848">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-848">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-849">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-849">Random Mode</span></span>  
 <span data-ttu-id="e3e04-850">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-850">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-851">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-851">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-852">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-852">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-853">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-853">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-854">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-854">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-855">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-855">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-856">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-856">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="e3e04-857">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-857">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-858">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-858">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="e3e04-859">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-859">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-860">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-860">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="e3e04-861">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-861">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="e3e04-862">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-862">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="e3e04-863">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-863">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-864">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-864">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-865">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-865">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-866">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-866">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="e3e04-867">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-867">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="e3e04-868">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="e3e04-868">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="e3e04-869">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-869">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="e3e04-870">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-870">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="e3e04-871">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-871">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-872">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="e3e04-872">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="e3e04-873">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-873">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-874">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-874">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="e3e04-875">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-875">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="e3e04-876">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-876">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-877">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-877">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-878">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-878">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-879">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-879">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-880">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-880">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-881">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-881">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-882">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-882">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="e3e04-883">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-883">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="e3e04-884">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-884">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-885">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-885">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="e3e04-886">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-886">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-887">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-887">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-888">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-888">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-889">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-889">Required.</span>
          </span>
          <span data-ttu-id="e3e04-890">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-890">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-891">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-891">Required.</span>
          </span>
          <span data-ttu-id="e3e04-892">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-892">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-893">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-893">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="e3e04-895">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-895">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-896">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="e3e04-897">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-897">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="e3e04-898">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-899">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-899">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="e3e04-900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="e3e04-901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-902">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-902">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-903">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-903">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="e3e04-904">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-905">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="e3e04-905">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-906">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-906">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="e3e04-907">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-907">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-908">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-908">Random Mode</span></span>  
 <span data-ttu-id="e3e04-909">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-909">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-910">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-910">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-911">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-911">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-912">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-912">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-913">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-913">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-914">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-914">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-915">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-915">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="e3e04-916">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-916">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-917">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-917">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="e3e04-918">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-918">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-919">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-919">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="e3e04-920">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-920">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="e3e04-921">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-921">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="e3e04-922">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-922">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-923">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-923">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-924">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-925">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-925">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="e3e04-926">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-926">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="e3e04-927">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="e3e04-927">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="e3e04-928">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-928">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="e3e04-929">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-929">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="e3e04-930">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-931">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="e3e04-931">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="e3e04-932">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-932">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-933">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="e3e04-934">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-934">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="e3e04-935">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-936">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-936">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-937">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-937">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-938">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-938">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-939">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-939">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-940">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-940">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-941">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-941">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="e3e04-942">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-942">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="e3e04-943">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-943">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-944">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-944">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="e3e04-945">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-945">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-946">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-946">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-947">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-947">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-948">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-948">Required.</span>
          </span>
          <span data-ttu-id="e3e04-949">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-949">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-950">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-950">Required.</span>
          </span>
          <span data-ttu-id="e3e04-951">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-951">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-952">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-952">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-953">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-953">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="e3e04-954">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-954">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-955">Applies only when writing an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-955">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="e3e04-956">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-956">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="e3e04-957">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-957">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-958">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-958">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="e3e04-959">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-959">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="e3e04-960">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-960">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-961">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-961">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="e3e04-962">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-962">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="e3e04-963">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-963">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-964">`FileGet` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-964">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-965">与读取的数据`FileGet`通常通过使用写入到文件`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-965">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="e3e04-966">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-966">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-967">如果省略`RecordNumber`下, 一步的记录或最后一个字节`FileGet`或`FilePut`函数 (或指向的最后一个`Seek`函数) 中读取。</span><span class="sxs-lookup"><span data-stu-id="e3e04-967">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-968">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-968">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="e3e04-969">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-969">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-970">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-970">Random Mode</span></span>  
 <span data-ttu-id="e3e04-971">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-971">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-972">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGet`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-972">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-973">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-973">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-974">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-974">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-975">默认情况下，如果变量是一个字符串，`FileGet`读取一个双字节说明符的包含的字符串长度，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-975">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-976">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-976">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-977">Visual Basic 6.0 和早期版本支持固定长度字符串;在放到文件，则不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-977">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="e3e04-978">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-978">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-979">如果读入的变量是一个数组，可以选择是否要读取的大小和维数的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-979">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="e3e04-980">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-980">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-981">在数组读取时，必须以匹配数组写入的方式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-981">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="e3e04-982">如果它与描述符写入数组时，您必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-982">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="e3e04-983">如果未使用说明符，大小和边界的数组传递到`FileGet`确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-983">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="e3e04-984">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-984">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-985">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-985">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-986">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-986">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-987">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-987">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="e3e04-988">218 个字节分配，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-988">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="e3e04-989">描述符的 18 个字节: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="e3e04-989">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="e3e04-990">200 个字节的数据: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-990">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="e3e04-991">如果读入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FileGet`只读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-991">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="e3e04-992">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于所读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-992">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-993">`FileGet` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="e3e04-993">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="e3e04-994">在磁盘上，用户定义类型的动态数组 (使用编写`FilePut`) 通过其长度等于 2 加上 8 倍的维度数的描述符作为前缀: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-994">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-995">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-995">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="e3e04-996">这包括任何数组和其描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-996">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="e3e04-997">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-997">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-998">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-998">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-999">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-999">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-1000">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1000">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-1001">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1001">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1002">`FileGet` 连续; 从磁盘读取所有变量也就是说，而不填充记录之间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1002">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1003">对于在结构中，数组以外的任何数组`FileGet`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1003">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="e3e04-1004">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1004">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="e3e04-1005">`FileGet` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1005">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1006">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1006">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="e3e04-1007">通过使用从文件中读取`FileGet`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1007">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1008">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1008">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1009">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1009">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1010">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1010">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1011">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1011">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1012">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1012">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1013">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1013">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1014">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1014">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1015">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1015">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1016">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1016">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="e3e04-1017">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1017">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="e3e04-1018">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1018">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1019">`FileGetObject`而不是使用函数`FileGet`以在编译时避免出现多义性，如果类型`Object`返回而不是另一种类型，如`Integer`， `Long`， `Short`，依次类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1019">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="e3e04-1020">如果你想要将写出`Variant`类型，`FileGetObject`是必需的。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1020">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="e3e04-1021">如果你使用某个对象作为第二个参数，如有疑问，始终建议你使用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1021">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="e3e04-1022">`FileGetObject` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1022">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1023">与读取的数据`FileGetObject`通常与编写`FilePutObject`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1023">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="e3e04-1024">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1024">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1025">如果省略`RecordNumber`，`FileGetObject`上次读取记录号或字节`FileGetObject`或`FilePutObject`函数 (或指向的最后一个`Seek`函数)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1025">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1026">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1026">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1027">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1027">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1028">如果读取的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FileGetObject`读取的记录长度边界上的后续记录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1028">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1029">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1029">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1030">由于不能准确地确定填充的数据量，它是已记录的长度与读取的数据的长度匹配一个好办法。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1030">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="e3e04-1031">如果读入的变量是一个字符串，默认情况下`FileGetObject`读取一个包含字符串长度的双字节说明符，然后读取该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1031">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-1032">因此，指定的记录长度`RecordLength`子句`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1032">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1033">Visual Basic 6.0 和早期版本支持固定长度的字符串和读取到文件时，则不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1033">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="e3e04-1034">如果你想要读取的字符串，而无需描述符，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1034">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1035">如果读入的变量为数组，则 `RecordLength` 函数中 `FileOpen` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1035">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1036">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1036">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1037">其长度等于 2 + 8 倍的维度数： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1037">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="e3e04-1038">例如，以下数组声明需要 218 个字节时将数组写入到磁盘：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1038">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="e3e04-1039">分发了 218 个字节，如下所示：为描述符分发了 18 个字节 (2 + 8 \* 2)，为数据分发了 100 个字节 (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1039">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="e3e04-1040">`FileGetObject` 只不过是元素之间没有空白，像每个读取时，单独读取元素的结构。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1040">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="e3e04-1041">在磁盘上，用户定义类型的动态数组 (使用编写`FilePutObject`) 其长度等于 2 加上 8 倍的维度数的描述符前缀为： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1041">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="e3e04-1042">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于读取各个元素，包括任何数组和其描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="e3e04-1043"><xref:Microsoft.VisualBasic.VBFixedStringAttribute>类可应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1043">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1044">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1044">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1045">打开的文件中`Binary`模式下，所有的`Random`规则适用，但以下情况例外：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1045">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="e3e04-1046">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1046">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1047">`FileGetObject` 读取所有变量从磁盘连续，也就是说，记录之间没有空白。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1047">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1048">对于在结构中，数组以外的任何数组`FileGetObject`只读取数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1048">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="e3e04-1049">未不读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1049">No descriptor is read.</span></span>  
  
 <span data-ttu-id="e3e04-1050">`FileGetObject` 读取不是元素的结构不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1050">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1051">读取的字节数等于已中字符串的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1051">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-1052">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1052">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="e3e04-1053">例如，名为 form1.vb 的文件可能不是 Visual Basic 源文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1053">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1054">下面的示例测试文件中读取一条记录，然后检索它。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1054">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="e3e04-1055">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1055">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1056">
            <see langword="String" /> expression that specifies a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1056">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="e3e04-1057">
            <c>PathName</c> may include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1057">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1058">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1058">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="e3e04-1059">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1059">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="e3e04-1060">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1060">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-1061">
            <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1061">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1062">如果指定的文件打开时`FileLen`调用函数，返回的值表示它已打开时的文件的大小。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1062">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-1063">若要获取当前打开的文件的长度，请使用`LOF`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1063">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1064">此示例使用`FileLen`函数以返回文件的长度以字节为单位。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1064">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="e3e04-1065">在此示例中，假定`TestFile`是包含一些数据的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1065">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="e3e04-1066">File does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1066">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1067">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1067">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1068">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1068">Any valid file number.</span>
          </span>
          <span data-ttu-id="e3e04-1069">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1069">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="e3e04-1070">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1070">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1071">
            <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1071">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="e3e04-1072">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1072">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1073">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1073">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="e3e04-1074">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1074">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="e3e04-1075">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1075">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1076">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1076">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="e3e04-1077">Defaults to <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1077">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="e3e04-1078">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1078">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="e3e04-1079">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1079">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1080">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1080">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="e3e04-1081">Defaults to <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1081">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="e3e04-1082">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1082">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="e3e04-1083">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1083">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1084">Number less than or equal to 32,767 (bytes).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1084">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="e3e04-1085">For files opened for random access, this value is the record length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1085">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="e3e04-1086">For sequential files, this value is the number of characters buffered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1086">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1087">Opens a file for input or output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1087">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="e3e04-1088">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1088">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="e3e04-1089">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1089">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1090">`FileOpen`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1090">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-1091">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1091">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-1092">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1092">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-1093">可以对其执行任何 I/O 操作之前，必须打开一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1093">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="e3e04-1094">`FileOpen` 对文件的 I/O 分配缓冲区，并确定要使用缓冲区的访问模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1094">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-1095">写入到文件时，应用程序可能需要创建一个文件，如果尝试写入的文件不存在。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1095">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="e3e04-1096">若要执行此操作，必须在其中创建文件的目录的权限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1096">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="e3e04-1097">但是，如果指定的文件`FileName`确实存在，应用程序需求`Write`仅对文件本身的权限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1097">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="e3e04-1098">可能的为了提高安全性，任何位置创建文件在部署和授予过程`Write`权限到该文件唯一，而不是整个目录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1098">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="e3e04-1099">为了提高安全性，请将数据写入到的根目录或 Program Files 目录而不是用户目录中。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1099">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="e3e04-1100">若要打开的通道可在使用`FreeFile()`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1100">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-1101">`FileOpen`函数需要`Read`从访问`FileIOPermissionAccess`枚举，它可能会影响它在部分信任情况下执行。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1101">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="e3e04-1102">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1102">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1103">此示例演示了的各种用法`FileOpen`函数，以使输入和输出到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1103">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="e3e04-1104">以下代码打开文件`TestFile`在`Input`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1104">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e3e04-1105">此示例打开中的文件`Binary`进行只写操作的模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1105">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e3e04-1106">下面的示例打开中的文件`Random`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1106">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="e3e04-1107">该文件包含的记录是结构`Person`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1107">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="e3e04-1108">此代码示例将打开的文件中`Output`模式; 任何进程可以读取或写入文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1108">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="e3e04-1109">此代码示例将打开的文件中`Binary`模式进行读取; 其他进程无法读取文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1109">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1110">Record length is negative (and not equal to -1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1110">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1111">
            <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1111">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3e04-1112">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1112">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="e3e04-1114">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1114">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1115">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1115">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1116">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1116">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1117">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1117">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1118">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1118">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1119">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1119">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1120">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1120">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1121">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1121">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1122">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1122">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="e3e04-1123">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1123">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1124">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1124">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1125">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1125">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="e3e04-1126">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1126">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1127">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1127">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="e3e04-1128">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1128">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="e3e04-1129">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1129">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="e3e04-1130">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1130">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1131">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1131">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1132">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1132">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1133">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1133">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1134">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1134">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1135">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1135">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="e3e04-1136">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1136">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="e3e04-1137">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1137">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-1138">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1138">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="e3e04-1139">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1139">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="e3e04-1140">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1140">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="e3e04-1141">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1141">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="e3e04-1142">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1142">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="e3e04-1143">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1143">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1144">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1144">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1145">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1145">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="e3e04-1146">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1146">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="e3e04-1147">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1147">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="e3e04-1148">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1148">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-1149">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1149">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="e3e04-1150">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1150">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1151">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1151">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-1152">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1152">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1153">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1153">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="e3e04-1154">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1154">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="e3e04-1155">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1155">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="e3e04-1156">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1156">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="e3e04-1157">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1157">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e3e04-1158">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="e3e04-1158">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1159">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1159">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1160">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1160">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-1161">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1161">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-1162">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1162">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1163">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1163">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1164">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1164">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="e3e04-1165">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1165">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="e3e04-1166">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1166">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1167">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1167">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="e3e04-1168">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="e3e04-1168">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="e3e04-1169">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1169">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1170">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1170">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="e3e04-1171">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1171">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1172">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1172">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1173">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1173">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1174">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1174">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1175">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1175">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1176">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1176">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1177">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1177">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1178">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1178">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1179">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1179">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1180">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1180">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1181">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1181">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="e3e04-1182">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1182">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1183">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1183">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1184">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1184">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="e3e04-1185">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1185">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1186">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1186">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="e3e04-1187">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1187">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="e3e04-1188">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1188">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="e3e04-1189">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1189">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1190">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1190">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1191">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1191">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1192">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1192">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1193">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1193">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1194">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1194">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="e3e04-1195">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1195">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="e3e04-1196">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1196">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-1197">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1197">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="e3e04-1198">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1198">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="e3e04-1199">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1199">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="e3e04-1200">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="e3e04-1201">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1201">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="e3e04-1202">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1202">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1203">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1203">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1204">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1204">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="e3e04-1205">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1205">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="e3e04-1206">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1206">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="e3e04-1207">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1207">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-1208">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1208">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="e3e04-1209">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1209">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1210">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1210">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-1211">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1211">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1212">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1212">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="e3e04-1213">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1213">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="e3e04-1214">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1214">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="e3e04-1215">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1215">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="e3e04-1216">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1216">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e3e04-1217">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="e3e04-1217">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1218">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1218">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1219">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1219">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-1220">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1220">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-1221">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1221">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1222">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1222">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1223">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1223">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="e3e04-1224">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1224">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="e3e04-1225">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1225">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1226">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1226">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="e3e04-1227">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="e3e04-1227">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="e3e04-1228">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1228">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1229">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1229">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="e3e04-1230">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1230">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1231">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1231">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1232">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1232">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1233">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1233">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1234">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1234">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1235">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1235">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1236">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1236">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1237">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1237">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1238">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1238">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1239">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1239">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1240">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1240">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="e3e04-1241">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1241">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1242">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1242">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1243">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1243">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="e3e04-1244">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1244">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1245">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1245">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="e3e04-1246">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1246">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="e3e04-1247">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1247">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="e3e04-1248">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1248">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1249">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1249">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1250">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1250">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1251">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1251">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1252">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1252">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1253">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1253">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="e3e04-1254">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1254">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="e3e04-1255">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1255">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-1256">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1256">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="e3e04-1257">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1257">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="e3e04-1258">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1258">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="e3e04-1259">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1259">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="e3e04-1260">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1260">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="e3e04-1261">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1261">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1262">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1262">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1263">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1263">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="e3e04-1264">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1264">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="e3e04-1265">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1265">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="e3e04-1266">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1266">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-1267">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1267">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="e3e04-1268">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1268">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1269">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1269">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-1270">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1270">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1271">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1271">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="e3e04-1272">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1272">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="e3e04-1273">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1273">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="e3e04-1274">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1274">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="e3e04-1275">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1275">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e3e04-1276">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="e3e04-1276">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1277">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1277">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1278">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1278">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-1279">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1279">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-1280">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1280">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1281">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1281">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1282">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1282">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="e3e04-1283">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1283">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="e3e04-1284">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1284">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1285">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1285">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="e3e04-1286">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="e3e04-1286">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="e3e04-1287">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1287">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1288">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1288">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="e3e04-1289">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1289">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1290">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1290">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1291">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1291">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1292">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1292">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1293">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1293">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1294">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1294">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1295">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1295">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1296">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1296">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1298">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1298">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="e3e04-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1301">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1302">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="e3e04-1303">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1304">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="e3e04-1305">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="e3e04-1306">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="e3e04-1307">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1308">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1308">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1309">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1310">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1311">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1312">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="e3e04-1313">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="e3e04-1314">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-1315">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="e3e04-1316">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="e3e04-1317">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="e3e04-1318">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="e3e04-1319">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="e3e04-1320">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1321">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1322">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="e3e04-1323">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="e3e04-1324">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="e3e04-1325">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-1326">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="e3e04-1327">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1328">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-1329">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1330">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="e3e04-1331">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="e3e04-1332">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="e3e04-1333">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="e3e04-1334">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e3e04-1335">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="e3e04-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1336">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1336">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1337">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-1338">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-1339">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1340">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1341">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="e3e04-1342">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="e3e04-1343">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1344">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="e3e04-1345">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="e3e04-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="e3e04-1346">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1347">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="e3e04-1348">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1349">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1349">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1350">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1350">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1351">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1351">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1352">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1352">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1353">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1353">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1354">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1354">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1355">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1355">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1356">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1356">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1357">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1357">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1358">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1358">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="e3e04-1359">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1359">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1360">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1360">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1361">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1361">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="e3e04-1362">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1362">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1363">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1363">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="e3e04-1364">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1364">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="e3e04-1365">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1365">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="e3e04-1366">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1366">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1367">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1367">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1368">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1368">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1369">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1369">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1370">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1370">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1371">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1371">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="e3e04-1372">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1372">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="e3e04-1373">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1373">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-1374">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1374">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="e3e04-1375">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1375">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="e3e04-1376">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1376">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="e3e04-1377">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="e3e04-1378">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1378">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="e3e04-1379">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1379">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1380">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1380">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1381">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1381">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="e3e04-1382">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1382">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="e3e04-1383">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1383">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="e3e04-1384">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1384">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-1385">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1385">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="e3e04-1386">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1386">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1387">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1387">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-1388">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1388">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1389">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1389">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="e3e04-1390">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1390">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="e3e04-1391">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1391">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="e3e04-1392">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1392">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="e3e04-1393">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1393">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e3e04-1394">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="e3e04-1394">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1395">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1395">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1396">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1396">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-1397">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1397">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-1398">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1398">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1399">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1399">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1400">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1400">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="e3e04-1401">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1401">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="e3e04-1402">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1402">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1403">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1403">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="e3e04-1404">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="e3e04-1404">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="e3e04-1405">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1405">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1406">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1406">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="e3e04-1407">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1407">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1408">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1408">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1409">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1409">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1410">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1410">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1411">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1411">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1412">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1412">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1413">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1413">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1414">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1414">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1415">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1415">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1416">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1416">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1417">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1417">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="e3e04-1418">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1418">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1419">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1419">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1420">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1420">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="e3e04-1421">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1421">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1422">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1422">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="e3e04-1423">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1423">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="e3e04-1424">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1424">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="e3e04-1425">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1425">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1426">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1426">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1427">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1427">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1428">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1428">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1429">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1429">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1430">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1430">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="e3e04-1431">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1431">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="e3e04-1432">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1432">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-1433">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1433">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="e3e04-1434">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1434">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="e3e04-1435">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1435">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="e3e04-1436">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1436">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="e3e04-1437">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1437">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="e3e04-1438">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1439">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1439">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1440">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1440">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="e3e04-1441">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1441">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="e3e04-1442">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1442">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="e3e04-1443">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1443">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-1444">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1444">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="e3e04-1445">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1445">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1446">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1446">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-1447">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1447">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1448">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1448">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="e3e04-1449">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1449">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="e3e04-1450">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1450">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="e3e04-1451">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1451">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="e3e04-1452">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1452">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e3e04-1453">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="e3e04-1453">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1454">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1454">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1455">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1455">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-1456">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1456">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-1457">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1457">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1458">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1458">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1459">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1459">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="e3e04-1460">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1460">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="e3e04-1461">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1461">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1462">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1462">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="e3e04-1463">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="e3e04-1463">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="e3e04-1464">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1464">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1465">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1465">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="e3e04-1466">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1466">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1467">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1467">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1468">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1468">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1469">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1469">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1470">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1470">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1471">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1471">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1472">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1472">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1473">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1473">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1475">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1475">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="e3e04-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1478">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1478">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1479">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1479">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="e3e04-1480">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1480">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1481">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1481">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="e3e04-1482">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1482">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="e3e04-1483">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1483">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="e3e04-1484">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1484">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1485">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1485">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1486">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1486">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1487">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1487">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1488">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1488">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1489">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1489">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="e3e04-1490">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1490">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="e3e04-1491">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1491">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-1492">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1492">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="e3e04-1493">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1493">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="e3e04-1494">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1494">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="e3e04-1495">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1495">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="e3e04-1496">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1496">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="e3e04-1497">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1497">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1498">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1498">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1499">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1499">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="e3e04-1500">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1500">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="e3e04-1501">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1501">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="e3e04-1502">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1502">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-1503">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1503">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="e3e04-1504">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1504">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1505">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1505">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-1506">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1506">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1507">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1507">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="e3e04-1508">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1508">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="e3e04-1509">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="e3e04-1510">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1510">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="e3e04-1511">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1511">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e3e04-1512">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="e3e04-1512">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1513">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1513">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1514">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1514">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-1515">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1515">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-1516">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1516">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1517">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1517">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1518">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1518">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="e3e04-1519">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1519">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="e3e04-1520">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1520">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1521">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1521">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="e3e04-1522">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="e3e04-1522">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="e3e04-1523">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1523">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1524">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1524">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="e3e04-1525">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1525">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1526">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1526">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1527">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1527">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1528">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1528">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1529">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1529">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1530">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1530">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1531">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1531">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1532">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1532">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1533">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1533">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1534">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1534">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="e3e04-1536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1537">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1537">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1538">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1538">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="e3e04-1539">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1539">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1540">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1540">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="e3e04-1541">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1541">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="e3e04-1542">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1542">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="e3e04-1543">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1543">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1544">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1544">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1545">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1545">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1546">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1546">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1547">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1547">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1548">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1548">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="e3e04-1549">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1549">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="e3e04-1550">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1550">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-1551">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1551">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="e3e04-1552">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1552">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="e3e04-1553">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1553">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="e3e04-1554">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1554">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="e3e04-1555">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1555">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="e3e04-1556">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1556">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1557">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1557">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1558">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1558">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="e3e04-1559">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1559">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="e3e04-1560">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1560">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="e3e04-1561">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1561">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-1562">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1562">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="e3e04-1563">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1563">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1564">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1564">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-1565">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1565">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1566">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1566">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="e3e04-1567">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1567">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="e3e04-1568">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1568">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="e3e04-1569">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1569">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="e3e04-1570">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1570">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e3e04-1571">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="e3e04-1571">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1572">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1572">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1573">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1573">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-1574">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1574">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-1575">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1575">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1576">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1576">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1577">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1577">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="e3e04-1578">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1578">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="e3e04-1579">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1579">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1580">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1580">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="e3e04-1581">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="e3e04-1581">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="e3e04-1582">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1582">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1583">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1583">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="e3e04-1584">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1584">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1585">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1585">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1586">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1586">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1587">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1587">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1588">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1588">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1589">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1589">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1590">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1590">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1591">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1591">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1592">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1592">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1593">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1593">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1594">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1594">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="e3e04-1595">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1595">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1596">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1596">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1597">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1597">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="e3e04-1598">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1598">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1599">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1599">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="e3e04-1600">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1600">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="e3e04-1601">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1601">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="e3e04-1602">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1602">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1603">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1603">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1604">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1604">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1605">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1605">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1606">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1606">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1607">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1607">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="e3e04-1608">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1608">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="e3e04-1609">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1609">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-1610">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1610">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="e3e04-1611">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1611">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="e3e04-1612">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1612">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="e3e04-1613">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1613">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="e3e04-1614">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1614">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="e3e04-1615">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1615">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1616">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1616">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1617">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1617">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="e3e04-1618">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1618">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="e3e04-1619">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1619">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="e3e04-1620">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-1621">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1621">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="e3e04-1622">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1622">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1623">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1623">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-1624">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1624">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1625">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1625">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="e3e04-1626">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1626">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="e3e04-1627">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1627">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="e3e04-1628">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1628">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="e3e04-1629">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1629">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e3e04-1630">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="e3e04-1630">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1631">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1631">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1632">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1632">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-1633">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1633">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-1634">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1634">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1635">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1635">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1636">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1636">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="e3e04-1637">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1637">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="e3e04-1638">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1638">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1639">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1639">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="e3e04-1640">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="e3e04-1640">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="e3e04-1641">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1641">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1642">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1642">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="e3e04-1643">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1643">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1644">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1644">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1645">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1645">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1646">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1646">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1647">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1647">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1648">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1648">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1649">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1649">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1650">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1650">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1651">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1651">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1652">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1652">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="e3e04-1654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1655">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1655">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1656">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1656">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="e3e04-1657">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1657">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1658">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1658">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="e3e04-1659">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1659">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="e3e04-1660">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1660">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="e3e04-1661">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1661">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1662">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1662">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1663">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1663">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1664">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1664">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1665">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1665">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1666">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1666">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="e3e04-1667">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1667">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="e3e04-1668">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1668">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-1669">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1669">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="e3e04-1670">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1670">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="e3e04-1671">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1671">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="e3e04-1672">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1672">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="e3e04-1673">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1673">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="e3e04-1674">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1674">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1675">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1675">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1676">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1676">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="e3e04-1677">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1677">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="e3e04-1678">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1678">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="e3e04-1679">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1679">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-1680">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1680">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="e3e04-1681">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1682">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-1683">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1683">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1684">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="e3e04-1685">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1685">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="e3e04-1686">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="e3e04-1687">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1687">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="e3e04-1688">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1688">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e3e04-1689">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="e3e04-1689">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1690">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1690">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1691">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1691">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-1692">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1692">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-1693">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1693">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1694">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1694">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1695">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1695">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="e3e04-1696">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1696">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="e3e04-1697">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1697">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1698">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1698">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="e3e04-1699">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="e3e04-1699">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="e3e04-1700">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1700">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1701">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1701">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="e3e04-1702">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1702">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1703">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1703">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1704">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1704">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1705">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1705">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1706">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1706">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1707">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1707">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1708">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1708">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1709">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1709">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1710">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1710">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1711">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1711">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1712">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1712">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="e3e04-1713">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1713">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1714">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1714">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1715">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1715">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="e3e04-1716">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1716">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1717">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1717">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="e3e04-1718">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1718">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="e3e04-1719">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1719">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="e3e04-1720">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1720">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1721">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1721">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1722">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1722">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1723">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1723">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1724">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1724">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1725">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1725">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="e3e04-1726">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1726">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="e3e04-1727">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1727">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-1728">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1728">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="e3e04-1729">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1729">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="e3e04-1730">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1730">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="e3e04-1731">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1731">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="e3e04-1732">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1732">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="e3e04-1733">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1733">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1734">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1734">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1735">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1735">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="e3e04-1736">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1736">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="e3e04-1737">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1737">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="e3e04-1738">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1738">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-1739">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1739">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="e3e04-1740">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1740">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1741">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1741">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-1742">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1742">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1743">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1743">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="e3e04-1744">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1744">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="e3e04-1745">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1745">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="e3e04-1746">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1746">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="e3e04-1747">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1747">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e3e04-1748">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="e3e04-1748">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1749">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1749">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1750">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1750">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-1751">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1751">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-1752">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1752">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1753">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1753">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1754">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1754">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="e3e04-1755">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1755">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="e3e04-1756">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1756">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1757">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1757">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="e3e04-1758">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="e3e04-1758">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="e3e04-1759">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1759">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1760">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1760">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="e3e04-1761">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1761">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1762">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1762">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1763">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1763">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1764">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1764">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1765">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1765">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1766">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1766">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1767">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1767">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1768">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1768">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1769">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1769">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1770">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1770">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1771">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1771">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="e3e04-1772">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1772">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1773">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1773">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1774">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1774">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="e3e04-1775">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1775">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1776">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1776">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="e3e04-1777">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1777">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="e3e04-1778">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1778">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="e3e04-1779">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1779">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1780">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1780">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1781">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1781">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1782">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1782">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1783">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1783">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1784">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1784">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="e3e04-1785">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1785">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="e3e04-1786">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1786">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-1787">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1787">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="e3e04-1788">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1788">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="e3e04-1789">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1789">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="e3e04-1790">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1790">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="e3e04-1791">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1791">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="e3e04-1792">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1792">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1793">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1793">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1794">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1794">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="e3e04-1795">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1795">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="e3e04-1796">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1796">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="e3e04-1797">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1797">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-1798">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1798">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="e3e04-1799">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1799">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1800">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1800">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-1801">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1801">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1802">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1802">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="e3e04-1803">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1803">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="e3e04-1804">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1804">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="e3e04-1805">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1805">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="e3e04-1806">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1806">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e3e04-1807">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="e3e04-1807">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1808">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1808">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1809">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1809">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-1810">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1810">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-1811">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1811">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1812">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1812">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1813">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1813">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="e3e04-1814">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1814">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="e3e04-1815">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1815">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1816">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1816">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="e3e04-1817">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="e3e04-1817">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="e3e04-1818">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1818">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1819">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1819">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="e3e04-1820">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1820">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1821">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1821">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1822">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1822">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1823">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1823">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1824">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1824">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1825">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1825">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1826">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1826">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1827">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1827">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="e3e04-1829">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1829">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1830">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1830">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="e3e04-1831">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1831">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="e3e04-1832">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1832">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1833">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1833">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1834">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1834">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="e3e04-1835">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1835">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1836">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1836">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1837">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1837">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="e3e04-1838">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1838">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1839">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1839">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="e3e04-1840">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1840">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="e3e04-1841">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1841">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="e3e04-1842">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1842">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1843">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1843">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1844">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1844">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1845">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1845">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1846">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1846">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1847">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1847">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="e3e04-1848">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1848">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="e3e04-1849">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1849">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-1850">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1850">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="e3e04-1851">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1851">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="e3e04-1852">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1852">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="e3e04-1853">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1853">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="e3e04-1854">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1854">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="e3e04-1855">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1855">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1856">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1856">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1857">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1857">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="e3e04-1858">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1858">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="e3e04-1859">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1859">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="e3e04-1860">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1860">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-1861">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1861">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="e3e04-1862">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1862">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1863">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1863">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-1864">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1864">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1865">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1865">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="e3e04-1866">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1866">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="e3e04-1867">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1867">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="e3e04-1868">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1868">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="e3e04-1869">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1869">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e3e04-1870">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="e3e04-1870">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1871">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1871">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1872">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1872">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-1873">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1873">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-1874">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1874">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1875">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1875">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1876">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1876">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="e3e04-1877">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1877">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="e3e04-1878">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1878">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1879">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1879">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="e3e04-1880">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="e3e04-1880">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="e3e04-1881">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1881">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1882">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1882">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="e3e04-1883">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1883">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1884">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1884">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1885">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1885">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1886">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1886">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1887">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1887">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1888">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1888">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1889">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1889">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1890">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1890">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1891">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1891">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="e3e04-1892">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1892">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1893">Applies only when writing an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1893">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="e3e04-1894">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1894">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="e3e04-1895">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1895">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1896">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="e3e04-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="e3e04-1898">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1899">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1899">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="e3e04-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1902">`FilePut` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1902">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1903">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1903">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="e3e04-1904">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1905">如果省略`RecordNumber`下, 一步的记录或后的最后一个字节`FileGet`或`FilePut`函数或指向的最后一个`Seek`编写函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1905">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="e3e04-1906">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1906">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="e3e04-1907">`FilePut` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1907">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="e3e04-1908">如果您使用`StringIsFixedLength`  =  `True`与`FilePut`，您只需使用相同`FileGet`，您必须确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1908">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1909">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1909">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1910">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1911">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePut`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1911">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1912">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1913">由于不能与任何颇有自信地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="e3e04-1914">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1914">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="e3e04-1915">如果写入的变量是一个字符串，`FilePut`将写入一个双字节说明符，包含字符串长度，然后写入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1915">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="e3e04-1916">因此，指定的记录长度`RecordLength`子句中的`FileOpen`函数必须至少为两个字节大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1916">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="e3e04-1917">如果写入的变量是包含一个数值类型的对象`FilePut`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1917">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="e3e04-1918">例如，编写一个对象时包含一个整数`FilePut`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1918">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="e3e04-1919">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1919">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="e3e04-1920">如果写入的变量是一个对象，包含一个字符串，`FilePut`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1920">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="e3e04-1921">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1921">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1922">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1922">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1923">如果写入的变量是一个数组，则必须选择要写入大小和数组的维数的说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1923">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="e3e04-1924">Visual Basic 6.0 和早期版本编写的文件说明符有关的动态数组而不是固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1924">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="e3e04-1925">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1925">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="e3e04-1926">若要编写描述符，设置`ArrayIsDynamic`参数`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1926">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="e3e04-1927">在编写数组时，必须匹配的方法将读取该数组;如果它将读取与描述符，您必须写入描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1927">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="e3e04-1928">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1928">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1929">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1929">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="e3e04-1930">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1931">例如，以下数组声明需要 218 个字节时将数组写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1931">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="e3e04-1932">如果写入的变量是任何其他类型的变量 （不可变长度字符串或对象）`FilePut`只写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1932">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="e3e04-1933">指定的记录长度`RecordLength`子句中的`FileOpen`函数必须是大于或等于写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="e3e04-1934">`FilePut` 将元素的结构写入像分别，写入的每个元素之间没有空白的情况除外。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1934">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="e3e04-1935">`VBFixedString`特性可以应用于字符串字段中的结构，以指示字符串写入时的大小到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e3e04-1936">字符串字段大小超过指定值的字节`VBFixedString`属性将被截断时写入到磁盘，</span><span class="sxs-lookup"><span data-stu-id="e3e04-1936">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1937">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1937">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1938">打开的文件中`Binary`模式下，大部分`Random`模式规则适用，有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="e3e04-1939">在中打开文件的以下规则`Binary`模式不同于为规则`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="e3e04-1940">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1941">`FilePut` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1941">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="e3e04-1942">对于在结构中，数组以外的任何数组`FilePut`只写入数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1942">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="e3e04-1943">未不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1943">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="e3e04-1944">`FilePut` 不是元素的结构，无需两个字节的长度说明符写入可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1944">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="e3e04-1945">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1945">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="e3e04-1946">例如，以下语句将 11 个字节写入文件号 1:</span><span class="sxs-lookup"><span data-stu-id="e3e04-1946">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="e3e04-1947">通过使用对文件进行写入`FilePut`函数需要`Write`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1947">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1948">此示例使用`FilePut`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1948">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="e3e04-1949">结构的五个记录`Person`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1949">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-1950">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1950">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-1951">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1951">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1952">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1952">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1953">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1953">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-1954">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1954">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1955">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1955">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="e3e04-1956">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1956">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-1957">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1957">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1958">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1958">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="e3e04-1959">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1959">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="e3e04-1960">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1960">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-1961">`FilePutObject`而不是使用函数`FilePut`以在编译时避免出现多义性，如果类型`Object`传递而不是另一种类型，如`Integer`， `Long`， `Short`，依次类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1961">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="e3e04-1962">`FilePutObject` 将写入和读取描述该对象的描述符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1962">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="e3e04-1963">如果你想要将写出`Variant`类型，`FilePutObject`是必需的。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1963">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="e3e04-1964">如果你使用某个对象作为第二个参数，如有疑问，我们建议始终使用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1964">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="e3e04-1965">`FilePutObject` 仅在中有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1965">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-1966">通常使用 `FileGetObject` 从文件中读取使用 `FilePutObject` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1966">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="e3e04-1967">第一个记录或文件中的字节位置 1，第二个记录或字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1967">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="e3e04-1968">如果省略`RecordNumber`，`FilePutObject`上次写入下一个记录或字节`FileGetObject`或`FilePutObject`函数 (或记录号或字节指向由最后一个`Seek`函数)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1968">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="e3e04-1969">`StringIsFixedLength`参数控制函数是否将字符串解释为变量或固定长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1969">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="e3e04-1970">`FilePutObject` 当参数是不会写入长度说明符`True`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1970">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="e3e04-1971">如果您使用`StringIsFixedLength`  =  `True`与`FilePutObject`，您只需使用相同`FileGetObject`，您必须还需确保该字符串将初始化为所需的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1971">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="e3e04-1972">随机模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1972">Random Mode</span></span>  
 <span data-ttu-id="e3e04-1973">有关在中打开文件`Random`模式下，下列规则适用：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1973">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="e3e04-1974">如果写入的数据的长度小于中指定的长度`RecordLength`子句`FileOpen`函数，`FilePutObject`将后续的记录写入记录长度边界上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1974">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="e3e04-1975">用文件缓冲区的现有内容填充一条记录的末尾和下一条记录的开始之间的空间。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1975">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="e3e04-1976">由于不能准确地确定填充的数据量，它通常是最好使记录的长度与写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1976">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="e3e04-1977">如果写入的数据的长度大于中指定的长度`RecordLength`子句`FileOpen`函数，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1977">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="e3e04-1978">如果写入的变量是包含一个数值类型的对象`FilePutObject`标识的两个字节写入`VarType`的对象，然后将该变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1978">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="e3e04-1979">例如，编写一个对象时包含一个整数`FilePutObject`写入 6 个字节： 标识作为对象的两个字节`VarType(3)`(`Integer`) 和包含的数据的四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1979">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="e3e04-1980">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少为两个字节大于实际存储在变量所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1980">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="e3e04-1981">如果写入的变量是一个对象，包含一个字符串，`FilePutObject`写入一个双字节说明符标识`VarType(8)`的对象，然后。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1981">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="e3e04-1982">指定的记录长度`RecordLength`中的参数`FileOpen`函数必须至少大于字符串的实际长度为四个字节。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1982">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="e3e04-1983">如果你想要放入而无需描述符字符串，则应传递`True`到`StringIsFixedLength`参数，并应为正确的长度，读取到的字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1983">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="e3e04-1984">如果写入的变量为数组，则 `RecordLength` 函数中 `FileOpen` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1984">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="e3e04-1985">描述符指定秩的数组、 大小和为每个级别的下限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1985">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="e3e04-1986">其长度等于 2 + 8 时间维度的数目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1986">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="e3e04-1987">二进制模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-1987">Binary Mode</span></span>  
 <span data-ttu-id="e3e04-1988">打开的文件中`Binary`模式下，所有`Random`模式规则适用，除外：</span><span class="sxs-lookup"><span data-stu-id="e3e04-1988">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="e3e04-1989">`RecordLength`子句中的`FileOpen`函数不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1989">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="e3e04-1990">`FilePutObject` 所有将变量写入磁盘连续，也就是说，不带记录之间的填充。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1990">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-1991">此示例使用`FilePutObject`函数以将字符串写入文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1991">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-1992">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1992">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1993">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1993">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="e3e04-1994">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1994">Required.</span>
          </span>
          <span data-ttu-id="e3e04-1995">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1995">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="e3e04-1996">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1996">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="e3e04-1997">The default value for <c>RecordWidth</c> is 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1997">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-1998">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-1998">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e3e04-1999">此示例使用`FileWidth`函数设置文件的输出线条宽度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-1999">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2000">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2000">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e3e04-2001">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2001">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2003">使用`FreeFile`提供尚未使用的文件号。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2003">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2004">此示例使用`FreeFile`函数以返回下一个可用的文件数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2004">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="e3e04-2005">五个文件打开，以便在循环中，输出和一些示例数据写入到每个。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2005">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2006">More than 255 files are in use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2006">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="e3e04-2007">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2007">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2008">
            <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2008">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="e3e04-2009">
            <c>PathName</c> can include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2009">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2010">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2010">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="e3e04-2011">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2011">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="e3e04-2012">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2012">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-2013">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:  <list type="table"><item><term> Value  </term><description> Constant  </description><description> Description  </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.  </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.  </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.  </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.  </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.  </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.  </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.  </description></item></list><block subset="none" type="note"><para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para></block></span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2013">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:  <list type="table"><item><term> Value  </term><description> Constant  </description><description> Description  </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.  </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.  </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.  </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.  </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.  </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.  </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.  </description></item></list><block subset="none" type="note"><para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para></block></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2014">若要确定设置了哪些属性，请使用`And`运算符执行返回的值的按位比较`GetAttr`函数和所需的各个文件属性的值。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2014">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="e3e04-2015">如果结果不为零，该属性设置为指定的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2015">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="e3e04-2016">例如，下面的返回值`And`表达式是零个 if`Archive`未设置属性：</span><span class="sxs-lookup"><span data-stu-id="e3e04-2016">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="e3e04-2017">如果返回非零值`Archive`属性设置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2017">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2018">此示例使用`GetAttr`函数来确定文件和目录或文件夹的属性。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2018">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2019">
            <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2019">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="e3e04-2020">Target file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2020">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3e04-2021">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2021">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2022">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2022">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2023">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2023">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-2024">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2024">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2025">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2025">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2026">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2026">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2027">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2027">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2028">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2028">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2029">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2029">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2030">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2030">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="e3e04-2031">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2031">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2032">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2032">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="e3e04-2033">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2033">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="e3e04-2034">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2034">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="e3e04-2035">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2035">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="e3e04-2036">数据</span><span class="sxs-lookup"><span data-stu-id="e3e04-2036">Data</span></span>|<span data-ttu-id="e3e04-2037">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="e3e04-2037">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="e3e04-2038">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="e3e04-2038">Delimiting comma or blank line</span></span>|<span data-ttu-id="e3e04-2039">空</span><span class="sxs-lookup"><span data-stu-id="e3e04-2039">Empty</span></span>|  
|<span data-ttu-id="e3e04-2040">#NULL #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2040">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="e3e04-2041">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2041">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="e3e04-2042">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="e3e04-2042">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="e3e04-2043">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="e3e04-2043">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="e3e04-2044">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="e3e04-2044">#ERROR `errornumber`#</span></span>|<span data-ttu-id="e3e04-2045">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="e3e04-2045">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="e3e04-2046">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2046">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2047">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2047">The `Input` function is not localized.</span></span> <span data-ttu-id="e3e04-2048">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2048">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2049">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2049">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2050">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2050">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2051">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2051">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="e3e04-2052">此示例假定`TestFile`是一个文件，已使用对其写入数据的某些行`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2052">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2053">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2053">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2054">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2054">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2055">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2055">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-2056">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2056">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2057">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2057">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2058">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2058">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2059">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2059">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2060">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2060">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2061">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2061">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2062">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2062">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="e3e04-2063">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2063">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2064">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2064">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="e3e04-2065">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2065">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="e3e04-2066">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2066">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="e3e04-2067">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2067">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="e3e04-2068">数据</span><span class="sxs-lookup"><span data-stu-id="e3e04-2068">Data</span></span>|<span data-ttu-id="e3e04-2069">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="e3e04-2069">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="e3e04-2070">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="e3e04-2070">Delimiting comma or blank line</span></span>|<span data-ttu-id="e3e04-2071">空</span><span class="sxs-lookup"><span data-stu-id="e3e04-2071">Empty</span></span>|  
|<span data-ttu-id="e3e04-2072">#NULL #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2072">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="e3e04-2073">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2073">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="e3e04-2074">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="e3e04-2074">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="e3e04-2075">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="e3e04-2075">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="e3e04-2076">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="e3e04-2076">#ERROR `errornumber`#</span></span>|<span data-ttu-id="e3e04-2077">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="e3e04-2077">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="e3e04-2078">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2078">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2079">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2079">The `Input` function is not localized.</span></span> <span data-ttu-id="e3e04-2080">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2080">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2081">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2081">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2082">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2082">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2083">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2083">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="e3e04-2084">此示例假定`TestFile`是一个文件，已使用对其写入数据的某些行`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2084">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2085">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2085">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2086">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2086">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2087">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2087">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-2088">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2088">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2089">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2089">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2090">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2090">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2091">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2091">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2092">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2092">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2093">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2093">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2094">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2094">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="e3e04-2095">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2095">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2096">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2096">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="e3e04-2097">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2097">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="e3e04-2098">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2098">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="e3e04-2099">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2099">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="e3e04-2100">数据</span><span class="sxs-lookup"><span data-stu-id="e3e04-2100">Data</span></span>|<span data-ttu-id="e3e04-2101">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="e3e04-2101">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="e3e04-2102">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="e3e04-2102">Delimiting comma or blank line</span></span>|<span data-ttu-id="e3e04-2103">空</span><span class="sxs-lookup"><span data-stu-id="e3e04-2103">Empty</span></span>|  
|<span data-ttu-id="e3e04-2104">#NULL #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2104">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="e3e04-2105">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2105">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="e3e04-2106">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="e3e04-2106">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="e3e04-2107">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="e3e04-2107">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="e3e04-2108">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="e3e04-2108">#ERROR `errornumber`#</span></span>|<span data-ttu-id="e3e04-2109">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="e3e04-2109">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="e3e04-2110">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2110">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2111">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2111">The `Input` function is not localized.</span></span> <span data-ttu-id="e3e04-2112">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2112">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2113">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2113">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2114">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2114">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2115">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2115">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="e3e04-2116">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2116">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2117">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2117">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2118">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2118">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2119">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2119">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-2120">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2120">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2121">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2121">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2122">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2122">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2123">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2123">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2124">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2124">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2125">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2125">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2126">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2126">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="e3e04-2127">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2127">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2128">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2128">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="e3e04-2129">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2129">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="e3e04-2130">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2130">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="e3e04-2131">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2131">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="e3e04-2132">数据</span><span class="sxs-lookup"><span data-stu-id="e3e04-2132">Data</span></span>|<span data-ttu-id="e3e04-2133">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="e3e04-2133">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="e3e04-2134">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="e3e04-2134">Delimiting comma or blank line</span></span>|<span data-ttu-id="e3e04-2135">空</span><span class="sxs-lookup"><span data-stu-id="e3e04-2135">Empty</span></span>|  
|<span data-ttu-id="e3e04-2136">#NULL #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2136">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="e3e04-2137">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2137">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="e3e04-2138">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="e3e04-2138">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="e3e04-2139">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="e3e04-2139">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="e3e04-2140">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="e3e04-2140">#ERROR `errornumber`#</span></span>|<span data-ttu-id="e3e04-2141">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="e3e04-2141">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="e3e04-2142">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2142">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2143">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2143">The `Input` function is not localized.</span></span> <span data-ttu-id="e3e04-2144">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2144">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2145">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2145">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2146">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2146">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2147">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2147">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="e3e04-2148">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2148">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2149">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2149">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2150">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2150">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2151">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2151">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-2152">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2152">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2153">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2153">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2154">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2154">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2155">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2155">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2156">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2156">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2157">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2157">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2158">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2158">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="e3e04-2159">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2159">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2160">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2160">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="e3e04-2161">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2161">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="e3e04-2162">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2162">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="e3e04-2163">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2163">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="e3e04-2164">数据</span><span class="sxs-lookup"><span data-stu-id="e3e04-2164">Data</span></span>|<span data-ttu-id="e3e04-2165">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="e3e04-2165">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="e3e04-2166">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="e3e04-2166">Delimiting comma or blank line</span></span>|<span data-ttu-id="e3e04-2167">空</span><span class="sxs-lookup"><span data-stu-id="e3e04-2167">Empty</span></span>|  
|<span data-ttu-id="e3e04-2168">#NULL #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2168">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="e3e04-2169">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2169">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="e3e04-2170">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="e3e04-2170">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="e3e04-2171">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="e3e04-2171">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="e3e04-2172">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="e3e04-2172">#ERROR `errornumber`#</span></span>|<span data-ttu-id="e3e04-2173">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="e3e04-2173">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="e3e04-2174">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2174">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2175">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2175">The `Input` function is not localized.</span></span> <span data-ttu-id="e3e04-2176">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2176">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2177">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2177">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2178">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2178">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2179">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2179">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="e3e04-2180">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2180">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2181">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2181">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2182">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2182">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2183">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2183">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-2184">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2184">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2185">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2185">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2186">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2186">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2187">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2187">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2188">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2188">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2189">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2189">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2190">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2190">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="e3e04-2191">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2191">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2192">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2192">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="e3e04-2193">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2193">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="e3e04-2194">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2194">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="e3e04-2195">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2195">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="e3e04-2196">数据</span><span class="sxs-lookup"><span data-stu-id="e3e04-2196">Data</span></span>|<span data-ttu-id="e3e04-2197">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="e3e04-2197">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="e3e04-2198">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="e3e04-2198">Delimiting comma or blank line</span></span>|<span data-ttu-id="e3e04-2199">空</span><span class="sxs-lookup"><span data-stu-id="e3e04-2199">Empty</span></span>|  
|<span data-ttu-id="e3e04-2200">#NULL #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2200">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="e3e04-2201">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2201">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="e3e04-2202">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="e3e04-2202">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="e3e04-2203">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="e3e04-2203">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="e3e04-2204">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="e3e04-2204">#ERROR `errornumber`#</span></span>|<span data-ttu-id="e3e04-2205">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="e3e04-2205">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="e3e04-2206">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2206">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2207">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2207">The `Input` function is not localized.</span></span> <span data-ttu-id="e3e04-2208">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2208">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2209">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2209">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2210">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2210">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2211">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2211">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="e3e04-2212">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2212">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2213">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2213">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2214">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2214">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2215">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2215">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-2216">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2216">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2217">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2217">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2218">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2218">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2219">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2219">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2220">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2220">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2221">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2221">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2222">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2222">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="e3e04-2223">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2223">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2224">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2224">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="e3e04-2225">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2225">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="e3e04-2226">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2226">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="e3e04-2227">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2227">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="e3e04-2228">数据</span><span class="sxs-lookup"><span data-stu-id="e3e04-2228">Data</span></span>|<span data-ttu-id="e3e04-2229">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="e3e04-2229">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="e3e04-2230">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="e3e04-2230">Delimiting comma or blank line</span></span>|<span data-ttu-id="e3e04-2231">空</span><span class="sxs-lookup"><span data-stu-id="e3e04-2231">Empty</span></span>|  
|<span data-ttu-id="e3e04-2232">#NULL #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2232">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="e3e04-2233">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2233">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="e3e04-2234">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="e3e04-2234">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="e3e04-2235">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="e3e04-2235">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="e3e04-2236">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="e3e04-2236">#ERROR `errornumber`#</span></span>|<span data-ttu-id="e3e04-2237">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="e3e04-2237">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="e3e04-2238">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2238">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2239">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2239">The `Input` function is not localized.</span></span> <span data-ttu-id="e3e04-2240">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2240">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2241">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2241">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2242">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2242">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2243">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2243">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="e3e04-2244">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2244">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2245">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2245">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2246">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2246">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2247">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2247">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-2248">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2248">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2249">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2249">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2250">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2250">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2251">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2251">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2252">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2252">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2253">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2253">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2254">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2254">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="e3e04-2255">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2255">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2256">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2256">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="e3e04-2257">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2257">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="e3e04-2258">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2258">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="e3e04-2259">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2259">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="e3e04-2260">数据</span><span class="sxs-lookup"><span data-stu-id="e3e04-2260">Data</span></span>|<span data-ttu-id="e3e04-2261">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="e3e04-2261">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="e3e04-2262">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="e3e04-2262">Delimiting comma or blank line</span></span>|<span data-ttu-id="e3e04-2263">空</span><span class="sxs-lookup"><span data-stu-id="e3e04-2263">Empty</span></span>|  
|<span data-ttu-id="e3e04-2264">#NULL #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2264">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="e3e04-2265">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2265">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="e3e04-2266">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="e3e04-2266">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="e3e04-2267">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="e3e04-2267">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="e3e04-2268">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="e3e04-2268">#ERROR `errornumber`#</span></span>|<span data-ttu-id="e3e04-2269">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="e3e04-2269">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="e3e04-2270">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2270">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2271">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2271">The `Input` function is not localized.</span></span> <span data-ttu-id="e3e04-2272">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2272">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2273">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2273">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2274">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2274">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2275">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2275">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="e3e04-2276">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2276">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2277">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2277">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2278">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2278">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2279">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2279">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-2280">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2280">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2281">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2281">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2282">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2282">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2283">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2283">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2284">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2284">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2285">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2285">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2286">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2286">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="e3e04-2287">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2287">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2288">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2288">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="e3e04-2289">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2289">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="e3e04-2290">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2290">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="e3e04-2291">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2291">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="e3e04-2292">数据</span><span class="sxs-lookup"><span data-stu-id="e3e04-2292">Data</span></span>|<span data-ttu-id="e3e04-2293">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="e3e04-2293">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="e3e04-2294">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="e3e04-2294">Delimiting comma or blank line</span></span>|<span data-ttu-id="e3e04-2295">空</span><span class="sxs-lookup"><span data-stu-id="e3e04-2295">Empty</span></span>|  
|<span data-ttu-id="e3e04-2296">#NULL #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2296">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="e3e04-2297">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2297">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="e3e04-2298">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="e3e04-2298">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="e3e04-2299">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="e3e04-2299">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="e3e04-2300">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="e3e04-2300">#ERROR `errornumber`#</span></span>|<span data-ttu-id="e3e04-2301">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="e3e04-2301">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="e3e04-2302">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2302">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2303">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2303">The `Input` function is not localized.</span></span> <span data-ttu-id="e3e04-2304">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2304">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2305">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2305">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2306">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2306">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2307">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2307">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="e3e04-2308">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2308">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2309">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2309">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2310">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2310">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2311">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2311">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-2312">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2312">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2313">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2313">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2314">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2314">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2315">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2315">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2316">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2316">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2317">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2317">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2318">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2318">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="e3e04-2319">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2319">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2320">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2320">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="e3e04-2321">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2321">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="e3e04-2322">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2322">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="e3e04-2323">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2323">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="e3e04-2324">数据</span><span class="sxs-lookup"><span data-stu-id="e3e04-2324">Data</span></span>|<span data-ttu-id="e3e04-2325">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="e3e04-2325">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="e3e04-2326">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="e3e04-2326">Delimiting comma or blank line</span></span>|<span data-ttu-id="e3e04-2327">空</span><span class="sxs-lookup"><span data-stu-id="e3e04-2327">Empty</span></span>|  
|<span data-ttu-id="e3e04-2328">#NULL #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2328">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="e3e04-2329">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2329">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="e3e04-2330">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="e3e04-2330">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="e3e04-2331">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="e3e04-2331">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="e3e04-2332">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="e3e04-2332">#ERROR `errornumber`#</span></span>|<span data-ttu-id="e3e04-2333">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="e3e04-2333">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="e3e04-2334">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2334">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2335">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2335">The `Input` function is not localized.</span></span> <span data-ttu-id="e3e04-2336">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2336">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2337">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2337">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2338">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2338">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2339">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2339">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="e3e04-2340">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2340">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2341">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2341">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2342">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2342">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2343">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2343">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-2344">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2344">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2345">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2345">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2346">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2346">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2347">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2347">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2348">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2348">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2349">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2349">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2350">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2350">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="e3e04-2351">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2351">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2352">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2352">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="e3e04-2353">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2353">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="e3e04-2354">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2354">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="e3e04-2355">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2355">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="e3e04-2356">数据</span><span class="sxs-lookup"><span data-stu-id="e3e04-2356">Data</span></span>|<span data-ttu-id="e3e04-2357">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="e3e04-2357">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="e3e04-2358">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="e3e04-2358">Delimiting comma or blank line</span></span>|<span data-ttu-id="e3e04-2359">空</span><span class="sxs-lookup"><span data-stu-id="e3e04-2359">Empty</span></span>|  
|<span data-ttu-id="e3e04-2360">#NULL #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2360">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="e3e04-2361">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2361">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="e3e04-2362">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="e3e04-2362">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="e3e04-2363">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="e3e04-2363">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="e3e04-2364">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="e3e04-2364">#ERROR `errornumber`#</span></span>|<span data-ttu-id="e3e04-2365">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="e3e04-2365">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="e3e04-2366">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2366">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2367">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2367">The `Input` function is not localized.</span></span> <span data-ttu-id="e3e04-2368">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2368">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2369">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2369">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2370">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2370">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2371">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2371">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="e3e04-2372">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2372">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2373">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2373">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2374">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2374">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2375">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2375">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="e3e04-2376">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2376">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2377">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2377">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2378">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2378">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2379">`Input`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2379">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2380">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2380">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2381">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2381">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2382">与读取的数据`Input`通常通过使用写入到文件`Write`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2382">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="e3e04-2383">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2383">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2384">当从文件读取，不要确定基于文件扩展名的文件的内容。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2384">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="e3e04-2385">例如，名为 form1.vb 的文件可能不是 Visual Basic 2005 源文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2385">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="e3e04-2386">读取时，标准字符串或数值数据分配到无需修改的变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2386">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="e3e04-2387">下表说明了如何处理其他输入的数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2387">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="e3e04-2388">数据</span><span class="sxs-lookup"><span data-stu-id="e3e04-2388">Data</span></span>|<span data-ttu-id="e3e04-2389">分配给变量的值</span><span class="sxs-lookup"><span data-stu-id="e3e04-2389">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="e3e04-2390">分隔逗号或空行</span><span class="sxs-lookup"><span data-stu-id="e3e04-2390">Delimiting comma or blank line</span></span>|<span data-ttu-id="e3e04-2391">空</span><span class="sxs-lookup"><span data-stu-id="e3e04-2391">Empty</span></span>|  
|<span data-ttu-id="e3e04-2392">#NULL #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2392">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="e3e04-2393">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="e3e04-2393">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="e3e04-2394">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="e3e04-2394">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="e3e04-2395">日期和/或表达式表示的时间</span><span class="sxs-lookup"><span data-stu-id="e3e04-2395">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="e3e04-2396">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="e3e04-2396">#ERROR `errornumber`#</span></span>|<span data-ttu-id="e3e04-2397">`errornumber` （变量是对象标记为错误）</span><span class="sxs-lookup"><span data-stu-id="e3e04-2397">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="e3e04-2398">如果在输入数据项目时达到文件末尾，停止输入，并出现错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2398">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2399">`Input`函数未进行本地化。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2399">The `Input` function is not localized.</span></span> <span data-ttu-id="e3e04-2400">例如，在德语版，如果输入 3,14159，它返回仅 3，因为逗号视为变量分隔符而不是作为小数点。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2400">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2401">通过使用从文件中读取`Input`函数需要`Read`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2401">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2402">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2402">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2403">此示例使用`Input`函数来从文件读取数据，到两个变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2403">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="e3e04-2404">此示例假定`TestFile`是一个文件，具有若干行的数据写入到该使用`Write`函数，每行都包含在引用和由逗号分隔，例如一个数字的字符串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2404">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2405">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2405">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2406">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2406">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2407">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2407">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="e3e04-2408">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2408">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2409">Any valid numeric expression specifying the number of characters to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2409">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2410">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2410">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="e3e04-2411">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2411">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="e3e04-2412">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2412">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-2413">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2413">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="e3e04-2414">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2414">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2415">`InputString`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2415">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2416">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2416">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2417">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2417">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2418">与读取的数据`InputString`函数通常通过使用写入到文件`Print`或`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2418">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="e3e04-2419">此函数只能用于在打开的文件`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2419">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="e3e04-2420">与不同`Input`函数，`InputString`函数将返回它所读取的所有字符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2420">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="e3e04-2421">这包括逗号、 回车符、 换行符、 引号和前导空格。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2421">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="e3e04-2422">使用文件打开以进行`Binary`访问，请尝试使用通过文件读取`InputString`直到函数`EOF`返回`True`生成一个错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2422">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="e3e04-2423">使用`LOF`并`Loc`函数而不是`EOF`通过读取二进制文件时`InputString`，或使用`FileGet`当你使用`EOF`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2423">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2424">当从文件读取，不要根据文件扩展名的文件的内容的安全决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2424">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="e3e04-2425">例如，名为 form1.vb 的文件可能不是 Visual Basic 源文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2425">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2426">此示例使用`InputString`函数来从文件一次读取一个字符，并将其打印到`Output`窗口。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2426">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="e3e04-2427">此示例假定`MyFile`是具有示例数据的多个行的文本文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2427">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2428">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2428">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-2429">
            <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2429">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="e3e04-2430">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2430">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2431">
            <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2431">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="e3e04-2432">
            <c>PathName</c> can include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2432">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2433">Deletes files from a disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2433">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="e3e04-2434">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2434">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="e3e04-2435">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2435">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2436">`Kill` 支持使用多个字符 (`*`) 和单字符 (`?`) 通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2436">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="e3e04-2437">**安全说明**若要执行，`Kill`函数要求`Read`并`PathDiscovery`标志的<xref:System.Security.Permissions.FileIOPermission>要对其授予对执行代码。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2437">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="e3e04-2438">有关详细信息，请参阅<xref:System.Security.SecurityException>[代码访问权限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="e3e04-2438">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2439">此示例使用`Kill`函数从磁盘中删除文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2439">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2440">Target file(s) open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2440">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="e3e04-2441">Target file(s) not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2441">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="e3e04-2442">Permission denied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2442">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2443">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2443">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2444">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2444">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2445">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2445">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-2446">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2446">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2447">`LineInput`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2447">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2448">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2448">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2449">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2449">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2450">与读取的数据`LineInput`通常通过使用写入到文件`Print`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2450">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2451">时从文件读取，不要根据文件扩展名的文件的内容的决策。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2451">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="e3e04-2452">例如，名为 form1.vb 的文件不可能的 Visual Basic 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2452">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="e3e04-2453">`LineInput`函数从文件中的一个字符读取一次直到它遇到回车符 (`Chr(13)`) 或回车符/换行符 (`Chr(13) + Chr(10)`) 序列。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2453">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="e3e04-2454">回车/换行符序列将跳过而不是追加到字符字符串。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2454">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2455">通过使用从文件中读取`LineInput`函数需要`Read`从访问<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2455">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2456">此示例使用`LineInput`函数来从顺序文件中读取一行，并将其分配给一个变量。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2456">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="e3e04-2457">此示例假定`TestFile`是具有示例数据的多个行的文本文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2457">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="e3e04-2458">End of file reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2458">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2459">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2459">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2460">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2460">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2461">Any valid <see langword="Integer" /> file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2461">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2462">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2462">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-2463">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2463">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2464">`Loc`函数是从零开始的使用它来检索文件中的第一个字节将返回 0。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2464">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="e3e04-2465">`Loc`提供函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2465">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2466">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2466">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2467">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2467">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2468">下面介绍每种文件访问模式的返回值：</span><span class="sxs-lookup"><span data-stu-id="e3e04-2468">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="e3e04-2469">模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-2469">Mode</span></span>|<span data-ttu-id="e3e04-2470">返回值</span><span class="sxs-lookup"><span data-stu-id="e3e04-2470">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="e3e04-2471">读取或写入到文件中的最后一个记录的数目。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2471">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="e3e04-2472">除以 128 文件中的当前字节位置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2472">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="e3e04-2473">但是，返回的信息`Loc`的顺序文件不是使用也不需要。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2473">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="e3e04-2474">读取或写入的最后一个字节的位置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2474">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2475">此示例使用`Loc`函数以返回打开的文件中的当前读/写位置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2475">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="e3e04-2476">此示例假定`MyFile`是具有示例数据的多个行的文本文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2476">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2477">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2477">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3e04-2478">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2478">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-2479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="e3e04-2480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2481">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2481">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2482">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2482">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2483">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2483">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-2484">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2484">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="e3e04-2485">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2485">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2486">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2486">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="e3e04-2487">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2487">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="e3e04-2488">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2488">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="e3e04-2489">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2489">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="e3e04-2490">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2490">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="e3e04-2491">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2491">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2492">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2492">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="e3e04-2493">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2493">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2494">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2494">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2495">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2495">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2496">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2496">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="e3e04-2497">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2497">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-2498">Number of the only record or byte to lock or unlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2498">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2499">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2499">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-2500">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2500">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="e3e04-2501">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2501">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2502">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2502">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="e3e04-2503">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2503">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="e3e04-2504">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2504">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="e3e04-2505">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2505">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="e3e04-2506">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2506">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="e3e04-2507">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2507">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2508">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2508">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="e3e04-2509">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2509">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2510">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2510">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2511">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2511">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2512">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2512">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="e3e04-2513">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2513">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-2514">Number of the first record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2514">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="e3e04-2515">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2515">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-2516">Number of the last record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2516">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2517">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2517">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-2518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="e3e04-2519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2520">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2520">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="e3e04-2521">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2521">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="e3e04-2522">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2522">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="e3e04-2523">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2523">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="e3e04-2524">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2524">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="e3e04-2525">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2525">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2526">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2526">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="e3e04-2527">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2527">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2528">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2528">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2529">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2529">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2530">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2530">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2531">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2531">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="e3e04-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-2534">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2534">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2536">使用`FileLen`函数以获取未打开的文件的长度。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2536">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2537">此示例使用`LOF`函数来确定打开的文件的大小。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2537">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="e3e04-2538">此示例假定`TestFile`是一个文本文件，其中包含示例数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2538">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2539">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2539">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="e3e04-2540">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2540">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2541">
            <see langword="String" /> expression that identifies the directory to be created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2541">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="e3e04-2542">The <c>Path</c> may include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2542">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="e3e04-2543">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2543">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2544">Creates a new directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2544">Creates a new directory.</span>
          </span>
          <span data-ttu-id="e3e04-2545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="e3e04-2546">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2546">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2547">此函数创建一个新目录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2547">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2548">此示例使用`MkDir`函数来创建一个目录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2548">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="e3e04-2549">如果未指定驱动器，则当前驱动器上创建新目录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2549">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-2550">
            <paramref name="Path" /> is not specified or is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2550">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="e3e04-2551">Permission denied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2551">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2552">Directory already exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2552">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2553">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2553">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2554">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2554">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="e3e04-2555">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2555">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-2556">Zero or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2556">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="e3e04-2557">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2557">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="e3e04-2558">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2558">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2559">Writes display-formatted data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2559">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2560">`Print`和`PrintLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2560">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2561">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2561">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2562">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2562">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2563">`Print` 不包括换行符末尾的行;但是，`PrintLine`包括换行符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2563">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="e3e04-2564">与写入的数据`Print`从文件通常通过使用读取`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2564">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="e3e04-2565">如果省略`Output`有关`PrintLine`，该文件; 有关打印一个空行`Print`，没有输出。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2565">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="e3e04-2566">用逗号分隔的多个表达式将对齐选项卡边界，但混合使用逗号和`TAB`可能会导致不一致的结果。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2566">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="e3e04-2567">有关`Boolean`数据，而是`True`或`False`打印。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2567">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="e3e04-2568">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2568">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="e3e04-2569">日期数据写入该文件使用您的系统所识别的标准的短日期格式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2569">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="e3e04-2570">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2570">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="e3e04-2571">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2571">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="e3e04-2572">但是，如果`Output`列表中的数据`DBNull`，`Null`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2572">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="e3e04-2573">有关`Error`数据，输出将显示为`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2573">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="e3e04-2574">`Error`关键字不会转换而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2574">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="e3e04-2575">通过使用写入到文件的所有数据`Print`是国际上通用的; 即，数据的正确格式使用相应的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2575">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="e3e04-2576">如果用户想要输出以供多个区域设置数据`Write`应使用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2576">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="e3e04-2577">通过使用对文件进行写入`Print`或`PrintLine`函数要求`Write`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2577">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2578">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2578">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2579">此示例使用`Print`和`PrintLine`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2579">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2580">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2580">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2581">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2581">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="e3e04-2582">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2582">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-2583">Zero or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2583">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="e3e04-2584">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2584">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="e3e04-2585">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2585">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2586">Writes display-formatted data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2586">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2587">`Print`和`PrintLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2587">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2588">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2588">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2589">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2589">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2590">`Print` 不包括换行符末尾的行;但是，`PrintLine`包括换行符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2590">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="e3e04-2591">与写入的数据`Print`从文件通常通过使用读取`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2591">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="e3e04-2592">如果省略`Output`有关`PrintLine`，该文件; 有关打印一个空行`Print`，没有输出。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2592">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="e3e04-2593">用逗号分隔的多个表达式将对齐选项卡边界，但混合使用逗号和`TAB`可能会导致不一致的结果。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2593">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="e3e04-2594">有关`Boolean`数据，而是`True`或`False`打印。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2594">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="e3e04-2595">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2595">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="e3e04-2596">日期数据写入文件，通过使用系统所识别的标准的短日期格式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2596">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="e3e04-2597">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2597">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="e3e04-2598">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2598">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="e3e04-2599">但是，如果`Output`列表中的数据`DBNull`，`Null`写入到文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2599">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="e3e04-2600">有关`Error`数据，输出将显示为`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2600">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="e3e04-2601">`Error`关键字不会转换而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2601">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="e3e04-2602">通过使用写入到文件的所有数据`Print`是国际上通用的; 即，数据的正确格式使用相应的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2602">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="e3e04-2603">如果用户想要输出以供多个区域设置数据`Write`应使用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2603">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="e3e04-2604">通过使用对文件进行写入`Print`或`PrintLine`函数要求`Write`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2604">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2605">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2605">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2606">此示例使用`Print`和`PrintLine`函数将数据写入到一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2606">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="e3e04-2607">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2607">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2608">
            <see langword="String" /> expression that specifies the existing file name and location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2608">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="e3e04-2609">
            <c>OldPath</c> may include the directory, and drive, of the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2609">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="e3e04-2610">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2610">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2611">
            <see langword="String" /> expression that specifies the new file name and location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2611">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="e3e04-2612">
            <c>NewPath</c> may include directory and drive of the destination location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2612">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="e3e04-2613">The file name specified by <c>NewPath</c> cannot already exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2613">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2614">Renames a disk file or directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2614">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="e3e04-2615">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2615">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="e3e04-2616">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2616">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2617">`Rename`函数重命名文件，并将其移动到另一个目录，如有必要。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2617">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="e3e04-2618">`Rename`函数可以将一个文件，在驱动器，但它只能重命名现有目录时同时`NewPath`和`OldPath`位于同一驱动器上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2618">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="e3e04-2619">`Rename` 无法创建新文件或目录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2619">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="e3e04-2620">使用`Rename`函数对打开的文件会产生错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2620">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="e3e04-2621">重命名之前，必须关闭打开的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2621">You must close an open file before renaming it.</span></span> <span data-ttu-id="e3e04-2622">`Rename` 参数不能包含多个字符 （\*） 和单字符 （？） 通配符。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2622">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3e04-2623">当使用`Rename`将文件从受保护的位置复制到受保护的位置，则文件，将保留不太受限制的权限。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2623">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="e3e04-2624">检查以确保没有引入可能的安全风险。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2624">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2625">此示例使用`Rename`函数重命名文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2625">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="e3e04-2626">对于此示例中，假定已指定的目录存在。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2626">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-2627">Path is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2627">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="e3e04-2628">
            <paramref name="OldPath" /> file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2628">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2629">Cannot rename to different device.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2629">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e3e04-2630">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2630">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="e3e04-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2633">`Reset`函数将关闭打开的所有活动文件`FileOpen`函数，并具有相同的功能`FileClose()`不带任何参数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2633">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2634">此示例使用`Reset`函数来关闭所有打开的文件，并将所有文件缓冲区的内容写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2634">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="e3e04-2635">请注意，使用`Object`变量`FileNumber`作为一个字符串和数字。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2635">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="e3e04-2636">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2636">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2637">
            <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2637">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="e3e04-2638">
            <c>Path</c> can include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2638">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="e3e04-2639">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2639">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2640">Removes an existing directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2640">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="e3e04-2641">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2641">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="e3e04-2642">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2642">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2643">如果你尝试使用出错`RmDir`上包含文件的目录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2643">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="e3e04-2644">使用`Kill`函数删除所有文件，再尝试删除一个目录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2644">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2645">此示例使用`RmDir`函数来删除现有目录。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2645">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-2646">
            <paramref name="Path" /> is not specified or is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2646">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2647">Target directory contains files.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2647">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="e3e04-2648">Directory does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2648">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3e04-2649">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2649">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="e3e04-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2652">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2652">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2653">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2653">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2654">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2654">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-2655">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2655">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="e3e04-2656">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2656">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-2657">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2657">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2658">`Seek` 返回 1 和 2,147,483,647 之间的值 (等效于 2 ^31-1)，非独占。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2658">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="e3e04-2659">下面介绍每个文件访问模式的返回的值：</span><span class="sxs-lookup"><span data-stu-id="e3e04-2659">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="e3e04-2660">模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-2660">Mode</span></span>|<span data-ttu-id="e3e04-2661">返回值</span><span class="sxs-lookup"><span data-stu-id="e3e04-2661">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="e3e04-2662">读取或写入的下一个记录的数目</span><span class="sxs-lookup"><span data-stu-id="e3e04-2662">Number of the next record read or written</span></span>|  
|<span data-ttu-id="e3e04-2663">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="e3e04-2663">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="e3e04-2664">下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2664">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="e3e04-2665">在文件中的第一个字节位于位置 1，第二个字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2665">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2666">此示例使用`Seek`函数以返回当前文件位置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2666">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="e3e04-2667">该示例假定`TestFile`是包含记录的结构的一个文件`Record`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2667">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="e3e04-2668">打开的文件中`Random`模式下，`Seek`返回下一条记录的数目。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2668">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="e3e04-2669">而不在模式下打开的文件`Random`模式下，`Seek`返回下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2669">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="e3e04-2670">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2670">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="e3e04-2671">此示例使用`Seek`函数将位置设置为下一次读取或写入的文件中。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2671">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="e3e04-2672">而不在模式下打开的文件`Random`模式下，`Seek`设置下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2672">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="e3e04-2673">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2673">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2674">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2674">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2675">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2675">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2676">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2676">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="e3e04-2677">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2677">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2678">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2678">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2679">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2679">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="e3e04-2681">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2681">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2682">`Seek` 返回 1 和 2,147,483,647 之间的值 (等效于 2 ^31-1)，非独占。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2682">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="e3e04-2683">下面介绍每个文件访问模式的返回的值：</span><span class="sxs-lookup"><span data-stu-id="e3e04-2683">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="e3e04-2684">模式</span><span class="sxs-lookup"><span data-stu-id="e3e04-2684">Mode</span></span>|<span data-ttu-id="e3e04-2685">返回值</span><span class="sxs-lookup"><span data-stu-id="e3e04-2685">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="e3e04-2686">读取或写入的下一个记录的数目</span><span class="sxs-lookup"><span data-stu-id="e3e04-2686">Number of the next record read or written</span></span>|  
|<span data-ttu-id="e3e04-2687">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="e3e04-2687">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="e3e04-2688">下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2688">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="e3e04-2689">在文件中的第一个字节位于位置 1，第二个字节在位置 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2689">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2690">此示例使用`Seek`函数以返回当前文件位置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2690">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="e3e04-2691">该示例假定`TestFile`是包含记录的结构的一个文件`Record`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2691">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="e3e04-2692">打开的文件中`Random`模式下，`Seek`返回下一条记录的数目。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2692">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="e3e04-2693">而不在模式下打开的文件`Random`模式下，`Seek`返回下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2693">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="e3e04-2694">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2694">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="e3e04-2695">此示例使用`Seek`函数将位置设置为下一次读取或写入的文件中。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2695">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="e3e04-2696">而不在模式下打开的文件`Random`模式下，`Seek`设置下一步操作发生的字节位置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2696">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="e3e04-2697">假定`TestFile`是包含若干行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2697">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2698">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2698">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="e3e04-2699">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2699">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2700">
            <see langword="String" /> expression that specifies a file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2700">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="e3e04-2701">
            <c>PathName</c> can include directory or folder, and drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2701">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="e3e04-2702">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2702">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2703">Constant or numeric expression, whose sum specifies file attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2703">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2704">Sets attribute information for a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2704">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="e3e04-2705">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2705">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="e3e04-2706">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2706">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2707">如果您尝试设置打开的文件的属性，会发生运行时错误。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2707">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="e3e04-2708">`Attributes`参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="e3e04-2708">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="e3e04-2709">“值”</span><span class="sxs-lookup"><span data-stu-id="e3e04-2709">Value</span></span>|<span data-ttu-id="e3e04-2710">返回的常量</span><span class="sxs-lookup"><span data-stu-id="e3e04-2710">Constant</span></span>|<span data-ttu-id="e3e04-2711">描述</span><span class="sxs-lookup"><span data-stu-id="e3e04-2711">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="e3e04-2712">正常 （默认值）。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2712">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="e3e04-2713">只读。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2713">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="e3e04-2714">隐藏。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2714">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="e3e04-2715">系统文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2715">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="e3e04-2716">卷标</span><span class="sxs-lookup"><span data-stu-id="e3e04-2716">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="e3e04-2717">目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2717">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="e3e04-2718">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2718">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="e3e04-2719">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2719">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2720">由 Visual Basic 语言指定这些枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2720">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="e3e04-2721">名称可以是任意位置在代码中使用而不是实际值。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2721">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2722">此示例使用`SetAttr`函数设置的文件的属性。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2722">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3e04-2723">
            <paramref name="Attribute" /> type is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2723">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="e3e04-2724">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2724">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2725">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2725">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2726">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2726">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-2727">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2727">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2728">如果`Count`小于输出行宽下, 一个输出位置立即遵循打印的空格数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2728">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="e3e04-2729">如果`Count`大于输出行宽，`SPC`计算使用的公式的下一步打印位置：</span><span class="sxs-lookup"><span data-stu-id="e3e04-2729">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="e3e04-2730">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="e3e04-2730">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="e3e04-2731">例如，如果当前输出位置为 24，输出行的宽度为 80，并指定`SPC(90)`下, 一步的输出将从开始位置 34 （当前打印位置 + 90/80 的其余部分）。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2731">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="e3e04-2732">如果当前的输出位置和输出行宽度之间的区别是小于`Count`(或`Count` `Mod` *宽度*)，则`SPC`函数将跳至下一行，并生成空间等于`Count`– (*宽度*–*小于*)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2732">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2733">请确保表格列的宽度足以允许较宽的字母。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2733">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2734">此示例使用`SPC`函数以定位输出文件中并在**输出**窗口。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2734">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3e04-2735">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2735">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e3e04-2736">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2736">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-2737">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2737">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2738">如果当前行上的当前打印位置大于`Column`，`TAB`将跳到列的值等于`Column`下一步的输出行上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2738">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="e3e04-2739">如果`Column`小于 1，`TAB`将打印位置移动到第 1 列。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2739">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="e3e04-2740">如果`Column`大于输出行宽，`TAB`计算使用的公式的下一步打印位置：</span><span class="sxs-lookup"><span data-stu-id="e3e04-2740">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="e3e04-2741">Mod 列宽</span><span class="sxs-lookup"><span data-stu-id="e3e04-2741">Column Mod width</span></span>  
  
 <span data-ttu-id="e3e04-2742">例如，如果*宽度*是 80，并指定`TAB(90)`下, 一步的输出将从开始第 10 （90/80 的余数） 列。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2742">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="e3e04-2743">如果`Column`小于当前打印位置，开始计算的输出位置的下一行上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2743">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="e3e04-2744">如果计算出的打印位置大于当前打印位置，打印开始计算打印位置在同一行。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2744">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="e3e04-2745">输出行上最左侧的打印位置始终为 1。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2745">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="e3e04-2746">当你使用`Print`或`PrintLine`函数来打印到文件，右侧的输出位置是输出文件，您可以使用设置的当前宽度`FileWidth`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2746">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="e3e04-2747">`TAB`函数也可以用于`WriteLine`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2747">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="e3e04-2748">它不能用于<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2748">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2749">请确保表格列的宽度足以包含较宽的字母。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2749">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2750">此示例使用`TAB`函数以定位输出文件中并在**输出**窗口。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2750">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="e3e04-2751">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2751">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-2752">The column number moved to before displaying or printing the next expression in a list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2752">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="e3e04-2753">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2753">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2754">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2754">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3e04-2755">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2755">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2756">如果当前行上的当前打印位置大于`Column`，`TAB`将跳到列的值等于`Column`下一步的输出行上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2756">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="e3e04-2757">如果`Column`小于 1，`TAB`将打印位置移动到第 1 列。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2757">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="e3e04-2758">如果`Column`大于输出行宽，`TAB`计算使用的公式的下一步打印位置：</span><span class="sxs-lookup"><span data-stu-id="e3e04-2758">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="e3e04-2759">Mod 列宽</span><span class="sxs-lookup"><span data-stu-id="e3e04-2759">Column Mod width</span></span>  
  
 <span data-ttu-id="e3e04-2760">例如，如果*宽度*是 80，并指定`TAB(90)`下, 一步的输出将从开始第 10 （90/80 的余数） 列。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2760">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="e3e04-2761">如果`Column`小于当前打印位置，开始计算的输出位置的下一行上。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2761">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="e3e04-2762">如果计算出的打印位置大于当前打印位置，打印开始计算打印位置在同一行。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2762">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="e3e04-2763">输出行上最左侧的打印位置始终为 1。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2763">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="e3e04-2764">当你使用`Print`或`PrintLine`函数来打印到文件，右侧的输出位置是输出文件，您可以使用设置的当前宽度`FileWidth`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2764">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="e3e04-2765">`TAB`函数也可以用于`WriteLine`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2765">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="e3e04-2766">它不能用于<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2766">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3e04-2767">请确保表格列的宽度足以包含较宽的字母。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2767">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2768">此示例使用`TAB`函数以定位输出文件中并在**输出**窗口。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2768">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3e04-2769">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2769">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-2770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="e3e04-2771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2772">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2772">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2773">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2773">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2774">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2774">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="e3e04-2776">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2776">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2777">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2777">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="e3e04-2778">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2778">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="e3e04-2779">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2779">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="e3e04-2780">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2780">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="e3e04-2781">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2781">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="e3e04-2782">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2782">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2783">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2783">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="e3e04-2784">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2784">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2785">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2785">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2786">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2786">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2787">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2787">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="e3e04-2788">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2788">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-2789">Number of the only record or byte to lock or unlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2789">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="e3e04-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2793">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2793">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="e3e04-2794">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2794">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="e3e04-2795">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2795">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="e3e04-2796">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2796">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="e3e04-2797">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2797">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="e3e04-2798">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2798">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2799">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2799">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="e3e04-2800">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2800">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2801">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2801">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2802">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2802">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2803">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2803">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="e3e04-2804">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2804">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-2805">Number of the first record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2805">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="e3e04-2806">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2806">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-2807">Number of the last record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2807">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2808">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2808">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="e3e04-2809">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2809">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="e3e04-2810">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2810">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2811">`Lock`和`Unlock`函数用于环境中的多个进程可能需要访问同一文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2811">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="e3e04-2812">`Lock` 和`Unlock`函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2812">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="e3e04-2813">参数`Lock`和`Unlock`必须相同。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2813">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="e3e04-2814">如果`Record`，或`FromRecord`和`ToRecord`是未提供，该锁将在整个文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2814">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="e3e04-2815">如果`Record`单独指定单个记录将锁定/解锁。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2815">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="e3e04-2816">如果已打开文件进行连续的输入或输出中，`Lock`并`Unlock`会影响整个文件，而不考虑指定的范围`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2816">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2817">此示例演示如何使用`Lock`和`Unlock`函数。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2817">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="e3e04-2818">此示例假定`People.txt`是包含记录的结构的一个文件`Person`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2818">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2819">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2819">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2820">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2820">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2821">An <see langword="Integer" /> expression that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2821">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="e3e04-2822">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2822">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-2823">One or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2823">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2824">Writes data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2824">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="e3e04-2825">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2825">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2826">`Write`和`WriteLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2826">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2827">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2827">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2828">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2828">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2829">如果省略`Output`，向文件打印一个空行。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2829">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="e3e04-2830">可以用逗号分隔多个表达式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2830">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="e3e04-2831">与不同`Print`函数，`Write`函数之间插入逗号项和引号将字符串写入该文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2831">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="e3e04-2832">无需显式分隔符放入列表。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2832">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="e3e04-2833">当`Write`用于将数据写入到文件中，仅数字`Boolean`，日期、 null 和`Error`支持数据格式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2833">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="e3e04-2834">下面的通用假设遵循这样的数据始终能够阅读和正确解释使用`Input`，无论区域设置：</span><span class="sxs-lookup"><span data-stu-id="e3e04-2834">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="e3e04-2835">使用句点作为小数分隔符始终写入数值数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2835">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="e3e04-2836">有关`Boolean`数据，而是`#TRUE#`或`#FALSE#`打印。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2836">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="e3e04-2837">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2837">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="e3e04-2838">日期数据写入到使用通用日期格式的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2838">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="e3e04-2839">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2839">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="e3e04-2840">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2840">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="e3e04-2841">但是，对于 null 数据`#NULL#`写入。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2841">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="e3e04-2842">有关`Error`数据，输出将显示为`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2842">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="e3e04-2843">`Error`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2843">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="e3e04-2844">`WriteLine` 将插入一个换行符 (即回车符/换行符，或`Chr(13) + Chr(10)`)，在其写入的最后一个字符后`Output`的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2844">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="e3e04-2845">您可以通过使用双引号引起来，在字符串中嵌入引号或""。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2845">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="e3e04-2846">例如，应用于对象的</span><span class="sxs-lookup"><span data-stu-id="e3e04-2846">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="e3e04-2847">返回一个字符串值为`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2847">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="e3e04-2848">通过使用对文件进行写入`Write`或`WriteLine`函数要求`Append`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2848">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2849">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2849">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2850">此示例使用`Write`函数将原始数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2850">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="e3e04-2851">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2851">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="e3e04-2852">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2852">Required.</span>
          </span>
          <span data-ttu-id="e3e04-2853">An <see langword="Integer" /> expression that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2853">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="e3e04-2854">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2854">Optional.</span>
          </span>
          <span data-ttu-id="e3e04-2855">One or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2855">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3e04-2856">Writes data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2856">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="e3e04-2857">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3e04-2857">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3e04-2858">`Write`和`WriteLine`函数是为了向后兼容性，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2858">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="e3e04-2859">对于非旧版应用程序，`My.Computer.FileSystem`对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2859">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="e3e04-2860">有关详细信息，请参阅[使用 Visual Basic 访问文件](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2860">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="e3e04-2861">如果省略`Output`，向文件打印一个空行。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2861">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="e3e04-2862">可以用逗号分隔多个表达式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2862">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="e3e04-2863">与不同`Print`函数，`Write`函数之间插入逗号项和引号将字符串写入该文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2863">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="e3e04-2864">无需显式分隔符放入列表。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2864">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="e3e04-2865">当`Write`用于将数据写入到文件中，仅数字`Boolean`，日期、 null 和`Error`支持数据格式。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2865">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="e3e04-2866">下面的通用假设遵循这样的数据始终能够阅读和正确解释使用`Input`，无论区域设置：</span><span class="sxs-lookup"><span data-stu-id="e3e04-2866">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="e3e04-2867">使用句点作为小数分隔符始终写入数值数据。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2867">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="e3e04-2868">有关`Boolean`数据，而是`#TRUE#`或`#FALSE#`打印。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2868">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="e3e04-2869">`True`和`False`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2869">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="e3e04-2870">日期数据写入到使用通用日期格式的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2870">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="e3e04-2871">当日期或时间部分缺失或为零时，仅提供部分写入文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2871">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="e3e04-2872">执行任何操作写入到文件，如果`Output`数据为空。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2872">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="e3e04-2873">但是，对于 null 数据`#NULL#`写入。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2873">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="e3e04-2874">有关`Error`数据，输出将显示为`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2874">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="e3e04-2875">`Error`不转换关键字，而不考虑区域设置。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2875">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="e3e04-2876">`WriteLine` 将插入一个换行符 (即回车符/换行符，或`Chr(13) + Chr(10)`)，在其写入的最后一个字符后`Output`的文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2876">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="e3e04-2877">您可以通过使用双引号引起来，在字符串中嵌入引号或""。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2877">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="e3e04-2878">例如，应用于对象的</span><span class="sxs-lookup"><span data-stu-id="e3e04-2878">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="e3e04-2879">返回一个字符串值为`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2879">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="e3e04-2880">通过使用对文件进行写入`Write`或`WriteLine`函数要求`Append`从访问`FileIOPermissionAccess`枚举。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2880">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="e3e04-2881">有关详细信息，请参阅<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2881">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3e04-2882">此示例使用`Write`函数将原始数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="e3e04-2882">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>