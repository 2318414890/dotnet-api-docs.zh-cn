<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6d297-101"><see langword="Conversion" /> 模块包含用于执行各种转换操作的过程。</span><span class="sxs-lookup"><span data-stu-id="6d297-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-102">此模块支持的 Visual Basic 语言关键字和运行时库成员，它们将十进制数字转换为其他基数数字的字符串、 字符串转换为数字，和一个数据类型转换为另一个。</span><span class="sxs-lookup"><span data-stu-id="6d297-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-103">此示例使用`Hex`函数以返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="6d297-104">要转换的对象。</span><span class="sxs-lookup"><span data-stu-id="6d297-104">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="6d297-105">该对象要转换为的类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-105">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="6d297-106">将对象转换为指定类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-106">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="6d297-107">一个对象，其类型在运行时为请求的目标类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-107">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-108">`CTypeDynamic`方法将转换作为传递的对象`Expression`由指定的类型参数`TargetType`参数。</span><span class="sxs-lookup"><span data-stu-id="6d297-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="6d297-109">如果对象是动态对象，`CTypeDynamic`方法适用于可用的动态转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="6d297-110">`CTypeDynamic`方法适用根据定义对象本身的转换语义的动态转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="6d297-111">如果动态对象继承自<xref:System.Dynamic.DynamicObject>、`CTypeDynamic`方法首先尝试使用用户定义的静态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="6d297-112">如果用户定义的静态转换失败，`CTypeDynamic`方法尝试通过使用动态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="6d297-113">如果动态对象实现<xref:System.Dynamic.IDynamicMetaObjectProvider>、`CTypeDynamic`方法使动态转换优先级能够对用户定义的静态转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-114">下面的示例使用`CTypeDynamic`方法来使用动态对象所定义的转换转换为字符串的动态对象。</span><span class="sxs-lookup"><span data-stu-id="6d297-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="6d297-115">该对象要转换为的类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-115">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="6d297-116">要转换的对象。</span><span class="sxs-lookup"><span data-stu-id="6d297-116">The object to convert.</span></span></param>
        <summary><span data-ttu-id="6d297-117">将对象转换为指定的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-117">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="6d297-118">静态类型化为请求的泛型类型的对象。</span><span class="sxs-lookup"><span data-stu-id="6d297-118">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-119">`CTypeDynamic`方法将转换作为传递的对象`Expression`参数类型的泛型参数所指定的类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="6d297-120">如果对象是动态对象，`CTypeDynamic`方法适用于可用的动态转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="6d297-121">`CTypeDynamic`方法适用根据定义对象本身的转换语义的动态转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="6d297-122">如果动态对象继承自<xref:System.Dynamic.DynamicObject>、`CTypeDynamic`方法首先尝试使用用户定义的静态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="6d297-123">如果用户定义的静态转换失败，`CTypeDynamic`方法尝试通过使用动态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="6d297-124">如果动态对象实现<xref:System.Dynamic.IDynamicMetaObjectProvider>、`CTypeDynamic`方法使动态转换优先级能够对用户定义的静态转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-125">下面的示例使用`CTypeDynamic`方法来使用动态对象所定义的转换转换为字符串的动态对象。</span><span class="sxs-lookup"><span data-stu-id="6d297-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6d297-126">返回与给定的错误号对应的错误信息。</span><span class="sxs-lookup"><span data-stu-id="6d297-126">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6d297-127">返回与给定的错误号对应的错误信息。</span><span class="sxs-lookup"><span data-stu-id="6d297-127">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="6d297-128">对应于最新运行时错误的错误消息。</span><span class="sxs-lookup"><span data-stu-id="6d297-128">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-129">`ErrorToString`函数检查的属性设置`Err`用于标识最新的运行时错误的对象。</span><span class="sxs-lookup"><span data-stu-id="6d297-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="6d297-130">返回值`ErrorToString`函数对应于`Description`属性`Err`对象。</span><span class="sxs-lookup"><span data-stu-id="6d297-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="6d297-131">如果不发生任何运行时错误，`ErrorToString`返回一个零长度字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="6d297-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="6d297-132">在 Visual Basic 6.0 及更低版本中，此功能由`Error`函数。</span><span class="sxs-lookup"><span data-stu-id="6d297-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-133">下面的代码使用`ErrorToString`函数来显示对应的错误消息为指定的错误号。</span><span class="sxs-lookup"><span data-stu-id="6d297-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-134"><paramref name="ErrorNumber" /> 超出范围。</span><span class="sxs-lookup"><span data-stu-id="6d297-134"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="6d297-135">可选。</span><span class="sxs-lookup"><span data-stu-id="6d297-135">Optional.</span></span> <span data-ttu-id="6d297-136">任何有效的错误号。</span><span class="sxs-lookup"><span data-stu-id="6d297-136">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="6d297-137">返回与给定的错误号对应的错误信息。</span><span class="sxs-lookup"><span data-stu-id="6d297-137">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="6d297-138">与给定错误号对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="6d297-138">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-139">`ErrorToString`函数检查的属性设置`Err`用于标识最新的运行时错误的对象。</span><span class="sxs-lookup"><span data-stu-id="6d297-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="6d297-140">返回值`ErrorToString`函数对应于`Description`属性`Err`对象。</span><span class="sxs-lookup"><span data-stu-id="6d297-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="6d297-141">如果`ErrorNumber`是有效的错误号，但未定义，`ErrorToString`返回字符串`"Application-defined or object-defined error."`如果`ErrorNumber`无效，将会出错。</span><span class="sxs-lookup"><span data-stu-id="6d297-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="6d297-142">如果`ErrorNumber`省略，到最新相对应的消息返回运行时错误。</span><span class="sxs-lookup"><span data-stu-id="6d297-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="6d297-143">如果未运行时已发生错误或`ErrorNumber`为 0，`ErrorToString`返回一个零长度字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="6d297-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="6d297-144">在 Visual Basic 6.0 及更低版本中，此功能由`Error`函数。</span><span class="sxs-lookup"><span data-stu-id="6d297-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-145">下面的代码使用`ErrorToString`函数来显示对应的错误消息为指定的错误号。</span><span class="sxs-lookup"><span data-stu-id="6d297-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-146"><paramref name="ErrorNumber" /> 超出范围。</span><span class="sxs-lookup"><span data-stu-id="6d297-146"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6d297-147">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-147">Return the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-148">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-148">Required.</span></span> <span data-ttu-id="6d297-149"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-149">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="6d297-150">如果 <c>Number</c> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6d297-151">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-151">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-152">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-152">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-153">同时`Int`和`Fix`函数删除的小数部分`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="6d297-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6d297-154">之间的差异`Int`和`Fix`函数是，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6d297-155">例如，`Int`将-8.4 转换成-9，和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="6d297-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6d297-156">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6d297-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-157">此示例演示了如何`Int`和`Fix`函数将返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6d297-158">如果参数为负号，`Int`函数返回的第一个负整数小于或等于数;`Fix`函数将返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="6d297-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6d297-159">下面的示例要求你指定`Option Strict Off`因为从隐式转换类型`Double`类型`Integer`下不允许`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="6d297-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6d297-160">你可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="6d297-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6d297-161">但是，`CInt`舍入到最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6d297-162">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6d297-163">你可以使用`CInt`函数调用的结果`Fix`或`Int`执行而舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6d297-164">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6d297-165">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="6d297-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6d297-166">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="6d297-166">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6d297-167">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-167">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-168">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-168">Required.</span></span> <span data-ttu-id="6d297-169"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-169">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="6d297-170">如果 <c>Number</c> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6d297-171">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-171">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-172">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-172">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-173">同时`Int`和`Fix`函数删除的小数部分`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="6d297-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6d297-174">之间的差异`Int`和`Fix`函数是，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6d297-175">例如，`Int`将-8.4 转换成-9，和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="6d297-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6d297-176">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6d297-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-177">此示例演示了如何`Int`和`Fix`函数将返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6d297-178">如果参数为负号，`Int`函数返回的第一个负整数小于或等于数;`Fix`函数将返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="6d297-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6d297-179">下面的示例要求你指定`Option Strict Off`因为从隐式转换类型`Double`类型`Integer`下不允许`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="6d297-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6d297-180">你可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="6d297-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6d297-181">但是，`CInt`舍入到最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6d297-182">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6d297-183">你可以使用`CInt`函数调用的结果`Fix`或`Int`执行而舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6d297-184">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6d297-185">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="6d297-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6d297-186">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="6d297-186">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6d297-187">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-187">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-188">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-188">Required.</span></span> <span data-ttu-id="6d297-189"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-189">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="6d297-190">如果 <c>Number</c> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6d297-191">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-191">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-192">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-192">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-193">同时`Int`和`Fix`函数删除的小数部分`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="6d297-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6d297-194">之间的差异`Int`和`Fix`函数是，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6d297-195">例如，`Int`将-8.4 转换成-9，和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="6d297-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6d297-196">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6d297-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-197">此示例演示了如何`Int`和`Fix`函数将返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6d297-198">如果参数为负号，`Int`函数返回的第一个负整数小于或等于数;`Fix`函数将返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="6d297-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6d297-199">下面的示例要求你指定`Option Strict Off`因为从隐式转换类型`Double`类型`Integer`下不允许`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="6d297-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6d297-200">你可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="6d297-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6d297-201">但是，`CInt`舍入到最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6d297-202">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6d297-203">你可以使用`CInt`函数调用的结果`Fix`或`Int`执行而舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6d297-204">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6d297-205">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="6d297-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6d297-206">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="6d297-206">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6d297-207">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-207">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-208">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-208">Required.</span></span> <span data-ttu-id="6d297-209"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-209">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="6d297-210">如果 <c>Number</c> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6d297-211">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-211">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-212">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-212">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-213">同时`Int`和`Fix`函数删除的小数部分`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="6d297-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6d297-214">之间的差异`Int`和`Fix`函数是，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6d297-215">例如，`Int`将-8.4 转换成-9，和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="6d297-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6d297-216">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6d297-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-217">此示例演示了如何`Int`和`Fix`函数将返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6d297-218">如果参数为负号，`Int`函数返回的第一个负整数小于或等于数;`Fix`函数将返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="6d297-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6d297-219">下面的示例要求你指定`Option Strict Off`因为从隐式转换类型`Double`类型`Integer`下不允许`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="6d297-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6d297-220">你可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="6d297-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6d297-221">但是，`CInt`舍入到最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6d297-222">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6d297-223">你可以使用`CInt`函数调用的结果`Fix`或`Int`执行而舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6d297-224">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6d297-225">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="6d297-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6d297-226">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="6d297-226">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6d297-227">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-227">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-228">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-228">Required.</span></span> <span data-ttu-id="6d297-229"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-229">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="6d297-230">如果 <c>Number</c> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6d297-231">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-231">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-232">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-232">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-233">同时`Int`和`Fix`函数删除的小数部分`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="6d297-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6d297-234">之间的差异`Int`和`Fix`函数是，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6d297-235">例如，`Int`将-8.4 转换成-9，和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="6d297-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6d297-236">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6d297-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-237">此示例演示了如何`Int`和`Fix`函数将返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6d297-238">如果参数为负号，`Int`函数返回的第一个负整数小于或等于数;`Fix`函数将返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="6d297-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6d297-239">下面的示例要求你指定`Option Strict Off`因为从隐式转换类型`Double`类型`Integer`下不允许`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="6d297-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6d297-240">你可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="6d297-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6d297-241">但是，`CInt`舍入到最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6d297-242">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6d297-243">你可以使用`CInt`函数调用的结果`Fix`或`Int`执行而舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6d297-244">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6d297-245">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="6d297-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6d297-246">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="6d297-246">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6d297-247">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-247">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-248">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-248">Required.</span></span> <span data-ttu-id="6d297-249"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-249">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="6d297-250">如果 <c>Number</c> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6d297-251">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-251">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-252">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-252">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-253">同时`Int`和`Fix`函数删除的小数部分`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="6d297-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6d297-254">之间的差异`Int`和`Fix`函数是，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6d297-255">例如，`Int`将-8.4 转换成-9，和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="6d297-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6d297-256">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6d297-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-257">此示例演示了如何`Int`和`Fix`函数将返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6d297-258">如果参数为负号，`Int`函数返回的第一个负整数小于或等于数;`Fix`函数将返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="6d297-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6d297-259">下面的示例要求你指定`Option Strict Off`因为从隐式转换类型`Double`类型`Integer`下不允许`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="6d297-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6d297-260">你可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="6d297-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6d297-261">但是，`CInt`舍入到最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6d297-262">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6d297-263">你可以使用`CInt`函数调用的结果`Fix`或`Int`执行而舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6d297-264">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6d297-265">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="6d297-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6d297-266">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="6d297-266">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6d297-267">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-267">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-268">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-268">Required.</span></span> <span data-ttu-id="6d297-269"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-269">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="6d297-270">如果 <c>Number</c> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6d297-271">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-271">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-272">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-272">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-273">同时`Int`和`Fix`函数删除的小数部分`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="6d297-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6d297-274">之间的差异`Int`和`Fix`函数是，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6d297-275">例如，`Int`将-8.4 转换成-9，和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="6d297-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6d297-276">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6d297-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-277">此示例演示了如何`Int`和`Fix`函数将返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6d297-278">如果参数为负号，`Int`函数返回的第一个负整数小于或等于数;`Fix`函数将返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="6d297-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6d297-279">下面的示例要求你指定`Option Strict Off`因为从隐式转换类型`Double`类型`Integer`下不允许`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="6d297-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6d297-280">你可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="6d297-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6d297-281">但是，`CInt`舍入到最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6d297-282">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6d297-283">你可以使用`CInt`函数调用的结果`Fix`或`Int`执行而舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6d297-284">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6d297-285">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="6d297-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6d297-286">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="6d297-286">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6d297-287">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-287">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6d297-288">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-288">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-289">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-289">Required.</span></span> <span data-ttu-id="6d297-290">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-290">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-291">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-291">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-292">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-292">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-293">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-294">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="6d297-294">If `Number` is</span></span>|<span data-ttu-id="6d297-295">十六进制返回</span><span class="sxs-lookup"><span data-stu-id="6d297-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-296">空</span><span class="sxs-lookup"><span data-stu-id="6d297-296">Empty</span></span>|<span data-ttu-id="6d297-297">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-297">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-298">任何数值</span><span class="sxs-lookup"><span data-stu-id="6d297-298">Any numeric value</span></span>|<span data-ttu-id="6d297-299">多达十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6d297-300">你可以直接通过在适当范围的数字前面表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="6d297-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6d297-301">例如，`&H10`表示以十六进制表示法的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="6d297-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-302">此示例使用`Hex`函数以返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-303">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-303"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-304"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-304"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-305">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-305">Required.</span></span> <span data-ttu-id="6d297-306">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-306">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-307">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-307">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-308">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-308">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-309">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-310">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="6d297-310">If `Number` is</span></span>|<span data-ttu-id="6d297-311">十六进制返回</span><span class="sxs-lookup"><span data-stu-id="6d297-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-312">空</span><span class="sxs-lookup"><span data-stu-id="6d297-312">Empty</span></span>|<span data-ttu-id="6d297-313">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-313">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-314">任何数值</span><span class="sxs-lookup"><span data-stu-id="6d297-314">Any numeric value</span></span>|<span data-ttu-id="6d297-315">多达十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6d297-316">你可以直接通过在适当范围的数字前面表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="6d297-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6d297-317">例如，`&H10`表示以十六进制表示法的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="6d297-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-318">此示例使用`Hex`函数以返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-319">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-319"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-320"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-320"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-321">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-321">Required.</span></span> <span data-ttu-id="6d297-322">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-322">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-323">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-323">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-324">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-324">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-325">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-326">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="6d297-326">If `Number` is</span></span>|<span data-ttu-id="6d297-327">十六进制返回</span><span class="sxs-lookup"><span data-stu-id="6d297-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-328">空</span><span class="sxs-lookup"><span data-stu-id="6d297-328">Empty</span></span>|<span data-ttu-id="6d297-329">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-329">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-330">任何数值</span><span class="sxs-lookup"><span data-stu-id="6d297-330">Any numeric value</span></span>|<span data-ttu-id="6d297-331">多达十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6d297-332">你可以直接通过在适当范围的数字前面表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="6d297-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6d297-333">例如，`&H10`表示以十六进制表示法的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="6d297-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-334">此示例使用`Hex`函数以返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-335">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-335"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-336"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-336"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-337">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-337">Required.</span></span> <span data-ttu-id="6d297-338">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-338">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-339">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-339">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-340">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-340">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-341">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-342">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="6d297-342">If `Number` is</span></span>|<span data-ttu-id="6d297-343">十六进制返回</span><span class="sxs-lookup"><span data-stu-id="6d297-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-344">空</span><span class="sxs-lookup"><span data-stu-id="6d297-344">Empty</span></span>|<span data-ttu-id="6d297-345">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-345">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-346">任何数值</span><span class="sxs-lookup"><span data-stu-id="6d297-346">Any numeric value</span></span>|<span data-ttu-id="6d297-347">多达十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6d297-348">你可以直接通过在适当范围的数字前面表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="6d297-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6d297-349">例如，`&H10`表示以十六进制表示法的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="6d297-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-350">此示例使用`Hex`函数以返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-351">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-351"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-352"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-352"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-353">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-353">Required.</span></span> <span data-ttu-id="6d297-354">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-354">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-355">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-355">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-356">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-356">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-357">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-358">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="6d297-358">If `Number` is</span></span>|<span data-ttu-id="6d297-359">十六进制返回</span><span class="sxs-lookup"><span data-stu-id="6d297-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-360">空</span><span class="sxs-lookup"><span data-stu-id="6d297-360">Empty</span></span>|<span data-ttu-id="6d297-361">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-361">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-362">任何数值</span><span class="sxs-lookup"><span data-stu-id="6d297-362">Any numeric value</span></span>|<span data-ttu-id="6d297-363">多达十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6d297-364">你可以直接通过在适当范围的数字前面表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="6d297-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6d297-365">例如，`&H10`表示以十六进制表示法的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="6d297-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-366">此示例使用`Hex`函数以返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-367">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-367"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-368"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-368"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-369">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-369">Required.</span></span> <span data-ttu-id="6d297-370">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-370">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-371">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-371">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-372">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-372">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-373">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-374">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="6d297-374">If `Number` is</span></span>|<span data-ttu-id="6d297-375">十六进制返回</span><span class="sxs-lookup"><span data-stu-id="6d297-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-376">空</span><span class="sxs-lookup"><span data-stu-id="6d297-376">Empty</span></span>|<span data-ttu-id="6d297-377">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-377">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-378">任何数值</span><span class="sxs-lookup"><span data-stu-id="6d297-378">Any numeric value</span></span>|<span data-ttu-id="6d297-379">多达十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6d297-380">你可以直接通过在适当范围的数字前面表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="6d297-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6d297-381">例如，`&H10`表示以十六进制表示法的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="6d297-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-382">此示例使用`Hex`函数以返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-383">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-383"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-384"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-384"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-385">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-385">Required.</span></span> <span data-ttu-id="6d297-386">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-386">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-387">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-387">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-388">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-388">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-389">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-390">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="6d297-390">If `Number` is</span></span>|<span data-ttu-id="6d297-391">十六进制返回</span><span class="sxs-lookup"><span data-stu-id="6d297-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-392">空</span><span class="sxs-lookup"><span data-stu-id="6d297-392">Empty</span></span>|<span data-ttu-id="6d297-393">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-393">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-394">任何数值</span><span class="sxs-lookup"><span data-stu-id="6d297-394">Any numeric value</span></span>|<span data-ttu-id="6d297-395">多达十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6d297-396">你可以直接通过在适当范围的数字前面表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="6d297-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6d297-397">例如，`&H10`表示以十六进制表示法的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="6d297-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-398">此示例使用`Hex`函数以返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-399">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-399"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-400"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-400"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-401">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-401">Required.</span></span> <span data-ttu-id="6d297-402">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-402">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-403">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-403">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-404">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-404">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-405">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-406">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="6d297-406">If `Number` is</span></span>|<span data-ttu-id="6d297-407">十六进制返回</span><span class="sxs-lookup"><span data-stu-id="6d297-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-408">空</span><span class="sxs-lookup"><span data-stu-id="6d297-408">Empty</span></span>|<span data-ttu-id="6d297-409">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-409">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-410">任何数值</span><span class="sxs-lookup"><span data-stu-id="6d297-410">Any numeric value</span></span>|<span data-ttu-id="6d297-411">多达十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6d297-412">你可以直接通过在适当范围的数字前面表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="6d297-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6d297-413">例如，`&H10`表示以十六进制表示法的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="6d297-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-414">此示例使用`Hex`函数以返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-415">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-415"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-416"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-416"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-417">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-417">Required.</span></span> <span data-ttu-id="6d297-418">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-418">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-419">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-419">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-420">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-420">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-421">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-422">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="6d297-422">If `Number` is</span></span>|<span data-ttu-id="6d297-423">十六进制返回</span><span class="sxs-lookup"><span data-stu-id="6d297-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-424">空</span><span class="sxs-lookup"><span data-stu-id="6d297-424">Empty</span></span>|<span data-ttu-id="6d297-425">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-425">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-426">任何数值</span><span class="sxs-lookup"><span data-stu-id="6d297-426">Any numeric value</span></span>|<span data-ttu-id="6d297-427">多达十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="6d297-428">你可以直接通过在适当范围的数字前面表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="6d297-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="6d297-429">例如，`&H10`表示以十六进制表示法的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="6d297-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-430">此示例使用`Hex`函数以返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-431">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-431"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-432"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-432"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6d297-433">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-433">Return the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-434">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-434">Required.</span></span> <span data-ttu-id="6d297-435"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-435">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="6d297-436">如果 <c>Number</c> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6d297-437">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-437">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-438">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-438">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-439">同时`Int`和`Fix`函数删除的小数部分`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="6d297-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6d297-440">之间的差异`Int`和`Fix`函数是，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6d297-441">例如，`Int`将-8.4 转换成-9，和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="6d297-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6d297-442">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6d297-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-443">此示例演示了如何`Int`和`Fix`函数将返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6d297-444">如果参数为负号，`Int`函数返回的第一个负整数小于或等于数;`Fix`函数将返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="6d297-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6d297-445">下面的示例要求你指定`Option Strict Off`因为从隐式转换类型`Double`类型`Integer`下不允许`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="6d297-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6d297-446">你可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="6d297-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6d297-447">但是，`CInt`舍入到最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6d297-448">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6d297-449">你可以使用`CInt`函数调用的结果`Fix`或`Int`执行而舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6d297-450">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6d297-451">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="6d297-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6d297-452">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="6d297-452">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6d297-453">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-453">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-454">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-454">Required.</span></span> <span data-ttu-id="6d297-455"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-455">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="6d297-456">如果 <c>Number</c> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6d297-457">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-457">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-458">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-458">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-459">同时`Int`和`Fix`函数删除的小数部分`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="6d297-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6d297-460">之间的差异`Int`和`Fix`函数是，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6d297-461">例如，`Int`将-8.4 转换成-9，和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="6d297-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6d297-462">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6d297-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-463">此示例演示了如何`Int`和`Fix`函数将返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6d297-464">如果参数为负号，`Int`函数返回的第一个负整数小于或等于数;`Fix`函数将返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="6d297-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6d297-465">下面的示例要求你指定`Option Strict Off`因为从隐式转换类型`Double`类型`Integer`下不允许`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="6d297-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6d297-466">你可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="6d297-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6d297-467">但是，`CInt`舍入到最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6d297-468">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6d297-469">你可以使用`CInt`函数调用的结果`Fix`或`Int`执行而舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6d297-470">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6d297-471">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="6d297-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6d297-472">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="6d297-472">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6d297-473">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-473">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-474">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-474">Required.</span></span> <span data-ttu-id="6d297-475"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-475">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="6d297-476">如果 <c>Number</c> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6d297-477">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-477">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-478">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-478">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-479">同时`Int`和`Fix`函数删除的小数部分`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="6d297-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6d297-480">之间的差异`Int`和`Fix`函数是，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6d297-481">例如，`Int`将-8.4 转换成-9，和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="6d297-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6d297-482">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6d297-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-483">此示例演示了如何`Int`和`Fix`函数将返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6d297-484">如果参数为负号，`Int`函数返回的第一个负整数小于或等于数;`Fix`函数将返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="6d297-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6d297-485">下面的示例要求你指定`Option Strict Off`因为从隐式转换类型`Double`类型`Integer`下不允许`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="6d297-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6d297-486">你可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="6d297-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6d297-487">但是，`CInt`舍入到最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6d297-488">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6d297-489">你可以使用`CInt`函数调用的结果`Fix`或`Int`执行而舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6d297-490">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6d297-491">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="6d297-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6d297-492">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="6d297-492">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6d297-493">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-493">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-494">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-494">Required.</span></span> <span data-ttu-id="6d297-495"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-495">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="6d297-496">如果 <c>Number</c> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6d297-497">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-497">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-498">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-498">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-499">同时`Int`和`Fix`函数删除的小数部分`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="6d297-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6d297-500">之间的差异`Int`和`Fix`函数是，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6d297-501">例如，`Int`将-8.4 转换成-9，和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="6d297-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6d297-502">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6d297-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-503">此示例演示了如何`Int`和`Fix`函数将返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6d297-504">如果参数为负号，`Int`函数返回的第一个负整数小于或等于数;`Fix`函数将返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="6d297-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6d297-505">下面的示例要求你指定`Option Strict Off`因为从隐式转换类型`Double`类型`Integer`下不允许`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="6d297-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6d297-506">你可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="6d297-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6d297-507">但是，`CInt`舍入到最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6d297-508">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6d297-509">你可以使用`CInt`函数调用的结果`Fix`或`Int`执行而舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6d297-510">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6d297-511">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="6d297-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6d297-512">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="6d297-512">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6d297-513">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-513">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-514">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-514">Required.</span></span> <span data-ttu-id="6d297-515"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-515">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="6d297-516">如果 <c>Number</c> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6d297-517">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-517">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-518">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-518">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-519">同时`Int`和`Fix`函数删除的小数部分`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="6d297-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6d297-520">之间的差异`Int`和`Fix`函数是，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6d297-521">例如，`Int`将-8.4 转换成-9，和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="6d297-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6d297-522">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6d297-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-523">此示例演示了如何`Int`和`Fix`函数将返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6d297-524">如果参数为负号，`Int`函数返回的第一个负整数小于或等于数;`Fix`函数将返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="6d297-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6d297-525">下面的示例要求你指定`Option Strict Off`因为从隐式转换类型`Double`类型`Integer`下不允许`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="6d297-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6d297-526">你可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="6d297-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6d297-527">但是，`CInt`舍入到最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6d297-528">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6d297-529">你可以使用`CInt`函数调用的结果`Fix`或`Int`执行而舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6d297-530">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6d297-531">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="6d297-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6d297-532">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="6d297-532">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6d297-533">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-533">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-534">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-534">Required.</span></span> <span data-ttu-id="6d297-535"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-535">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="6d297-536">如果 <c>Number</c> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6d297-537">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-537">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-538">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-538">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-539">同时`Int`和`Fix`函数删除的小数部分`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="6d297-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6d297-540">之间的差异`Int`和`Fix`函数是，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6d297-541">例如，`Int`将-8.4 转换成-9，和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="6d297-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6d297-542">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6d297-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-543">此示例演示了如何`Int`和`Fix`函数将返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6d297-544">如果参数为负号，`Int`函数返回的第一个负整数小于或等于数;`Fix`函数将返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="6d297-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6d297-545">下面的示例要求你指定`Option Strict Off`因为从隐式转换类型`Double`类型`Integer`下不允许`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="6d297-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6d297-546">你可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="6d297-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6d297-547">但是，`CInt`舍入到最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6d297-548">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6d297-549">你可以使用`CInt`函数调用的结果`Fix`或`Int`执行而舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6d297-550">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6d297-551">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="6d297-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6d297-552">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="6d297-552">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6d297-553">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-553">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-554">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-554">Required.</span></span> <span data-ttu-id="6d297-555"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-555">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="6d297-556">如果 <c>Number</c> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="6d297-557">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-557">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-558">返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-558">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-559">同时`Int`和`Fix`函数删除的小数部分`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="6d297-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="6d297-560">之间的差异`Int`和`Fix`函数是，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="6d297-561">例如，`Int`将-8.4 转换成-9，和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="6d297-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="6d297-562">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="6d297-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-563">此示例演示了如何`Int`和`Fix`函数将返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="6d297-564">如果参数为负号，`Int`函数返回的第一个负整数小于或等于数;`Fix`函数将返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="6d297-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="6d297-565">下面的示例要求你指定`Option Strict Off`因为从隐式转换类型`Double`类型`Integer`下不允许`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="6d297-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="6d297-566">你可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="6d297-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="6d297-567">但是，`CInt`舍入到最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="6d297-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="6d297-568">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6d297-569">你可以使用`CInt`函数调用的结果`Fix`或`Int`执行而舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="6d297-570">例如:</span><span class="sxs-lookup"><span data-stu-id="6d297-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6d297-571">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="6d297-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6d297-572">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="6d297-572">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6d297-573">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-573">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6d297-574">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-574">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-575">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-575">Required.</span></span> <span data-ttu-id="6d297-576">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-576">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-577">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-577">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-578">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-578">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-579">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-580">如果数字为</span><span class="sxs-lookup"><span data-stu-id="6d297-580">If Number is</span></span>|<span data-ttu-id="6d297-581">八进制返回值</span><span class="sxs-lookup"><span data-stu-id="6d297-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-582">空</span><span class="sxs-lookup"><span data-stu-id="6d297-582">Empty</span></span>|<span data-ttu-id="6d297-583">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-583">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-584">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="6d297-584">Any other number</span></span>|<span data-ttu-id="6d297-585">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6d297-586">你可以直接通过在适当范围的数字前面表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="6d297-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6d297-587">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="6d297-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-588">此示例使用`Oct`函数以返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-589">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-589"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-590"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-590"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-591">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-591">Required.</span></span> <span data-ttu-id="6d297-592">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-592">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-593">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-593">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-594">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-594">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-595">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-596">如果数字为</span><span class="sxs-lookup"><span data-stu-id="6d297-596">If Number is</span></span>|<span data-ttu-id="6d297-597">八进制返回值</span><span class="sxs-lookup"><span data-stu-id="6d297-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-598">空</span><span class="sxs-lookup"><span data-stu-id="6d297-598">Empty</span></span>|<span data-ttu-id="6d297-599">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-599">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-600">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="6d297-600">Any other number</span></span>|<span data-ttu-id="6d297-601">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6d297-602">你可以直接通过在适当范围的数字前面表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="6d297-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6d297-603">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="6d297-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-604">此示例使用`Oct`函数以返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-605">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-605"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-606"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-606"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-607">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-607">Required.</span></span> <span data-ttu-id="6d297-608">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-608">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-609">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-609">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-610">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-610">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-611">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-612">如果数字为</span><span class="sxs-lookup"><span data-stu-id="6d297-612">If Number is</span></span>|<span data-ttu-id="6d297-613">八进制返回值</span><span class="sxs-lookup"><span data-stu-id="6d297-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-614">空</span><span class="sxs-lookup"><span data-stu-id="6d297-614">Empty</span></span>|<span data-ttu-id="6d297-615">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-615">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-616">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="6d297-616">Any other number</span></span>|<span data-ttu-id="6d297-617">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6d297-618">你可以直接通过在适当范围的数字前面表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="6d297-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6d297-619">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="6d297-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-620">此示例使用`Oct`函数以返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-621">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-621"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-622"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-622"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-623">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-623">Required.</span></span> <span data-ttu-id="6d297-624">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-624">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-625">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-625">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-626">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-626">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-627">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-628">如果数字为</span><span class="sxs-lookup"><span data-stu-id="6d297-628">If Number is</span></span>|<span data-ttu-id="6d297-629">八进制返回值</span><span class="sxs-lookup"><span data-stu-id="6d297-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-630">空</span><span class="sxs-lookup"><span data-stu-id="6d297-630">Empty</span></span>|<span data-ttu-id="6d297-631">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-631">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-632">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="6d297-632">Any other number</span></span>|<span data-ttu-id="6d297-633">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6d297-634">你可以直接通过在适当范围的数字前面表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="6d297-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6d297-635">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="6d297-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-636">此示例使用`Oct`函数以返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-637">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-637"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-638"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-638"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-639">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-639">Required.</span></span> <span data-ttu-id="6d297-640">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-640">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-641">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-641">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-642">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-642">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-643">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-644">如果数字为</span><span class="sxs-lookup"><span data-stu-id="6d297-644">If Number is</span></span>|<span data-ttu-id="6d297-645">八进制返回值</span><span class="sxs-lookup"><span data-stu-id="6d297-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-646">空</span><span class="sxs-lookup"><span data-stu-id="6d297-646">Empty</span></span>|<span data-ttu-id="6d297-647">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-647">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-648">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="6d297-648">Any other number</span></span>|<span data-ttu-id="6d297-649">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6d297-650">你可以直接通过在适当范围的数字前面表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="6d297-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6d297-651">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="6d297-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-652">此示例使用`Oct`函数以返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-653">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-653"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-654"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-654"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-655">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-655">Required.</span></span> <span data-ttu-id="6d297-656">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-656">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-657">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-657">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-658">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-658">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-659">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-660">如果数字为</span><span class="sxs-lookup"><span data-stu-id="6d297-660">If Number is</span></span>|<span data-ttu-id="6d297-661">八进制返回值</span><span class="sxs-lookup"><span data-stu-id="6d297-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-662">空</span><span class="sxs-lookup"><span data-stu-id="6d297-662">Empty</span></span>|<span data-ttu-id="6d297-663">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-663">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-664">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="6d297-664">Any other number</span></span>|<span data-ttu-id="6d297-665">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6d297-666">你可以直接通过在适当范围的数字前面表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="6d297-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6d297-667">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="6d297-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-668">此示例使用`Oct`函数以返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-669">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-669"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-670"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-670"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-671">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-671">Required.</span></span> <span data-ttu-id="6d297-672">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-672">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-673">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-673">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-674">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-674">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-675">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-676">如果数字为</span><span class="sxs-lookup"><span data-stu-id="6d297-676">If Number is</span></span>|<span data-ttu-id="6d297-677">八进制返回值</span><span class="sxs-lookup"><span data-stu-id="6d297-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-678">空</span><span class="sxs-lookup"><span data-stu-id="6d297-678">Empty</span></span>|<span data-ttu-id="6d297-679">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-679">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-680">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="6d297-680">Any other number</span></span>|<span data-ttu-id="6d297-681">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6d297-682">你可以直接通过在适当范围的数字前面表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="6d297-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6d297-683">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="6d297-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-684">此示例使用`Oct`函数以返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-685">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-685"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-686"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-686"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-687">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-687">Required.</span></span> <span data-ttu-id="6d297-688">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-688">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-689">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-689">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-690">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-690">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-691">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-692">如果数字为</span><span class="sxs-lookup"><span data-stu-id="6d297-692">If Number is</span></span>|<span data-ttu-id="6d297-693">八进制返回值</span><span class="sxs-lookup"><span data-stu-id="6d297-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-694">空</span><span class="sxs-lookup"><span data-stu-id="6d297-694">Empty</span></span>|<span data-ttu-id="6d297-695">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-695">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-696">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="6d297-696">Any other number</span></span>|<span data-ttu-id="6d297-697">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6d297-698">你可以直接通过在适当范围的数字前面表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="6d297-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6d297-699">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="6d297-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-700">此示例使用`Oct`函数以返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-701">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-701"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-702"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-702"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-703">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-703">Required.</span></span> <span data-ttu-id="6d297-704">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-704">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="6d297-705">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-705">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-706">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-706">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-707">如果`Number`尚不为整数，它正在评估之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="6d297-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="6d297-708">如果数字为</span><span class="sxs-lookup"><span data-stu-id="6d297-708">If Number is</span></span>|<span data-ttu-id="6d297-709">八进制返回值</span><span class="sxs-lookup"><span data-stu-id="6d297-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="6d297-710">空</span><span class="sxs-lookup"><span data-stu-id="6d297-710">Empty</span></span>|<span data-ttu-id="6d297-711">零 (0)</span><span class="sxs-lookup"><span data-stu-id="6d297-711">Zero (0)</span></span>|  
|<span data-ttu-id="6d297-712">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="6d297-712">Any other number</span></span>|<span data-ttu-id="6d297-713">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="6d297-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="6d297-714">你可以直接通过在适当范围的数字前面表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="6d297-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="6d297-715">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="6d297-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-716">此示例使用`Oct`函数以返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="6d297-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-717">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-717"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-718"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-718"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="6d297-719">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-719">Required.</span></span> <span data-ttu-id="6d297-720">包含任何有效的数值表达式的 <see langword="Object" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-720">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="6d297-721">返回数字的 <see langword="String" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="6d297-721">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="6d297-722">返回数字的 <see langword="String" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="6d297-722">Returns a <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-723">当数字转换为字符串时，为的符号始终保留一个前导空格`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="6d297-724">如果`Number`为正，则返回的字符串包含前导空格，并暗含加号。</span><span class="sxs-lookup"><span data-stu-id="6d297-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="6d297-725">为负数将包括减号 （-） 和没有前导空格。</span><span class="sxs-lookup"><span data-stu-id="6d297-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="6d297-726">使用`Format`函数将转换为日期、 时间或货币或其他用户定义的格式，您需要格式化的数字值。</span><span class="sxs-lookup"><span data-stu-id="6d297-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="6d297-727">与不同`Str`函数，`Format`函数不包括的符号的前导空间`Number`。</span><span class="sxs-lookup"><span data-stu-id="6d297-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d297-728">`Str`函数仅将句点识别 (`.`) 作为有效的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="6d297-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="6d297-729">如果使用不同的小数点分隔符 （例如，在国际应用程序），使用`CStr`或`Format`函数将数字转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="6d297-730">若要获取特定区域性的字符串表示形式大量，使用数字的`ToString(IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="6d297-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="6d297-731">例如，使用<xref:System.Double.ToString%2A>转换类型的值时`Double`为字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d297-732">此示例使用`Str`函数以返回`String`的数字表示形式。</span><span class="sxs-lookup"><span data-stu-id="6d297-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="6d297-733">时的正数值转换为字符串，为其符号始终保留一个前导空格。</span><span class="sxs-lookup"><span data-stu-id="6d297-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6d297-734">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="6d297-734"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="6d297-735"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="6d297-735"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6d297-736">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="6d297-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="6d297-737">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-737">Required.</span></span> <span data-ttu-id="6d297-738">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="6d297-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="6d297-739">如果 <c>Expression</c> 的类型为 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="6d297-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="6d297-740">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="6d297-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="6d297-741">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="6d297-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-742">`Val`函数停止读取它不能识别为一个数字部分的第一个字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="6d297-743">无法识别符号和通常被认为是数字值，如美元符号和逗号，一部分的字符。</span><span class="sxs-lookup"><span data-stu-id="6d297-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="6d297-744">但是，该函数可以识别的基数前缀`&O`(为八进制) 和`&H`（对于十六进制）。</span><span class="sxs-lookup"><span data-stu-id="6d297-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="6d297-745">从自变量被剥离空格、 制表符和换行字符。</span><span class="sxs-lookup"><span data-stu-id="6d297-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="6d297-746">以下调用返回的值 1615198。</span><span class="sxs-lookup"><span data-stu-id="6d297-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="6d297-747">以下调用返回的十进制值为-1。</span><span class="sxs-lookup"><span data-stu-id="6d297-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="6d297-748">`Val`函数仅将句点识别 (`.`) 作为有效的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="6d297-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="6d297-749">当使用不同的小数点分隔符时，如下所示国际应用程序，使用`CDbl`或`CInt`改为将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="6d297-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="6d297-750">若要将特定区域性的数字的字符串表示转换为数字值，使用数值类型的`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="6d297-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="6d297-751">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>时将字符串转换`Double`。</span><span class="sxs-lookup"><span data-stu-id="6d297-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d297-752"><xref:System.InvalidCastException>可能在某些少见的数字格式的响应中引发异常。</span><span class="sxs-lookup"><span data-stu-id="6d297-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="6d297-753">例如，下面的代码将引发此异常。</span><span class="sxs-lookup"><span data-stu-id="6d297-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="6d297-754">数之间的冲突格式化为`Double`和`Integer`和`Long`如果它未包含在一个字符串，将由编译器捕获到的类型字符。</span><span class="sxs-lookup"><span data-stu-id="6d297-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="6d297-755">下面的示例使用`Val`函数以返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="6d297-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="6d297-756">`Val` 在第一个字符不能解释为数字、 数字修饰符、 数值标点或空白停止转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="6d297-757"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="6d297-757"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-758"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-758"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="6d297-759">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-759">Required.</span></span> <span data-ttu-id="6d297-760">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="6d297-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="6d297-761">如果 <c>Expression</c> 的类型为 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="6d297-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="6d297-762">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="6d297-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="6d297-763">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="6d297-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-764">`Val`函数停止读取它不能识别为一个数字部分的第一个字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="6d297-765">无法识别符号和通常被认为是数字值，如美元符号和逗号，一部分的字符。</span><span class="sxs-lookup"><span data-stu-id="6d297-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="6d297-766">但是，该函数可以识别的基数前缀`&O`(为八进制) 和`&H`（对于十六进制）。</span><span class="sxs-lookup"><span data-stu-id="6d297-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="6d297-767">从参数中删除空格、 制表符和换行字符。</span><span class="sxs-lookup"><span data-stu-id="6d297-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="6d297-768">以下调用返回的值 1234123。</span><span class="sxs-lookup"><span data-stu-id="6d297-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="6d297-769">以下调用返回的十进制值为-1。</span><span class="sxs-lookup"><span data-stu-id="6d297-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="6d297-770">`Val`函数仅将句点识别 (`.`) 作为有效的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="6d297-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="6d297-771">当使用其他的小数点分隔符时，如下所示国际应用程序，使用`CDbl`或`CInt`改为将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="6d297-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="6d297-772">若要将特定区域性的数字的字符串表示转换为数字值，使用数值类型的`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="6d297-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="6d297-773">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>时将字符串转换`Double`。</span><span class="sxs-lookup"><span data-stu-id="6d297-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d297-774"><xref:System.InvalidCastException>可能在某些少见的数字格式的响应中引发异常。</span><span class="sxs-lookup"><span data-stu-id="6d297-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="6d297-775">例如，下面的代码将引发此异常。</span><span class="sxs-lookup"><span data-stu-id="6d297-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="6d297-776">数之间的冲突格式化为`Double`和`Integer`和`Long`如果冲突未包含在字符串中，将由编译器捕获到的类型字符。</span><span class="sxs-lookup"><span data-stu-id="6d297-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="6d297-777">下面的示例使用`Val`函数以返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="6d297-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="6d297-778">`Val` 在第一个字符不能解释为数字、 数字修饰符、 数值标点或空白停止转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="6d297-779"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="6d297-779"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-780"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-780"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="6d297-781">必须的。</span><span class="sxs-lookup"><span data-stu-id="6d297-781">Required.</span></span> <span data-ttu-id="6d297-782">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="6d297-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="6d297-783">如果 <c>Expression</c> 的类型为 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="6d297-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="6d297-784">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="6d297-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="6d297-785">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="6d297-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d297-786">`Val`函数停止读取它不能识别为一个数字部分的第一个字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="6d297-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="6d297-787">无法识别符号和通常被认为是数字值，如美元符号和逗号，一部分的字符。</span><span class="sxs-lookup"><span data-stu-id="6d297-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="6d297-788">但是，该函数可以识别的基数前缀`&O`(为八进制) 和`&H`（对于十六进制）。</span><span class="sxs-lookup"><span data-stu-id="6d297-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="6d297-789">从参数中删除空格、 制表符和换行字符。</span><span class="sxs-lookup"><span data-stu-id="6d297-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="6d297-790">以下调用返回的值 1234123。</span><span class="sxs-lookup"><span data-stu-id="6d297-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="6d297-791">以下调用返回的十进制值为-1。</span><span class="sxs-lookup"><span data-stu-id="6d297-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="6d297-792">`Val`函数仅将句点识别 (`.`) 作为有效的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="6d297-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="6d297-793">当使用其他的小数点分隔符时，如下所示国际应用程序，使用`CDbl`或`CInt`改为将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="6d297-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="6d297-794">若要将特定区域性的数字的字符串表示转换为数字值，使用数值类型的`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="6d297-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="6d297-795">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>时将字符串转换`Double`。</span><span class="sxs-lookup"><span data-stu-id="6d297-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d297-796"><xref:System.InvalidCastException>可能在某些少见的数字格式的响应中引发异常。</span><span class="sxs-lookup"><span data-stu-id="6d297-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="6d297-797">例如，下面的代码将引发此异常。</span><span class="sxs-lookup"><span data-stu-id="6d297-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="6d297-798">数之间的冲突格式化为`Double`和`Integer`和`Long`如果冲突未包含在字符串中，将由编译器捕获到的类型字符。</span><span class="sxs-lookup"><span data-stu-id="6d297-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="6d297-799">下面的示例使用`Val`函数以返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="6d297-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="6d297-800">`Val` 在第一个字符不能解释为数字、 数字修饰符、 数值标点或空白停止转换。</span><span class="sxs-lookup"><span data-stu-id="6d297-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="6d297-801"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="6d297-801"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d297-802"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span><span class="sxs-lookup"><span data-stu-id="6d297-802"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>