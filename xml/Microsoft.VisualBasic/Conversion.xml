<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cc0120340cfb097270b9032d2692b053057366ea" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52242778" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="63ea3-101">
        <see langword="Conversion" /> 模块包含用于执行各种转换操作的过程。</span>
      <span class="sxs-lookup">
        <span data-stu-id="63ea3-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-102">此模块支持的 Visual Basic 语言关键字和运行时库成员将十进制数字转换为其他基数的数字与字符串、 字符串转换为数字和一个数据类型到另一个。</span><span class="sxs-lookup"><span data-stu-id="63ea3-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-103">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
      <span data-ttu-id="63ea3-104">转换摘要</span>
      <span class="sxs-lookup">
        <span data-stu-id="63ea3-104">Conversion Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="63ea3-105">关键字 (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="63ea3-105">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="63ea3-106">Visual Basic 运行时库成员</span>
      <span class="sxs-lookup">
        <span data-stu-id="63ea3-106">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="63ea3-107">要转换的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-107">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="63ea3-108">该对象要转换为的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-108">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-109">将对象转换为指定类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-109">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-110">一个对象，其类型在运行时为请求的目标类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-110">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-111">`CTypeDynamic`方法将转换为传递的对象`Expression`参数指定的类型`TargetType`参数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="63ea3-112">如果对象是一个动态对象，`CTypeDynamic`方法应用可用的动态转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="63ea3-113">`CTypeDynamic`方法适用于动态转换根据对象本身定义的转换语义。</span><span class="sxs-lookup"><span data-stu-id="63ea3-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="63ea3-114">如果动态对象继承自<xref:System.Dynamic.DynamicObject>，则`CTypeDynamic`方法首先尝试使用用户定义的静态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="63ea3-115">如果用户定义的静态转换失败，`CTypeDynamic`方法尝试通过使用动态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="63ea3-116">如果动态对象实现<xref:System.Dynamic.IDynamicMetaObjectProvider>，则`CTypeDynamic`方法使优先级动态转换到能够对用户定义的静态转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-117">下面的示例使用`CTypeDynamic`方法以使用动态对象所定义的转换将动态对象转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="63ea3-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="63ea3-118">使用动态对象 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-118">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="63ea3-119">演练：创建和使用动态对象（C# 和 Visual Basic）</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="63ea3-120">该对象要转换为的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-120">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="63ea3-121">要转换的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-121">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-122">将对象转换为指定的泛型类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-122">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-123">静态类型化为请求的泛型类型的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-123">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-124">`CTypeDynamic`方法将作为传递的对象转换`Expression`参数指定的泛型参数类型的类型。</span><span class="sxs-lookup"><span data-stu-id="63ea3-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="63ea3-125">如果对象是一个动态对象，`CTypeDynamic`方法应用可用的动态转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="63ea3-126">`CTypeDynamic`方法适用于动态转换根据对象本身定义的转换语义。</span><span class="sxs-lookup"><span data-stu-id="63ea3-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="63ea3-127">如果动态对象继承自<xref:System.Dynamic.DynamicObject>，则`CTypeDynamic`方法首先尝试使用用户定义的静态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="63ea3-128">如果用户定义的静态转换失败，`CTypeDynamic`方法尝试通过使用动态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="63ea3-129">如果动态对象实现<xref:System.Dynamic.IDynamicMetaObjectProvider>，则`CTypeDynamic`方法使优先级动态转换到能够对用户定义的静态转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-130">下面的示例使用`CTypeDynamic`方法以使用动态对象所定义的转换将动态对象转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="63ea3-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="63ea3-131">使用动态对象 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-131">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="63ea3-132">演练：创建和使用动态对象（C# 和 Visual Basic）</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="63ea3-133">返回与给定的错误号对应的错误信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-133">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="63ea3-134">返回与给定的错误号对应的错误信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-134">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-135">对应于最新运行时错误的错误消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-135">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-136">`ErrorToString`函数将检查的属性设置`Err`对象来标识最新的运行时错误。</span><span class="sxs-lookup"><span data-stu-id="63ea3-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="63ea3-137">返回值`ErrorToString`函数对应于`Description`属性的`Err`对象。</span><span class="sxs-lookup"><span data-stu-id="63ea3-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="63ea3-138">如果没有运行时错误，`ErrorToString`返回一个零长度字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="63ea3-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="63ea3-139">提供此功能已在 Visual Basic 6.0 及更早版本中，`Error`函数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-140">下面的代码使用`ErrorToString`函数以显示与指定的错误号相对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="63ea3-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-141">
            <paramref name="ErrorNumber" /> 超出范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-141">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="63ea3-142">可选。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-142">Optional.</span>
          </span>
          <span data-ttu-id="63ea3-143">任何有效的错误号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-143">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-144">返回与给定的错误号对应的错误信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-144">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-145">与给定错误号对应的错误消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-145">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-146">`ErrorToString`函数将检查的属性设置`Err`对象来标识最新的运行时错误。</span><span class="sxs-lookup"><span data-stu-id="63ea3-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="63ea3-147">返回值`ErrorToString`函数对应于`Description`属性的`Err`对象。</span><span class="sxs-lookup"><span data-stu-id="63ea3-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="63ea3-148">如果`ErrorNumber`是有效的错误号，但未定义，则`ErrorToString`返回的字符串`"Application-defined or object-defined error."`如果`ErrorNumber`无效，出现错误。</span><span class="sxs-lookup"><span data-stu-id="63ea3-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="63ea3-149">如果`ErrorNumber`省略，则对应于最新的消息返回运行时错误。</span><span class="sxs-lookup"><span data-stu-id="63ea3-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="63ea3-150">如果没有运行时错误或`ErrorNumber`为 0，`ErrorToString`返回一个零长度字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="63ea3-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="63ea3-151">提供此功能已在 Visual Basic 6.0 及更早版本中，`Error`函数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-152">下面的代码使用`ErrorToString`函数以显示与指定的错误号相对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="63ea3-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-153">
            <paramref name="ErrorNumber" /> 超出范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-153">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="63ea3-154">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-154">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-155">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-155">Required.</span>
          </span>
          <span data-ttu-id="63ea3-156">
            <see langword="Double" /> 类型的数字或任何有效的数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-156">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="63ea3-157">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-157">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-158">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-158">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-159">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-159">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-160">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-160">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="63ea3-161">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-161">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="63ea3-162">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="63ea3-162">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="63ea3-163">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="63ea3-163">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-164">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-164">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="63ea3-165">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-165">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="63ea3-166">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="63ea3-166">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="63ea3-167">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-167">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="63ea3-168">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-168">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="63ea3-169">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-169">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="63ea3-170">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-170">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="63ea3-171">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-171">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="63ea3-172">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="63ea3-172">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-173">Number 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-173">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-174">Number 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-174">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-175">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-175">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="63ea3-176">数据类型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-176">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="63ea3-177">数学摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-177">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="63ea3-178">数学函数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-178">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-179">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-179">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-180">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-180">Required.</span>
          </span>
          <span data-ttu-id="63ea3-181">
            <see langword="Double" /> 类型的数字或任何有效的数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-181">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="63ea3-182">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-182">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-183">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-183">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-184">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-184">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-185">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-185">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="63ea3-186">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-186">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="63ea3-187">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="63ea3-187">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="63ea3-188">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="63ea3-188">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-189">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-189">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="63ea3-190">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-190">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="63ea3-191">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="63ea3-191">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="63ea3-192">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-192">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="63ea3-193">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-193">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="63ea3-194">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-194">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="63ea3-195">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-195">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="63ea3-196">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-196">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="63ea3-197">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="63ea3-197">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-198">Number 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-198">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-199">Number 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-199">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-200">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-200">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="63ea3-201">数据类型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-201">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="63ea3-202">数学摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-202">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="63ea3-203">数学函数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-203">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-204">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-204">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-205">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-205">Required.</span>
          </span>
          <span data-ttu-id="63ea3-206">
            <see langword="Double" /> 类型的数字或任何有效的数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-206">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="63ea3-207">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-207">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-208">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-208">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-209">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-209">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-210">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="63ea3-211">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="63ea3-212">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="63ea3-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="63ea3-213">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="63ea3-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-214">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="63ea3-215">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="63ea3-216">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="63ea3-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="63ea3-217">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="63ea3-218">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="63ea3-219">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="63ea3-220">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="63ea3-221">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="63ea3-222">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="63ea3-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-223">Number 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-223">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-224">Number 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-224">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-225">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-225">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="63ea3-226">数据类型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-226">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="63ea3-227">数学摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-227">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="63ea3-228">数学函数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-228">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-229">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-229">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-230">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-230">Required.</span>
          </span>
          <span data-ttu-id="63ea3-231">
            <see langword="Double" /> 类型的数字或任何有效的数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-231">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="63ea3-232">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-232">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-233">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-233">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-234">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-234">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-235">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-235">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="63ea3-236">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-236">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="63ea3-237">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="63ea3-237">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="63ea3-238">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="63ea3-238">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-239">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-239">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="63ea3-240">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-240">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="63ea3-241">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="63ea3-241">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="63ea3-242">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-242">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="63ea3-243">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-243">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="63ea3-244">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="63ea3-245">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-245">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="63ea3-246">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-246">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="63ea3-247">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="63ea3-247">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-248">Number 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-248">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-249">Number 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-249">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-250">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-250">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="63ea3-251">数据类型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-251">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="63ea3-252">数学摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-252">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="63ea3-253">数学函数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-253">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-254">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-254">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-255">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-255">Required.</span>
          </span>
          <span data-ttu-id="63ea3-256">
            <see langword="Double" /> 类型的数字或任何有效的数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-256">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="63ea3-257">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-257">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-258">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-258">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-259">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-259">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-260">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-260">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="63ea3-261">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-261">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="63ea3-262">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="63ea3-262">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="63ea3-263">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="63ea3-263">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-264">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-264">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="63ea3-265">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-265">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="63ea3-266">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="63ea3-266">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="63ea3-267">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-267">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="63ea3-268">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-268">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="63ea3-269">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="63ea3-270">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-270">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="63ea3-271">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-271">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="63ea3-272">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="63ea3-272">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-273">Number 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-273">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-274">Number 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-274">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-275">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-275">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="63ea3-276">数据类型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-276">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="63ea3-277">数学摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-277">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="63ea3-278">数学函数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-278">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-279">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-279">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-280">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-280">Required.</span>
          </span>
          <span data-ttu-id="63ea3-281">
            <see langword="Double" /> 类型的数字或任何有效的数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-281">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="63ea3-282">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-282">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-283">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-283">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-284">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-284">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-285">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-285">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="63ea3-286">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-286">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="63ea3-287">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="63ea3-287">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="63ea3-288">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="63ea3-288">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-289">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-289">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="63ea3-290">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-290">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="63ea3-291">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="63ea3-291">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="63ea3-292">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-292">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="63ea3-293">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-293">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="63ea3-294">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-294">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="63ea3-295">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-295">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="63ea3-296">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-296">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="63ea3-297">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="63ea3-297">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-298">Number 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-298">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-299">Number 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-299">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-300">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-300">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="63ea3-301">数据类型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-301">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="63ea3-302">数学摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-302">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="63ea3-303">数学函数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-303">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-304">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-304">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-305">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-305">Required.</span>
          </span>
          <span data-ttu-id="63ea3-306">
            <see langword="Double" /> 类型的数字或任何有效的数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-306">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="63ea3-307">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-307">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-308">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-308">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-309">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-309">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-310">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="63ea3-311">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="63ea3-312">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="63ea3-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="63ea3-313">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="63ea3-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-314">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-314">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="63ea3-315">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-315">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="63ea3-316">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="63ea3-316">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="63ea3-317">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-317">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="63ea3-318">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-318">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="63ea3-319">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-319">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="63ea3-320">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-320">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="63ea3-321">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-321">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="63ea3-322">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="63ea3-322">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-323">Number 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-323">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-324">Number 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-324">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-325">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-325">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="63ea3-326">数据类型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-326">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="63ea3-327">数学摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-327">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="63ea3-328">数学函数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-328">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-329">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-329">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="63ea3-330">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-330">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-331">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-331">Required.</span>
          </span>
          <span data-ttu-id="63ea3-332">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-332">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-333">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-333">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-334">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-334">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-335">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-335">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-336">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="63ea3-336">If `Number` is</span></span>|<span data-ttu-id="63ea3-337">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-337">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-338">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-338">Empty</span></span>|<span data-ttu-id="63ea3-339">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-339">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-340">任何数值</span><span class="sxs-lookup"><span data-stu-id="63ea3-340">Any numeric value</span></span>|<span data-ttu-id="63ea3-341">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-341">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="63ea3-342">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-342">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="63ea3-343">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="63ea3-343">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-344">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-344">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-345">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-345">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-346">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-346">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-347">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-347">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="63ea3-348">如何：将十六进制字符串转换为数字</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-348">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-349">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-349">Required.</span>
          </span>
          <span data-ttu-id="63ea3-350">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-350">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-351">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-351">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-352">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-352">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-353">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-353">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-354">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="63ea3-354">If `Number` is</span></span>|<span data-ttu-id="63ea3-355">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-355">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-356">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-356">Empty</span></span>|<span data-ttu-id="63ea3-357">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-357">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-358">任何数值</span><span class="sxs-lookup"><span data-stu-id="63ea3-358">Any numeric value</span></span>|<span data-ttu-id="63ea3-359">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-359">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="63ea3-360">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-360">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="63ea3-361">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="63ea3-361">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-362">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-362">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-363">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-363">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-364">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-364">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-365">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-365">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="63ea3-366">如何：将十六进制字符串转换为数字</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-366">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-367">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-367">Required.</span>
          </span>
          <span data-ttu-id="63ea3-368">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-368">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-369">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-369">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-370">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-370">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-371">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-371">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-372">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="63ea3-372">If `Number` is</span></span>|<span data-ttu-id="63ea3-373">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-373">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-374">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-374">Empty</span></span>|<span data-ttu-id="63ea3-375">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-375">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-376">任何数值</span><span class="sxs-lookup"><span data-stu-id="63ea3-376">Any numeric value</span></span>|<span data-ttu-id="63ea3-377">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-377">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="63ea3-378">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-378">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="63ea3-379">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="63ea3-379">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-380">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-380">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-381">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-381">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-382">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-382">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-383">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-383">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="63ea3-384">如何：将十六进制字符串转换为数字</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-384">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-385">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-385">Required.</span>
          </span>
          <span data-ttu-id="63ea3-386">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-387">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-388">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-389">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-390">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="63ea3-390">If `Number` is</span></span>|<span data-ttu-id="63ea3-391">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-392">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-392">Empty</span></span>|<span data-ttu-id="63ea3-393">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-393">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-394">任何数值</span><span class="sxs-lookup"><span data-stu-id="63ea3-394">Any numeric value</span></span>|<span data-ttu-id="63ea3-395">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="63ea3-396">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="63ea3-397">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="63ea3-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-398">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-399">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-400">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-401">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-401">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="63ea3-402">如何：将十六进制字符串转换为数字</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-402">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-403">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-403">Required.</span>
          </span>
          <span data-ttu-id="63ea3-404">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-404">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-405">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-405">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-406">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-406">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-407">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-407">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-408">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="63ea3-408">If `Number` is</span></span>|<span data-ttu-id="63ea3-409">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-409">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-410">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-410">Empty</span></span>|<span data-ttu-id="63ea3-411">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-411">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-412">任何数值</span><span class="sxs-lookup"><span data-stu-id="63ea3-412">Any numeric value</span></span>|<span data-ttu-id="63ea3-413">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-413">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="63ea3-414">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-414">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="63ea3-415">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="63ea3-415">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-416">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-416">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-417">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-417">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-418">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-418">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-419">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-419">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="63ea3-420">如何：将十六进制字符串转换为数字</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-420">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-421">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-421">Required.</span>
          </span>
          <span data-ttu-id="63ea3-422">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-422">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-423">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-423">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-424">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-424">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-425">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-425">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-426">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="63ea3-426">If `Number` is</span></span>|<span data-ttu-id="63ea3-427">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-427">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-428">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-428">Empty</span></span>|<span data-ttu-id="63ea3-429">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-429">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-430">任何数值</span><span class="sxs-lookup"><span data-stu-id="63ea3-430">Any numeric value</span></span>|<span data-ttu-id="63ea3-431">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-431">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="63ea3-432">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-432">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="63ea3-433">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="63ea3-433">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-434">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-434">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-435">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-435">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-436">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-436">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-437">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-437">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="63ea3-438">如何：将十六进制字符串转换为数字</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-438">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-439">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-439">Required.</span>
          </span>
          <span data-ttu-id="63ea3-440">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-440">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-441">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-441">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-442">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-442">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-443">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-443">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-444">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="63ea3-444">If `Number` is</span></span>|<span data-ttu-id="63ea3-445">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-445">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-446">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-446">Empty</span></span>|<span data-ttu-id="63ea3-447">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-447">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-448">任何数值</span><span class="sxs-lookup"><span data-stu-id="63ea3-448">Any numeric value</span></span>|<span data-ttu-id="63ea3-449">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-449">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="63ea3-450">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-450">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="63ea3-451">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="63ea3-451">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-452">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-452">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-453">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-453">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-454">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-454">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-455">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-455">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="63ea3-456">如何：将十六进制字符串转换为数字</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-456">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-457">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-457">Required.</span>
          </span>
          <span data-ttu-id="63ea3-458">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-458">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-459">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-459">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-460">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-460">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-461">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-461">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-462">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="63ea3-462">If `Number` is</span></span>|<span data-ttu-id="63ea3-463">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-463">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-464">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-464">Empty</span></span>|<span data-ttu-id="63ea3-465">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-465">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-466">任何数值</span><span class="sxs-lookup"><span data-stu-id="63ea3-466">Any numeric value</span></span>|<span data-ttu-id="63ea3-467">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-467">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="63ea3-468">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-468">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="63ea3-469">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="63ea3-469">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-470">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-470">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-471">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-471">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-472">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-472">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-473">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-473">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="63ea3-474">如何：将十六进制字符串转换为数字</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-474">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-475">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-475">Required.</span>
          </span>
          <span data-ttu-id="63ea3-476">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-476">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-477">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-477">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-478">返回表示数字的十六进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-478">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-479">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-479">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-480">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="63ea3-480">If `Number` is</span></span>|<span data-ttu-id="63ea3-481">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-481">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-482">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-482">Empty</span></span>|<span data-ttu-id="63ea3-483">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-483">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-484">任何数值</span><span class="sxs-lookup"><span data-stu-id="63ea3-484">Any numeric value</span></span>|<span data-ttu-id="63ea3-485">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-485">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="63ea3-486">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-486">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="63ea3-487">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="63ea3-487">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-488">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-488">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-489">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-489">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-490">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-490">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-491">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-491">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="63ea3-492">如何：将十六进制字符串转换为数字</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-492">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="63ea3-493">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-493">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-494">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-494">Required.</span>
          </span>
          <span data-ttu-id="63ea3-495">
            <see langword="Double" /> 类型的数字或任何有效的数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="63ea3-496">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-496">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-497">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-498">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-499">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="63ea3-500">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="63ea3-501">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="63ea3-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="63ea3-502">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="63ea3-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-503">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="63ea3-504">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="63ea3-505">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="63ea3-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="63ea3-506">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="63ea3-507">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="63ea3-508">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="63ea3-509">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="63ea3-510">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="63ea3-511">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="63ea3-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-512">Number 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-513">Number 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-514">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-514">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="63ea3-515">数据类型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-515">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="63ea3-516">数学摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-516">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="63ea3-517">数学函数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-517">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-518">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-518">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-519">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-519">Required.</span>
          </span>
          <span data-ttu-id="63ea3-520">
            <see langword="Double" /> 类型的数字或任何有效的数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-520">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="63ea3-521">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-521">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-522">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-522">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-523">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-523">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-524">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-524">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="63ea3-525">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-525">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="63ea3-526">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="63ea3-526">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="63ea3-527">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="63ea3-527">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-528">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-528">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="63ea3-529">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-529">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="63ea3-530">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="63ea3-530">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="63ea3-531">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-531">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="63ea3-532">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-532">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="63ea3-533">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-533">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="63ea3-534">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-534">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="63ea3-535">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-535">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="63ea3-536">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="63ea3-536">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-537">Number 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-537">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-538">Number 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-538">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-539">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-539">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="63ea3-540">数据类型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-540">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="63ea3-541">数学摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-541">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="63ea3-542">数学函数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-542">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-543">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-543">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-544">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-544">Required.</span>
          </span>
          <span data-ttu-id="63ea3-545">
            <see langword="Double" /> 类型的数字或任何有效的数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-545">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="63ea3-546">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-546">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-547">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-547">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-548">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-548">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-549">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-549">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="63ea3-550">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-550">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="63ea3-551">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="63ea3-551">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="63ea3-552">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="63ea3-552">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-553">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-553">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="63ea3-554">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-554">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="63ea3-555">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="63ea3-555">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="63ea3-556">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-556">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="63ea3-557">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-557">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="63ea3-558">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-558">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="63ea3-559">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-559">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="63ea3-560">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-560">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="63ea3-561">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="63ea3-561">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-562">Number 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-562">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-563">Number 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-563">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-564">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-564">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="63ea3-565">数据类型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-565">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="63ea3-566">数学摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-566">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="63ea3-567">数学函数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-567">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-568">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-568">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-569">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-569">Required.</span>
          </span>
          <span data-ttu-id="63ea3-570">
            <see langword="Double" /> 类型的数字或任何有效的数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-570">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="63ea3-571">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-571">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-572">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-572">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-573">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-573">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-574">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-574">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="63ea3-575">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-575">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="63ea3-576">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="63ea3-576">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="63ea3-577">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="63ea3-577">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-578">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-578">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="63ea3-579">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-579">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="63ea3-580">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="63ea3-580">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="63ea3-581">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-581">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="63ea3-582">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-582">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="63ea3-583">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-583">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="63ea3-584">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-584">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="63ea3-585">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="63ea3-586">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="63ea3-586">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-587">Number 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-587">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-588">Number 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-588">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-589">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-589">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="63ea3-590">数据类型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-590">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="63ea3-591">数学摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-591">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="63ea3-592">数学函数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-592">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-593">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-593">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-594">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-594">Required.</span>
          </span>
          <span data-ttu-id="63ea3-595">
            <see langword="Double" /> 类型的数字或任何有效的数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-595">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="63ea3-596">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-596">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-597">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-597">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-598">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-598">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-599">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-599">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="63ea3-600">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-600">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="63ea3-601">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="63ea3-601">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="63ea3-602">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="63ea3-602">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-603">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-603">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="63ea3-604">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-604">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="63ea3-605">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="63ea3-605">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="63ea3-606">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-606">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="63ea3-607">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-607">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="63ea3-608">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-608">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="63ea3-609">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-609">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="63ea3-610">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-610">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="63ea3-611">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="63ea3-611">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-612">Number 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-612">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-613">Number 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-613">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-614">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-614">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="63ea3-615">数据类型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-615">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="63ea3-616">数学摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-616">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="63ea3-617">数学函数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-617">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-618">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-618">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-619">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-619">Required.</span>
          </span>
          <span data-ttu-id="63ea3-620">
            <see langword="Double" /> 类型的数字或任何有效的数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-620">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="63ea3-621">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-621">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-622">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-622">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-623">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-623">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-624">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-624">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="63ea3-625">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-625">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="63ea3-626">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="63ea3-626">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="63ea3-627">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="63ea3-627">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-628">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-628">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="63ea3-629">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-629">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="63ea3-630">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="63ea3-630">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="63ea3-631">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-631">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="63ea3-632">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-632">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="63ea3-633">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-633">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="63ea3-634">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-634">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="63ea3-635">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-635">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="63ea3-636">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="63ea3-636">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-637">Number 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-637">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-638">Number 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-638">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-639">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-639">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="63ea3-640">数据类型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-640">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="63ea3-641">数学摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-641">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="63ea3-642">数学函数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-642">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-643">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-643">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-644">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-644">Required.</span>
          </span>
          <span data-ttu-id="63ea3-645">
            <see langword="Double" /> 类型的数字或任何有效的数值表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-645">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="63ea3-646">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-646">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-647">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-647">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-648">返回数字的整数部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-648">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-649">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-649">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="63ea3-650">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-650">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="63ea3-651">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="63ea3-651">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="63ea3-652">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="63ea3-652">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-653">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-653">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="63ea3-654">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-654">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="63ea3-655">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="63ea3-655">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="63ea3-656">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-656">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="63ea3-657">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="63ea3-657">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="63ea3-658">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-658">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="63ea3-659">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-659">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="63ea3-660">例如:</span><span class="sxs-lookup"><span data-stu-id="63ea3-660">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="63ea3-661">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="63ea3-661">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-662">Number 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-662">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-663">Number 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-663">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-664">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-664">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="63ea3-665">数据类型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-665">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="63ea3-666">数学摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-666">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="63ea3-667">数学函数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-667">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-668">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-668">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="63ea3-669">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-669">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-670">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-670">Required.</span>
          </span>
          <span data-ttu-id="63ea3-671">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-671">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-672">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-672">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-673">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-673">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-674">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-674">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-675">如果数字为</span><span class="sxs-lookup"><span data-stu-id="63ea3-675">If Number is</span></span>|<span data-ttu-id="63ea3-676">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-676">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-677">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-677">Empty</span></span>|<span data-ttu-id="63ea3-678">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-678">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-679">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="63ea3-679">Any other number</span></span>|<span data-ttu-id="63ea3-680">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-680">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="63ea3-681">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-681">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="63ea3-682">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="63ea3-682">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-683">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-683">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-684">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-684">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-685">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-685">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-686">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-686">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-687">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-687">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-688">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-688">Required.</span>
          </span>
          <span data-ttu-id="63ea3-689">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-689">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-690">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-690">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-691">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-691">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-692">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-692">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-693">如果数字为</span><span class="sxs-lookup"><span data-stu-id="63ea3-693">If Number is</span></span>|<span data-ttu-id="63ea3-694">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-694">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-695">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-695">Empty</span></span>|<span data-ttu-id="63ea3-696">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-696">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-697">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="63ea3-697">Any other number</span></span>|<span data-ttu-id="63ea3-698">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-698">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="63ea3-699">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-699">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="63ea3-700">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="63ea3-700">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-701">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-701">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-702">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-702">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-703">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-703">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-704">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-704">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-705">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-705">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-706">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-706">Required.</span>
          </span>
          <span data-ttu-id="63ea3-707">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-707">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-708">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-708">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-709">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-709">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-710">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-710">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-711">如果数字为</span><span class="sxs-lookup"><span data-stu-id="63ea3-711">If Number is</span></span>|<span data-ttu-id="63ea3-712">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-712">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-713">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-713">Empty</span></span>|<span data-ttu-id="63ea3-714">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-714">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-715">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="63ea3-715">Any other number</span></span>|<span data-ttu-id="63ea3-716">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-716">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="63ea3-717">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-717">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="63ea3-718">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="63ea3-718">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-719">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-719">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-720">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-720">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-721">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-721">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-722">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-722">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-723">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-723">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-724">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-724">Required.</span>
          </span>
          <span data-ttu-id="63ea3-725">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-725">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-726">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-726">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-727">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-727">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-728">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-728">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-729">如果数字为</span><span class="sxs-lookup"><span data-stu-id="63ea3-729">If Number is</span></span>|<span data-ttu-id="63ea3-730">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-730">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-731">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-731">Empty</span></span>|<span data-ttu-id="63ea3-732">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-732">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-733">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="63ea3-733">Any other number</span></span>|<span data-ttu-id="63ea3-734">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-734">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="63ea3-735">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-735">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="63ea3-736">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="63ea3-736">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-737">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-737">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-738">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-738">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-739">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-739">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-740">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-740">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-741">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-741">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-742">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-742">Required.</span>
          </span>
          <span data-ttu-id="63ea3-743">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-743">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-744">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-744">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-745">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-745">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-746">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-746">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-747">如果数字为</span><span class="sxs-lookup"><span data-stu-id="63ea3-747">If Number is</span></span>|<span data-ttu-id="63ea3-748">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-748">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-749">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-749">Empty</span></span>|<span data-ttu-id="63ea3-750">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-750">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-751">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="63ea3-751">Any other number</span></span>|<span data-ttu-id="63ea3-752">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-752">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="63ea3-753">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-753">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="63ea3-754">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="63ea3-754">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-755">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-755">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-756">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-756">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-757">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-757">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-758">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-758">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-759">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-759">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-760">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-760">Required.</span>
          </span>
          <span data-ttu-id="63ea3-761">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-761">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-762">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-762">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-763">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-763">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-764">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-764">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-765">如果数字为</span><span class="sxs-lookup"><span data-stu-id="63ea3-765">If Number is</span></span>|<span data-ttu-id="63ea3-766">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-766">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-767">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-767">Empty</span></span>|<span data-ttu-id="63ea3-768">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-768">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-769">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="63ea3-769">Any other number</span></span>|<span data-ttu-id="63ea3-770">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-770">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="63ea3-771">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-771">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="63ea3-772">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="63ea3-772">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-773">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-773">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-774">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-774">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-775">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-775">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-776">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-776">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-777">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-777">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-778">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-778">Required.</span>
          </span>
          <span data-ttu-id="63ea3-779">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-779">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-780">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-780">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-781">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-781">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-782">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-782">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-783">如果数字为</span><span class="sxs-lookup"><span data-stu-id="63ea3-783">If Number is</span></span>|<span data-ttu-id="63ea3-784">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-784">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-785">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-785">Empty</span></span>|<span data-ttu-id="63ea3-786">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-786">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-787">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="63ea3-787">Any other number</span></span>|<span data-ttu-id="63ea3-788">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-788">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="63ea3-789">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-789">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="63ea3-790">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="63ea3-790">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-791">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-791">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-792">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-792">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-793">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-793">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-794">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-794">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-795">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-795">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-796">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-796">Required.</span>
          </span>
          <span data-ttu-id="63ea3-797">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-797">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-798">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-798">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-799">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-799">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-800">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-800">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-801">如果数字为</span><span class="sxs-lookup"><span data-stu-id="63ea3-801">If Number is</span></span>|<span data-ttu-id="63ea3-802">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-802">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-803">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-803">Empty</span></span>|<span data-ttu-id="63ea3-804">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-804">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-805">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="63ea3-805">Any other number</span></span>|<span data-ttu-id="63ea3-806">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-806">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="63ea3-807">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-807">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="63ea3-808">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="63ea3-808">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-809">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-809">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-810">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-810">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-811">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-811">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-812">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-812">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-813">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-813">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-814">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-814">Required.</span>
          </span>
          <span data-ttu-id="63ea3-815">任何有效的数值表达式或 <see langword="String" /> 表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-815">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-816">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-816">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-817">返回表示某数八进制值的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-817">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-818">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-818">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="63ea3-819">如果数字为</span><span class="sxs-lookup"><span data-stu-id="63ea3-819">If Number is</span></span>|<span data-ttu-id="63ea3-820">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="63ea3-820">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="63ea3-821">空</span><span class="sxs-lookup"><span data-stu-id="63ea3-821">Empty</span></span>|<span data-ttu-id="63ea3-822">零 (0)</span><span class="sxs-lookup"><span data-stu-id="63ea3-822">Zero (0)</span></span>|  
|<span data-ttu-id="63ea3-823">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="63ea3-823">Any other number</span></span>|<span data-ttu-id="63ea3-824">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="63ea3-824">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="63ea3-825">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-825">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="63ea3-826">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="63ea3-826">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-827">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-827">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-828">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-828">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-829">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-829">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-830">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-830">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-831">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-831">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="63ea3-832">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-832">Required.</span>
          </span>
          <span data-ttu-id="63ea3-833">包含任何有效的数值表达式的 <see langword="Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-833">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-834">返回数字的 <see langword="String" /> 表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-834">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-835">返回数字的 <see langword="String" /> 表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-835">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-836">将数字转换为字符串时, 的符号始终保留一个前导空格`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-836">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="63ea3-837">如果`Number`为正，则返回的字符串包含前导空格和符号为正。</span><span class="sxs-lookup"><span data-stu-id="63ea3-837">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="63ea3-838">减号 （-） 和没有前导空格，将包括一个负数。</span><span class="sxs-lookup"><span data-stu-id="63ea3-838">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="63ea3-839">使用`Format`函数将转换为日期、 时间、 货币或以其他用户定义的格式，您需要格式化的数字值。</span><span class="sxs-lookup"><span data-stu-id="63ea3-839">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="63ea3-840">与不同`Str`函数，`Format`函数不包括前导空格的表示符号`Number`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-840">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="63ea3-841">`Str`函数可以识别只将句点 (`.`) 作为有效的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="63ea3-841">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="63ea3-842">如果使用不同的小数点分隔符 （例如，在国际应用程序），使用`CStr`或`Format`函数将数字转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="63ea3-842">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="63ea3-843">若要获取特定区域性中的数字的字符串表示形式，请使用数字的`ToString(IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="63ea3-843">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="63ea3-844">例如，使用<xref:System.Double.ToString%2A>类型的值转换时`Double`为字符串。</span><span class="sxs-lookup"><span data-stu-id="63ea3-844">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-845">此示例使用`Str`函数返回`String`的数字表示形式。</span><span class="sxs-lookup"><span data-stu-id="63ea3-845">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="63ea3-846">时的正数值转换为字符串，为其符号始终保留一个前导空格。</span><span class="sxs-lookup"><span data-stu-id="63ea3-846">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63ea3-847">未指定 <paramref name="Number" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-847">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="63ea3-848">
            <paramref name="Number" /> 不是 Numeric 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-848">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="63ea3-849">转换摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-849">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-850">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-850">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="63ea3-851">将字符串中包含的数字作为适当类型的数值返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-851">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="63ea3-852">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-852">Required.</span>
          </span>
          <span data-ttu-id="63ea3-853">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-853">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="63ea3-854">如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-854">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-855">将字符串中包含的数字作为适当类型的数值返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-855">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-856">将字符串中包含的数字作为适当类型的数值返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-856">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-857">`Val`函数停止读取处不能将其识别为数字一部分的第一个字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="63ea3-857">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="63ea3-858">无法识别符号和通常被认为是数值，如美元符号和逗号，一部分的字符。</span><span class="sxs-lookup"><span data-stu-id="63ea3-858">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="63ea3-859">但是，该函数可以识别基数前缀`&O`(为八进制) 和`&H`（对于十六进制格式）。</span><span class="sxs-lookup"><span data-stu-id="63ea3-859">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="63ea3-860">从参数中去除空格、 制表符和换行字符。</span><span class="sxs-lookup"><span data-stu-id="63ea3-860">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="63ea3-861">以下调用返回值 1615198。</span><span class="sxs-lookup"><span data-stu-id="63ea3-861">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="63ea3-862">以下调用返回的十进制值为-1。</span><span class="sxs-lookup"><span data-stu-id="63ea3-862">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="63ea3-863">`Val`函数可以识别只将句点 (`.`) 作为有效的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="63ea3-863">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="63ea3-864">当使用不同的小数点分隔符时，国际应用程序，如使用`CDbl`或`CInt`改为将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="63ea3-864">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="63ea3-865">若要将特定区域性的数字的字符串表示形式转换为数字值，请使用数值类型的`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="63ea3-865">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="63ea3-866">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>转换为字符串时`Double`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-866">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="63ea3-867"><xref:System.InvalidCastException>可能在某些不常见的数字格式的响应中引发异常。</span><span class="sxs-lookup"><span data-stu-id="63ea3-867">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="63ea3-868">例如，下面的代码引发此异常。</span><span class="sxs-lookup"><span data-stu-id="63ea3-868">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="63ea3-869">格式为数之间的冲突`Double`和`Integer`和`Long`编译器会发现类型字符，如果它未包含在一个字符串。</span><span class="sxs-lookup"><span data-stu-id="63ea3-869">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-870">下面的示例使用`Val`函数以返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="63ea3-870">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="63ea3-871">`Val` 在不能解释为数字、 数值修饰符、 数值标点或空白的第一个字符停止转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-871">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="63ea3-872">
            <paramref name="InputStr" /> 太大。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-872">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-873">
            <paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-873">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-874">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-874">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="63ea3-875">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-875">Required.</span>
          </span>
          <span data-ttu-id="63ea3-876">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-876">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="63ea3-877">如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-877">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-878">将字符串中包含的数字作为适当类型的数值返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-878">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-879">将字符串中包含的数字作为适当类型的数值返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-879">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-880">`Val`函数停止读取处不能将其识别为数字一部分的第一个字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="63ea3-880">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="63ea3-881">无法识别符号和通常被认为是数值，如美元符号和逗号，一部分的字符。</span><span class="sxs-lookup"><span data-stu-id="63ea3-881">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="63ea3-882">但是，该函数可以识别基数前缀`&O`(为八进制) 和`&H`（对于十六进制格式）。</span><span class="sxs-lookup"><span data-stu-id="63ea3-882">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="63ea3-883">从参数中删除空格、 制表符和换行字符。</span><span class="sxs-lookup"><span data-stu-id="63ea3-883">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="63ea3-884">以下调用返回值 1234123。</span><span class="sxs-lookup"><span data-stu-id="63ea3-884">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="63ea3-885">以下调用返回的十进制值为-1。</span><span class="sxs-lookup"><span data-stu-id="63ea3-885">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="63ea3-886">`Val`函数可以识别只将句点 (`.`) 作为有效的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="63ea3-886">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="63ea3-887">当使用其他十进制分隔符时，国际应用程序，如使用`CDbl`或`CInt`改为将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="63ea3-887">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="63ea3-888">若要将特定区域性的数字的字符串表示形式转换为数字值，请使用数值类型的`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="63ea3-888">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="63ea3-889">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>转换为字符串时`Double`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-889">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="63ea3-890"><xref:System.InvalidCastException>可能在某些不常见的数字格式的响应中引发异常。</span><span class="sxs-lookup"><span data-stu-id="63ea3-890">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="63ea3-891">例如，下面的代码引发此异常。</span><span class="sxs-lookup"><span data-stu-id="63ea3-891">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="63ea3-892">格式为数之间的冲突`Double`和`Integer`和`Long`如果冲突未包含在字符串中，将由编译器捕获到的类型字符。</span><span class="sxs-lookup"><span data-stu-id="63ea3-892">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-893">下面的示例使用`Val`函数以返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="63ea3-893">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="63ea3-894">`Val` 在不能解释为数字、 数值修饰符、 数值标点或空白的第一个字符停止转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-894">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="63ea3-895">
            <paramref name="InputStr" /> 太大。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-895">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-896">
            <paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-896">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-897">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-897">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="63ea3-898">必须的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-898">Required.</span>
          </span>
          <span data-ttu-id="63ea3-899">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-899">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="63ea3-900">如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-900">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63ea3-901">将字符串中包含的数字作为适当类型的数值返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-901">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63ea3-902">将字符串中包含的数字作为适当类型的数值返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-902">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63ea3-903">`Val`函数停止读取处不能将其识别为数字一部分的第一个字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="63ea3-903">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="63ea3-904">无法识别符号和通常被认为是数值，如美元符号和逗号，一部分的字符。</span><span class="sxs-lookup"><span data-stu-id="63ea3-904">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="63ea3-905">但是，该函数可以识别基数前缀`&O`(为八进制) 和`&H`（对于十六进制格式）。</span><span class="sxs-lookup"><span data-stu-id="63ea3-905">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="63ea3-906">从参数中删除空格、 制表符和换行字符。</span><span class="sxs-lookup"><span data-stu-id="63ea3-906">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="63ea3-907">以下调用返回值 1234123。</span><span class="sxs-lookup"><span data-stu-id="63ea3-907">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="63ea3-908">以下调用返回的十进制值为-1。</span><span class="sxs-lookup"><span data-stu-id="63ea3-908">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="63ea3-909">`Val`函数可以识别只将句点 (`.`) 作为有效的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="63ea3-909">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="63ea3-910">当使用其他十进制分隔符时，国际应用程序，如使用`CDbl`或`CInt`改为将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="63ea3-910">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="63ea3-911">若要将特定区域性的数字的字符串表示形式转换为数字值，请使用数值类型的`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="63ea3-911">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="63ea3-912">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>转换为字符串时`Double`。</span><span class="sxs-lookup"><span data-stu-id="63ea3-912">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="63ea3-913"><xref:System.InvalidCastException>可能在某些不常见的数字格式的响应中引发异常。</span><span class="sxs-lookup"><span data-stu-id="63ea3-913">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="63ea3-914">例如，下面的代码引发此异常。</span><span class="sxs-lookup"><span data-stu-id="63ea3-914">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="63ea3-915">格式为数之间的冲突`Double`和`Integer`和`Long`如果冲突未包含在字符串中，将由编译器捕获到的类型字符。</span><span class="sxs-lookup"><span data-stu-id="63ea3-915">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="63ea3-916">下面的示例使用`Val`函数以返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="63ea3-916">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="63ea3-917">`Val` 在不能解释为数字、 数值修饰符、 数值标点或空白的第一个字符停止转换。</span><span class="sxs-lookup"><span data-stu-id="63ea3-917">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="63ea3-918">
            <paramref name="InputStr" /> 太大。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-918">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="63ea3-919">
            <paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-919">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="63ea3-920">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="63ea3-920">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>