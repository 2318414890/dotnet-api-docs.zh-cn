<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a25845144db4c8ac809233e618e67a229b8c9446" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65156359" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="af6b0-101"><see langword="Conversion" />模块包含用于执行各种转换操作的过程。</span><span class="sxs-lookup"><span data-stu-id="af6b0-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-102">此模块支持的 Visual Basic 语言关键字和运行时库成员将十进制数字转换为其他基数的数字与字符串、 字符串转换为数字和一个数据类型到另一个。</span><span class="sxs-lookup"><span data-stu-id="af6b0-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-103">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-104">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="af6b0-105">关键字 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="af6b0-106">Visual Basic 运行时库成员</span><span class="sxs-lookup"><span data-stu-id="af6b0-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="af6b0-107">要转换的对象。</span><span class="sxs-lookup"><span data-stu-id="af6b0-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="af6b0-108">若要将对象转换为的类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="af6b0-109">将对象转换为指定的类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="af6b0-110">在运行时其类型为请求的目标类型的对象。</span><span class="sxs-lookup"><span data-stu-id="af6b0-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-111">`CTypeDynamic`方法将转换为传递的对象`Expression`参数指定的类型`TargetType`参数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="af6b0-112">如果对象是一个动态对象，`CTypeDynamic`方法应用可用的动态转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="af6b0-113">`CTypeDynamic`方法适用于动态转换根据对象本身定义的转换语义。</span><span class="sxs-lookup"><span data-stu-id="af6b0-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="af6b0-114">如果动态对象继承自<xref:System.Dynamic.DynamicObject>，则`CTypeDynamic`方法首先尝试使用用户定义的静态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="af6b0-115">如果用户定义的静态转换失败，`CTypeDynamic`方法尝试通过使用动态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="af6b0-116">如果动态对象实现<xref:System.Dynamic.IDynamicMetaObjectProvider>，则`CTypeDynamic`方法使优先级动态转换到能够对用户定义的静态转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-117">下面的示例使用`CTypeDynamic`方法以使用动态对象所定义的转换将动态对象转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="af6b0-118">使用动态对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="af6b0-119">演练：创建并使用动态对象（C# 和 Visual Basic）</span><span class="sxs-lookup"><span data-stu-id="af6b0-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="af6b0-120">若要将对象转换为的类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="af6b0-121">要转换的对象。</span><span class="sxs-lookup"><span data-stu-id="af6b0-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="af6b0-122">将对象转换为指定的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="af6b0-123">一个静态类型化为请求的泛型类型的对象。</span><span class="sxs-lookup"><span data-stu-id="af6b0-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-124">`CTypeDynamic`方法将作为传递的对象转换`Expression`参数指定的泛型参数类型的类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="af6b0-125">如果对象是一个动态对象，`CTypeDynamic`方法应用可用的动态转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="af6b0-126">`CTypeDynamic`方法适用于动态转换根据对象本身定义的转换语义。</span><span class="sxs-lookup"><span data-stu-id="af6b0-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="af6b0-127">如果动态对象继承自<xref:System.Dynamic.DynamicObject>，则`CTypeDynamic`方法首先尝试使用用户定义的静态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="af6b0-128">如果用户定义的静态转换失败，`CTypeDynamic`方法尝试通过使用动态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="af6b0-129">如果动态对象实现<xref:System.Dynamic.IDynamicMetaObjectProvider>，则`CTypeDynamic`方法使优先级动态转换到能够对用户定义的静态转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-130">下面的示例使用`CTypeDynamic`方法以使用动态对象所定义的转换将动态对象转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="af6b0-131">使用动态对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="af6b0-132">演练：创建并使用动态对象（C# 和 Visual Basic）</span><span class="sxs-lookup"><span data-stu-id="af6b0-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="af6b0-133">返回与给定的错误号相对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="af6b0-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="af6b0-134">返回与给定的错误号相对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="af6b0-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-135">对应于最新的运行时错误的错误消息。</span><span class="sxs-lookup"><span data-stu-id="af6b0-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-136">`ErrorToString`函数将检查的属性设置`Err`对象来标识最新的运行时错误。</span><span class="sxs-lookup"><span data-stu-id="af6b0-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="af6b0-137">返回值`ErrorToString`函数对应于`Description`属性的`Err`对象。</span><span class="sxs-lookup"><span data-stu-id="af6b0-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="af6b0-138">如果没有运行时错误，`ErrorToString`返回一个零长度字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="af6b0-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="af6b0-139">提供此功能已在 Visual Basic 6.0 及更早版本中，`Error`函数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-140">下面的代码使用`ErrorToString`函数以显示与指定的错误号相对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="af6b0-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-141"><paramref name="ErrorNumber" /> 超出范围。</span><span class="sxs-lookup"><span data-stu-id="af6b0-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="af6b0-142">可选。</span><span class="sxs-lookup"><span data-stu-id="af6b0-142">Optional.</span></span> <span data-ttu-id="af6b0-143">任何有效的错误号。</span><span class="sxs-lookup"><span data-stu-id="af6b0-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="af6b0-144">返回与给定的错误号相对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="af6b0-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-145">给定的错误号相对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="af6b0-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-146">`ErrorToString`函数将检查的属性设置`Err`对象来标识最新的运行时错误。</span><span class="sxs-lookup"><span data-stu-id="af6b0-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="af6b0-147">返回值`ErrorToString`函数对应于`Description`属性的`Err`对象。</span><span class="sxs-lookup"><span data-stu-id="af6b0-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="af6b0-148">如果`ErrorNumber`是有效的错误号，但未定义，则`ErrorToString`返回的字符串`"Application-defined or object-defined error."`如果`ErrorNumber`无效，出现错误。</span><span class="sxs-lookup"><span data-stu-id="af6b0-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="af6b0-149">如果`ErrorNumber`省略，则对应于最新的消息返回运行时错误。</span><span class="sxs-lookup"><span data-stu-id="af6b0-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="af6b0-150">如果没有运行时错误或`ErrorNumber`为 0，`ErrorToString`返回一个零长度字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="af6b0-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="af6b0-151">提供此功能已在 Visual Basic 6.0 及更早版本中，`Error`函数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-152">下面的代码使用`ErrorToString`函数以显示与指定的错误号相对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="af6b0-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-153"><paramref name="ErrorNumber" /> 超出范围。</span><span class="sxs-lookup"><span data-stu-id="af6b0-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="af6b0-154">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-155">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-155">Required.</span></span> <span data-ttu-id="af6b0-156">类型的数字<see langword="Decimal" />或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-157">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-158">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-159">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="af6b0-160">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="af6b0-161">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="af6b0-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="af6b0-162">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="af6b0-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="af6b0-163">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="af6b0-164">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="af6b0-165">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="af6b0-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="af6b0-166">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="af6b0-167">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="af6b0-168">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="af6b0-169">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="af6b0-170">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="af6b0-171">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="af6b0-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-172">未指定数目。</span><span class="sxs-lookup"><span data-stu-id="af6b0-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-173">数字不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-174">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="af6b0-175">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="af6b0-176">数学摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="af6b0-177">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-178">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-179">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-179">Required.</span></span> <span data-ttu-id="af6b0-180">类型的数字<see langword="Double" />或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-181">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-182">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-183">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="af6b0-184">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="af6b0-185">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="af6b0-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="af6b0-186">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="af6b0-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="af6b0-187">开头的性能的 Visual Basic 15.8 `Double`-到-整数的转换进行了优化，如果返回的值传递`Fix`方法的任何[整型的转换函数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或者，如果`Double`返回的值`Fix`隐式转换为一个整数，其[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)设置为`Off`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="af6b0-188">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="af6b0-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="af6b0-189">下面的示例说明了这种优化的转换：</span><span class="sxs-lookup"><span data-stu-id="af6b0-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="af6b0-190">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="af6b0-191">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="af6b0-192">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="af6b0-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="af6b0-193">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="af6b0-194">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="af6b0-195">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="af6b0-196">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="af6b0-197">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="af6b0-198">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="af6b0-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-199">未指定数目。</span><span class="sxs-lookup"><span data-stu-id="af6b0-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-200">数字不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-201">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="af6b0-202">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="af6b0-203">数学摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="af6b0-204">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-205">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-206">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-206">Required.</span></span> <span data-ttu-id="af6b0-207">类型的数字<see langword="Short" />或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-208">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-209">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-210">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="af6b0-211">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="af6b0-212">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="af6b0-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="af6b0-213">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="af6b0-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-214">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="af6b0-215">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="af6b0-216">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="af6b0-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="af6b0-217">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="af6b0-218">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="af6b0-219">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="af6b0-220">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="af6b0-221">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="af6b0-222">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="af6b0-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-223">未指定数目。</span><span class="sxs-lookup"><span data-stu-id="af6b0-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-224">数字不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-225">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="af6b0-226">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="af6b0-227">数学摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="af6b0-228">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-229">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-230">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-230">Required.</span></span> <span data-ttu-id="af6b0-231">类型的数字<see langword="Integer" />或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-232">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-233">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-234">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="af6b0-235">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="af6b0-236">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="af6b0-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="af6b0-237">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="af6b0-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-238">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="af6b0-239">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="af6b0-240">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="af6b0-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="af6b0-241">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="af6b0-242">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="af6b0-243">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="af6b0-244">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="af6b0-245">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="af6b0-246">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="af6b0-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-247">未指定数目。</span><span class="sxs-lookup"><span data-stu-id="af6b0-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-248">数字不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-249">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="af6b0-250">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="af6b0-251">数学摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="af6b0-252">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-253">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-254">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-254">Required.</span></span> <span data-ttu-id="af6b0-255">类型的数字<see langword="Long" />或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-256">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-257">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-258">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="af6b0-259">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="af6b0-260">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="af6b0-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="af6b0-261">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="af6b0-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-262">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="af6b0-263">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="af6b0-264">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="af6b0-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="af6b0-265">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="af6b0-266">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="af6b0-267">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="af6b0-268">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="af6b0-269">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="af6b0-270">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="af6b0-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-271">未指定数目。</span><span class="sxs-lookup"><span data-stu-id="af6b0-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-272">数字不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-273">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="af6b0-274">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="af6b0-275">数学摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="af6b0-276">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-277">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-278">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-278">Required.</span></span> <span data-ttu-id="af6b0-279">类型的数字<see langword="Object" />或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="af6b0-280">如果<paramref name="Number" />包含<see langword="Nothing" />，<see langword="Nothing" />返回。</span><span class="sxs-lookup"><span data-stu-id="af6b0-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="af6b0-281">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-282">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-283">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="af6b0-284">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="af6b0-285">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="af6b0-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="af6b0-286">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="af6b0-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="af6b0-287">如果从 Visual Basic 15.8`Number`自变量是一个对象，其运行时类型是`Double`或`Single`，如果返回的值传递到浮点 point 到整数的转换的性能优化`Fix`方法的任何[整型的转换函数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或者如果返回的值`Fix`自动转换为一个整数，其[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)设置为 Off。</span><span class="sxs-lookup"><span data-stu-id="af6b0-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="af6b0-288">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="af6b0-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="af6b0-289">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="af6b0-290">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="af6b0-291">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="af6b0-292">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="af6b0-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="af6b0-293">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="af6b0-294">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="af6b0-295">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="af6b0-296">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="af6b0-297">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="af6b0-298">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="af6b0-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-299">未指定数目。</span><span class="sxs-lookup"><span data-stu-id="af6b0-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-300">数字不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-301">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="af6b0-302">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="af6b0-303">数学摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="af6b0-304">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-305">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-306">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-306">Required.</span></span> <span data-ttu-id="af6b0-307">类型的数字<see langword="Single" />或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-308">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-309">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-310">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="af6b0-311">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="af6b0-312">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="af6b0-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="af6b0-313">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="af6b0-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="af6b0-314">开头的性能的 Visual Basic 15.8 `Single`-到-整数的转换进行了优化，如果返回的值传递`Fix`方法的任何[整型的转换函数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或者，如果`Single`返回的值`Fix`自动转换为一个整数，其[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)设置为 Off。</span><span class="sxs-lookup"><span data-stu-id="af6b0-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="af6b0-315">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="af6b0-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="af6b0-316">下面的示例说明了这种优化的转换：</span><span class="sxs-lookup"><span data-stu-id="af6b0-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="af6b0-317">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="af6b0-318">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="af6b0-319">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="af6b0-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="af6b0-320">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="af6b0-321">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="af6b0-322">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="af6b0-323">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="af6b0-324">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="af6b0-325">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="af6b0-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-326">未指定数目。</span><span class="sxs-lookup"><span data-stu-id="af6b0-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-327">数字不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-328">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="af6b0-329">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="af6b0-330">数学摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="af6b0-331">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-332">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="af6b0-333">返回一个表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-334">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-334">Required.</span></span> <span data-ttu-id="af6b0-335">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-336">返回一个表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-337">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-338">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-339">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="af6b0-339">If `Number` is</span></span>|<span data-ttu-id="af6b0-340">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-341">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-341">Empty</span></span>|<span data-ttu-id="af6b0-342">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-342">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-343">任何数值</span><span class="sxs-lookup"><span data-stu-id="af6b0-343">Any numeric value</span></span>|<span data-ttu-id="af6b0-344">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="af6b0-345">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="af6b0-346">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="af6b0-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-347">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-348"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-349"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-350">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="af6b0-351">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-352">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-352">Required.</span></span> <span data-ttu-id="af6b0-353">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-354">返回一个表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-355">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-356">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-357">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="af6b0-357">If `Number` is</span></span>|<span data-ttu-id="af6b0-358">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-359">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-359">Empty</span></span>|<span data-ttu-id="af6b0-360">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-360">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-361">任何数值</span><span class="sxs-lookup"><span data-stu-id="af6b0-361">Any numeric value</span></span>|<span data-ttu-id="af6b0-362">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="af6b0-363">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="af6b0-364">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="af6b0-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-365">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-366"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-367"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-368">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="af6b0-369">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-370">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-370">Required.</span></span> <span data-ttu-id="af6b0-371">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-372">返回一个表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-373">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-374">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-375">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="af6b0-375">If `Number` is</span></span>|<span data-ttu-id="af6b0-376">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-377">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-377">Empty</span></span>|<span data-ttu-id="af6b0-378">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-378">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-379">任何数值</span><span class="sxs-lookup"><span data-stu-id="af6b0-379">Any numeric value</span></span>|<span data-ttu-id="af6b0-380">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="af6b0-381">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="af6b0-382">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="af6b0-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-383">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-384"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-385"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-386">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="af6b0-387">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-388">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-388">Required.</span></span> <span data-ttu-id="af6b0-389">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-390">返回一个表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-391">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-392">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-393">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="af6b0-393">If `Number` is</span></span>|<span data-ttu-id="af6b0-394">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-395">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-395">Empty</span></span>|<span data-ttu-id="af6b0-396">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-396">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-397">任何数值</span><span class="sxs-lookup"><span data-stu-id="af6b0-397">Any numeric value</span></span>|<span data-ttu-id="af6b0-398">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="af6b0-399">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="af6b0-400">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="af6b0-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-401">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-402"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-403"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-404">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="af6b0-405">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-406">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-406">Required.</span></span> <span data-ttu-id="af6b0-407">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-408">返回一个表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-409">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-410">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-411">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="af6b0-411">If `Number` is</span></span>|<span data-ttu-id="af6b0-412">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-413">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-413">Empty</span></span>|<span data-ttu-id="af6b0-414">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-414">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-415">任何数值</span><span class="sxs-lookup"><span data-stu-id="af6b0-415">Any numeric value</span></span>|<span data-ttu-id="af6b0-416">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="af6b0-417">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="af6b0-418">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="af6b0-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-419">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-420"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-421"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-422">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="af6b0-423">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-424">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-424">Required.</span></span> <span data-ttu-id="af6b0-425">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-426">返回一个表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-427">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-428">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-429">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="af6b0-429">If `Number` is</span></span>|<span data-ttu-id="af6b0-430">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-431">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-431">Empty</span></span>|<span data-ttu-id="af6b0-432">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-432">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-433">任何数值</span><span class="sxs-lookup"><span data-stu-id="af6b0-433">Any numeric value</span></span>|<span data-ttu-id="af6b0-434">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="af6b0-435">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="af6b0-436">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="af6b0-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-437">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-438"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-439"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-440">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="af6b0-441">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-442">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-442">Required.</span></span> <span data-ttu-id="af6b0-443">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-444">返回一个表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-445">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-446">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-447">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="af6b0-447">If `Number` is</span></span>|<span data-ttu-id="af6b0-448">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-449">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-449">Empty</span></span>|<span data-ttu-id="af6b0-450">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-450">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-451">任何数值</span><span class="sxs-lookup"><span data-stu-id="af6b0-451">Any numeric value</span></span>|<span data-ttu-id="af6b0-452">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="af6b0-453">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="af6b0-454">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="af6b0-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-455">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-456"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-457"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-458">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="af6b0-459">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-460">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-460">Required.</span></span> <span data-ttu-id="af6b0-461">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-462">返回一个表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-463">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-464">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-465">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="af6b0-465">If `Number` is</span></span>|<span data-ttu-id="af6b0-466">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-467">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-467">Empty</span></span>|<span data-ttu-id="af6b0-468">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-468">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-469">任何数值</span><span class="sxs-lookup"><span data-stu-id="af6b0-469">Any numeric value</span></span>|<span data-ttu-id="af6b0-470">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="af6b0-471">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="af6b0-472">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="af6b0-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-473">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-474"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-475"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-476">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="af6b0-477">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-478">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-478">Required.</span></span> <span data-ttu-id="af6b0-479">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-480">返回一个表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-481">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-482">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-483">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="af6b0-483">If `Number` is</span></span>|<span data-ttu-id="af6b0-484">则 hex 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-485">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-485">Empty</span></span>|<span data-ttu-id="af6b0-486">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-486">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-487">任何数值</span><span class="sxs-lookup"><span data-stu-id="af6b0-487">Any numeric value</span></span>|<span data-ttu-id="af6b0-488">最多 16 个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="af6b0-489">您可以直接通过在适当范围的数字之前表示十六进制数字`&H`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="af6b0-490">例如，`&H10`表示十六进制表示法中的十进制数 16。</span><span class="sxs-lookup"><span data-stu-id="af6b0-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-491">此示例使用`Hex`函数返回一个数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-492"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-493"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-494">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="af6b0-495">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="af6b0-496">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-497">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-497">Required.</span></span> <span data-ttu-id="af6b0-498">类型的数字<see langword="Decimal" />或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-499">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-500">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-501">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="af6b0-502">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="af6b0-503">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="af6b0-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="af6b0-504">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="af6b0-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="af6b0-505">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="af6b0-506">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="af6b0-507">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="af6b0-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="af6b0-508">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="af6b0-509">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="af6b0-510">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="af6b0-511">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="af6b0-512">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="af6b0-513">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="af6b0-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-514">未指定数目。</span><span class="sxs-lookup"><span data-stu-id="af6b0-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-515">数字不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-516">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="af6b0-517">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="af6b0-518">数学摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="af6b0-519">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-520">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-521">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-521">Required.</span></span> <span data-ttu-id="af6b0-522">类型的数字<see langword="Double" />或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-523">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-524">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-525">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="af6b0-526">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="af6b0-527">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="af6b0-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="af6b0-528">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="af6b0-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="af6b0-529">从 Visual Basic 15.8 开始，双到整数的转换的性能如果返回的值传递优化`Int`方法的任何[整型的转换函数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或者如果的双精度值返回的`Int`自动转换为一个整数，其[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)设置为 Off。</span><span class="sxs-lookup"><span data-stu-id="af6b0-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="af6b0-530">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="af6b0-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="af6b0-531">下面的示例说明了这种优化的转换：</span><span class="sxs-lookup"><span data-stu-id="af6b0-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="af6b0-532">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="af6b0-533">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="af6b0-534">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="af6b0-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="af6b0-535">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="af6b0-536">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="af6b0-537">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="af6b0-538">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="af6b0-539">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="af6b0-540">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="af6b0-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-541">未指定数目。</span><span class="sxs-lookup"><span data-stu-id="af6b0-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-542">数字不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-543">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="af6b0-544">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="af6b0-545">数学摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="af6b0-546">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-547">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-548">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-548">Required.</span></span> <span data-ttu-id="af6b0-549">类型的数字<see langword="Short" />或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-550">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-551">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-552">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="af6b0-553">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="af6b0-554">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="af6b0-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="af6b0-555">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="af6b0-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-556">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="af6b0-557">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="af6b0-558">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="af6b0-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="af6b0-559">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="af6b0-560">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="af6b0-561">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="af6b0-562">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="af6b0-563">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="af6b0-564">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="af6b0-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-565">未指定数目。</span><span class="sxs-lookup"><span data-stu-id="af6b0-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-566">数字不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-567">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="af6b0-568">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="af6b0-569">数学摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="af6b0-570">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-571">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-572">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-572">Required.</span></span> <span data-ttu-id="af6b0-573">类型的数字<see langword="Integer" />或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-574">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-575">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-576">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="af6b0-577">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="af6b0-578">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="af6b0-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="af6b0-579">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="af6b0-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-580">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="af6b0-581">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="af6b0-582">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="af6b0-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="af6b0-583">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="af6b0-584">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="af6b0-585">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="af6b0-586">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="af6b0-587">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="af6b0-588">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="af6b0-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-589">未指定数目。</span><span class="sxs-lookup"><span data-stu-id="af6b0-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-590">数字不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-591">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="af6b0-592">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="af6b0-593">数学摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="af6b0-594">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-595">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-596">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-596">Required.</span></span> <span data-ttu-id="af6b0-597">类型的数字<see langword="Long" />或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-598">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-599">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-600">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="af6b0-601">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="af6b0-602">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="af6b0-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="af6b0-603">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="af6b0-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-604">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="af6b0-605">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="af6b0-606">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="af6b0-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="af6b0-607">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="af6b0-608">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="af6b0-609">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="af6b0-610">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="af6b0-611">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="af6b0-612">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="af6b0-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-613">未指定数目。</span><span class="sxs-lookup"><span data-stu-id="af6b0-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-614">数字不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-615">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="af6b0-616">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="af6b0-617">数学摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="af6b0-618">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-619">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-620">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-620">Required.</span></span> <span data-ttu-id="af6b0-621">类型的数字<see langword="Object" />或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="af6b0-622">如果<paramref name="Number" />包含<see langword="Nothing" />，<see langword="Nothing" />返回。</span><span class="sxs-lookup"><span data-stu-id="af6b0-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="af6b0-623">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-624">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-625">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="af6b0-626">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="af6b0-627">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="af6b0-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="af6b0-628">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="af6b0-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="af6b0-629">如果从 Visual Basic 15.8`Number`自变量是一个对象，其运行时类型是`Double`或`Single`，如果返回的值传递到浮点 point 到整数的转换的性能优化`Int`方法的任何[整型的转换函数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或者如果返回的值`Int`自动转换为一个整数，其[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)设置为 Off。</span><span class="sxs-lookup"><span data-stu-id="af6b0-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="af6b0-630">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="af6b0-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="af6b0-631">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="af6b0-632">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="af6b0-633">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="af6b0-634">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="af6b0-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="af6b0-635">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="af6b0-636">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="af6b0-637">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="af6b0-638">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="af6b0-639">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="af6b0-640">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="af6b0-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-641">未指定数目。</span><span class="sxs-lookup"><span data-stu-id="af6b0-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-642">数字不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-643">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="af6b0-644">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="af6b0-645">数学摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="af6b0-646">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-647">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-648">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-648">Required.</span></span> <span data-ttu-id="af6b0-649">类型的数字<see langword="Single" />或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-650">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-651">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-652">同时`Int`并`Fix`函数删除的小数部分的`Number`并返回结果的整数值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="af6b0-653">之间的差异`Int`并`Fix`功能时，如果`Number`为负，`Int`返回小于或等于第一个负整数`Number`，而`Fix`返回第一个负整数大于或等于`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="af6b0-654">例如，`Int`转换为-9，-8.4 和`Fix`将-8.4 转换成-8。</span><span class="sxs-lookup"><span data-stu-id="af6b0-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="af6b0-655">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="af6b0-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="af6b0-656">开头的性能的 Visual Basic 15.8 `Single`-到-整数的转换进行了优化，如果返回的值传递`Int`方法的任何[整型的转换函数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或者，如果`Single`返回的值`Int`自动转换为一个整数，其[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)设置为 Off。</span><span class="sxs-lookup"><span data-stu-id="af6b0-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="af6b0-657">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="af6b0-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="af6b0-658">下面的示例说明了这种优化的转换：</span><span class="sxs-lookup"><span data-stu-id="af6b0-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="af6b0-659">此示例演示了如何`Int`和`Fix`函数返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="af6b0-660">如果参数为负号，`Int`函数返回第一个负整数小于或等于编号;`Fix`函数返回第一个负整数大于或等于数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="af6b0-661">下面的示例要求您指定`Option Strict Off`因为类型隐式转换从`Double`键入`Integer`不允许基于`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="af6b0-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="af6b0-662">可以使用`CInt`函数以将其他数据类型显式转换为类型`Integer`与`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="af6b0-663">但是，`CInt`舍入为最接近的整数，而不是截断的数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="af6b0-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="af6b0-664">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="af6b0-665">可以使用`CInt`函数的调用结果`Fix`或`Int`执行而不进行舍入为整数的显式转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="af6b0-666">例如：</span><span class="sxs-lookup"><span data-stu-id="af6b0-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="af6b0-667">有关详细信息`CInt`，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="af6b0-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-668">未指定数目。</span><span class="sxs-lookup"><span data-stu-id="af6b0-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-669">数字不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-670">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="af6b0-671">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="af6b0-672">数学摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="af6b0-673">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="af6b0-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-674">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="af6b0-675">返回一个表示数字的八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-676">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-676">Required.</span></span> <span data-ttu-id="af6b0-677">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-678">返回一个表示数字的八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-679">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-680">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-681">如果数字为</span><span class="sxs-lookup"><span data-stu-id="af6b0-681">If Number is</span></span>|<span data-ttu-id="af6b0-682">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-683">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-683">Empty</span></span>|<span data-ttu-id="af6b0-684">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-684">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-685">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-685">Any other number</span></span>|<span data-ttu-id="af6b0-686">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="af6b0-687">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="af6b0-688">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="af6b0-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-689">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-690"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-691"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-692">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-693">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-694">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-694">Required.</span></span> <span data-ttu-id="af6b0-695">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-696">返回一个表示数字的八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-697">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-698">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-699">如果数字为</span><span class="sxs-lookup"><span data-stu-id="af6b0-699">If Number is</span></span>|<span data-ttu-id="af6b0-700">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-701">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-701">Empty</span></span>|<span data-ttu-id="af6b0-702">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-702">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-703">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-703">Any other number</span></span>|<span data-ttu-id="af6b0-704">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="af6b0-705">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="af6b0-706">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="af6b0-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-707">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-708"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-709"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-710">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-711">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-712">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-712">Required.</span></span> <span data-ttu-id="af6b0-713">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-714">返回一个表示数字的八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-715">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-716">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-717">如果数字为</span><span class="sxs-lookup"><span data-stu-id="af6b0-717">If Number is</span></span>|<span data-ttu-id="af6b0-718">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-719">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-719">Empty</span></span>|<span data-ttu-id="af6b0-720">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-720">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-721">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-721">Any other number</span></span>|<span data-ttu-id="af6b0-722">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="af6b0-723">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="af6b0-724">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="af6b0-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-725">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-726"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-727"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-728">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-729">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-730">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-730">Required.</span></span> <span data-ttu-id="af6b0-731">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-732">返回一个表示数字的八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-733">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-734">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-735">如果数字为</span><span class="sxs-lookup"><span data-stu-id="af6b0-735">If Number is</span></span>|<span data-ttu-id="af6b0-736">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-737">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-737">Empty</span></span>|<span data-ttu-id="af6b0-738">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-738">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-739">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-739">Any other number</span></span>|<span data-ttu-id="af6b0-740">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="af6b0-741">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="af6b0-742">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="af6b0-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-743">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-744"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-745"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-746">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-747">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-748">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-748">Required.</span></span> <span data-ttu-id="af6b0-749">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-750">返回一个表示数字的八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-751">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-752">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-753">如果数字为</span><span class="sxs-lookup"><span data-stu-id="af6b0-753">If Number is</span></span>|<span data-ttu-id="af6b0-754">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-755">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-755">Empty</span></span>|<span data-ttu-id="af6b0-756">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-756">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-757">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-757">Any other number</span></span>|<span data-ttu-id="af6b0-758">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="af6b0-759">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="af6b0-760">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="af6b0-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-761">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-762"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-763"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-764">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-765">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-766">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-766">Required.</span></span> <span data-ttu-id="af6b0-767">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-768">返回一个表示数字的八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-769">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-770">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-771">如果数字为</span><span class="sxs-lookup"><span data-stu-id="af6b0-771">If Number is</span></span>|<span data-ttu-id="af6b0-772">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-773">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-773">Empty</span></span>|<span data-ttu-id="af6b0-774">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-774">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-775">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-775">Any other number</span></span>|<span data-ttu-id="af6b0-776">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="af6b0-777">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="af6b0-778">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="af6b0-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-779">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-780"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-781"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-782">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-783">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-784">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-784">Required.</span></span> <span data-ttu-id="af6b0-785">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-786">返回一个表示数字的八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-787">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-788">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-789">如果数字为</span><span class="sxs-lookup"><span data-stu-id="af6b0-789">If Number is</span></span>|<span data-ttu-id="af6b0-790">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-791">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-791">Empty</span></span>|<span data-ttu-id="af6b0-792">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-792">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-793">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-793">Any other number</span></span>|<span data-ttu-id="af6b0-794">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="af6b0-795">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="af6b0-796">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="af6b0-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-797">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-798"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-799"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-800">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-801">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-802">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-802">Required.</span></span> <span data-ttu-id="af6b0-803">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-804">返回一个表示数字的八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-805">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-806">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-807">如果数字为</span><span class="sxs-lookup"><span data-stu-id="af6b0-807">If Number is</span></span>|<span data-ttu-id="af6b0-808">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-809">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-809">Empty</span></span>|<span data-ttu-id="af6b0-810">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-810">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-811">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-811">Any other number</span></span>|<span data-ttu-id="af6b0-812">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="af6b0-813">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="af6b0-814">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="af6b0-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-815">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-816"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-817"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-818">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-819">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-820">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-820">Required.</span></span> <span data-ttu-id="af6b0-821">任何有效的数值表达式或<see langword="String" />表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-822">返回一个表示数字的八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-823">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-824">如果`Number`已不是整数，它正在计算之前四舍五入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="af6b0-825">如果数字为</span><span class="sxs-lookup"><span data-stu-id="af6b0-825">If Number is</span></span>|<span data-ttu-id="af6b0-826">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="af6b0-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="af6b0-827">空</span><span class="sxs-lookup"><span data-stu-id="af6b0-827">Empty</span></span>|<span data-ttu-id="af6b0-828">零 (0)</span><span class="sxs-lookup"><span data-stu-id="af6b0-828">Zero (0)</span></span>|  
|<span data-ttu-id="af6b0-829">其他任何数字</span><span class="sxs-lookup"><span data-stu-id="af6b0-829">Any other number</span></span>|<span data-ttu-id="af6b0-830">最多为 22 个八进制字符</span><span class="sxs-lookup"><span data-stu-id="af6b0-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="af6b0-831">您可以直接通过在适当范围的数字之前表示八进制数字`&O`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="af6b0-832">例如，`&O10`是十进制数 8 的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="af6b0-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-833">此示例使用`Oct`函数返回一个数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-834"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-835"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-836">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-837">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="af6b0-838">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-838">Required.</span></span> <span data-ttu-id="af6b0-839"><see langword="Object" />包含任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="af6b0-840">返回<see langword="String" />的数字表示形式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="af6b0-841">数字的 <see langword="String" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-842">将数字转换为字符串时, 的符号始终保留一个前导空格`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="af6b0-843">如果`Number`为正，则返回的字符串包含前导空格和符号为正。</span><span class="sxs-lookup"><span data-stu-id="af6b0-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="af6b0-844">减号 （-） 和没有前导空格，将包括一个负数。</span><span class="sxs-lookup"><span data-stu-id="af6b0-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="af6b0-845">使用`Format`函数将转换为日期、 时间、 货币或以其他用户定义的格式，您需要格式化的数字值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="af6b0-846">与不同`Str`函数，`Format`函数不包括前导空格的表示符号`Number`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af6b0-847">`Str`函数可以识别只将句点 (`.`) 作为有效的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="af6b0-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="af6b0-848">如果使用不同的小数点分隔符 （例如，在国际应用程序），使用`CStr`或`Format`函数将数字转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="af6b0-849">若要获取特定区域性中的数字的字符串表示形式，请使用数字的`ToString(IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="af6b0-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="af6b0-850">例如，使用<xref:System.Double.ToString%2A>类型的值转换时`Double`为字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-851">此示例使用`Str`函数返回`String`的数字表示形式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="af6b0-852">时的正数值转换为字符串，为其符号始终保留一个前导空格。</span><span class="sxs-lookup"><span data-stu-id="af6b0-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="af6b0-853"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="af6b0-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="af6b0-854"><paramref name="Number" /> 不是数值类型。</span><span class="sxs-lookup"><span data-stu-id="af6b0-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="af6b0-855">转换摘要</span><span class="sxs-lookup"><span data-stu-id="af6b0-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-856">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="af6b0-857">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="af6b0-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="af6b0-858">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-858">Required.</span></span> <span data-ttu-id="af6b0-859">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="af6b0-860">如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="af6b0-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="af6b0-861">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="af6b0-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="af6b0-862">字符串中包含的作为适当类型数值的数字。</span><span class="sxs-lookup"><span data-stu-id="af6b0-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-863">`Val`函数停止读取处不能将其识别为数字一部分的第一个字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="af6b0-864">无法识别符号和通常被认为是数值，如美元符号和逗号，一部分的字符。</span><span class="sxs-lookup"><span data-stu-id="af6b0-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="af6b0-865">但是，该函数可以识别基数前缀`&O`(为八进制) 和`&H`（对于十六进制格式）。</span><span class="sxs-lookup"><span data-stu-id="af6b0-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="af6b0-866">从参数中去除空格、 制表符和换行字符。</span><span class="sxs-lookup"><span data-stu-id="af6b0-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="af6b0-867">以下调用返回值 1615198。</span><span class="sxs-lookup"><span data-stu-id="af6b0-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="af6b0-868">以下调用返回的十进制值为-1。</span><span class="sxs-lookup"><span data-stu-id="af6b0-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="af6b0-869">`Val`函数可以识别只将句点 (`.`) 作为有效的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="af6b0-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="af6b0-870">当使用不同的小数点分隔符时，国际应用程序，如使用`CDbl`或`CInt`改为将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="af6b0-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="af6b0-871">若要将特定区域性的数字的字符串表示形式转换为数字值，请使用数值类型的`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="af6b0-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="af6b0-872">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>转换为字符串时`Double`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="af6b0-873"><xref:System.InvalidCastException>以响应某些不常见的数字格式可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="af6b0-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="af6b0-874">例如，下面的代码引发此异常。</span><span class="sxs-lookup"><span data-stu-id="af6b0-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="af6b0-875">格式为数之间的冲突`Double`和`Integer`和`Long`编译器会发现类型字符，如果它未包含在一个字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-876">下面的示例使用`Val`函数以返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="af6b0-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="af6b0-877">`Val` 在不能解释为数字、 数值修饰符、 数值标点或空白的第一个字符停止转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="af6b0-878"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="af6b0-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-879"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-880">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="af6b0-881">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-881">Required.</span></span> <span data-ttu-id="af6b0-882">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="af6b0-883">如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="af6b0-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="af6b0-884">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="af6b0-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="af6b0-885">字符串中包含的作为适当类型数值的数字。</span><span class="sxs-lookup"><span data-stu-id="af6b0-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-886">`Val`函数停止读取处不能将其识别为数字一部分的第一个字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="af6b0-887">无法识别符号和通常被认为是数值，如美元符号和逗号，一部分的字符。</span><span class="sxs-lookup"><span data-stu-id="af6b0-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="af6b0-888">但是，该函数可以识别基数前缀`&O`(为八进制) 和`&H`（对于十六进制格式）。</span><span class="sxs-lookup"><span data-stu-id="af6b0-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="af6b0-889">从参数中删除空格、 制表符和换行字符。</span><span class="sxs-lookup"><span data-stu-id="af6b0-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="af6b0-890">以下调用返回值 1234123。</span><span class="sxs-lookup"><span data-stu-id="af6b0-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="af6b0-891">以下调用返回的十进制值为-1。</span><span class="sxs-lookup"><span data-stu-id="af6b0-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="af6b0-892">`Val`函数可以识别只将句点 (`.`) 作为有效的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="af6b0-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="af6b0-893">当使用其他十进制分隔符时，国际应用程序，如使用`CDbl`或`CInt`改为将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="af6b0-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="af6b0-894">若要将特定区域性的数字的字符串表示形式转换为数字值，请使用数值类型的`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="af6b0-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="af6b0-895">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>转换为字符串时`Double`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af6b0-896"><xref:System.InvalidCastException>以响应某些不常见的数字格式可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="af6b0-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="af6b0-897">例如，下面的代码引发此异常。</span><span class="sxs-lookup"><span data-stu-id="af6b0-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="af6b0-898">格式为数之间的冲突`Double`和`Integer`和`Long`如果冲突未包含在字符串中，将由编译器捕获到的类型字符。</span><span class="sxs-lookup"><span data-stu-id="af6b0-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-899">下面的示例使用`Val`函数以返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="af6b0-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="af6b0-900">`Val` 在不能解释为数字、 数值修饰符、 数值标点或空白的第一个字符停止转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="af6b0-901"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="af6b0-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-902"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-903">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="af6b0-904">必需。</span><span class="sxs-lookup"><span data-stu-id="af6b0-904">Required.</span></span> <span data-ttu-id="af6b0-905">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="af6b0-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="af6b0-906">如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="af6b0-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="af6b0-907">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="af6b0-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="af6b0-908">字符串中包含的作为适当类型数值的数字。</span><span class="sxs-lookup"><span data-stu-id="af6b0-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af6b0-909">`Val`函数停止读取处不能将其识别为数字一部分的第一个字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="af6b0-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="af6b0-910">无法识别符号和通常被认为是数值，如美元符号和逗号，一部分的字符。</span><span class="sxs-lookup"><span data-stu-id="af6b0-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="af6b0-911">但是，该函数可以识别基数前缀`&O`(为八进制) 和`&H`（对于十六进制格式）。</span><span class="sxs-lookup"><span data-stu-id="af6b0-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="af6b0-912">从参数中删除空格、 制表符和换行字符。</span><span class="sxs-lookup"><span data-stu-id="af6b0-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="af6b0-913">以下调用返回值 1234123。</span><span class="sxs-lookup"><span data-stu-id="af6b0-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="af6b0-914">以下调用返回的十进制值为-1。</span><span class="sxs-lookup"><span data-stu-id="af6b0-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="af6b0-915">`Val`函数可以识别只将句点 (`.`) 作为有效的小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="af6b0-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="af6b0-916">当使用其他十进制分隔符时，国际应用程序，如使用`CDbl`或`CInt`改为将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="af6b0-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="af6b0-917">若要将特定区域性的数字的字符串表示形式转换为数字值，请使用数值类型的`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="af6b0-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="af6b0-918">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>转换为字符串时`Double`。</span><span class="sxs-lookup"><span data-stu-id="af6b0-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af6b0-919"><xref:System.InvalidCastException>可能在某些不常见的数字格式的响应中引发异常。</span><span class="sxs-lookup"><span data-stu-id="af6b0-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="af6b0-920">例如，下面的代码引发此异常。</span><span class="sxs-lookup"><span data-stu-id="af6b0-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="af6b0-921">格式为数之间的冲突`Double`和`Integer`和`Long`如果冲突未包含在字符串中，将由编译器捕获到的类型字符。</span><span class="sxs-lookup"><span data-stu-id="af6b0-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="af6b0-922">下面的示例使用`Val`函数以返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="af6b0-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="af6b0-923">`Val` 在不能解释为数字、 数值修饰符、 数值标点或空白的第一个字符停止转换。</span><span class="sxs-lookup"><span data-stu-id="af6b0-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="af6b0-924"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="af6b0-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="af6b0-925"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span><span class="sxs-lookup"><span data-stu-id="af6b0-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="af6b0-926">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="af6b0-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>