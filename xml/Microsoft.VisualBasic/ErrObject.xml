<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b579ab4228fcd4d442cd1eccb18baa346d3193f2" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37709838" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <TypeSignature Language="F#" Value="type ErrObject = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see langword="ErrObject" /> 模块包含用于使用 <see langword="Err" /> 对象标识和处理运行时错误的属性和过程。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrObject`模块支持`Err`对象。 有关详情，请参阅<xref:Microsoft.VisualBasic.Information.Err%2A>。  
  
   
  
## Examples  
 此示例使用的属性`Err`构造一个错误消息对话框中的对象。 请注意，当你使用时，会发生什么情况`Clear`方法第一个： 然后生成与 Visual Basic 错误`Raise`方法中，Visual Basic 的默认值将成为属性的`Err`对象。  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="errObject.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除 <see langword="Err" /> 对象的所有属性设置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`Clear`若要显式清除`Err`对象后已处理错误，例如在使用延迟的错误处理与`On Error Resume Next`。 `Clear`方法称为自动每当执行任何以下语句：  
  
-   任何类型的`Resume`语句  
  
-   `Exit Sub`、`Exit Function` 或 `Exit Property`  
  
-   任何`On Error`语句  
  
-   任何`Try...Catch...Finally`语句  
  
    > [!NOTE]
    >  `On Error Resume Next`构造可能优于`On Error GoTo`处理期间对其他对象的访问生成的错误时。 检查`Err`与对象的每个交互清楚地了解对象所访问的代码后： 可以确定哪个对象放置中的错误代码`Err.Number`，以及哪个对象最初生成错误 （的对象指定在`Err.Source`)。  
  
   
  
## Examples  
 此示例使用`Err`对象的`Clear`方法来重置的数值属性`Err`零并且其字符串属性设置为零长度字符串的对象。 而无需在调用`Clear`，第二次调用`MsgBox`将显示相同的错误消息。  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置 <see langword="String" /> 表达式，该表达式包含与某个错误关联的描述性字符串。 读/写。</summary>
        <value>返回或设置 <see langword="String" /> 表达式，该表达式包含与某个错误关联的描述性字符串。 读/写。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Description`属性设置包含错误的简短说明。 使用此属性不能或不希望处理的错误向用户发出警报。 在生成一个用户定义的错误时，将分配到错误的简短说明`Description`属性。 如果`Description`属性未填入，和的值<xref:Microsoft.VisualBasic.ErrObject.Number%2A>属性对应于 Visual Basic 运行时错误，则返回的字符串<xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A>函数中设置`Description`属性时生成错误。  
  
   
  
## Examples  
 此示例将分配到的用户定义的消息`Description`属性的`Err`对象。  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Erl : int" Usage="Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回指示上一条执行语句的行号的整数。 只读。</summary>
        <value>返回指示上一条执行语句的行号的整数。 只读。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 Visual Basic 遇到无行号，则返回 0。  
  
   
  
## Examples  
 此示例使用`Erl`属性以指示的行号。  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="member this.GetException : unit -&gt; Exception" Usage="errObject.GetException " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回表示所发生错误的异常。</summary>
        <returns>返回表示所发生错误的异常。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetException`函数是只能从`Err`对象类。 它适用于`Exception`属性的`Err`要显示已发生的错误的对象。  
  
   
  
## Examples  
 下面的代码显示分配给在异常消息`Err`对象：  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HelpContext : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置一个 <see langword="Integer" />，它包含帮助文件中某个主题的上下文 ID。 读/写。</summary>
        <value>返回或设置一个 <see langword="Integer" />，它包含帮助文件中某个主题的上下文 ID。 读/写。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HelpContext`属性用于显示应用程序的上下文相关帮助。 如果帮助文件中指定`HelpFile`，则`HelpContext`属性用于自动显示标识的帮助文件。 如果这两个`HelpFile`并`HelpContext`属性为空、 的值<xref:Microsoft.VisualBasic.ErrObject.Number%2A>属性处于选中状态。 如果的值`Number`属性对应于 Visual Basic 运行时错误值，则使用该错误的 Visual Basic 帮助上下文 ID。 如果的值`Number`属性不对应于 Visual Basic 错误，则将显示 Visual Basic 帮助文件的内容屏幕。  
  
> [!NOTE]
>  在你的应用程序来处理典型的错误，应编写例程。 编程时对一个对象，可以使用对象的帮助文件，以改善质量的错误处理，或向用户显示有意义的消息，如果错误是不可恢复。  
  
   
  
## Examples  
 此示例使用`HelpContext`的属性`Err`对象以显示 Visual Basic 帮助主题`Overflow`错误。  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpFile : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置一个 <see langword="String" /> 表达式，该表达式包含帮助文件的完全限定路径。 读/写。</summary>
        <value>返回或设置一个 <see langword="String" /> 表达式，该表达式包含帮助文件的完全限定路径。 读/写。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果通过指定帮助文件`HelpFile`属性，它会自动调用用户按帮助键 （或 f1） 中的错误消息对话框。 如果`HelpContext`属性包含有效的上下文自动显示为指定的文件，该主题的 ID。 如果没有`HelpFile`指定，则会显示 Visual Basic 帮助文件。  
  
> [!NOTE]
>  在你的应用程序来处理典型的错误，应编写例程。 编程时对一个对象，可以使用对象的帮助文件，以改善质量的错误处理，或向用户显示有意义的消息，如果错误是不可恢复。  
  
   
  
## Examples  
 此示例使用`HelpFile`属性的`Err`对象以开始帮助系统。 默认情况下，`HelpFile`属性包含 Visual Basic 帮助文件的名称。  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LastDllError : int" Usage="Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回调用动态链接库 (DLL) 所产生的系统错误代码。 只读。</summary>
        <value>返回调用动态链接库 (DLL) 所产生的系统错误代码。 只读。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>属性仅适用于从 Visual Basic 代码进行的 DLL 调用。 当进行此类调用时，所调用的函数通常返回指示成功或失败，代码和<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>填充属性。 检查以确定指示成功或失败的返回值的 DLL 函数的文档。 Visual Basic 应用程序时返回失败代码，则应立即检查<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>属性。 不会引发异常时<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>属性设置。  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>属性受<xref:System.Security.Permissions.SecurityAction.LinkDemand>，这有助于防止其不受信任的代码中，阻止访问。 但是，<xref:System.Security.Permissions.SecurityAction.LinkDemand>要求仅对直接调用方具有<xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A>权限。 如果可以从部分受信任代码调用你的代码，公开的值<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>不用的情况下验证安全风险。  
>   
>  有关如何使用有关的重要限制<xref:System.Security.Permissions.SecurityAction.LinkDemand>成员，请参阅[Demand vs。LinkDemand](http://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5)。 有关权限的详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>并[代码访问权限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
 请为智能设备注意此属性始终返回零。  
  
   
  
## Examples  
 下面的示例演示如何使用`LastDllError`属性后调用 Windows API 中的函数。 `PrintWindowCoordinates`的过程采用一个窗口，并调用到一个句柄`GetWindowRect`函数。 `GetWindowRect` RECT 数据结构填充构成了窗口的矩形的边的长度。 如果传递无效的句柄，发生错误，并且错误号是可通过`LastDllError`属性。  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Number : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置指定错误的数值。 读/写。</summary>
        <value>返回或设置指定错误的数值。 读/写。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有`Raise`除参数`Number`都是可选的。 如果省略可选参数和属性设置的`Err`对象包含未清除的值，这些值用作您的错误的值。  
  
 因为`Err`对象提供了更丰富的信息比生成的错误时`Error`语句，`Raise`可用于编写类模块时生成错误。 例如，对于`Raise`方法，可以在指定生成错误的源`Source`属性，该错误的联机帮助可以引用，依次类推。  
  
 当从对象返回一个用户定义的错误，则设置`Err.Number`通过添加数所选为错误代码为`VbObjectError`常量。 例如，使用以下代码以返回数字 1051年作为错误代码：  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 此示例演示了使用典型的`Number`错误处理例程中的属性。  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 此示例使用`Err`对象的`Raise`方法来生成原始错误中用 Visual Basic 编写的函数。 调用的函数可以捕获错误并报告给用户。 请注意，该过程`CallingProcedure`形成了鲜明对比的信息可以从派生类型`Err`对象的信息，可以从派生`Exception`对象。  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> 大于 65535。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Raise : int * obj * obj * obj * obj -&gt; unit" Usage="errObject.Raise (Number, Source, Description, HelpFile, HelpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必须的。 标识错误本质的 <see langword="Long" /> 整数。 Visual Basic 错误处于 0 到 65535 的范围内：范围 0 到 512 保留用于系统错误，范围 513 到 65535 则用于用户定义的错误。 当在类模块中将 <see langword="Number" /> 属性设置为您自己的错误代码时，将错误代码号添加到 <see langword="vbObjectError" /> 常数。 例如，将 <c>vbObjectError + 513</c> 分配给 <see langword="Number" /> 属性，生成错误号 513。</param>
        <param name="Source">可选。 <see langword="String" /> 表达式，用于命名生成错误的对象或应用程序。 设置对象的这一属性时，应使用如下形式：<c>project</c>.<c>class</c>。 如果未指定 <c>Source</c>，则使用当前 Visual Basic 项目的进程 ID。</param>
        <param name="Description">可选。 描述错误的 <see langword="String" /> 表达式。 如果未指定，则检查 <see langword="Number" /> 属性值。 如果它可以映射到 Visual Basic 运行时错误代码，则将 <see langword="Error" /> 函数要返回的字符串用作 <see langword="Description" /> 属性。 如果没有对应于 <see langword="Number" /> 属性的 Visual Basic 错误，则使用"应用程序定义的错误或对象定义的错误"消息。</param>
        <param name="HelpFile">可选。 帮助文件的完全限定路径，在该文件中可找到有关此错误的帮助信息。 如果未指定该参数，则 Visual Basic 使用 Visual Basic 帮助文件的完全限定的驱动器、路径和文件名。</param>
        <param name="HelpContext">可选。 上下文 ID，用于标识提供错误帮助的 <c>HelpFile</c> 中的主题。 如果省略该参数，则使用与 <see langword="Number" /> 属性对应的错误的 Visual Basic 帮助文件上下文 ID（如果存在）。</param>
        <summary>生成一个运行时错误；可以替代 <see langword="Error" /> 语句使用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有`Raise`除参数`Number`都是可选的。 如果省略可选参数和属性设置的`Err`对象包含未清除的值，这些值用作您的错误的值。  
  
 因为`Err`对象提供了更丰富的信息比生成的错误时`Error`语句，`Raise`可用于编写类模块时生成错误。 例如，对于`Raise`方法，可以在指定生成错误的源`Source`属性，该错误的联机帮助可以引用，依次类推。  
  
   
  
## Examples  
 此示例使用`Err`对象的`Raise`方法生成用 Visual Basic 编写的函数中出现错误。 调用的函数可以捕获错误并将其报告给消息框的用户。  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置一个 <see langword="String" /> 表达式，该表达式指定最初生成错误的对象或应用程序的名称。 读/写。</summary>
        <value>返回或设置一个 <see langword="String" /> 表达式，该表达式指定最初生成错误的对象或应用程序的名称。 读/写。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Source`属性指定`String`表达式表示的对象生成了错误; 表达式通常是对象的类名称或进程 id。 使用`Source`属性无法处理的访问的对象生成的错误代码时提供的信息。 例如，如果您访问 Microsoft Excel 并生成`Division by zero`错误，Microsoft Excel 设置`Err.Number`有关该错误并设置其错误代码为`Source`到"Excel.Application"。  
  
 当应用程序从代码中，生成错误时`Source`是应用程序的编程 id。 在类中，`Source`应包含具有窗体的名称*项目*。*类*。 在代码中，发生意外的错误时`Source`属性自动填充。 在模块中，错误`Source`包含项目名称。  
  
   
  
## Examples  
 此示例演示如何使用`Source`典型的错误处理例程中的属性。 当从引发错误`Class1`，该字符串`"Class1"`分配给`Source`属性的`Err`对象。 然后，此字符串将显示在信息性消息，指示源的错误数。  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
  </Members>
</Type>