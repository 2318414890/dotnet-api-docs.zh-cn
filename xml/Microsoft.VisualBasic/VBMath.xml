<Type Name="VBMath" FullName="Microsoft.VisualBasic.VBMath">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d9ec51fc0d9afec7126314ff80bbb18b76041c0e" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37709604" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class VBMath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed VBMath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.VBMath" />
  <TypeSignature Language="VB.NET" Value="Public Module VBMath" />
  <TypeSignature Language="C++ CLI" Value="public ref class VBMath sealed" />
  <TypeSignature Language="F#" Value="type VBMath = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="VbMath" /> 模块包含用于执行算术操作的过程。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此模块支持的 Visual Basic 语言关键字和运行时库成员用于生成随机数字。  
  
   
  
## Examples  
 此示例使用`Rnd`函数以生成从 1 到 6 的范围内的随机整数值。  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Randomize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化随机数生成器。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Randomize">
      <MemberSignature Language="C#" Value="public static void Randomize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Randomize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Randomize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Randomize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Randomize();" />
      <MemberSignature Language="F#" Value="static member Randomize : unit -&gt; unit" Usage="Microsoft.VisualBasic.VBMath.Randomize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>初始化随机数生成器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载`Randomize`方法不接受种子值。 相反，返回系统计时器的值用作新的种子值。  
  
 如果`Randomize`未使用，`Rnd`函数 （不带任何参数） 使用的同一个数字作为种子第一次它被调用，并且此后使用上一次生成数量作为种子值。  
  
> [!NOTE]
>  若要重复执行一系列随机数字，调用`Rnd`与之前使用参数为负`Randomize`使用数值自变量。  
  
> [!IMPORTANT]
>  因为`Random`语句和`Rnd`函数起始种子值和生成在有限范围内的数字，结果可能是可预测的人知道用于生成它们的算法。 因此，`Random`语句和`Rnd`函数不应该用于生成加密中使用的随机数字。 有关详情，请参阅<xref:System.Security.Cryptography.RandomNumberGenerator>。  
  
   
  
## Examples  
 此示例使用`Randomize`语句初始化随机数生成器。 Number 参数已被省略，因为`Randomize`使用的返回值`Timer`函数作为新的种子值。  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Rnd" />
      </Docs>
    </Member>
    <Member MemberName="Randomize">
      <MemberSignature Language="C#" Value="public static void Randomize (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Randomize(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Randomize(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Randomize (Number As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Randomize(double Number);" />
      <MemberSignature Language="F#" Value="static member Randomize : double -&gt; unit" Usage="Microsoft.VisualBasic.VBMath.Randomize Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">可选。 一个 <see langword="Object" /> 或任何有效的数值表达式。</param>
        <summary>初始化随机数生成器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Randomize` 使用`Number`初始化`Rnd`函数的随机数字生成器，向其提供新的种子值。 如果省略`Number`，返回系统计时器的值用作新的种子值。  
  
 如果`Randomize`未使用，`Rnd`函数 （不带任何参数） 使用的同一个数字作为种子第一次它被调用，并且此后使用上一次生成数量作为种子值。  
  
> [!NOTE]
>  若要重复执行一系列随机数字，调用`Rnd`与之前使用参数为负`Randomize`使用数值自变量。 使用`Randomize`具有相同值的`Number`不重复前一序列。  
  
> [!IMPORTANT]
>  因为`Random`语句和`Rnd`函数起始种子值和生成在有限范围内的数字，结果可能是可预测的人知道用于生成它们的算法。 因此，`Random`语句和`Rnd`函数不应该用于生成加密中使用的随机数字。 有关详情，请参阅<xref:System.Security.Cryptography.RandomNumberGenerator>。  
  
   
  
## Examples  
 此示例使用`Randomize`语句初始化随机数生成器。 Number 参数已被省略，因为`Randomize`使用的返回值`Timer`函数作为新的种子值。  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Rnd" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Rnd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个 <see langword="Single" /> 类型的随机数。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rnd">
      <MemberSignature Language="C#" Value="public static float Rnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Rnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Rnd" />
      <MemberSignature Language="VB.NET" Value="Public Function Rnd () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Rnd();" />
      <MemberSignature Language="F#" Value="static member Rnd : unit -&gt; single" Usage="Microsoft.VisualBasic.VBMath.Rnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个 <see langword="Single" /> 类型的随机数。</summary>
        <returns>序列中的下一个随机数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Rnd`函数返回一个值小于 1，但大于或等于零。  
  
 然后再调用`Rnd`，使用`Randomize`语句，不带参数初始化了种子随机数字生成器根据系统计时器。  
  
 若要生成在给定范围内的随机整数，请使用下面的公式。  
  
 [!code-vb[VbVbalrMath#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)]  
  
 在这里，`upperbound`是在范围内，最大数目和`lowerbound`为范围中最小的数字。  
  
> [!NOTE]
>  若要重复执行一系列随机数字，调用`Rnd`与之前使用参数为负`Randomize`使用数值自变量。  
  
> [!IMPORTANT]
>  因为`Random`语句和`Rnd`函数起始种子值和生成在有限范围内的数字，结果可能是可预测的人知道用于生成它们的算法。 因此，`Random`语句和`Rnd`函数不应该用于生成加密中使用的随机数字。  
  
   
  
## Examples  
 此示例使用`Rnd`函数以生成从 1 到 6 的范围内的随机整数值。  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Randomize" />
      </Docs>
    </Member>
    <Member MemberName="Rnd">
      <MemberSignature Language="C#" Value="public static float Rnd (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Rnd(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Rnd(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rnd (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Rnd(float Number);" />
      <MemberSignature Language="F#" Value="static member Rnd : single -&gt; single" Usage="Microsoft.VisualBasic.VBMath.Rnd Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">可选。 一个 <see langword="Single" /> 值或任何有效的 <see langword="Single" /> 表达式。</param>
        <summary>返回一个 <see langword="Single" /> 类型的随机数。</summary>
        <returns>如果 Number 小于零，则 Rnd 每次都使用 <paramref name="Number" /> 作为种子生成相同的数字。 如果 Number 大于零，则 Rnd 生成序列中的下一个随机数。 如果 Number 等于零，则 Rnd 生成最近生成的数字。 如果未提供 Number，则 Rnd 生成序列中的下一个随机数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Rnd`函数返回一个值小于 1，但大于或等于零。  
  
 值`Number`确定如何`Rnd`生成随机数字。  
  
 对于任何给定的初始种子，会生成相同的数字序列，因为每次连续调用`Rnd`函数使用以前生成的数字作为种子序列中的下一个编号。  
  
 然后再调用`Rnd`，使用`Randomize`语句，不带参数初始化了种子随机数字生成器根据系统计时器。  
  
 若要生成在给定范围内的随机整数，请使用下面的公式。  
  
 [!code-vb[VbVbalrMath#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)]  
  
 在这里，`upperbound`是在范围内，最大数目和`lowerbound`为范围中最小的数字。  
  
> [!NOTE]
>  若要重复执行一系列随机数字，调用`Rnd`与之前使用参数为负`Randomize`使用数值自变量。 使用`Randomize`具有相同值的`Number`不重复前一序列。  
  
> [!IMPORTANT]
>  因为`Random`语句和`Rnd`函数起始种子值和生成在有限范围内的数字，结果可能是可预测的人知道用于生成它们的算法。 因此，`Random`语句和`Rnd`函数不应该用于生成加密中使用的随机数字。  
  
   
  
## Examples  
 此示例使用`Rnd`函数以生成从 1 到 6 的范围内的随机整数值。  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Randomize" />
      </Docs>
    </Member>
  </Members>
</Type>