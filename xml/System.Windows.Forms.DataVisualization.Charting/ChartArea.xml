<Type Name="ChartArea" FullName="System.Windows.Forms.DataVisualization.Charting.ChartArea">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="58d4de66f65b645cce9b6dbc592a62ed062591a8" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30631421" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ChartArea : System.Windows.Forms.DataVisualization.Charting.ChartNamedElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChartArea extends System.Windows.Forms.DataVisualization.Charting.ChartNamedElement" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" />
  <TypeSignature Language="VB.NET" Value="Public Class ChartArea&#xA;Inherits ChartNamedElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChartArea : System::Windows::Forms::DataVisualization::Charting::ChartNamedElement" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.DataVisualization.Charting.ChartNamedElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Axes")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示图表图像上的图表区域。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 任何给定的图表中*内部绘图位置*是一个矩形区域，在 x 和 y 轴行，其中的数据点绘制。 *绘制位置*是包含内部绘图位置、 刻度线和轴标签的矩形区域。 *图表区*是包含内部绘图位置、 刻度线、 轴标签和图表上的轴标题的矩形区域。  
  
 图表区都由<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea>类;<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea>对象存储在<xref:System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection>类。  
  
 不限制可在图表区中绘制的图表系列的数量。  
  
 A<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea>对象：  
  
-   使用一个不同的内部绘图区域。  
  
-   用于绘制一个或多个图表系列。  
  
-   具有主和辅助 x 和 y 轴，饼图和圆环图图表类型除外。  
  
 当使用形状图表类型，包括饼图、 圆环图、 漏斗图、 棱锥图极坐标图、 雷达图图表时，内部绘图位置定义的图表类型形状的大小。 例如，当你增大的值时，才<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.InnerPlotPosition%2A>属性在饼图中，你将增加扇形的半径。  
  
 对于所有其他图表类型，每个图表区有两个 X 轴和 y 轴，主要和辅助集。 若要访问与这些轴相关的属性，使用<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AxisX%2A>， <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AxisX2%2A>，<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AxisY%2A>和<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AxisY2%2A>属性。 如果你需要设置一个属性，可影响图表上的所有轴，请使用<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.Axes%2A>属性。  
  
 一个或多个系列都与图表区关联。 序列<xref:System.Windows.Forms.DataVisualization.Charting.Series.ChartArea%2A>属性，用于确定每个序列所属的图表区。 默认情况下，序列连接到默认图表区中。 若要禁用的一系列显示时，将设置<xref:System.Windows.Forms.DataVisualization.Charting.Series.ChartArea%2A>为零长度字符串该序列的属性。  
  
 如果另一个图表区添加到图表中，可以将任何序列与新的图表区相关联。 在所有形状图表类型，以及栏和堆积的条形图类型，必须在单独的图表区域中绘制每个序列。 在所有其他图表类型，可以在同一图表区中组合多个序列。  
  
 三维图表将显示在图表区域的图表区基础。 你可以使用<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.Area3DStyle%2A>属性来启用和自定义在三维图表。  
  
 图表区最小和最大将不自动重新计算如果你添加新数据，以便图表不会自动更改轴大小。  你可以要求使用重新计算这些值的图表区<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.RecalculateAxesScale%2A>方法。  
  
 若要垂直对齐多个图表区，设置<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentOrientation%2A>属性。 若要水平对齐多个图表区，您必须首先定位图表区使用<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.Position%2A>属性，且然后将其设置<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentOrientation%2A>为水平的属性。  
  
 若要取消的一系列的显示，请设置<xref:System.Windows.Forms.DataVisualization.Charting.Series>为零长度字符串该序列的属性。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChartArea ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartArea.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChartArea();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数来创建和初始化的新实例<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea>类。  
  
> [!NOTE]
>  强烈建议你使用之一`Add`或`Insert`方法<xref:System.Windows.Forms.DataVisualization.Charting.Chart.ChartAreas%2A>要在运行时添加图表区的集合属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChartArea (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartArea.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChartArea(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">新 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象的名称。</param>
        <summary>用指定的图表区域名称初始化 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlignmentOrientation">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.AreaAlignmentOrientations AlignmentOrientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.AreaAlignmentOrientations AlignmentOrientation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentOrientation" />
      <MemberSignature Language="VB.NET" Value="Public Property AlignmentOrientation As AreaAlignmentOrientations" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::AreaAlignmentOrientations AlignmentOrientation { System::Windows::Forms::DataVisualization::Charting::AreaAlignmentOrientations get(); void set(System::Windows::Forms::DataVisualization::Charting::AreaAlignmentOrientations value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.FlagsEnumUITypeEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.AreaAlignmentOrientations</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置图表区域的对齐方向。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentOrientations" /> 枚举值，该值指定图表区域的对齐方式方向。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignWithChartArea%2A>，<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentOrientation%2A>和<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentStyle%2A>属性，它是和 / 或可能对齐或水平、 垂直同步两个或多个图表区。  
  
 首先，设置<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignWithChartArea%2A>属性的名称<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea>对象。 此图表区将然后对齐，基于<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentStyle%2A>设置，定义要使用的对齐方式，与<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentOrientation%2A>设置，定义应该用于设置的对齐方式的图表区的元素。  
  
 如果<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignWithChartArea%2A>未设置属性、 图表区不会对齐，而不考虑<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentStyle%2A>和<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentOrientation%2A>设置。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AlignmentStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.AreaAlignmentStyles AlignmentStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.AreaAlignmentStyles AlignmentStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property AlignmentStyle As AreaAlignmentStyles" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::AreaAlignmentStyles AlignmentStyle { System::Windows::Forms::DataVisualization::Charting::AreaAlignmentStyles get(); void set(System::Windows::Forms::DataVisualization::Charting::AreaAlignmentStyles value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.FlagsEnumUITypeEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.AreaAlignmentStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 的对齐样式。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentStyles" /> 枚举值，它可表示单个值或按位“或”组合的多个值，该值定义要使用的对齐方式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentStyle%2A>属性水平、 垂直对齐两个或多个图表区和 / 或。 对齐类型是以下值之一，或下面的值的按位 OR 组合。  
  
|成员名称|描述|  
|-----------------|-----------------|  
|全部|图表区域使用所有值进行对齐。|  
|AxesView|使用指定的视图对齐图表区<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea>。|  
|Cursor|对游标对齐图表区。|  
|无|图表区域不会自动对齐。|  
|位置|与对齐图表区<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.Position%2A>指定的图表区。|  
|InnerPlotPosition|与对齐图表区<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.InnerPlotPosition%2A>指定的图表区。|  
  
 如果<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignWithChartArea%2A>未设置值，<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentStyle%2A>属性将产生任何影响。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AlignWithChartArea">
      <MemberSignature Language="C#" Value="public string AlignWithChartArea { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AlignWithChartArea" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignWithChartArea" />
      <MemberSignature Language="VB.NET" Value="Public Property AlignWithChartArea As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AlignWithChartArea { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("NotSet")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.LegendAreaNameConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此图表区域应与之对齐的 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象的名称。</summary>
        <value>一个 <see langword="string" /> 值，该值表示此图表区域应与之对齐的 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象的名称。 默认值为空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignWithChartArea%2A>，<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentOrientation%2A>和<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentStyle%2A>属性，它是和 / 或可能对齐或水平、 垂直同步两个或多个图表区。  
  
 首先，设置<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignWithChartArea%2A>属性的名称<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea>对象。 此图表区将然后对齐，基于<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentStyle%2A>设置，定义要使用的对齐方式，与<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentOrientation%2A>设置，定义应该用于设置的对齐方式的图表区的元素。  
  
 如果<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignWithChartArea%2A>未设置属性、 图表区不会对齐，而不考虑<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentStyle%2A>和<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentOrientation%2A>设置。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Area3DStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle Area3DStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle Area3DStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.Area3DStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property Area3DStyle As ChartArea3DStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::ChartArea3DStyle ^ Area3DStyle { System::Windows::Forms::DataVisualization::Charting::ChartArea3DStyle ^ get(); void set(System::Windows::Forms::DataVisualization::Charting::ChartArea3DStyle ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle" /> 对象，该对象用于实现图表区域中所有序列的三维 (3D)。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle" /> 对象，该对象为图表区域中绘制的所有序列实现三维效果。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要启用或禁用三维图表区，将设置<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle.Enable3D%2A>属性。  
  
 当在以三维形式绘制图表时，在轴上不支持刻度分隔线。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Axes">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.Axis[] Axes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataVisualization.Charting.Axis[] Axes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.Axes" />
      <MemberSignature Language="VB.NET" Value="Public Property Axes As Axis()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Windows::Forms::DataVisualization::Charting::Axis ^&gt; ^ Axes { cli::array &lt;System::Windows::Forms::DataVisualization::Charting::Axis ^&gt; ^ get(); void set(cli::array &lt;System::Windows::Forms::DataVisualization::Charting::Axis ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.AxesArrayEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.AxesArrayConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.Axis[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示图表区域中所有轴的数组。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> 对象的数组，该数组表示图表区域使用的所有轴。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的主要用途是提供可访问的 X，Y，X2，Y2 轴，在设计时属性。  
  
 在运行时，图表区的轴应使用访问各个轴属性，如<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AxisX%2A>， <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.AxisX2%2A>，依次类推。  
  
 如果你决定在运行时使用此属性 — 例如，在事件中 — 你可以通过指定访问此数组中的某个项<xref:System.Windows.Forms.DataVisualization.Charting.AxisName>作为标识符的枚举成员。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AxisX">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.Axis AxisX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataVisualization.Charting.Axis AxisX" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.AxisX" />
      <MemberSignature Language="VB.NET" Value="Public Property AxisX As Axis" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::Axis ^ AxisX { System::Windows::Forms::DataVisualization::Charting::Axis ^ get(); void set(System::Windows::Forms::DataVisualization::Charting::Axis ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.Axis</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示主 X 轴的 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> 对象。</summary>
        <value>表示主 X 轴的 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性可操作主 x 轴的图表区中。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AxisX2">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.Axis AxisX2 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataVisualization.Charting.Axis AxisX2" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.AxisX2" />
      <MemberSignature Language="VB.NET" Value="Public Property AxisX2 As Axis" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::Axis ^ AxisX2 { System::Windows::Forms::DataVisualization::Charting::Axis ^ get(); void set(System::Windows::Forms::DataVisualization::Charting::Axis ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.Axis</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示辅助 X 轴的 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> 对象。</summary>
        <value>表示辅助 X 轴的 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性可操作在图表区辅助 x 轴。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AxisY">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.Axis AxisY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataVisualization.Charting.Axis AxisY" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.AxisY" />
      <MemberSignature Language="VB.NET" Value="Public Property AxisY As Axis" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::Axis ^ AxisY { System::Windows::Forms::DataVisualization::Charting::Axis ^ get(); void set(System::Windows::Forms::DataVisualization::Charting::Axis ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.Axis</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示主 Y 轴的 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> 对象。</summary>
        <value>表示主 Y 轴的 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性可操作主 y 轴的图表区中。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AxisY2">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.Axis AxisY2 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataVisualization.Charting.Axis AxisY2" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.AxisY2" />
      <MemberSignature Language="VB.NET" Value="Public Property AxisY2 As Axis" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::Axis ^ AxisY2 { System::Windows::Forms::DataVisualization::Charting::Axis ^ get(); void set(System::Windows::Forms::DataVisualization::Charting::Axis ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.Axis</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示辅助 Y 轴的 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> 对象。</summary>
        <value>表示辅助 Y 轴的 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性可操作在图表区辅助 y 轴。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象的背景色。</summary>
        <value>一个 <see cref="T:System.Drawing.Color" /> 值，该值指示图表区域的背景色。 默认颜色为 <see cref="T:System.Drawing.Color.White" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以将此属性设置为任何有效的 ARGB alpha、 红色、 绿色 (蓝色） 值。  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackColor%2A>值将为第一种颜色使用如果已指定背景的渐变颜色。  
  
 Alpha 值控制一种颜色的不的透明度。 如果将此颜色设置为"透明"— 也就是说，如果你使用的 alpha 值为 0-无颜色将分配到的图表区的背景。 因此，背景将呈透明。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackGradientStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.GradientStyle BackGradientStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.GradientStyle BackGradientStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackGradientStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BackGradientStyle As GradientStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::GradientStyle BackGradientStyle { System::Windows::Forms::DataVisualization::Charting::GradientStyle get(); void set(System::Windows::Forms::DataVisualization::Charting::GradientStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.GradientStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置图表区域的背景渐变方向，还确定是否使用渐变。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> 枚举，指定图表的背景渐变的方向和是否使用渐变。 默认值为 <see cref="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackGradientStyle%2A>属性来确定是否图表区将显示渐变，并以确定渐变的方向，如果一个使用。  
  
 有关可用模式的列表，请参阅<xref:System.Windows.Forms.DataVisualization.Charting.GradientStyle>枚举。  
  
 若要使用渐变颜色：  
  
-   设置图表区背景与主要颜色<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackColor%2A>属性。  
  
-   设置与图表区背景辅助颜色<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackSecondaryColor%2A>属性。  
  
-   将此项设置<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackGradientStyle%2A>为所需的渐变样式的属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackHatchStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle BackHatchStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle BackHatchStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackHatchStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BackHatchStyle As ChartHatchStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::ChartHatchStyle BackHatchStyle { System::Windows::Forms::DataVisualization::Charting::ChartHatchStyle get(); void set(System::Windows::Forms::DataVisualization::Charting::ChartHatchStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象的阴影样式。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> 枚举，指定图表区域的阴影样式。 默认值为 <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle>枚举指定使用类型的画笔的阴影模式<xref:System.Drawing.Drawing2D.HatchBrush>。 阴影图案由纯色背景色和背景上绘制的直线组成。  
  
 有关可用的阴影样式的列表，请参阅<xref:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle>枚举。  
  
> [!NOTE]
>  阴影行的颜色由<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackSecondaryColor%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImage">
      <MemberSignature Language="C#" Value="public string BackImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BackImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackImage" />
      <MemberSignature Language="VB.NET" Value="Public Property BackImage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BackImage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象的背景图像。</summary>
        <value>表示图像文件的 URL 的 <see langword="string" /> 值，用作图表区域的背景图像。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性定义的背景图像路径<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea>，和可以是绝对或相对 URL。  
  
 若要定位图像，请使用<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackImageAlignment%2A>和<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackImageWrapMode%2A>属性。  
  
 你还可以指定通过设置为"透明"的映像显示的颜色之一<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackImageTransparentColor%2A>属性。  
  
 映像是支持.NET Framework，包括图标的任何有效图形文件。  
  
 背景图像优先于其他后台属性，如渐变颜色。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImageAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle BackImageAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle BackImageAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackImageAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property BackImageAlignment As ChartImageAlignmentStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::ChartImageAlignmentStyle BackImageAlignment { System::Windows::Forms::DataVisualization::Charting::ChartImageAlignmentStyle get(); void set(System::Windows::Forms::DataVisualization::Charting::ChartImageAlignmentStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 背景图像的对齐方式。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle" /> 枚举值，指定图表区域的背景图像的对齐方式。 默认值为 <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.TopLeft" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性确定图表区的背景图像的对齐方式，并且仅应用时<xref:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode>属性设置为<xref:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Unscaled>。  
  
 有关可用的对齐方式的详细信息，请参阅<xref:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle>枚举主题。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImageTransparentColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackImageTransparentColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackImageTransparentColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackImageTransparentColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BackImageTransparentColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackImageTransparentColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象背景图像的颜色，该背景图像将以透明色绘制。</summary>
        <value>一个 <see cref="T:System.Drawing.Color" /> 值，表示透明的背景图像的颜色 默认值为 <see cref="F:System.Drawing.Color.Empty" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImageWrapMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode BackImageWrapMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode BackImageWrapMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackImageWrapMode" />
      <MemberSignature Language="VB.NET" Value="Public Property BackImageWrapMode As ChartImageWrapMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::ChartImageWrapMode BackImageWrapMode { System::Windows::Forms::DataVisualization::Charting::ChartImageWrapMode get(); void set(System::Windows::Forms::DataVisualization::Charting::ChartImageWrapMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象背景图像的绘制模式。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode" /> 枚举值，指定一个图表区域的背景图像的绘制模式 默认值为 <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Tile" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackImageWrapMode%2A>属性确定图像的显示方式; 映像可以平铺、 缩放后，等等。  
  
 如果缩放图像，它将拉伸以适合图表区的边界。 如果平铺图像，则从图表区的左上角开始，对其重复绘制。  
  
 有关可用包装模式的详细信息，请参阅<xref:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode>枚举主题。  
  
 如果<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackImageWrapMode%2A>属性设置为<xref:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Unscaled>，绘制图像的位置由<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackImageAlignment%2A>属性设置。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackSecondaryColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackSecondaryColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackSecondaryColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackSecondaryColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BackSecondaryColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackSecondaryColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象背景的辅助颜色。</summary>
        <value>一个 <see cref="T:System.Drawing.Color" /> 值，该值指示图表区域背景的辅助颜色。 默认值为 <see cref="F:System.Drawing.Color.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackSecondaryColor%2A>属性是确定的辅助背景色的多个相关属性之一<xref:System.Windows.Forms.DataVisualization.Charting.Chart>对象，并在应用渐变颜色时使用。  
  
 你可以设置<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackSecondaryColor%2A>为任何有效的 ARGB alpha、 红色、 绿色 (蓝色） 值。  
  
 如果使用阴影，则<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackSecondaryColor%2A>属性确定图表区的阴影行的颜色。  
  
 若要使用的图表区背景渐变颜色：  
  
-   设置与主要颜色<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackColor%2A>属性。  
  
-   设置使用的辅助颜色<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackSecondaryColor%2A>属性。  
  
-   设置<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackGradientStyle%2A>为所需的渐变样式的属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BorderColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BorderColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BorderColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BorderColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Black")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象的边框颜色。</summary>
        <value>一个 <see cref="T:System.Drawing.Color" /> 值，该值指定图表区的边框颜色。 默认颜色为 <see cref="F:System.Drawing.Color.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以设置<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BorderColor%2A>为任何有效的 ARGB alpha、 红色、 绿色 (蓝色） 值的属性。  
  
> [!NOTE]
>  对于饼图和圆环图图表，此属性确定射线型和水平线的颜色，当饼图或圆环图之外绘制数据标签 — 也就是说，如果`LabelStyle`自定义属性设置为"外部"。  
  
 此属性也确定三维图表的标记行，如果`ShowMarkerLines`自定义属性设置为`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderDashStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.ChartDashStyle BorderDashStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.ChartDashStyle BorderDashStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BorderDashStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderDashStyle As ChartDashStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::ChartDashStyle BorderDashStyle { System::Windows::Forms::DataVisualization::Charting::ChartDashStyle get(); void set(System::Windows::Forms::DataVisualization::Charting::ChartDashStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.ChartDashStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象的边框样式。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> 枚举值，该值确定图表区域的边框样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BorderDashStyle%2A>属性确定要用于边框的线条样式。 行可以是实体、 线和等。  
  
 有关其他边框样式，请参阅<xref:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle>枚举主题。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderWidth">
      <MemberSignature Language="C#" Value="public int BorderWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BorderWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BorderWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BorderWidth { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象的边框宽度。</summary>
        <value>一个 <see langword="integer" /> 值，该值确定图表区域的边框宽度（以像素为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请注意，<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BorderWidth%2A>属性还可以设置为折线图，显示为线条样式和等的自定义图例项的行的宽度。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CursorX">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.Cursor CursorX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataVisualization.Charting.Cursor CursorX" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorX" />
      <MemberSignature Language="VB.NET" Value="Public Property CursorX As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::Cursor ^ CursorX { System::Windows::Forms::DataVisualization::Charting::Cursor ^ get(); void set(System::Windows::Forms::DataVisualization::Charting::Cursor ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Cursor" /> 对象，该对象用于沿 X 轴的光标和所选范围。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Cursor" /> 对象，该对象用于沿 X 轴的光标和所选范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这<xref:System.Windows.Forms.DataVisualization.Charting.Cursor>对象用于 x 轴游标和其所选的范围。 对于除条形图类型以外的所有图表，x 轴游标都表示垂直光标。 对于条形图类型，x 轴游标都表示水平光标。  
  
 请参阅<xref:System.Windows.Forms.DataVisualization.Charting.Cursor>类及其成员的说明的文档，以及示例源代码。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CursorY">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.Cursor CursorY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataVisualization.Charting.Cursor CursorY" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorY" />
      <MemberSignature Language="VB.NET" Value="Public Property CursorY As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::Cursor ^ CursorY { System::Windows::Forms::DataVisualization::Charting::Cursor ^ get(); void set(System::Windows::Forms::DataVisualization::Charting::Cursor ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Cursor" /> 对象，该对象用于沿 Y 轴的光标和所选范围。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Cursor" /> 对象，该对象用于沿 Y 轴的光标和所选范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这<xref:System.Windows.Forms.DataVisualization.Charting.Cursor>对象用于 y 轴游标和其所选的范围。 对于除条形图类型以外的所有图表，y 轴游标表示水平光标。 对于条形图类型，y 轴游标表示垂直光标。  
  
 请参阅<xref:System.Windows.Forms.DataVisualization.Charting.Cursor>类及其成员的说明的文档，以及示例源代码。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartArea.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          如果释放托管资源和非托管资源，则为 <see langword="true" />；如果仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>释放非托管资源和（可选）托管资源。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSeriesDepth">
      <MemberSignature Language="C#" Value="public float GetSeriesDepth (System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetSeriesDepth(class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartArea.GetSeriesDepth(System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetSeriesDepth(System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="series">要检索其深度的 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />。</param>
        <summary>返回图表区域中 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> 的深度。</summary>
        <returns>一个 <see langword="float" /> 值，该值表示指定 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> 的深度，以图表区域深度的百分比来度量。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法以获取一系列指定的深度。 返回的值的度量如下中使用的是相同的度量单位的图表区深度百分比<xref:System.Windows.Forms.DataVisualization.Charting.Point3D.Z%2A>属性。  
  
 所有序列都具有的深度，而不考虑其图表类型。 例如，甚至点和气泡系列都具有深度，即使整个深度不用于绘制的点或气泡。  
  
 一系列的深度可以用于确定在自定义绘图例程中使用的点的 Z 值。  
  
> [!NOTE]
>  在自定义的三维绘制中使用的任何点必须从相对 3D 坐标转换为使用相对二维坐标<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.TransformPoints%2A>方法。  
  
 若要从轴中获取相对 X 和 Y 值，请使用<xref:System.Windows.Forms.DataVisualization.Charting.Axis.ValueToPosition%2A>X 和 Y 轴的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSeriesZPosition">
      <MemberSignature Language="C#" Value="public float GetSeriesZPosition (System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetSeriesZPosition(class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartArea.GetSeriesZPosition(System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetSeriesZPosition(System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="series">检索其 Z 位置的 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />。</param>
        <summary>返回序列的 Z 位置，它对自定义绘图非常有用。</summary>
        <returns>一个 <see langword="float" /> 值，该值表示指定序列的 Z 位置，以图表区域深度的百分比来度量。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法以获取一系列的 Z 位置。 Z 位置从图表区背面墙测量到的数据序列中，中心和以图表区深度的百分比表示。 例如，便中途沿 z 轴绘制一系列具有 Z 位置为 50。  
  
 一系列的 Z 位置通常用于自定义绘图例程。  
  
> [!NOTE]
>  在自定义的三维绘制中使用的任何点必须从相对 3D 坐标转换为使用相对二维坐标<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.TransformPoints%2A>方法。  
  
 若要从轴中获取相对 X 和 Y 值，请使用<xref:System.Windows.Forms.DataVisualization.Charting.Axis.ValueToPosition%2A>X 和 Y 轴的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerPlotPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.ElementPosition InnerPlotPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataVisualization.Charting.ElementPosition InnerPlotPosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.InnerPlotPosition" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerPlotPosition As ElementPosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::ElementPosition ^ InnerPlotPosition { System::Windows::Forms::DataVisualization::Charting::ElementPosition ^ get(); void set(System::Windows::Forms::DataVisualization::Charting::ElementPosition ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.ElementPositionConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.ElementPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> 对象，该对象定义图表区域对象的内部绘图位置。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> 对象，该对象定义 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象的内部绘图位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.InnerPlotPosition%2A>属性定义用于绘制数据图表区域元素内的矩形; 它不包括刻度线、 轴标签等。  
  
 为此属性 (0，0 到 100100) 使用的坐标与相关<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea>对象，而不适用于整个<xref:System.Windows.Forms.DataVisualization.Charting.Chart>。  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.InnerPlotPosition%2A>属性可以用于对齐多个图表区。 但是，如果一个图表区有刻度线和轴标签，而另一个不使用，无法调整其轴线。  
  
> [!IMPORTANT]
>  此属性也可用来更改图表，如饼图或圆环图的大小，而生成的图表图像的大小发生更改。  
  
 若要更改的整个位置<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea>对象都使用<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.Position%2A>属性改为。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSameFontSizeForAllAxes">
      <MemberSignature Language="C#" Value="public bool IsSameFontSizeForAllAxes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSameFontSizeForAllAxes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.IsSameFontSizeForAllAxes" />
      <MemberSignature Language="VB.NET" Value="Public Property IsSameFontSizeForAllAxes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSameFontSizeForAllAxes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个标志，该标志确定相关图表区域轴的标签大小是否相等。</summary>
        <value>
          如果 <see cref="P:System.Windows.Forms.DataVisualization.Charting.Axis.IsLabelAutoFit" /> 属性设置为 <see langword="true" /> 的所有轴并都将使用相同字号的显示标签，则为 <see langword="true" />；否则为 <see langword="false." /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自动计算字体大小<xref:System.Windows.Forms.DataVisualization.Charting.Chart>具有适合所使用的最大大小的控件。  
  
 此属性适用于所有图表区轴具有其<xref:System.Windows.Forms.DataVisualization.Charting.Axis.IsLabelAutoFit%2A>属性设置为`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象的唯一名称。</summary>
        <value>一个 <see langword="string" /> 值，该值表示 <see langword="ChartArea" /> 对象的唯一名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名称<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea>对象必须是唯一的否则将引发异常。  
  
 此属性可以用作索引器检索时<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea>对象<xref:System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection>对象。  
  
 如果将此属性设置为零长度字符串。 将引发异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.ElementPosition Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataVisualization.Charting.ElementPosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.Position" />
      <MemberSignature Language="VB.NET" Value="Public Property Position As ElementPosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::ElementPosition ^ Position { System::Windows::Forms::DataVisualization::Charting::ElementPosition ^ get(); void set(System::Windows::Forms::DataVisualization::Charting::ElementPosition ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.ElementPositionConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.ElementPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> 对象，该对象定义 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象在 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> 内的位置。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> 对象，该对象定义某个图表区域对象在图表图像内的位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性定义的位置<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea>对象内<xref:System.Windows.Forms.DataVisualization.Charting.Chart>，并包括刻度线、 轴标签和等。  
  
 为此属性 (0，0 到 100100) 使用的坐标将与整个图表图像。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecalculateAxesScale">
      <MemberSignature Language="C#" Value="public void RecalculateAxesScale ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecalculateAxesScale() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartArea.RecalculateAxesScale" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecalculateAxesScale ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecalculateAxesScale();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在 <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.Customize" /> 事件中对图表进行更改之后，重新计算图表区域的属性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你使用<xref:System.Windows.Forms.DataVisualization.Charting.Chart.Customize>事件进行更改，，有时需要重新计算图表区属性，以便正确呈现图表。 例如，如果更改了轴范围，该轴的标签，必须重新计算。  
  
 调用此方法，在使用后<xref:System.Windows.Forms.DataVisualization.Charting.Chart.Customize>事件以进行任何更改到图表区。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShadowColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ShadowColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ShadowColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.ShadowColor" />
      <MemberSignature Language="VB.NET" Value="Public Property ShadowColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ShadowColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "128,0,0,0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象的阴影颜色。</summary>
        <value>一个 <see cref="T:System.Drawing.Color" /> 值，该值指示图表区域的阴影颜色。 默认颜色为 <see cref="P:System.Drawing.Color.Black" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可以设置为任何有效的 ARGB alpha、 红色、 绿色 (蓝色） 值。  
  
 Alpha 值可以用于实现"真实"隐藏作用;请尝试"128,0,0,0"阴影的颜色值。  
  
 若要实现阴影，设置<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.ShadowOffset%2A>为零 (0) 以外的值的属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShadowOffset">
      <MemberSignature Language="C#" Value="public int ShadowOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ShadowOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.ShadowOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property ShadowOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ShadowOffset { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> 对象的阴影偏移量（以像素为单位）。</summary>
        <value>表示图表区域阴影偏移量的 <see langword="integer" />（以像素为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要实现阴影，请使用零 (0) 以外的值。 正值将导致阴影向下和向右移动。 负值将导致阴影向上和向左移动。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Windows.Forms.DataVisualization.Charting.Point3D[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(class System.Windows.Forms.DataVisualization.Charting.Point3D[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartArea.TransformPoints(System.Windows.Forms.DataVisualization.Charting.Point3D[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (points As Point3D())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(cli::array &lt;System::Windows::Forms::DataVisualization::Charting::Point3D ^&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Windows.Forms.DataVisualization.Charting.Point3D[]" />
      </Parameters>
      <Docs>
        <param name="points">三维点数组。</param>
        <summary>将三维变换应用于一个三维点数组，必须完成该应用才能调用 GDI+ 绘图方法。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public virtual bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Visible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ParenthesizePropertyName(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于确定图表区域是否可见的标志。</summary>
        <value>
          如果图表区域可见，则为 <see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将此标志设置为`false`，还将隐藏与图表区关联的所有序列、 图例、 标题和批注对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>