<Type Name="PrinterSettings" FullName="System.Drawing.Printing.PrinterSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7c0e502570086836fec57f5511363467f75093f0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410601" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PrinterSettings : ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit PrinterSettings extends System.Object implements class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Printing.PrinterSettings" />
  <TypeSignature Language="VB.NET" Value="Public Class PrinterSettings&#xA;Implements ICloneable" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrinterSettings : ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>指定有关在从 Windows 窗体应用程序打印时如何打印文档的信息，包括打印文档的打印机。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，你访问<xref:System.Drawing.Printing.PrinterSettings>通过<xref:System.Drawing.Printing.PrintDocument.PrinterSettings%2A?displayProperty=nameWithType>或<xref:System.Drawing.Printing.PageSettings.PrinterSettings%2A?displayProperty=nameWithType>属性以修改打印机设置。 最常见的打印机设置是<xref:System.Drawing.Printing.PrinterSettings.PrinterName%2A>，它指定要打印到打印机。  
  
 有关打印功能与 Windows 窗体的详细信息，请参阅<xref:System.Drawing.Printing>命名空间概述。 如果你想要从 Windows Presentation Foundation 应用程序打印，请参阅<xref:System.Printing>命名空间。  
  
   
  
## Examples  
 下面的代码示例将在指定的打印机上打印文档。 此示例包括三个先决条件：  
  
-   一个名为变量`filePath`已设置为该文件的路径为打印。  
  
-   一个名为方法`pd_PrintPage`，它将处理<xref:System.Drawing.Printing.PrintDocument.PrintPage>事件，已定义。  
  
-   一个名为变量`printer`已设置为打印机的名称。  
  
 使用<xref:System.Drawing>， <xref:System.Drawing.Printing>，和<xref:System.IO>对于此示例的命名空间。  
  
 [!code-cpp[Classic PrinterSettings Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic PrinterSettings Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PrinterSettings Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic PrinterSettings Example/CS/source.cs#1)]
 [!code-vb[Classic PrinterSettings Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic PrinterSettings Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    <altmember cref="P:System.Drawing.Printing.PrintDocument.PrinterSettings" />
    <altmember cref="P:System.Drawing.Printing.PageSettings.PrinterSettings" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrinterSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PrinterSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrinterSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Drawing.Printing.PrinterSettings" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认构造函数初始化为其默认值的所有字段。  
  
 通常情况下，你不创建的实例<xref:System.Drawing.Printing.PrinterSettings>，而是改用<xref:System.Drawing.Printing.PrintDocument.PrinterSettings%2A?displayProperty=nameWithType>设置打印机设置。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanDuplex">
      <MemberSignature Language="C#" Value="public bool CanDuplex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanDuplex" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.CanDuplex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanDuplex As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanDuplex { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取指示打印机是否支持双面打印的值。</summary>
        <value>
          若打印机支持双面打印，则为 <see langword="true" />，反之，则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要打印使用双工，并且如果打印机支持它，<xref:System.Drawing.Printing.PrinterSettings.Duplex%2A>之一<xref:System.Drawing.Printing.Duplex>值。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.Duplex" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.Collate" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.IsPlotter" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.IsValid" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.SupportsColor" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PrinterSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.Drawing.Printing.PrinterSettings" /> 的副本。</summary>
        <returns>该对象的一个副本。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Collate">
      <MemberSignature Language="C#" Value="public bool Collate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Collate" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.Collate" />
      <MemberSignature Language="VB.NET" Value="Public Property Collate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Collate { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示打印文档是否逐份打印。</summary>
        <value>
          若文档是逐份打印的，则为 <see langword="true" />；反之，则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅当副本数大于 1 时，才执行排序。 设置<xref:System.Drawing.Printing.PrinterSettings.Copies%2A>属性来指定要打印的份数。  
  
 设置<xref:System.Drawing.Printing.PrinterSettings.Collate%2A>到`true`下一步复制的第一页打印之前将打印文档的完整副本。 `false` 将通过指定打印下一页之前的份数打印每一页。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.Copies" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.CanDuplex" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.IsPlotter" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="Copies">
      <MemberSignature Language="C#" Value="public short Copies { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 Copies" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.Copies" />
      <MemberSignature Language="VB.NET" Value="Public Property Copies As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short Copies { short get(); void set(short value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要打印的文档份数。</summary>
        <value>要打印的份数。 默认值为 1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 并非所有打印机都支持打印多份。 你可以使用<xref:System.Drawing.Printing.PrinterSettings.MaximumCopies%2A>属性来确定的最大数将打印机支持复制。 如果设置的副本数高于受打印机的最大副本，将打印仅最大副本数，并不会出现异常。  
  
> [!NOTE]
>  一些打印机可能不支持一次打印多个副本。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.Copies" /> 属性的值小于零。</exception>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.DefaultPageSettings" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.MaximumCopies" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.Collate" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.Duplex" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.LandscapeAngle" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.MaximumPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.MinimumPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PrintRange" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateMeasurementGraphics">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回 <see cref="T:System.Drawing.Graphics" />，它包含打印机信息。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateMeasurementGraphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics CreateMeasurementGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Graphics CreateMeasurementGraphics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PrinterSettings.CreateMeasurementGraphics" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateMeasurementGraphics () As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Graphics ^ CreateMeasurementGraphics();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回 <see cref="T:System.Drawing.Graphics" />，它包含创建 <see cref="T:System.Drawing.Printing.PrintDocument" /> 时有用的打印机信息。</summary>
        <returns>
          <see cref="T:System.Drawing.Graphics" />，包含来自打印机的信息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与<xref:System.Drawing.Printing.PrinterSettings.CreateMeasurementGraphics%2A>方法，你可以获取<xref:System.Drawing.Graphics>而无需创建打印作业的打印机。 你可以使用<xref:System.Drawing.Graphics>以确定如何向布局如字体、 大小和复杂的打印作业的类型样式的可视元素。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Drawing.Printing.InvalidPrinterException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 属性中命名的打印机不存在。</exception>
        <altmember cref="T:System.Drawing.Printing.PrintDocument" />
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <Member MemberName="CreateMeasurementGraphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics CreateMeasurementGraphics (bool honorOriginAtMargins);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Graphics CreateMeasurementGraphics(bool honorOriginAtMargins) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PrinterSettings.CreateMeasurementGraphics(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateMeasurementGraphics (honorOriginAtMargins As Boolean) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Graphics ^ CreateMeasurementGraphics(bool honorOriginAtMargins);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="honorOriginAtMargins" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="honorOriginAtMargins">
          <see langword="true" /> 表示边距处的原点；否则为 <see langword="false" />。</param>
        <summary>返回包含打印机信息的 <see cref="T:System.Drawing.Graphics" />，选择性地指定边距处的原点。</summary>
        <returns>
          <see cref="T:System.Drawing.Graphics" />，包含来自 <see cref="T:System.Drawing.Printing.PageSettings" /> 的打印机信息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与<xref:System.Drawing.Printing.PrinterSettings.CreateMeasurementGraphics%2A>方法，你可以获取<xref:System.Drawing.Graphics>而无需创建打印作业的打印机。 使用<xref:System.Drawing.Graphics>以确定如何向布局如字体、 大小和复杂的打印作业的类型样式的可视元素。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMeasurementGraphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics CreateMeasurementGraphics (System.Drawing.Printing.PageSettings pageSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Graphics CreateMeasurementGraphics(class System.Drawing.Printing.PageSettings pageSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PrinterSettings.CreateMeasurementGraphics(System.Drawing.Printing.PageSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Graphics ^ CreateMeasurementGraphics(System::Drawing::Printing::PageSettings ^ pageSettings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageSettings" Type="System.Drawing.Printing.PageSettings" />
      </Parameters>
      <Docs>
        <param name="pageSettings">要检索其图形对象的 <see cref="T:System.Drawing.Printing.PageSettings" />。</param>
        <summary>返回 <see cref="T:System.Drawing.Graphics" />，包含与指定 <see cref="T:System.Drawing.Printing.PageSettings" /> 关联的打印机信息。</summary>
        <returns>
          <see cref="T:System.Drawing.Graphics" />，包含来自 <see cref="T:System.Drawing.Printing.PageSettings" /> 的打印机信息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与<xref:System.Drawing.Printing.PrinterSettings.CreateMeasurementGraphics%2A>方法，你可以获取<xref:System.Drawing.Graphics>而无需创建打印作业的打印机。 使用<xref:System.Drawing.Graphics>以确定如何向布局如字体、 大小和复杂的打印作业的类型样式的可视元素。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMeasurementGraphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics CreateMeasurementGraphics (System.Drawing.Printing.PageSettings pageSettings, bool honorOriginAtMargins);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Graphics CreateMeasurementGraphics(class System.Drawing.Printing.PageSettings pageSettings, bool honorOriginAtMargins) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PrinterSettings.CreateMeasurementGraphics(System.Drawing.Printing.PageSettings,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Graphics ^ CreateMeasurementGraphics(System::Drawing::Printing::PageSettings ^ pageSettings, bool honorOriginAtMargins);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageSettings" Type="System.Drawing.Printing.PageSettings" />
        <Parameter Name="honorOriginAtMargins" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pageSettings">要检索其 <see cref="T:System.Drawing.Printing.PageSettings" /> 对象的 <see cref="T:System.Drawing.Graphics" />。</param>
        <param name="honorOriginAtMargins">
          <see langword="true" /> 即指定边距处的原点；否则为 <see langword="false" />。</param>
        <summary>创建与指定页设置关联的 <see cref="T:System.Drawing.Graphics" /> 并选择性地指定边距处的原点。</summary>
        <returns>
          <see cref="T:System.Drawing.Graphics" />，包含来自 <see cref="T:System.Drawing.Printing.PageSettings" /> 的打印机信息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Printing.PrinterSettings.CreateMeasurementGraphics%2A>方法可用于获取<xref:System.Drawing.Graphics>而无需创建打印作业的打印机。 使用<xref:System.Drawing.Graphics>以确定如何向布局如字体、 大小和复杂的打印作业的类型样式的可视元素。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultPageSettings">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.PageSettings DefaultPageSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Printing.PageSettings DefaultPageSettings" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.DefaultPageSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultPageSettings As PageSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Printing::PageSettings ^ DefaultPageSettings { System::Drawing::Printing::PageSettings ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PageSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此打印机的默认页设置。</summary>
        <value>
          <see cref="T:System.Drawing.Printing.PageSettings" />，它表示此台打印机的默认页设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 页设置包括在页上的边距的大小、 纸若要使用，以及是否要以彩色打印的大小。 有关页设置的详细信息，请参阅<xref:System.Drawing.Printing.PageSettings>类。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Printing.PageSettings" />
      </Docs>
    </Member>
    <Member MemberName="Duplex">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.Duplex Duplex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Printing.Duplex Duplex" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.Duplex" />
      <MemberSignature Language="VB.NET" Value="Public Property Duplex As Duplex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Printing::Duplex Duplex { System::Drawing::Printing::Duplex get(); void set(System::Drawing::Printing::Duplex value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.Duplex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置双面打印的打印机设置。</summary>
        <value>
          <see cref="T:System.Drawing.Printing.Duplex" /> 值之一。 默认值由打印机决定。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Drawing.Printing.PrinterSettings.CanDuplex%2A>属性检查打印机是否支持双工打印。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.Duplex" /> 属性的值并非 <see cref="T:System.Drawing.Printing.Duplex" /> 值之一。</exception>
        <altmember cref="T:System.Drawing.Printing.Duplex" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.CanDuplex" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.Copies" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.DefaultPageSettings" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.LandscapeAngle" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.MaximumCopies" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.MaximumPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.MinimumPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
      </Docs>
    </Member>
    <Member MemberName="FromPage">
      <MemberSignature Language="C#" Value="public int FromPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FromPage" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.FromPage" />
      <MemberSignature Language="VB.NET" Value="Public Property FromPage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FromPage { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要打印的第一页的页码。</summary>
        <value>要打印的第一页的页码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Printing.PrinterSettings.FromPage%2A>和<xref:System.Drawing.Printing.PrinterSettings.ToPage%2A>属性由<xref:System.Windows.Forms.PrintDialog>当用户选择打印范围。 <xref:System.Windows.Forms.PrintDialog.AllowSomePages%2A?displayProperty=nameWithType>属性必须设置为`true`，使用户能够指定打印范围。 此外，<xref:System.Windows.Forms.PrintDialog>需要<xref:System.Drawing.Printing.PrinterSettings.MinimumPage%2A>和<xref:System.Drawing.Printing.PrinterSettings.MaximumPage%2A>指定与<xref:System.Drawing.Printing.PrinterSettings.FromPage%2A>值要在该范围内。  
  
 在打印过程中，在<xref:System.Drawing.Printing.PrintDocument.PrintPage?displayProperty=nameWithType>事件中查看<xref:System.Drawing.Printing.PrinterSettings.PrintRange%2A>来确定应该打印的内容。 如果<xref:System.Drawing.Printing.PrinterSettings.PrintRange%2A>是<xref:System.Drawing.Printing.PrintRange.SomePages?displayProperty=nameWithType>，使用<xref:System.Drawing.Printing.PrinterSettings.FromPage%2A>和<xref:System.Drawing.Printing.PrinterSettings.ToPage%2A>应打印属性来确定页。 如果<xref:System.Drawing.Printing.PrinterSettings.PrintRange%2A>是<xref:System.Drawing.Printing.PrintRange.Selection?displayProperty=nameWithType>，然后指定仅对所选的页面的输出。  
  
 <xref:System.Drawing.Printing.PrinterSettings.FromPage%2A>，<xref:System.Drawing.Printing.PrinterSettings.ToPage%2A>和<xref:System.Drawing.Printing.PrinterSettings.PrintRange%2A>也可以设置以编程方式，但<xref:System.Drawing.Printing.PrintDocument.PrintPage?displayProperty=nameWithType>实现都是相同。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" /> 属性的值小于零。</exception>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.MaximumPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.MinimumPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PrintRange" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHdevmode">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建与打印机设置相对应的 <see langword="DEVMODE" /> 结构的句柄。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHdevmode">
      <MemberSignature Language="C#" Value="public IntPtr GetHdevmode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int GetHdevmode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PrinterSettings.GetHdevmode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHdevmode () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr GetHdevmode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建与打印机设置相对应的 <see langword="DEVMODE" /> 结构的句柄。</summary>
        <returns>
          <see langword="DEVMODE" /> 结构的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DEVMODE` 结构是特定的设备。 复制`DEVMODE`结构从一个<xref:System.Drawing.Printing.PrinterSettings>到<xref:System.Drawing.Printing.PrinterSettings>不支持另一台打印机。 完成通过此方法创建的句柄后，你必须亲自通过调用本机 Win32`GlobalFree`方法。 在调用此方法时，你将作为参数传递的返回值<xref:System.Drawing.Printing.PrinterSettings.GetHdevmode%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Drawing.Printing.InvalidPrinterException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 属性中命名的打印机不存在。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">未能检索打印机的初始化信息。</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">针对打印和对网络上的所有打印机的访问。 关联的枚举： <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetHdevmode">
      <MemberSignature Language="C#" Value="public IntPtr GetHdevmode (System.Drawing.Printing.PageSettings pageSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int GetHdevmode(class System.Drawing.Printing.PageSettings pageSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PrinterSettings.GetHdevmode(System.Drawing.Printing.PageSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr GetHdevmode(System::Drawing::Printing::PageSettings ^ pageSettings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageSettings" Type="System.Drawing.Printing.PageSettings" />
      </Parameters>
      <Docs>
        <param name="pageSettings">
          <see langword="DEVMODE" /> 结构的句柄所对应于的 <see cref="T:System.Drawing.Printing.PageSettings" /> 对象。</param>
        <summary>创建一个 <see langword="DEVMODE" /> 结构的句柄，它对应于通过 <paramref name="pageSettings" /> 参数指定的打印机和页设置。</summary>
        <returns>
          <see langword="DEVMODE" /> 结构的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DEVMODE` 结构是特定的设备。 复制`DEVMODE`结构从一个<xref:System.Drawing.Printing.PrinterSettings>到<xref:System.Drawing.Printing.PrinterSettings>不支持另一台打印机。  
  
 完成通过此方法创建的句柄后，你必须亲自通过调用本机 Win32`GlobalFree`方法。 在调用此方法时，你将作为参数传递的返回值<xref:System.Drawing.Printing.PrinterSettings.GetHdevmode%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Drawing.Printing.InvalidPrinterException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 属性中命名的打印机不存在。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">未能检索打印机的初始化信息。</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">针对打印和对网络上的所有打印机的访问。 关联的枚举： <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetHdevnames">
      <MemberSignature Language="C#" Value="public IntPtr GetHdevnames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int GetHdevnames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PrinterSettings.GetHdevnames" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHdevnames () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr GetHdevnames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建与打印机设置相对应的 <see langword="DEVNAMES" /> 结构的句柄。</summary>
        <returns>
          <see langword="DEVNAMES" /> 结构的句柄。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 完成通过此方法创建的句柄后，你必须亲自通过调用本机 Win32`GlobalFree`方法。 在调用此方法时，你将作为参数传递的返回值<xref:System.Drawing.Printing.PrinterSettings.GetHdevnames%2A>方法。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">针对打印和对网络上的所有打印机的访问。 关联的枚举： <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="InstalledPrinters">
      <MemberSignature Language="C#" Value="public static System.Drawing.Printing.PrinterSettings.StringCollection InstalledPrinters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Printing.PrinterSettings/StringCollection InstalledPrinters" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.InstalledPrinters" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledPrinters As PrinterSettings.StringCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Printing::PrinterSettings::StringCollection ^ InstalledPrinters { System::Drawing::Printing::PrinterSettings::StringCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PrinterSettings+StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取安装在计算机上所有打印机的名称。</summary>
        <value>
          <see cref="T:System.Drawing.Printing.PrinterSettings.StringCollection" />，它表示安装在计算机上所有打印机的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 已安装的打印机名称的集合可用于提供一种打印机来打印到的用户。  
  
   
  
## Examples  
 下面的代码示例填充`comboInstalledPrinters`与安装的打印机的组合框，并设置要使用的打印的打印机<xref:System.Drawing.Printing.PrinterSettings.PrinterName%2A>属性，当所选内容更改时。 `PopulateInstalledPrintersCombo`正在初始化窗体时调用例程。 该示例需要<xref:System.Drawing.Printing.PrintDocument>变量名为`printDoc`存在以及是否存在特定的组合框。  
  
 [!code-cpp[PaperSource and PaperSize Example with Resolution#5](~/samples/snippets/cpp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CPP/source.cpp#5)]
 [!code-csharp[PaperSource and PaperSize Example with Resolution#5](~/samples/snippets/csharp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CS/source.cs#5)]
 [!code-vb[PaperSource and PaperSize Example with Resolution#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">未能枚举可用的打印机。</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">针对打印和对网络上的所有打印机的访问。 关联的枚举： <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting" /></permission>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
      </Docs>
    </Member>
    <Member MemberName="IsDefaultPrinter">
      <MemberSignature Language="C#" Value="public bool IsDefaultPrinter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefaultPrinter" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.IsDefaultPrinter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDefaultPrinter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDefaultPrinter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 属性是否指定默认打印机（用户显式设置 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 的情况除外）。</summary>
        <value>
          若 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 指定默认打印机，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Printing.PrinterSettings.IsDefaultPrinter%2A> 始终返回`false`时显式设置<xref:System.Drawing.Printing.PrinterSettings.PrinterName%2A>为字符串值以外的其他属性`null`。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Drawing.Printing.PrinterSettings.IsDefaultPrinter%2A>属性。 若要运行此示例，请将以下代码粘贴到窗体并调用`PopulateInstalledPrintersCombo`从窗体的构造函数或<xref:System.Windows.Forms.Form.Load>事件处理方法。  
  
 [!code-csharp[System.Drawing.Printing.PrinterSettingsEx#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Printing.PrinterSettingsEx/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Printing.PrinterSettingsEx#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Printing.PrinterSettingsEx/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDirectPrintingSupported">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个值，该值指示打印机是否支持打印图像文件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDirectPrintingSupported">
      <MemberSignature Language="C#" Value="public bool IsDirectPrintingSupported (System.Drawing.Image image);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDirectPrintingSupported(class System.Drawing.Image image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PrinterSettings.IsDirectPrintingSupported(System.Drawing.Image)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDirectPrintingSupported(System::Drawing::Image ^ image);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="image">要打印的图像。</param>
        <summary>获取一个值，该值指示打印机是否支持打印指定的图像文件。</summary>
        <returns>
          若打印机支持打印指定的图像，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirectPrintingSupported">
      <MemberSignature Language="C#" Value="public bool IsDirectPrintingSupported (System.Drawing.Imaging.ImageFormat imageFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDirectPrintingSupported(class System.Drawing.Imaging.ImageFormat imageFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PrinterSettings.IsDirectPrintingSupported(System.Drawing.Imaging.ImageFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDirectPrintingSupported(System::Drawing::Imaging::ImageFormat ^ imageFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageFormat" Type="System.Drawing.Imaging.ImageFormat" />
      </Parameters>
      <Docs>
        <param name="imageFormat">要打印的 <see cref="T:System.Drawing.Imaging.ImageFormat" />。</param>
        <summary>返回一个值，该值指示打印机是否支持打印指定的图像格式。</summary>
        <returns>
          若打印机支持打印指定的图像格式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPlotter">
      <MemberSignature Language="C#" Value="public bool IsPlotter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPlotter" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.IsPlotter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPlotter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPlotter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取指示该打印机是否是绘图仪的值。</summary>
        <value>
          若打印机是绘图仪，则为 <see langword="true" />；若打印机是光栅打印机，则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 绘图仪是而不是基于光栅的基于矢量的打印机。 大多数基于矢量的打印机使用单独的绘图笔生成输出。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 属性是否指定了有效的打印机。</summary>
        <value>
          若 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 属性指定了有效的打印机，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当您获取或设置一些属性时，有效打印机是必需，否则将引发异常。 若要避免异常，请使用<xref:System.Drawing.Printing.PrinterSettings.IsValid%2A>属性之后设置<xref:System.Drawing.Printing.PrinterSettings.PrinterName%2A>以安全地确定打印机是否有效。  
  
   
  
## Examples  
 下面的代码示例通过设置指定的目标打印机<xref:System.Drawing.Printing.PrinterSettings.PrinterName%2A>属性，并且如果<xref:System.Drawing.Printing.PrinterSettings.IsValid%2A>是`true`，将在指定的打印机上打印文档。 此示例包括三个先决条件：  
  
-   一个名为变量`filePath`已设置为该文件的路径为打印。  
  
-   一个名为方法`pd_PrintPage`，它将处理<xref:System.Drawing.Printing.PrintDocument.PrintPage>事件，已定义。  
  
-   一个名为变量`printer`已设置为打印机的名称。  
  
 使用<xref:System.Drawing>， <xref:System.Drawing.Printing>，和<xref:System.IO>对于此示例的命名空间。  
  
 [!code-cpp[Classic PrinterSettings Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic PrinterSettings Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PrinterSettings Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic PrinterSettings Example/CS/source.cs#1)]
 [!code-vb[Classic PrinterSettings Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic PrinterSettings Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
      </Docs>
    </Member>
    <Member MemberName="LandscapeAngle">
      <MemberSignature Language="C#" Value="public int LandscapeAngle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LandscapeAngle" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.LandscapeAngle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LandscapeAngle As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LandscapeAngle { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取旋转纵向方向以生成横向方向的角度，以度为单位。</summary>
        <value>从纵向到横向所需旋转的角度（以度为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有效的旋转的值为 90 和 270 度。 如果不支持横向，唯一有效的旋转值为 0 度。 你设置<xref:System.Drawing.Printing.PageSettings.Landscape%2A?displayProperty=nameWithType>属性`true`打印横向格式中的页。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.DefaultPageSettings" />
        <altmember cref="P:System.Drawing.Printing.PageSettings.Landscape" />
      </Docs>
    </Member>
    <Member MemberName="MaximumCopies">
      <MemberSignature Language="C#" Value="public int MaximumCopies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumCopies" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.MaximumCopies" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumCopies As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaximumCopies { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取打印机允许用户一次打印的最大份数。</summary>
        <value>打印机允许用户一次打印的最大份数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置<xref:System.Drawing.Printing.PrinterSettings.Copies%2A>属性设置为要打印的份数。 使用<xref:System.Drawing.Printing.PrinterSettings.MaximumCopies%2A>属性以确定是否打印机支持一次打印多个副本，因为一些打印机不这样做。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.Copies" />
      </Docs>
    </Member>
    <Member MemberName="MaximumPage">
      <MemberSignature Language="C#" Value="public int MaximumPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumPage" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.MaximumPage" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumPage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaximumPage { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置可以在 <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" /> 中选定的最大的 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" /> 或 <see cref="T:System.Windows.Forms.PrintDialog" />。</summary>
        <value>可以从 <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" /> 中选定的最大的 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" /> 或 <see cref="T:System.Windows.Forms.PrintDialog" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Printing.PrinterSettings.FromPage%2A>和<xref:System.Drawing.Printing.PrinterSettings.ToPage%2A>属性由<xref:System.Windows.Forms.PrintDialog>当用户选择打印范围。 <xref:System.Windows.Forms.PrintDialog.AllowSomePages%2A?displayProperty=nameWithType>属性必须设置为`true`，使用户能够指定打印范围。 设置时<xref:System.Drawing.Printing.PrinterSettings.FromPage%2A>或<xref:System.Drawing.Printing.PrinterSettings.ToPage%2A>值以编程方式，确保它们在定义的范围内<xref:System.Drawing.Printing.PrinterSettings.MinimumPage%2A>和<xref:System.Drawing.Printing.PrinterSettings.MaximumPage%2A>属性，否则引发异常时显示<xref:System.Windows.Forms.PrintDialog>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.MaximumPage" /> 属性的值小于零。</exception>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.MinimumPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PrintRange" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
      </Docs>
    </Member>
    <Member MemberName="MinimumPage">
      <MemberSignature Language="C#" Value="public int MinimumPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumPage" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.MinimumPage" />
      <MemberSignature Language="VB.NET" Value="Public Property MinimumPage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumPage { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置可以在 <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" /> 中选定的最小的 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" /> 或 <see cref="T:System.Windows.Forms.PrintDialog" />。</summary>
        <value>可以在 <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" /> 中选定的最小的 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" /> 或 <see cref="T:System.Windows.Forms.PrintDialog" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Printing.PrinterSettings.FromPage%2A>和<xref:System.Drawing.Printing.PrinterSettings.ToPage%2A>属性由<xref:System.Windows.Forms.PrintDialog>当用户选择打印范围。 <xref:System.Windows.Forms.PrintDialog.AllowSomePages%2A?displayProperty=nameWithType>属性必须设置为`true`，使用户能够指定打印范围。 设置时<xref:System.Drawing.Printing.PrinterSettings.FromPage%2A>或<xref:System.Drawing.Printing.PrinterSettings.ToPage%2A>值以编程方式，确保它们在定义的范围内<xref:System.Drawing.Printing.PrinterSettings.MinimumPage%2A>和<xref:System.Drawing.Printing.PrinterSettings.MaximumPage%2A>属性，否则引发异常时显示<xref:System.Windows.Forms.PrintDialog>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.MinimumPage" /> 属性的值小于零。</exception>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.MaximumPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PrintRange" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
      </Docs>
    </Member>
    <Member MemberName="PaperSizes">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.PrinterSettings.PaperSizeCollection PaperSizes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Printing.PrinterSettings/PaperSizeCollection PaperSizes" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.PaperSizes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PaperSizes As PrinterSettings.PaperSizeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Printing::PrinterSettings::PaperSizeCollection ^ PaperSizes { System::Drawing::Printing::PrinterSettings::PaperSizeCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PrinterSettings+PaperSizeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取该打印机支持的纸张大小。</summary>
        <value>
          <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />，它表示此台打印机所支持的纸张大小。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Printing.PrinterSettings.PaperSizeCollection>包含<xref:System.Drawing.Printing.PaperSize>表示通过纸张大小的实例<xref:System.Drawing.Printing.PaperSize.Kind%2A?displayProperty=nameWithType>属性，其中包含之一<xref:System.Drawing.Printing.PaperKind>值。  
  
 通常情况下，将通过的页面的纸张大小的设置<xref:System.Drawing.Printing.PageSettings.PaperSize%2A?displayProperty=nameWithType>到有效的属性<xref:System.Drawing.Printing.PaperSize>可通过<xref:System.Drawing.Printing.PrinterSettings.PaperSizes%2A>集合。  
  
 若要指定自定义的纸张大小，请参阅<xref:System.Drawing.Printing.PaperSize.%23ctor%2A>构造函数。  
  
   
  
## Examples  
 下面的代码示例填充`comboPaperSize`与打印机的组合框的支持纸张大小。 此外，自定义的纸张大小被创建并添加到组合框。 <xref:System.Drawing.Printing.PaperSize.PaperName%2A>被标识为提供有关通过将要添加的项的显示字符串的属性<xref:System.Windows.Forms.ListControl.DisplayMember%2A>属性的组合框。 该示例需要<xref:System.Drawing.Printing.PrintDocument>变量名为`printDoc`存在以及是否存在特定的组合框。  
  
 [!code-cpp[PaperSource and PaperSize Example with Resolution#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CPP/source.cpp#1)]
 [!code-csharp[PaperSource and PaperSize Example with Resolution#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CS/source.cs#1)]
 [!code-vb[PaperSource and PaperSize Example with Resolution#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Printing.PaperSize" />
        <altmember cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.InstalledPrinters" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PaperSources" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PrinterResolutions" />
        <altmember cref="P:System.Windows.Forms.ListControl.DisplayMember" />
      </Docs>
    </Member>
    <Member MemberName="PaperSources">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.PrinterSettings.PaperSourceCollection PaperSources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Printing.PrinterSettings/PaperSourceCollection PaperSources" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.PaperSources" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PaperSources As PrinterSettings.PaperSourceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Printing::PrinterSettings::PaperSourceCollection ^ PaperSources { System::Drawing::Printing::PrinterSettings::PaperSourceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PrinterSettings+PaperSourceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取打印机上可用的纸张来源纸盒。</summary>
        <value>
          <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />，表示此台打印机上可用的纸张来源纸盒。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Printing.PrinterSettings.PaperSourceCollection>包含<xref:System.Drawing.Printing.PaperSource>实例表示本文源通过盘子<xref:System.Drawing.Printing.PaperSource.Kind%2A?displayProperty=nameWithType>属性，其中包含之一<xref:System.Drawing.Printing.PaperSourceKind>值。  
  
 通常情况下，设置页的纸张来源通过<xref:System.Drawing.Printing.PageSettings.PaperSource%2A?displayProperty=nameWithType>到有效的属性<xref:System.Drawing.Printing.PaperSource>可通过<xref:System.Drawing.Printing.PrinterSettings.PaperSources%2A>集合。  
  
   
  
## Examples  
 下面的代码示例填充`comboPaperSource`支持的组合框与打印机纸张来源。 <xref:System.Drawing.Printing.PaperSource.SourceName%2A>被标识为提供有关通过将要添加的项的显示字符串的属性<xref:System.Windows.Forms.ListControl.DisplayMember%2A>属性的组合框。 该示例需要<xref:System.Drawing.Printing.PrintDocument>变量名为`printDoc`存在以及是否存在特定的组合框。  
  
 [!code-cpp[PaperSource and PaperSize Example with Resolution#2](~/samples/snippets/cpp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CPP/source.cpp#2)]
 [!code-csharp[PaperSource and PaperSize Example with Resolution#2](~/samples/snippets/csharp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CS/source.cs#2)]
 [!code-vb[PaperSource and PaperSize Example with Resolution#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Printing.PaperSource" />
        <altmember cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.InstalledPrinters" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PaperSizes" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PrinterResolutions" />
        <altmember cref="P:System.Windows.Forms.ListControl.DisplayMember" />
      </Docs>
    </Member>
    <Member MemberName="PrinterName">
      <MemberSignature Language="C#" Value="public string PrinterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PrinterName" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
      <MemberSignature Language="VB.NET" Value="Public Property PrinterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PrinterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要使用的打印机的名称。</summary>
        <value>要使用的打印机的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在设置打印机名称之后, 调用<xref:System.Drawing.Printing.PrinterSettings.IsValid%2A>以确定是否打印机名称识别为有效的打印机系统上。  
  
 你还可以使用<xref:System.Drawing.Printing.PrinterSettings.InstalledPrinters%2A>属性来获取系统上安装的打印机的列表。  
  
   
  
## Examples  
 下面的代码示例通过设置指定的目标打印机<xref:System.Drawing.Printing.PrinterSettings.PrinterName%2A>属性，并且如果<xref:System.Drawing.Printing.PrinterSettings.IsValid%2A>是`true`，将在指定的打印机上打印文档。 此示例包括三个先决条件：  
  
-   一个名为变量`filePath`已设置为该文件的路径为打印。  
  
-   一个名为方法`pd_PrintPage`，它将处理<xref:System.Drawing.Printing.PrintDocument.PrintPage>事件，已定义。  
  
-   一个名为变量`printer`已设置为打印机的名称。  
  
 使用<xref:System.Drawing>， <xref:System.Drawing.Printing>，和<xref:System.IO>对于此示例的命名空间。  
  
 [!code-cpp[Classic PrinterSettings Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic PrinterSettings Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PrinterSettings Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic PrinterSettings Example/CS/source.cs#1)]
 [!code-vb[Classic PrinterSettings Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic PrinterSettings Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">针对打印和对网络上的所有打印机的访问。 关联的枚举： <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting" /></permission>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.IsValid" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.InstalledPrinters" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.Duplex" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.MaximumCopies" />
      </Docs>
    </Member>
    <Member MemberName="PrinterResolutions">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection PrinterResolutions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Printing.PrinterSettings/PrinterResolutionCollection PrinterResolutions" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.PrinterResolutions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrinterResolutions As PrinterSettings.PrinterResolutionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Printing::PrinterSettings::PrinterResolutionCollection ^ PrinterResolutions { System::Drawing::Printing::PrinterSettings::PrinterResolutionCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PrinterSettings+PrinterResolutionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取该打印机支持的所有分辨率。</summary>
        <value>
          <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />，它显示此打印机所支持的分辨率。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection>包含<xref:System.Drawing.Printing.PrinterResolution>实例表示通过受支持的打印机分辨率<xref:System.Drawing.Printing.PrinterResolution.Kind%2A?displayProperty=nameWithType>属性，其中包含之一<xref:System.Drawing.Printing.PrinterResolutionKind>值。  
  
 通常情况下，设置页的纸张来源通过<xref:System.Drawing.Printing.PageSettings.PrinterResolution%2A?displayProperty=nameWithType>到有效的属性<xref:System.Drawing.Printing.PrinterResolution>可通过<xref:System.Drawing.Printing.PrinterSettings.PrinterResolutions%2A>集合。  
  
 如果<xref:System.Drawing.Printing.PrinterResolutionKind>是`Custom`，然后使用<xref:System.Drawing.Printing.PrinterResolution.X%2A>和<xref:System.Drawing.Printing.PrinterResolution.Y%2A>属性，以分别确定沿水平方向和垂直方向，自定义打印机解决方法。  
  
   
  
## Examples  
 下面的代码示例填充`comboPrintResolution`具有受支持的分辨率的组合框。 该示例需要<xref:System.Drawing.Printing.PrintDocument>变量名为`printDoc`存在以及是否存在特定的组合框。  
  
 [!code-cpp[PaperSource and PaperSize Example with Resolution#3](~/samples/snippets/cpp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CPP/source.cpp#3)]
 [!code-csharp[PaperSource and PaperSize Example with Resolution#3](~/samples/snippets/csharp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CS/source.cs#3)]
 [!code-vb[PaperSource and PaperSize Example with Resolution#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Printing.PrinterResolution" />
        <altmember cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.InstalledPrinters" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PaperSizes" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PaperSources" />
      </Docs>
    </Member>
    <Member MemberName="PrintFileName">
      <MemberSignature Language="C#" Value="public string PrintFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PrintFileName" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.PrintFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property PrintFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PrintFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>打印到文件时，获取或设置文件名。</summary>
        <value>打印到文件时的文件名。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用于读访问时设置的文件名称时获取的文件名称和写访问权限。 相关枚举<see cref="T:System.Security.Permissions.FileIOPermissionAccess" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="PrintRange">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.PrintRange PrintRange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Printing.PrintRange PrintRange" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.PrintRange" />
      <MemberSignature Language="VB.NET" Value="Public Property PrintRange As PrintRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Printing::PrintRange PrintRange { System::Drawing::Printing::PrintRange get(); void set(System::Drawing::Printing::PrintRange value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PrintRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用户已指定要打印的页码。</summary>
        <value>
          <see cref="T:System.Drawing.Printing.PrintRange" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Printing.PrinterSettings.PrintRange%2A>属性由<xref:System.Windows.Forms.PrintDialog>。 在用户选择打印范围。 默认的 <xref:System.Drawing.Printing.PrinterSettings.PrintRange%2A> 为 `AllPages`。 若要使用户能够指定要打印的页范围<xref:System.Windows.Forms.PrintDialog.AllowSomePages%2A?displayProperty=nameWithType>属性必须设置为`true`。 若要使用户能够指定所选要打印的压，<xref:System.Windows.Forms.PrintDialog.AllowSelection%2A?displayProperty=nameWithType>属性必须设置为`true`。  
  
 在打印过程中，在<xref:System.Drawing.Printing.PrintDocument.PrintPage?displayProperty=nameWithType>事件中查看<xref:System.Drawing.Printing.PrinterSettings.PrintRange%2A>来确定应该打印的内容。 如果<xref:System.Drawing.Printing.PrinterSettings.PrintRange%2A>是<xref:System.Drawing.Printing.PrintRange.SomePages?displayProperty=nameWithType>，使用<xref:System.Drawing.Printing.PrinterSettings.FromPage%2A>和<xref:System.Drawing.Printing.PrinterSettings.ToPage%2A>应打印属性来确定页。 如果<xref:System.Drawing.Printing.PrinterSettings.PrintRange%2A>是<xref:System.Drawing.Printing.PrintRange.Selection?displayProperty=nameWithType>，然后指定仅对所选的页面的输出。  
  
 <xref:System.Drawing.Printing.PrinterSettings.FromPage%2A>，<xref:System.Drawing.Printing.PrinterSettings.ToPage%2A>和<xref:System.Drawing.Printing.PrinterSettings.PrintRange%2A>也可以设置以编程方式，但<xref:System.Drawing.Printing.PrintDocument.PrintPage?displayProperty=nameWithType>实现都是相同。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.PrintRange" /> 属性的值并非 <see cref="T:System.Drawing.Printing.PrintRange" /> 值之一。</exception>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.MaximumPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.MinimumPage" />
        <altmember cref="T:System.Drawing.Printing.PrintRange" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
      </Docs>
    </Member>
    <Member MemberName="PrintToFile">
      <MemberSignature Language="C#" Value="public bool PrintToFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrintToFile" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.PrintToFile" />
      <MemberSignature Language="VB.NET" Value="Public Property PrintToFile As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PrintToFile { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示打印输出是否发送到文件，而不发送到端口。</summary>
        <value>
          若打印输出发送到文件，则为 <see langword="true" />；反之，则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Printing.PrinterSettings.PrintToFile%2A>属性由<xref:System.Windows.Forms.PrintDialog>当用户选择**打印到文件**选项。 在这种情况下，输出端口设置为"文件"会导致 Windows 打印子系统来提示用户输入文件名称时<xref:System.Drawing.Printing.PrintDocument.Print%2A?displayProperty=nameWithType>调用方法。  
  
> [!NOTE]
>  <xref:System.Drawing.Printing.PrinterSettings.PrintToFile%2A>属性仅供<xref:System.Windows.Forms.PrintDialog>并且不能以编程方式设置。 `Print to file`上才会显示选项<xref:System.Windows.Forms.PrintDialog>时<xref:System.Windows.Forms.PrintDialog.AllowPrintToFile%2A?displayProperty=nameWithType>属性设置为`true`。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.PrintDialog.AllowPrintToFile" />
      </Docs>
    </Member>
    <Member MemberName="SetHdevmode">
      <MemberSignature Language="C#" Value="public void SetHdevmode (IntPtr hdevmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetHdevmode(native int hdevmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PrinterSettings.SetHdevmode(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetHdevmode (hdevmode As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetHdevmode(IntPtr hdevmode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdevmode" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdevmode">Win32 <see langword="DEVMODE" /> 结构的句柄。</param>
        <summary>将相关信息从给定句柄复制到 <see cref="T:System.Drawing.Printing.PrinterSettings" /> 中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DEVMODE` 结构是特定于设备和复制`DEVMODE`结构从一个<xref:System.Drawing.Printing.PrinterSettings>到<xref:System.Drawing.Printing.PrinterSettings>不支持另一台打印机。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">打印机句柄无效。</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">针对打印和对网络上的所有打印机的访问。 关联的枚举： <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetHdevnames">
      <MemberSignature Language="C#" Value="public void SetHdevnames (IntPtr hdevnames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetHdevnames(native int hdevnames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PrinterSettings.SetHdevnames(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetHdevnames (hdevnames As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetHdevnames(IntPtr hdevnames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdevnames" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdevnames">Win32 <see langword="DEVNAMES" /> 结构的句柄。</param>
        <summary>将相关信息从给定句柄复制到 <see cref="T:System.Drawing.Printing.PrinterSettings" /> 中。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">打印机句柄无效。</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">针对打印和对网络上的所有打印机的访问。 关联的枚举： <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SupportsColor">
      <MemberSignature Language="C#" Value="public bool SupportsColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsColor" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.SupportsColor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsColor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsColor { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取指示该打印机是否支持彩色打印的值。</summary>
        <value>
          若该打印机支持彩色打印，则为 <see langword="true" />；反之，则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使用彩色打印，并且如果打印机支持它，<xref:System.Drawing.Printing.PageSettings.Color%2A?displayProperty=nameWithType>到`true`。  
  
   
  
## Examples  
 下面的代码示例将打印颜色中的第一页文档，如果打印机支持它。 该示例需要<xref:System.Drawing.Printing.PrintDocument>变量名为`printDoc`创建后，与<xref:System.Drawing.Printing.PrintDocument.PrintPage>和<xref:System.Drawing.Printing.PrintDocument.QueryPageSettings>事件处理。  
  
 使用<xref:System.Drawing>和<xref:System.Drawing.Printing>对于此示例的命名空间。  
  
 [!code-cpp[PaperSource and PaperSize Example with Resolution#6](~/samples/snippets/cpp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CPP/source.cpp#6)]
 [!code-csharp[PaperSource and PaperSize Example with Resolution#6](~/samples/snippets/csharp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CS/source.cs#6)]
 [!code-vb[PaperSource and PaperSize Example with Resolution#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Printing.PageSettings.Color" />
      </Docs>
    </Member>
    <Member MemberName="ToPage">
      <MemberSignature Language="C#" Value="public int ToPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ToPage" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PrinterSettings.ToPage" />
      <MemberSignature Language="VB.NET" Value="Public Property ToPage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ToPage { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要打印的最后一页的页码。</summary>
        <value>要打印的最后一页的页码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Printing.PrinterSettings.FromPage%2A>和<xref:System.Drawing.Printing.PrinterSettings.ToPage%2A>属性由<xref:System.Windows.Forms.PrintDialog>当用户选择打印范围。 <xref:System.Windows.Forms.PrintDialog.AllowSomePages%2A?displayProperty=nameWithType>属性必须设置为`true`，使用户能够指定打印范围。 此外，<xref:System.Windows.Forms.PrintDialog>还要求<xref:System.Drawing.Printing.PrinterSettings.MinimumPage%2A>和<xref:System.Drawing.Printing.PrinterSettings.MaximumPage%2A>指定与<xref:System.Drawing.Printing.PrinterSettings.ToPage%2A>值要在该范围内。  
  
 在打印过程中，在<xref:System.Drawing.Printing.PrintDocument.PrintPage?displayProperty=nameWithType>事件中查看<xref:System.Drawing.Printing.PrinterSettings.PrintRange%2A>来确定应该打印的内容。 如果<xref:System.Drawing.Printing.PrinterSettings.PrintRange%2A>是<xref:System.Drawing.Printing.PrintRange.SomePages?displayProperty=nameWithType>，使用<xref:System.Drawing.Printing.PrinterSettings.FromPage%2A>和<xref:System.Drawing.Printing.PrinterSettings.ToPage%2A>应打印属性来确定页。 如果<xref:System.Drawing.Printing.PrinterSettings.PrintRange%2A>是<xref:System.Drawing.Printing.PrintRange.Selection?displayProperty=nameWithType>，然后指定仅对所选的页面的输出。  
  
 <xref:System.Drawing.Printing.PrinterSettings.FromPage%2A>，<xref:System.Drawing.Printing.PrinterSettings.ToPage%2A>和<xref:System.Drawing.Printing.PrinterSettings.PrintRange%2A>也可以设置以编程方式，但<xref:System.Drawing.Printing.PrintDocument.PrintPage?displayProperty=nameWithType>实现都是相同。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" /> 属性的值小于零。</exception>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.MaximumPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.MinimumPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PrintRange" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PrinterSettings.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>以字符串形式提供有关 <see cref="T:System.Drawing.Printing.PrinterSettings" /> 的信息。</summary>
        <returns>一个字符串。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>