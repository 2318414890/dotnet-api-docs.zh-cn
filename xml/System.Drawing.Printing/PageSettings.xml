<Type Name="PageSettings" FullName="System.Drawing.Printing.PageSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0a139cdec887cdcd1dcabffa0c3e2ccfbfd71c3a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410191" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PageSettings : ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit PageSettings extends System.Object implements class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Printing.PageSettings" />
  <TypeSignature Language="VB.NET" Value="Public Class PageSettings&#xA;Implements ICloneable" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageSettings : ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>指定应用于单页打印的设置。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Printing.PageSettings>类用于指定修改将打印页的方式的设置。 通常，设置要打印通过所有页面的默认设置<xref:System.Drawing.Printing.PrintDocument.DefaultPageSettings%2A?displayProperty=nameWithType>属性。 若要在按页基础上指定设置，处理<xref:System.Drawing.Printing.PrintDocument.PrintPage?displayProperty=nameWithType>或<xref:System.Drawing.Printing.PrintDocument.QueryPageSettings?displayProperty=nameWithType>事件并修改<xref:System.Drawing.Printing.PageSettings>参数中包含<xref:System.Drawing.Printing.PrintPageEventArgs>或<xref:System.Drawing.Printing.QueryPageSettingsEventArgs>分别。  
  
 有关处理的详细信息<xref:System.Drawing.Printing.PrintDocument>事件，请参阅<xref:System.Drawing.Printing.PrintDocument>类概述。 打印有关的详细信息，请参阅<xref:System.Drawing.Printing>命名空间概述。  
  
   
  
## Examples  
 下面的示例演示如何处理<xref:System.Drawing.Printing.PrintDocument.PrintPage>事件并检查<xref:System.Drawing.Printing.PageSettings>参数<xref:System.Drawing.Printing.PrintPageEventArgs>。 若要使用此代码，将添加<xref:System.Drawing.Printing.PrintDocument>组件名为`PrintDocument1`到 Windows 窗体和关联其<xref:System.Drawing.Printing.PrintDocument.PrintPage>事件和`printDocument1_PrintPage`在示例中的方法。  
  
 [!code-csharp[System.Windows.Forms.MiscBugDriven#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MiscBugDriven/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.MiscBugDriven#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MiscBugDriven/VB/form1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Drawing.Printing.PrintDocument" />
    <altmember cref="T:System.Drawing.Printing.PrinterSettings" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Drawing.Printing.PageSettings" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PageSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>使用默认打印机初始化 <see cref="T:System.Drawing.Printing.PageSettings" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认构造函数初始化为其默认值的所有字段。  
  
 通常情况下，你不创建的实例<xref:System.Drawing.Printing.PageSettings>，而是改用<xref:System.Drawing.Printing.PrintDocument.DefaultPageSettings%2A?displayProperty=nameWithType>设置的所有页的设置。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageSettings (System.Drawing.Printing.PrinterSettings printerSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Printing.PrinterSettings printerSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PageSettings.#ctor(System.Drawing.Printing.PrinterSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageSettings(System::Drawing::Printing::PrinterSettings ^ printerSettings);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="printerSettings" Type="System.Drawing.Printing.PrinterSettings" />
      </Parameters>
      <Docs>
        <param name="printerSettings">
          <see cref="T:System.Drawing.Printing.PrinterSettings" />，它描述要使用的打印机。</param>
        <summary>使用指定打印机初始化 <see cref="T:System.Drawing.Printing.PageSettings" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Printing.PageSettings.%23ctor%2A>构造函数是类似于初始化的新实例<xref:System.Drawing.Printing.PageSettings>和设置<xref:System.Drawing.Printing.PageSettings.PrinterSettings%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle Bounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PageSettings.Bounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle Bounds { System::Drawing::Rectangle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取页面的大小，并且考虑由 <see cref="P:System.Drawing.Printing.PageSettings.Landscape" /> 属性指定的页面方向。</summary>
        <value>
          <see cref="T:System.Drawing.Rectangle" />，表示页面的长度和宽度（以百分之一英寸为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Drawing.Printing.PageSettings.Bounds%2A>属性连同<xref:System.Drawing.Printing.PageSettings.Margins%2A>属性来计算页的打印区域。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Drawing.Printing.InvalidPrinterException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 属性中命名的打印机不存在。</exception>
        <altmember cref="P:System.Drawing.Printing.PageSettings.Margins" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PageSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.Drawing.Printing.PageSettings" /> 的副本。</summary>
        <returns>该对象的一个副本。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public bool Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Color" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PageSettings.Color" />
      <MemberSignature Language="VB.NET" Value="Public Property Color As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Color { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否应以彩色打印该页。</summary>
        <value>
          如果该页应以彩色打印，则为 <see langword="true" />；反之，则为 <see langword="false" />。 默认值由打印机决定。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Drawing.Printing.PrinterSettings.SupportsColor%2A?displayProperty=nameWithType>属性来确定是否打印机支持彩色打印。 如果打印机支持彩色，但不是希望彩色打印，请设置<xref:System.Drawing.Printing.PageSettings.Color%2A>属性`false`。 默认行为将是`true`。  
  
   
  
## Examples  
 下面的代码示例将打印颜色中的第一页文档，如果打印机支持它。 该示例需要<xref:System.Drawing.Printing.PrintDocument>变量名为`printDoc`创建后，与<xref:System.Drawing.Printing.PrintDocument.PrintPage>和<xref:System.Drawing.Printing.PrintDocument.QueryPageSettings>事件处理。  
  
 使用<xref:System.Drawing>和<xref:System.Drawing.Printing>对于此示例的命名空间。  
  
 [!code-cpp[PaperSource and PaperSize Example with Resolution#6](~/samples/snippets/cpp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CPP/source.cpp#6)]
 [!code-csharp[PaperSource and PaperSize Example with Resolution#6](~/samples/snippets/csharp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CS/source.cs#6)]
 [!code-vb[PaperSource and PaperSize Example with Resolution#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Drawing.Printing.InvalidPrinterException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 属性中命名的打印机不存在。</exception>
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.SupportsColor" />
      </Docs>
    </Member>
    <Member MemberName="CopyToHdevmode">
      <MemberSignature Language="C#" Value="public void CopyToHdevmode (IntPtr hdevmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyToHdevmode(native int hdevmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PageSettings.CopyToHdevmode(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyToHdevmode (hdevmode As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyToHdevmode(IntPtr hdevmode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdevmode" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdevmode">Win32 <see langword="DEVMODE" /> 结构的句柄。</param>
        <summary>将相关信息从 <see cref="T:System.Drawing.Printing.PageSettings" /> 复制到指定的 <see langword="DEVMODE" /> 结构。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Drawing.Printing.PageSettings.CopyToHdevmode%2A>方法复制到的相关信息`DEVMODE`结构<xref:System.Drawing.Printing.PageSettings>。 此方法很有用，在你想要使非托管的 Win32 调用需要`DEVMODE`。  
  
 从中复制信息`DEVMODE`结构<xref:System.Drawing.Printing.PageSettings>，调用<xref:System.Drawing.Printing.PageSettings.SetHdevmode%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Drawing.Printing.InvalidPrinterException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 属性中指定的打印机不存在或者没有已安装的默认打印机。</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">针对打印和对网络上的所有打印机的访问。 关联的枚举： <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting" /></permission>
        <altmember cref="M:System.Drawing.Printing.PageSettings.SetHdevmode(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="HardMarginX">
      <MemberSignature Language="C#" Value="public float HardMarginX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 HardMarginX" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PageSettings.HardMarginX" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HardMarginX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float HardMarginX { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取页面左侧硬页边距的 X 坐标（以百分之一英寸为单位）。</summary>
        <value>左侧硬页边距的 X 坐标（以百分之一英寸为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 硬页边距表示打印机设置的物理边距。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于访问非托管代码。 相关枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">对所有打印机的完全访问权限。 相关的枚举： <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="HardMarginY">
      <MemberSignature Language="C#" Value="public float HardMarginY { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 HardMarginY" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PageSettings.HardMarginY" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HardMarginY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float HardMarginY { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取页面上方硬页边距的 Y 坐标（以百分之一英寸为单位）。</summary>
        <value>页面上方硬页边距的 Y 坐标（以百分之一英寸为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 硬页边距表示打印机设置的物理边距。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于访问非托管代码。 相关枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">对所有打印机的完全访问权限。 相关的枚举： <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Landscape">
      <MemberSignature Language="C#" Value="public bool Landscape { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Landscape" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PageSettings.Landscape" />
      <MemberSignature Language="VB.NET" Value="Public Property Landscape As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Landscape { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是横向还是纵向打印该页。</summary>
        <value>
          如果页面应横向打印，则为 <see langword="true" />；反之，则为 <see langword="false" />。 默认值由打印机决定。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Drawing.Printing.PrinterSettings.LandscapeAngle%2A?displayProperty=nameWithType>属性来确定的角度，以度为单位，纵向旋转以生成横向方向。  
  
   
  
## Examples  
 下面的代码示例设置文档的默认页面方向为通过横向<xref:System.Drawing.Printing.PrintDocument.DefaultPageSettings%2A?displayProperty=nameWithType>属性，并将打印文档。 此示例包括三个先决条件：  
  
-   一个名为变量`filePath`已设置为该文件的路径为打印。  
  
-   一个名为方法`pd_PrintPage`，它将处理<xref:System.Drawing.Printing.PrintDocument.PrintPage>事件，已定义。  
  
-   一个名为变量`printer`已设置为打印机的名称。  
  
 使用<xref:System.Drawing>， <xref:System.Drawing.Printing>，和<xref:System.IO>对于此示例的命名空间。  
  
 [!code-cpp[Classic PageSettings Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic PageSettings Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PageSettings Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic PageSettings Example/CS/source.cs#1)]
 [!code-vb[Classic PageSettings Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic PageSettings Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Drawing.Printing.InvalidPrinterException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 属性中命名的打印机不存在。</exception>
        <altmember cref="T:System.Drawing.Printing.PrintDocument" />
        <altmember cref="E:System.Drawing.Printing.PrintDocument.PrintPage" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.LandscapeAngle" />
      </Docs>
    </Member>
    <Member MemberName="Margins">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.Margins Margins { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Printing.Margins Margins" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PageSettings.Margins" />
      <MemberSignature Language="VB.NET" Value="Public Property Margins As Margins" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Printing::Margins ^ Margins { System::Drawing::Printing::Margins ^ get(); void set(System::Drawing::Printing::Margins ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.Margins</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置该页的边距。</summary>
        <value>
          <see cref="T:System.Drawing.Printing.Margins" />，表示页边距（以百分之一英寸为单位）。 默认情况下各边的边距都为 1 英寸。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在处理时<xref:System.Drawing.Printing.PrintDocument.PrintPage?displayProperty=nameWithType>事件时，你可以使用此属性与<xref:System.Drawing.Printing.PageSettings.Bounds%2A>属性来计算页的打印区域。  
  
   
  
## Examples  
 下面的代码示例将设置默认值为文档的页设置为 1 英寸每一侧。 此示例包括三个先决条件：  
  
-   一个名为变量`filePath`已设置为该文件的路径为打印。  
  
-   一个名为方法`pd_PrintPage`，它将处理<xref:System.Drawing.Printing.PrintDocument.PrintPage>事件，已定义。  
  
-   一个名为变量`printer`已设置为打印机的名称。  
  
 使用<xref:System.Drawing>， <xref:System.Drawing.Printing>，和<xref:System.IO>对于此示例的命名空间。  
  
 [!code-cpp[Classic PageSettings.Margins Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic PageSettings.Margins Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PageSettings.Margins Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic PageSettings.Margins Example/CS/source.cs#1)]
 [!code-vb[Classic PageSettings.Margins Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic PageSettings.Margins Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Drawing.Printing.InvalidPrinterException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 属性中命名的打印机不存在。</exception>
        <altmember cref="T:System.Drawing.Printing.Margins" />
      </Docs>
    </Member>
    <Member MemberName="PaperSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.PaperSize PaperSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Printing.PaperSize PaperSize" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PageSettings.PaperSize" />
      <MemberSignature Language="VB.NET" Value="Public Property PaperSize As PaperSize" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Printing::PaperSize ^ PaperSize { System::Drawing::Printing::PaperSize ^ get(); void set(System::Drawing::Printing::PaperSize ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PaperSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置该页的纸张大小。</summary>
        <value>
          <see cref="T:System.Drawing.Printing.PaperSize" />，它表示纸张大小。 默认值为打印机的默认纸张大小。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Drawing.Printing.PaperSize>表示通过纸张的大小<xref:System.Drawing.Printing.PaperSize.Kind%2A?displayProperty=nameWithType>属性，其中包含之一<xref:System.Drawing.Printing.PaperKind>值。  
  
 设置<xref:System.Drawing.Printing.PageSettings.PaperSize%2A>属性为有效页<xref:System.Drawing.Printing.PaperSize>，可通过<xref:System.Drawing.Printing.PrinterSettings.PaperSizes%2A?displayProperty=nameWithType>集合。  
  
 有关如何指定自定义的纸张大小的信息，请参阅<xref:System.Drawing.Printing.PaperSize.%23ctor%2A>构造函数。  
  
   
  
## Examples  
 下面的代码示例设置文档的默认页，其中包括基于中选择的大小的纸张大小的三个属性`comboPaperSize`组合框，然后将打印文档使用<xref:System.Drawing.Printing.PrintDocument.Print%2A>方法。 该示例需要<xref:System.Drawing.Printing.PrintDocument>变量名为`printDoc`存在和特定的组合框存在。  
  
 [!code-cpp[PaperSource and PaperSize Example with Resolution#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CPP/source.cpp#1)]
 [!code-csharp[PaperSource and PaperSize Example with Resolution#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CS/source.cs#1)]
 [!code-vb[PaperSource and PaperSize Example with Resolution#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/VB/source.vb#1)]  
[!code-cpp[PaperSource and PaperSize Example with Resolution#2](~/samples/snippets/cpp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CPP/source.cpp#2)]
[!code-csharp[PaperSource and PaperSize Example with Resolution#2](~/samples/snippets/csharp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CS/source.cs#2)]
[!code-vb[PaperSource and PaperSize Example with Resolution#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/VB/source.vb#2)]  
[!code-cpp[PaperSource and PaperSize Example with Resolution#3](~/samples/snippets/cpp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CPP/source.cpp#3)]
[!code-csharp[PaperSource and PaperSize Example with Resolution#3](~/samples/snippets/csharp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CS/source.cs#3)]
[!code-vb[PaperSource and PaperSize Example with Resolution#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/VB/source.vb#3)]  
[!code-cpp[PaperSource and PaperSize Example with Resolution#4](~/samples/snippets/cpp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CPP/source.cpp#4)]
[!code-csharp[PaperSource and PaperSize Example with Resolution#4](~/samples/snippets/csharp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CS/source.cs#4)]
[!code-vb[PaperSource and PaperSize Example with Resolution#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Drawing.Printing.InvalidPrinterException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 属性中指定的打印机不存在或者没有已安装的默认打印机。</exception>
        <altmember cref="T:System.Drawing.Printing.PaperSize" />
        <altmember cref="P:System.Drawing.Printing.PaperSize.Height" />
        <altmember cref="P:System.Drawing.Printing.PaperSize.Kind" />
        <altmember cref="P:System.Drawing.Printing.PaperSize.Width" />
      </Docs>
    </Member>
    <Member MemberName="PaperSource">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.PaperSource PaperSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Printing.PaperSource PaperSource" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PageSettings.PaperSource" />
      <MemberSignature Language="VB.NET" Value="Public Property PaperSource As PaperSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Printing::PaperSource ^ PaperSource { System::Drawing::Printing::PaperSource ^ get(); void set(System::Drawing::Printing::PaperSource ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PaperSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置该页的纸张来源；例如打印机的上层纸盒。</summary>
        <value>
          <see cref="T:System.Drawing.Printing.PaperSource" />，它指定纸张的来源。 默认值为打印机的默认纸张来源。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Drawing.Printing.PaperSource>表示通过纸张的源<xref:System.Drawing.Printing.PaperSource.Kind%2A?displayProperty=nameWithType>属性，其中包含之一<xref:System.Drawing.Printing.PaperSourceKind>值。  
  
 设置<xref:System.Drawing.Printing.PageSettings.PaperSource%2A>属性为有效页<xref:System.Drawing.Printing.PaperSource>，可通过<xref:System.Drawing.Printing.PrinterSettings.PaperSources%2A?displayProperty=nameWithType>集合。  
  
   
  
## Examples  
 下面的代码示例设置文档的默认页，包括根据中选定的来源的纸张来源的三个属性`comboPaperSource`组合框，然后将打印文档使用<xref:System.Drawing.Printing.PrintDocument.Print%2A>方法。 该示例需要<xref:System.Drawing.Printing.PrintDocument>变量名为`printDoc`存在和特定的组合框存在。  
  
 [!code-cpp[PaperSource and PaperSize Example with Resolution#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CPP/source.cpp#1)]
 [!code-csharp[PaperSource and PaperSize Example with Resolution#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CS/source.cs#1)]
 [!code-vb[PaperSource and PaperSize Example with Resolution#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/VB/source.vb#1)]  
[!code-cpp[PaperSource and PaperSize Example with Resolution#2](~/samples/snippets/cpp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CPP/source.cpp#2)]
[!code-csharp[PaperSource and PaperSize Example with Resolution#2](~/samples/snippets/csharp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CS/source.cs#2)]
[!code-vb[PaperSource and PaperSize Example with Resolution#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/VB/source.vb#2)]  
[!code-cpp[PaperSource and PaperSize Example with Resolution#3](~/samples/snippets/cpp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CPP/source.cpp#3)]
[!code-csharp[PaperSource and PaperSize Example with Resolution#3](~/samples/snippets/csharp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CS/source.cs#3)]
[!code-vb[PaperSource and PaperSize Example with Resolution#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/VB/source.vb#3)]  
[!code-cpp[PaperSource and PaperSize Example with Resolution#4](~/samples/snippets/cpp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CPP/source.cpp#4)]
[!code-csharp[PaperSource and PaperSize Example with Resolution#4](~/samples/snippets/csharp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CS/source.cs#4)]
[!code-vb[PaperSource and PaperSize Example with Resolution#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Drawing.Printing.InvalidPrinterException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 属性中指定的打印机不存在或者没有已安装的默认打印机。</exception>
        <altmember cref="T:System.Drawing.Printing.PaperSource" />
        <altmember cref="P:System.Drawing.Printing.PaperSource.Kind" />
        <altmember cref="T:System.Drawing.Printing.PaperSourceKind" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PaperSources" />
      </Docs>
    </Member>
    <Member MemberName="PrintableArea">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF PrintableArea { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF PrintableArea" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PageSettings.PrintableArea" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrintableArea As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF PrintableArea { System::Drawing::RectangleF get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取打印机的可打印页面区域的界限。</summary>
        <value>
          <see cref="T:System.Drawing.RectangleF" /> 表示打印机可在其中打印的区域的长度和宽度（以百分之一英寸为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Printing.PageSettings.PrintableArea%2A>属性返回正确的值，指示的页面方向是横向或纵向。  
  
 此属性可用于打印之外的页上，但在可打印区域内的边距。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrinterResolution">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.PrinterResolution PrinterResolution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Printing.PrinterResolution PrinterResolution" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PageSettings.PrinterResolution" />
      <MemberSignature Language="VB.NET" Value="Public Property PrinterResolution As PrinterResolution" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Printing::PrinterResolution ^ PrinterResolution { System::Drawing::Printing::PrinterResolution ^ get(); void set(System::Drawing::Printing::PrinterResolution ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PrinterResolution</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置该页的打印机分辨率。</summary>
        <value>
          <see cref="T:System.Drawing.Printing.PrinterResolution" />，它指定该页的打印机分辨率。 默认值为打印机的默认分辨率。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Drawing.Printing.PrinterResolution>表示通过的打印机分辨率<xref:System.Drawing.Printing.PrinterResolution.Kind%2A?displayProperty=nameWithType>属性，其中包含之一<xref:System.Drawing.Printing.PrinterResolutionKind>值。  
  
 设置<xref:System.Drawing.Printing.PageSettings.PrinterResolution%2A>属性为有效页<xref:System.Drawing.Printing.PrinterResolution>，可通过<xref:System.Drawing.Printing.PrinterSettings.PrinterResolutions%2A?displayProperty=nameWithType>集合。  
  
   
  
## Examples  
 下面的代码示例设置文档的默认页，包括基于分辨率中选定的打印机的解决方法的三个属性`comboPrintResolution`组合框，然后将打印文档使用<xref:System.Drawing.Printing.PrintDocument.Print%2A>方法。 该示例需要<xref:System.Drawing.Printing.PrintDocument>变量名为`printDoc`存在和特定的组合框存在。  
  
 [!code-cpp[PaperSource and PaperSize Example with Resolution#4](~/samples/snippets/cpp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CPP/source.cpp#4)]
 [!code-csharp[PaperSource and PaperSize Example with Resolution#4](~/samples/snippets/csharp/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/CS/source.cs#4)]
 [!code-vb[PaperSource and PaperSize Example with Resolution#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PaperSource and PaperSize Example with Resolution/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Drawing.Printing.InvalidPrinterException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 属性中指定的打印机不存在或者没有已安装的默认打印机。</exception>
        <altmember cref="T:System.Drawing.Printing.PrinterResolution" />
        <altmember cref="P:System.Drawing.Printing.PrinterResolution.Kind" />
        <altmember cref="T:System.Drawing.Printing.PrinterResolutionKind" />
        <altmember cref="P:System.Drawing.Printing.PrinterSettings.PrinterResolutions" />
      </Docs>
    </Member>
    <Member MemberName="PrinterSettings">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.PrinterSettings PrinterSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Printing.PrinterSettings PrinterSettings" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Printing.PageSettings.PrinterSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property PrinterSettings As PrinterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Printing::PrinterSettings ^ PrinterSettings { System::Drawing::Printing::PrinterSettings ^ get(); void set(System::Drawing::Printing::PrinterSettings ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PrinterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与该页关联的打印机设置。</summary>
        <value>
          <see cref="T:System.Drawing.Printing.PrinterSettings" />，它表示与该页关联的打印机设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用的打印机设置若要查找的页面的属性未设置默认值。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Printing.PrinterSettings" />
      </Docs>
    </Member>
    <Member MemberName="SetHdevmode">
      <MemberSignature Language="C#" Value="public void SetHdevmode (IntPtr hdevmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetHdevmode(native int hdevmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PageSettings.SetHdevmode(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetHdevmode (hdevmode As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetHdevmode(IntPtr hdevmode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdevmode" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdevmode">Win32 <see langword="DEVMODE" /> 结构的句柄。</param>
        <summary>将相关信息从指定的 <see langword="DEVMODE" /> 结构复制到 <see cref="T:System.Drawing.Printing.PageSettings" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于复制中的相关信息`DEVMODE`结构<xref:System.Drawing.Printing.PageSettings>。  
  
 从中复制信息<xref:System.Drawing.Printing.PageSettings>到`DEVMODE`，调用<xref:System.Drawing.Printing.PageSettings.CopyToHdevmode%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">打印机句柄无效。</exception>
        <exception cref="T:System.Drawing.Printing.InvalidPrinterException">
          <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" /> 属性中指定的打印机不存在或者没有已安装的默认打印机。</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">针对打印和对网络上的所有打印机的访问。 关联的枚举： <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting" /></permission>
        <altmember cref="M:System.Drawing.Printing.PageSettings.CopyToHdevmode(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Printing.PageSettings.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="T:System.Drawing.Printing.PageSettings" /> 转换为字符串形式。</summary>
        <returns>显示 <see cref="T:System.Drawing.Printing.PageSettings" /> 的各种属性设置的字符串。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>