<Type Name="Cache" FullName="System.Web.Caching.Cache">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="66494e77c14b64422e3e44712ede7fd8f523307c" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46641389" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Cache : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Cache extends System.Object implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Caching.Cache" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Cache&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Cache sealed : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type Cache = class&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>实现 Web 应用程序的缓存。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个应用程序域创建一个此类的实例，只要应用程序域将保持活动状态，保持有效。 有关此类的实例的信息，请通过`Cache`的属性<xref:System.Web.HttpContext>对象或`Cache`属性的<xref:System.Web.UI.Page>对象。  
  
> [!NOTE]
>  <xref:System.Web.Caching.Cache>类不适合在 ASP.NET 应用程序外部使用。 它是设计和测试在提供的 Web 应用程序中缓存的 ASP.NET 中使用。 对于其他类型的应用程序，如控制台应用程序或 Windows 窗体应用程序，请使用<xref:System.Runtime.Caching.ObjectCache>类。  
  
   
  
## Examples  
 以下示例是一个页面，向用户显示分配给在缓存中的项的值，并从缓存移除项时通知他们。 它会创建`RemovedCallback`方法，它具有签名的`CacheItemRemovedCallback`委托，以通知用户，当删除缓存项，并且它使用<xref:System.Web.Caching.CacheItemRemovedReason>枚举告诉用户移除的原因。 此外，它使用<xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType>属性向缓存添加对象和检索这些对象的值。 在中`AddItemToCache`方法，它将使用<xref:System.Web.Caching.Cache.Add%2A?displayProperty=nameWithType>方法将项添加到缓存。 若要使用`CacheItemRemovedCallback`委派，您必须使用此方法将项添加到缓存或<xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType>方法，因此，ASP.NET 可以自动进行适当的方法调用时删除该项。 自定义`RemoveItemFromCache`方法使用<xref:System.Web.Caching.Cache.Remove%2A?displayProperty=nameWithType>方法以显式从缓存中删除项导致`RemovedCallback`要调用的方法。  
  
> [!NOTE]
>  可通过下面的代码片段的缓存的实例是成员<xref:System.Web.UI.Page>此示例将继承的对象。  
  
 [!code-aspx-csharp[System.Web.Caching Examples#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching Examples/CS/cachecs.aspx#1)]
 [!code-aspx-vb[System.Web.Caching Examples#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching Examples/VB/cachevb.aspx#1)]
  
 ]]></format>
    </remarks>
    <threadsafe>此类型是线程安全的。</threadsafe>
    <altmember cref="T:System.Web.HttpContext" />
    <altmember cref="T:System.Web.Caching.CacheDependency" />
    <altmember cref="T:System.Web.Caching.CacheItemRemovedCallback" />
    <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Cache();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Caching.Cache" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public object Add (string key, object value, System.Web.Caching.CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System.Web.Caching.CacheItemPriority priority, System.Web.Caching.CacheItemRemovedCallback onRemoveCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Add(string key, object value, class System.Web.Caching.CacheDependency dependencies, valuetype System.DateTime absoluteExpiration, valuetype System.TimeSpan slidingExpiration, valuetype System.Web.Caching.CacheItemPriority priority, class System.Web.Caching.CacheItemRemovedCallback onRemoveCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (key As String, value As Object, dependencies As CacheDependency, absoluteExpiration As DateTime, slidingExpiration As TimeSpan, priority As CacheItemPriority, onRemoveCallback As CacheItemRemovedCallback) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Add(System::String ^ key, System::Object ^ value, System::Web::Caching::CacheDependency ^ dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System::Web::Caching::CacheItemPriority priority, System::Web::Caching::CacheItemRemovedCallback ^ onRemoveCallback);" />
      <MemberSignature Language="F#" Value="member this.Add : string * obj * System.Web.Caching.CacheDependency * DateTime * TimeSpan * System.Web.Caching.CacheItemPriority * System.Web.Caching.CacheItemRemovedCallback -&gt; obj" Usage="cache.Add (key, value, dependencies, absoluteExpiration, slidingExpiration, priority, onRemoveCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="absoluteExpiration" Type="System.DateTime" />
        <Parameter Name="slidingExpiration" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Web.Caching.CacheItemPriority" />
        <Parameter Name="onRemoveCallback" Type="System.Web.Caching.CacheItemRemovedCallback" />
      </Parameters>
      <Docs>
        <param name="key">用于引用该项的缓存键。</param>
        <param name="value">要添加到缓存的项。</param>
        <param name="dependencies">该项的文件依赖项或缓存键依赖项。 当任何依赖项更改时，该对象即无效，并从缓存中移除。 如果没有依赖项，则此参数包含 <see langword="null" />。</param>
        <param name="absoluteExpiration">所添加对象将到期并被从缓存中移除的时间。 如果使用可调到期，则 <c>absoluteExpiration</c> 参数必须为 <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />。</param>
        <param name="slidingExpiration">最后一次访问所添加对象时与该对象到期时之间的时间间隔。 如果该值等效于 20 分钟，则对象在最后一次被访问 20 分钟之后将到期并从缓存中移除。 如果使用绝对到期，则 <c>slidingExpiration</c> 参数必须为 <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />。</param>
        <param name="priority">对象的相对成本，由 <see cref="T:System.Web.Caching.CacheItemPriority" /> 枚举表示。 缓存在退出对象时使用该值；具有较低成本的对象在具有较高成本的对象之前被从缓存移除。</param>
        <param name="onRemoveCallback">在从缓存中移除对象时所调用的委托（如果提供）。 当从缓存中删除应用程序的对象时，可使用它来通知应用程序。</param>
        <summary>将指定项添加到 <see cref="T:System.Web.Caching.Cache" /> 对象，该对象具有依赖项、到期和优先级策略以及一个委托（可用于在从 <see langword="Cache" /> 移除插入项时通知应用程序）。</summary>
        <returns>如果添加的项之前存储在缓存中，则为表示该项的对象；否则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果具有相同的项，对此方法的调用将失败`key`参数已存储在`Cache`。 若要覆盖现有`Cache`项使用的相同`key`参数，请使用<xref:System.Web.Caching.Cache.Insert%2A>方法。  
  
 不能同时设置`absoluteExpiration`和`slidingExpiration`参数。 如果你想要在特定时间过期的缓存项，则设置`absoluteExpiration`参数为特定的时间，并`slidingExpiration`参数<xref:System.Web.Caching.Cache.NoSlidingExpiration>。  
  
 如果想要的缓存项在一段时间后过期后已经过去上次访问该项，则设置`slidingExpiration`过期时间间隔，参数和`absoluteExpiration`参数<xref:System.Web.Caching.Cache.NoAbsoluteExpiration>。  
  
   
  
## Examples  
 下面的示例创建`AddItemToCache`方法。 当调用此方法时，它会设置`itemRemoved`属性设置为`false`，并将注册`onRemove`方法替换的新实例<xref:System.Web.Caching.CacheItemRemovedCallback>委托。 在使用委托的签名`RemovedCallback`方法。 `AddItemToCache`方法会检查与关联的值`Key1`密钥缓存中。 如果值为`null`，则`Add`方法使用的密钥在缓存中放置一项`Key1`，值为`Value 1`，绝对的过期时间为 60 秒和较高的缓存的优先级。 它还使用`onRemove`作为参数的方法。 这允许`RemovedCallback`从缓存中删除此项时要调用的方法。  
  
> [!NOTE]
>  有关如何使用的示例<xref:System.Web.Caching.CacheDependency>类和<xref:System.Web.Caching.CacheItemRemovedCallback>委托中，请参阅[缓存应用程序数据](https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100))。  
  
 [!code-csharp[System.Web.Caching Examples#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching Examples/CS/cachecs.aspx#3)]
 [!code-vb[System.Web.Caching Examples#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching Examples/VB/cachevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 或 <paramref name="value" /> 参数设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="slidingExpiration" /> 参数设置成小于 <see langword="TimeSpan.Zero" /> 或大于一年。</exception>
        <exception cref="T:System.ArgumentException">为要添加到 <see langword="Cache" /> 中的项设置 <paramref name="absoluteExpiration" /> 和 <paramref name="slidingExpiration" /> 参数。</exception>
        <altmember cref="T:System.Web.Caching.CacheDependency" />
        <altmember cref="T:System.Web.Caching.CacheItemPriority" />
        <altmember cref="T:System.Web.Caching.CacheItemRemovedCallback" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.Cache.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Web.Caching.Cache.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取缓存中存储的项数。</summary>
        <value>缓存中存储的项数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 监视应用程序的性能时，或使用 ASP.NET 跟踪功能时，此属性会非常有用。  
  
   
  
## Examples  
 以下示例获取的值`Count`属性，将其转换为字符串，并将字符串赋给<xref:System.Web.UI.WebControls.Label.Text%2A>的属性<xref:System.Web.UI.WebControls.Label>Web 服务器控件`Label1`。  
  
 [!code-csharp[System.Web.Caching.Cache.Count#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.Cache.Count/CS/cachecountcs.aspx#1)]
 [!code-vb[System.Web.Caching.Cache.Count#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.Cache.Count/VB/cachecountvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EffectivePercentagePhysicalMemoryLimit">
      <MemberSignature Language="C#" Value="public long EffectivePercentagePhysicalMemoryLimit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 EffectivePercentagePhysicalMemoryLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EffectivePercentagePhysicalMemoryLimit As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long EffectivePercentagePhysicalMemoryLimit { long get(); };" />
      <MemberSignature Language="F#" Value="member this.EffectivePercentagePhysicalMemoryLimit : int64" Usage="System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在 ASP.NET 开始从缓存中移除项之前应用程序可使用的物理内存百分比。</summary>
        <value>可供应用程序使用的物理内存百分比。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit%2A>属性将返回到应用程序可用的物理内存的百分比。 当可用百分比低，缓存算法将开始从缓存中删除项。  
  
 <xref:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit%2A>属性可以设置与`percentagePhysicalMemoryUsedLimit`的属性[caching （ASP.NET 设置架构） 的 cache 元素](http://msdn.microsoft.com/library/68fa0040-5abf-4c73-93fc-17e3c6af3299)应用程序的配置文件中的元素。 如果`percentagePhysicalMemoryUsedLimit`未设置属性时，缓存算法将确定缓存的最大大小和<xref:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit%2A>计算属性。  
  
 <xref:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit%2A> 是.NET Framework 3.5 版中引入的。  有关详细信息，请参见[版本和依赖关系](~/docs/framework/migration-guide/versions-and-dependencies.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Caching.Cache.EffectivePrivateBytesLimit" />
      </Docs>
    </Member>
    <Member MemberName="EffectivePrivateBytesLimit">
      <MemberSignature Language="C#" Value="public long EffectivePrivateBytesLimit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 EffectivePrivateBytesLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.Cache.EffectivePrivateBytesLimit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EffectivePrivateBytesLimit As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long EffectivePrivateBytesLimit { long get(); };" />
      <MemberSignature Language="F#" Value="member this.EffectivePrivateBytesLimit : int64" Usage="System.Web.Caching.Cache.EffectivePrivateBytesLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取可用于缓存的字节数。</summary>
        <value>可用于缓存的字节数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Caching.Cache.EffectivePrivateBytesLimit%2A>属性将返回可由应用程序进程的字节数。 一旦达到此限制，缓存算法开始积极清理缓存。  
  
 <xref:System.Web.Caching.Cache.EffectivePrivateBytesLimit%2A>属性可以设置与`privateBytesLimit`的属性[caching （ASP.NET 设置架构） 的 cache 元素](http://msdn.microsoft.com/library/68fa0040-5abf-4c73-93fc-17e3c6af3299)应用程序的配置文件中的元素。 当`privateBytesLimit`未设置属性时，缓存算法将确定缓存的最大大小和<xref:System.Web.Caching.Cache.EffectivePrivateBytesLimit%2A>属性包含所选算法的大小。  
  
   
  
## Examples  
 <xref:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public object Get (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Get(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Get (key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Get(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.Get : string -&gt; obj" Usage="cache.Get key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">要检索的缓存项的标识符。</param>
        <summary>从 <see cref="T:System.Web.Caching.Cache" /> 对象检索指定项。</summary>
        <returns>检索到的缓存项，未找到该键时为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何检索缓存的 ASP.NET 文本框服务器控件的值。  
  
 [!code-csharp[Classic Cache.Get Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Get Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.Get Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Get Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="cache.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>检索用于循环访问缓存中包含的密钥设置及其值的字典枚举器。</summary>
        <returns>要循环访问 <see cref="T:System.Web.Caching.Cache" /> 对象的枚举数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以添加到或从缓存中时此方法枚举项删除项。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Collections.IDictionaryEnumerator>对象， `CacheEnum`，并使用`GetEnumerator`方法。 枚举器经过缓存中，将每个缓存项的值转换为字符串，，然后将值写入 Web 窗体页。  
  
 [!code-csharp[Cache.GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Cache.GetEnumerator/CS/getenumcs.aspx#1)]
 [!code-vb[Cache.GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Cache.GetEnumerator/VB/getenumvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Insert">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>向 <see cref="T:System.Web.Caching.Cache" /> 对象插入项。 使用此方法的某一版本覆盖具有相同 <paramref name="key" /> 参数的现有 <see langword="Cache" /> 项。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (string key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(string key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (key As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(System::String ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.Insert : string * obj -&gt; unit" Usage="cache.Insert (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">用于引用该项的缓存键。</param>
        <param name="value">要插入缓存中的对象。</param>
        <summary>向 <see cref="T:System.Web.Caching.Cache" /> 对象插入项，该项带有一个缓存键引用其位置，并使用 <see cref="T:System.Web.Caching.CacheItemPriority" /> 枚举提供的默认值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将覆盖其键与匹配现有的缓存项`key`参数。 对象添加到缓存中使用的此重载`Insert`方法插入没有文件或缓存依赖项，优先级为<xref:System.Web.Caching.CacheItemPriority.Default>、 可调过期值<xref:System.Web.Caching.Cache.NoSlidingExpiration>，且绝对过期值为<xref:System.Web.Caching.Cache.NoAbsoluteExpiration>。  
  
   
  
## Examples  
 下面的示例演示如何向应用程序的缓存中插入项。  
  
 [!code-csharp[Classic Cache.Insert Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Insert Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.Insert Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Insert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 或 <paramref name="value" /> 参数为 <see langword="null" />。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (string key, object value, System.Web.Caching.CacheDependency dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(string key, object value, class System.Web.Caching.CacheDependency dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (key As String, value As Object, dependencies As CacheDependency)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(System::String ^ key, System::Object ^ value, System::Web::Caching::CacheDependency ^ dependencies);" />
      <MemberSignature Language="F#" Value="member this.Insert : string * obj * System.Web.Caching.CacheDependency -&gt; unit" Usage="cache.Insert (key, value, dependencies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency" />
      </Parameters>
      <Docs>
        <param name="key">用于标识该项的缓存键。</param>
        <param name="value">要插入缓存中的对象。</param>
        <param name="dependencies">所插入对象的文件依赖项或缓存键依赖项。 当任何依赖项更改时，该对象即无效，并从缓存中移除。 如果没有依赖项，则此参数包含 <see langword="null" />。</param>
        <summary>向 <see cref="T:System.Web.Caching.Cache" /> 中插入具有文件依赖项或键依赖项的对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将覆盖其键与匹配现有的缓存项`key`参数。 对象添加到缓存中使用的此重载`Insert`方法插入没有文件或缓存依赖项，优先级为<xref:System.Web.Caching.CacheItemPriority.Default>、 可调过期值<xref:System.Web.Caching.Cache.NoSlidingExpiration>，且绝对过期值为<xref:System.Web.Caching.Cache.NoAbsoluteExpiration>。  
  
   
  
## Examples  
 下面的示例演示如何将某个项插入到 XML 配置文件的缓存依赖的应用程序的缓存。  
  
 [!code-csharp[Classic Cache.Insert1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Insert1 Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.Insert1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Insert1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 或 <paramref name="value" /> 参数为 <see langword="null" />。</exception>
        <altmember cref="T:System.Web.Caching.CacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (string key, object value, System.Web.Caching.CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(string key, object value, class System.Web.Caching.CacheDependency dependencies, valuetype System.DateTime absoluteExpiration, valuetype System.TimeSpan slidingExpiration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (key As String, value As Object, dependencies As CacheDependency, absoluteExpiration As DateTime, slidingExpiration As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(System::String ^ key, System::Object ^ value, System::Web::Caching::CacheDependency ^ dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration);" />
      <MemberSignature Language="F#" Value="member this.Insert : string * obj * System.Web.Caching.CacheDependency * DateTime * TimeSpan -&gt; unit" Usage="cache.Insert (key, value, dependencies, absoluteExpiration, slidingExpiration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="absoluteExpiration" Type="System.DateTime" />
        <Parameter Name="slidingExpiration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="key">用于引用该对象的缓存键。</param>
        <param name="value">要插入缓存中的对象。</param>
        <param name="dependencies">所插入对象的文件依赖项或缓存键依赖项。 当任何依赖项更改时，该对象即无效，并从缓存中移除。 如果没有依赖项，则此参数包含 <see langword="null" />。</param>
        <param name="absoluteExpiration">所插入对象将到期并被从缓存中移除的时间。 要避免可能的本地时间问题（例如从标准时间改为夏时制），请使用 <see cref="P:System.DateTime.UtcNow" /> 而不是 <see cref="P:System.DateTime.Now" /> 作为此参数值。 如果使用绝对到期，则 <c>slidingExpiration</c> 参数必须为 <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />。</param>
        <param name="slidingExpiration">上次访问插入对象的时间与对象过期时间之间的间隔。 如果此值为 20 分钟的等效值，此对象将过期并将在上次访问后 20 分钟从缓存中删除。 如果使用可调到期，则 <c>absoluteExpiration</c> 参数必须为 <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />。</param>
        <summary>向 <see cref="T:System.Web.Caching.Cache" /> 中插入具有依赖项和到期策略的对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将覆盖现有`Cache`具有相同的项`key`参数。  
  
 如果`slidingExpiration`参数设置为<xref:System.Web.Caching.Cache.NoSlidingExpiration>，可调过期已禁用。 如果您设置`slidingExpiration`参数为大于<xref:System.TimeSpan.Zero>，则`absoluteExpiration`参数设置为<xref:System.DateTime.Now%2A>中包含的值以及`slidingExpiration`参数。 如果之前指定的时间量从缓存请求的内容项`absoluteExpiration`参数，该项将放在缓存中同样，并`absoluteExpiration`再次将设置为`DateTime.Now`中包含的值以及`slidingExpiration`参数。 如果该项未请求从缓存中的日期之前`absoluteExpiration`从缓存中删除参数，该项目。 . 优先级为插入项添加到缓存中使用 insert 方法的此重载<xref:System.Web.Caching.CacheItemPriority.Default>。  
  
   
  
## Examples  
 下面的示例演示如何将某个项插入到具有绝对过期的应用程序的缓存。  
  
> [!NOTE]
>  由于这种形式的`Insert`方法支持缓存依赖项，如果该项没有依赖关系，您必须声明`dependency`参数，因为`null`(`Nothing`在 Visual Basic 中) 以逗号分隔的参数列表中。  
  
 [!code-csharp[Classic Cache.Insert2 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Insert2 Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.Insert2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Insert2 Example/VB/source.vb#1)]  
  
 下面的示例演示如何将某个项插入到缓存具有可调过期。  
  
 [!code-csharp[Classic Cache.Insert2 Example#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Insert2 Example/CS/source.cs#2)]
 [!code-vb[Classic Cache.Insert2 Example#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Insert2 Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 或 <paramref name="value" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">将 <paramref name="slidingExpiration" /> 参数设置为小于 <see langword="TimeSpan.Zero" /> 或大于一年的等效值。</exception>
        <exception cref="T:System.ArgumentException">为要添加到 <see langword="Cache" /> 中的项设置 <paramref name="absoluteExpiration" /> 和 <paramref name="slidingExpiration" /> 参数。</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (string key, object value, System.Web.Caching.CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System.Web.Caching.CacheItemUpdateCallback onUpdateCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(string key, object value, class System.Web.Caching.CacheDependency dependencies, valuetype System.DateTime absoluteExpiration, valuetype System.TimeSpan slidingExpiration, class System.Web.Caching.CacheItemUpdateCallback onUpdateCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemUpdateCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (key As String, value As Object, dependencies As CacheDependency, absoluteExpiration As DateTime, slidingExpiration As TimeSpan, onUpdateCallback As CacheItemUpdateCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(System::String ^ key, System::Object ^ value, System::Web::Caching::CacheDependency ^ dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System::Web::Caching::CacheItemUpdateCallback ^ onUpdateCallback);" />
      <MemberSignature Language="F#" Value="member this.Insert : string * obj * System.Web.Caching.CacheDependency * DateTime * TimeSpan * System.Web.Caching.CacheItemUpdateCallback -&gt; unit" Usage="cache.Insert (key, value, dependencies, absoluteExpiration, slidingExpiration, onUpdateCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="absoluteExpiration" Type="System.DateTime" />
        <Parameter Name="slidingExpiration" Type="System.TimeSpan" />
        <Parameter Name="onUpdateCallback" Type="System.Web.Caching.CacheItemUpdateCallback" />
      </Parameters>
      <Docs>
        <param name="key">用于引用对象的缓存键。</param>
        <param name="value">要插入到缓存中的对象。</param>
        <param name="dependencies">该项的文件依赖项或缓存键依赖项。 当任何依赖项更改时，该对象即无效，并从缓存中移除。 如果没有依赖项，则此参数包含 <see langword="null" />。</param>
        <param name="absoluteExpiration">所插入对象将到期并被从缓存中移除的时间。 要避免可能的本地时间问题（例如从标准时间改为夏时制），请使用 <see cref="P:System.DateTime.UtcNow" /> 而不是 <see cref="P:System.DateTime.Now" /> 作为此参数值。 如果使用绝对到期，则 <c>slidingExpiration</c> 参数必须设置为 <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />。</param>
        <param name="slidingExpiration">缓存对象的上次访问时间和对象的到期时间之间的时间间隔。 如果此值为 20 分钟的等效值，此对象将过期并将在上次访问后 20 分钟从缓存中删除。 如果使用可调到期，则 <c>absoluteExpiration</c> 参数必须设置为 <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />。</param>
        <param name="onUpdateCallback">从缓存中移除对象之前将调用的委托。 可以使用它来更新缓存项并确保缓存项不会从缓存中移除。</param>
        <summary>将对象与依赖项、到期策略以及可用于在从缓存中移除项之前通知应用程序的委托一起插入到 <see cref="T:System.Web.Caching.Cache" /> 对象中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Caching.Cache.Insert%2A>方法，可在缓存中插入新项并提供从缓存中移除项之前调用的委托。 在委托中，可以更新缓存的项，从而阻止其从缓存中删除。  
  
 此方法将覆盖现有`Cache`具有相同的项`key`参数。  
  
 不能同时设置`absoluteExpiration`和`slidingExpiration`参数。 如果你想要在特定时间过期的缓存项，则设置`absoluteExpiration`参数为特定的时间，并`slidingExpiration`参数<xref:System.Web.Caching.Cache.NoSlidingExpiration>。  
  
 如果想要的缓存项一项以来的时间段后过期上次访问，则设置`slidingExpiration`到过期时间间隔，并且您的参数设置`absoluteExpiration`参数<xref:System.Web.Caching.Cache.NoAbsoluteExpiration>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" />、<paramref name="value" /> 或 <paramref name="onUpdateCallback" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">将 <paramref name="slidingExpiration" /> 参数设置为小于 <see langword="TimeSpan.Zero" /> 或大于一年的等效值。</exception>
        <exception cref="T:System.ArgumentException">为要添加到 <see langword="Cache" /> 中的项设置 <paramref name="absoluteExpiration" /> 和 <paramref name="slidingExpiration" /> 参数。  
  
或 
<paramref name="dependencies" /> 参数为 <see langword="null" />，<paramref name="absoluteExpiration" /> 参数设置为 <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" /> 并且 <paramref name="slidingExpiration" /> 参数设置为 <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />。</exception>
        <altmember cref="T:System.Web.Caching.CacheItemUpdateCallback" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (string key, object value, System.Web.Caching.CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System.Web.Caching.CacheItemPriority priority, System.Web.Caching.CacheItemRemovedCallback onRemoveCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(string key, object value, class System.Web.Caching.CacheDependency dependencies, valuetype System.DateTime absoluteExpiration, valuetype System.TimeSpan slidingExpiration, valuetype System.Web.Caching.CacheItemPriority priority, class System.Web.Caching.CacheItemRemovedCallback onRemoveCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (key As String, value As Object, dependencies As CacheDependency, absoluteExpiration As DateTime, slidingExpiration As TimeSpan, priority As CacheItemPriority, onRemoveCallback As CacheItemRemovedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(System::String ^ key, System::Object ^ value, System::Web::Caching::CacheDependency ^ dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System::Web::Caching::CacheItemPriority priority, System::Web::Caching::CacheItemRemovedCallback ^ onRemoveCallback);" />
      <MemberSignature Language="F#" Value="member this.Insert : string * obj * System.Web.Caching.CacheDependency * DateTime * TimeSpan * System.Web.Caching.CacheItemPriority * System.Web.Caching.CacheItemRemovedCallback -&gt; unit" Usage="cache.Insert (key, value, dependencies, absoluteExpiration, slidingExpiration, priority, onRemoveCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="absoluteExpiration" Type="System.DateTime" />
        <Parameter Name="slidingExpiration" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Web.Caching.CacheItemPriority" />
        <Parameter Name="onRemoveCallback" Type="System.Web.Caching.CacheItemRemovedCallback" />
      </Parameters>
      <Docs>
        <param name="key">用于引用该对象的缓存键。</param>
        <param name="value">要插入缓存中的对象。</param>
        <param name="dependencies">该项的文件依赖项或缓存键依赖项。 当任何依赖项更改时，该对象即无效，并从缓存中移除。 如果没有依赖项，则此参数包含 <see langword="null" />。</param>
        <param name="absoluteExpiration">所插入对象将到期并被从缓存中移除的时间。 要避免可能的本地时间问题（例如从标准时间改为夏时制），请使用 <see cref="P:System.DateTime.UtcNow" /> 而不是 <see cref="P:System.DateTime.Now" /> 作为此参数值。 如果使用绝对到期，则 <c>slidingExpiration</c> 参数必须为 <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />。</param>
        <param name="slidingExpiration">最后一次访问所插入对象时与该对象到期时之间的时间间隔。 如果此值为 20 分钟的等效值，此对象将过期并将在上次访问后 20 分钟从缓存中删除。 如果使用可调到期，则 <c>absoluteExpiration</c> 参数必须为 <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />。</param>
        <param name="priority">该对象相对于缓存中存储的其他项的成本，由 <see cref="T:System.Web.Caching.CacheItemPriority" /> 枚举表示。 该值由缓存在退出对象时使用；具有较低成本的对象在具有较高成本的对象之前被从缓存移除。</param>
        <param name="onRemoveCallback">在从缓存中移除对象时将调用的委托（如果提供）。 当从缓存中删除应用程序的对象时，可使用它来通知应用程序。</param>
        <summary>向 <see cref="T:System.Web.Caching.Cache" /> 对象中插入对象，后者具有依赖项、到期和优先级策略以及一个委托（可用于在从 <see langword="Cache" /> 移除插入项时通知应用程序）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将覆盖现有`Cache`具有相同的项`key`参数。  
  
 不能同时设置`absoluteExpiration`和`slidingExpiration`参数。 如果你想要在特定时间过期的缓存项，则设置`absoluteExpiration`参数为特定的时间，并`slidingExpiration`参数<xref:System.Web.Caching.Cache.NoSlidingExpiration>。  
  
 如果想要的缓存项在一段时间后过期传递自上次访问该项，则设置`slidingExpiration`过期时间间隔，参数和`absoluteExpiration`参数<xref:System.Web.Caching.Cache.NoAbsoluteExpiration>。  
  
   
  
## Examples  
 下面的示例演示如何将其插入到您的应用程序时，分配项高优先级`Cache`对象。  
  
> [!NOTE]
>  详细了解如何使用此方法替换<xref:System.Web.Caching.CacheItemRemovedCallback>委派，请参阅[如何： 通知应用程序时项已从缓存](http://msdn.microsoft.com/library/38c33aa0-afe9-40ba-a1a4-1ebab95286ef)。  
  
 [!code-csharp[Classic Cache.Insert3 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Insert3 Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.Insert3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Insert3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 或 <paramref name="value" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">将 <paramref name="slidingExpiration" /> 参数设置为小于 <see langword="TimeSpan.Zero" /> 或大于一年的等效值。</exception>
        <exception cref="T:System.ArgumentException">为要添加到 <see langword="Cache" /> 中的项设置 <paramref name="absoluteExpiration" /> 和 <paramref name="slidingExpiration" /> 参数。</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.Web.Caching.CacheItemPriority" />
        <altmember cref="T:System.Web.Caching.CacheItemRemovedCallback" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.Cache.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ key); void set(System::String ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj with get, set" Usage="System.Web.Caching.Cache.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">表示缓存项的键的 <see cref="T:System.String" /> 对象。</param>
        <summary>获取或设置指定键处的缓存项。</summary>
        <value>指定的缓存项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用此属性，检索指定的缓存项的值，或将注册表项和密钥为其添加到缓存。 添加的缓存项使用<xref:System.Web.Caching.Cache.Item%2A>属性相当于调用<xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的示例使用`Item`属性来检索缓存的对象与关联的值`Key1`密钥。 然后，它使用<xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>方法以将值和介绍性文本和 B HTML 元素写入到 Web 窗体页。  
  
 [!code-csharp[System.Web.Caching Examples#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching Examples/CS/cachecs.aspx#5)]
 [!code-vb[System.Web.Caching Examples#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching Examples/VB/cachevb.aspx#5)]  
  
 下面的示例演示如何使用此属性向缓存中插入文本框的值。  
  
 [!code-csharp[Classic Cache.this Example#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.this Example/CS/source.cs#2)]
 [!code-vb[Classic Cache.this Example#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.this Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName="NoAbsoluteExpiration">
      <MemberSignature Language="C#" Value="public static readonly DateTime NoAbsoluteExpiration;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime NoAbsoluteExpiration" />
      <MemberSignature Language="DocId" Value="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NoAbsoluteExpiration As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime NoAbsoluteExpiration;" />
      <MemberSignature Language="F#" Value=" staticval mutable NoAbsoluteExpiration : DateTime" Usage="System.Web.Caching.Cache.NoAbsoluteExpiration" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用于 <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" /> 方法调用中的 <paramref name="absoluteExpiration" /> 参数中以指示项从不到期。 此字段为只读。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用时，此字段设置`absoluteExpiration`参数等于<xref:System.DateTime.MaxValue>，这是一个常量，表示最大可能`DateTime`值，12/31/9999 11:59:59 PM。  
  
   
  
## Examples  
 下面的示例演示如何使用`NoAbsoluteExpiration`字段中插入项时禁用绝对过期`Cache`。  
  
 [!code-csharp[Classic Cache.NoAbsoluteExpiration Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.NoAbsoluteExpiration Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.NoAbsoluteExpiration Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.NoAbsoluteExpiration Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="NoSlidingExpiration">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan NoSlidingExpiration;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan NoSlidingExpiration" />
      <MemberSignature Language="DocId" Value="F:System.Web.Caching.Cache.NoSlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NoSlidingExpiration As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan NoSlidingExpiration;" />
      <MemberSignature Language="F#" Value=" staticval mutable NoSlidingExpiration : TimeSpan" Usage="System.Web.Caching.Cache.NoSlidingExpiration" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用作 <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" /> 或 <see cref="M:System.Web.Caching.Cache.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)" /> 方法调用中的 <paramref name="slidingExpiration" /> 参数，以禁用可调到期。 此字段为只读。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用时，此字段设置`slidingExpiration`参数<xref:System.TimeSpan.Zero?displayProperty=nameWithType>字段，常量值为零。 根据所使用的缓存的项过期`absoluteExpiration`参数与关联`Insert`或`Add`方法调用。  
  
   
  
## Examples  
 下面的示例演示如何使用 Insert 方法将项添加到<xref:System.Web.Caching.Cache>对象使用`NoSlidingExpiration`字段。  
  
 [!code-csharp[Classic Cache.NoSlidingExpiration Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.NoSlidingExpiration Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.NoSlidingExpiration Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.NoSlidingExpiration Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.TimeSpan.Zero" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public object Remove (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Remove(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Remove(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; obj" Usage="cache.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">要移除的缓存项的 <see cref="T:System.String" /> 标识符。</param>
        <summary>从应用程序的 <see cref="T:System.Web.Caching.Cache" /> 对象移除指定项。</summary>
        <returns>从 <see langword="Cache" /> 移除的项。 如果未找到键参数中的值，则返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建`RemoveItemFromCache`方法。 调用此方法时，它使用<xref:System.Web.Caching.Cache.Item%2A>要检查缓存中是否包含与之关联的对象属性`Key1`密钥值。 如果是这样，`Remove`调用方法来删除该对象。  
  
 [!code-csharp[System.Web.Caching Examples#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching Examples/CS/cachecs.aspx#4)]
 [!code-vb[System.Web.Caching Examples#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching Examples/VB/cachevb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回可循环访问 <see cref="T:System.Web.Caching.Cache" /> 对象集合的枚举数。</summary>
        <returns>可循环访问 <see cref="T:System.Web.Caching.Cache" /> 对象集合的枚举数。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>