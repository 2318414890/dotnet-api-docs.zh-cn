<Type Name="CacheDependency" FullName="System.Web.Caching.CacheDependency">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9974303165fcb48008a7ca6cb76926c385f74985" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57911169" /></Metadata><TypeSignature Language="C#" Value="public class CacheDependency : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi CacheDependency extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Caching.CacheDependency" />
  <TypeSignature Language="VB.NET" Value="Public Class CacheDependency&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheDependency : IDisposable" />
  <TypeSignature Language="F#" Value="type CacheDependency = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>在存储于 ASP.NET 应用程序的 <see cref="T:System.Web.Caching.Cache" /> 对象中的项与文件、缓存键、文件或缓存键的数组，或另一个 <see cref="T:System.Web.Caching.CacheDependency" /> 对象之间建立依赖关系。 <see cref="T:System.Web.Caching.CacheDependency" /> 类监视依赖关系，以便在任何这些对象发生更改时，自动删除缓存的项。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将项添加到依赖于另一个对象，例如文件或文件，数组的缓存依赖项是自动从缓存中删除该对象发生更改时。 例如，假设您创建<xref:System.Data.DataSet>对象基于的 XML 文件中的数据。 您可以添加<xref:System.Data.DataSet>到缓存<xref:System.Web.Caching.CacheDependency>对象，利用<xref:System.Data.DataSet>依赖于 XML 文件。 如果 XML 文件发生更改，<xref:System.Data.DataSet>从缓存中删除。  
  
 可以将具有依赖项添加到应用程序的缓存<xref:System.Web.Caching.Cache.Add%2A>和<xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType>方法。 不能使用<xref:System.Web.Caching.Cache.Item%2A>属性将项添加到缓存的依赖项。  
  
 若要设置依赖关系，您创建的实例<xref:System.Web.Caching.CacheDependency>类中，指定文件、 密钥或在其的项是相关，目录，然后将传递到的依赖关系<xref:System.Web.Caching.Cache.Add%2A>或<xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType>方法。 <xref:System.Web.Caching.CacheDependency>实例可以表示单个文件或目录、 文件或目录的数组或数组的文件或目录以及缓存密钥的数组 (这些表示存储在其他项<xref:System.Web.Caching.Cache>对象)。  
  
   
  
## Examples  
 下面的代码示例演示了如何使用<xref:System.Web.Caching.CacheDependency.HasChanged%2A>属性来确定是否<xref:System.Web.Caching.CacheDependency>自上一个请求中的某个项后更改<xref:System.Web.Caching.Cache>。 `dt`传入值`start`参数设置为<xref:System.DateTime.Now%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Caching.Cache" />
    <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
    <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Caching.CacheDependency" /> 类的新实例。</summary>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CacheDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CacheDependency();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Caching.CacheDependency" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你想要派生您自己的类从<xref:System.Web.Caching.CacheDependency>，实现此版本的<xref:System.Web.Caching.CacheDependency.%23ctor%2A>构造函数。  
  
   
  
## Examples  
 下面的代码示例是一个实现此版本的类<xref:System.Web.Caching.CacheDependency>构造函数、 派生的所有类作为<xref:System.Web.Caching.CacheDependency>所需的。  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">缓存对象所依赖的文件或目录的路径。 当该资源更改时，缓存的对象将过时，并从缓存中移除。</param>
        <summary>初始化 <see cref="T:System.Web.Caching.CacheDependency" /> 类的新实例，它监视文件或目录的更改情况。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目录或文件中指定`filename`参数中未找到文件系统中，它将被视为缺失。 如果缺少目录或文件时使用依赖项对象将添加到<xref:System.Web.Caching.Cache>，将从删除的缓存的对象<xref:System.Web.Caching.Cache>创建目录或文件时。  
  
 例如，假设您添加到对象<xref:System.Web.Caching.Cache>并依赖于以下的文件路径： c:\stocks\xyz.dat。 如果该文件未找到时<xref:System.Web.Caching.CacheDependency>对象创建，但更高版本创建，xyz.dat 文件创建时删除缓存的对象。  
  
   
  
## Examples  
 下面的代码示例创建的实例<xref:System.Web.Caching.CacheDependency>类并依赖于 XML 文件。 <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType>方法中再添加到项<xref:System.Web.Caching.Cache>这是依赖于该文件。  
  
 [!code-csharp[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/CS/source.cs#1)]
 [!code-vb[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/VB/source.vb#1)]  
  
 此外可以使用以下方法添加到项<xref:System.Web.Caching.Cache>并依赖于一个文件。  
  
 [!code-csharp[Single File Dependency Cache entry#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Single File Dependency Cache entry/CS/DependencySingleFilecs.aspx#1)]
 [!code-vb[Single File Dependency Cache entry#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Single File Dependency Cache entry/VB/DependencySingleFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filenames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">缓存对象所依赖的一组（到文件或目录的）路径。 当这些资源中的任何一个更改时，缓存的对象即过时，并从缓存中移除。</param>
        <summary>初始化 <see cref="T:System.Web.Caching.CacheDependency" /> 类的新实例，它监视一组（到文件或目录的）路径的更改情况。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果文件或目录数组中的任何更改，或者是从数组中删除缓存的项变得过时并从应用程序的删除<xref:System.Web.Caching.Cache>对象。  
  
 此外，如果任何目录或文件中指定`filenames`参数中未找到文件系统中，它将被视为丢失。 如果缺少目录或文件时使用依赖项对象将添加到<xref:System.Web.Caching.Cache>，将从删除的缓存的对象<xref:System.Web.Caching.Cache>创建该目录或文件时。  
  
 例如，假设您添加到对象<xref:System.Web.Caching.Cache>并依赖于以下的文件路径： c:\stocks\xyz.dat。 如果该文件未找到时<xref:System.Web.Caching.CacheDependency>对象创建，但更高版本创建，xyz.dat 文件创建时删除缓存的对象。  
  
> [!NOTE]
>  在创建包含的文件依赖项的数组时，必须定义的文件数项添加到<xref:System.Web.Caching.Cache>依赖于。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType>方法添加到项<xref:System.Web.Caching.Cache>依赖的文件数组。 您还可以使项依赖于目录的数组。  
  
 [!code-csharp[Multiple file based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Multiple file based dependency/CS/DependencyMultiFilecs.aspx#1)]
 [!code-vb[Multiple file based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Multiple file based dependency/VB/DependencyMultiFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filename, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filename">缓存对象所依赖的文件或目录的路径。 当该资源更改时，缓存的对象将过时，并从缓存中移除。</param>
        <param name="start">检查目录或文件的上次修改日期所依据的时间。</param>
        <summary>初始化 <see cref="T:System.Web.Caching.CacheDependency" /> 类的新实例，它监视文件或目录的更改情况。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目录或文件中指定`filename`参数中未找到文件系统中，它将被视为缺失。 如果缺少目录或文件时使用依赖项对象将添加到<xref:System.Web.Caching.Cache>，将从删除的缓存的对象<xref:System.Web.Caching.Cache>创建目录或文件时。  
  
 例如，假设您添加到对象<xref:System.Web.Caching.Cache>并依赖于以下的文件路径： c:\stocks\xyz.dat。 如果该文件未找到时<xref:System.Web.Caching.CacheDependency>对象创建，但更高版本创建，xyz.dat 文件创建时删除缓存的对象。  
  
> [!NOTE]
>  更改跟踪将立即开始并不直接基于`start`参数。 使用`start`参数传递的日期和时间在过去，想要检查的上次修改日期的目录或文件传入的`filename`参数。 如果的上次修改日期晚于日期和时间设置传入`start`参数，缓存的项已从<xref:System.Web.Caching.Cache>。  
  
   
  
## Examples  
 下面的代码示例使用此构造函数来实例化<xref:System.Web.Caching.CacheDependency>对象，然后将一项插入<xref:System.Web.Caching.Cache>该依赖项。 `dt`传入值`start`参数设置为<xref:System.DateTime.Now%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">缓存对象所依赖的一组（到文件或目录的）路径。 当这些资源中的任何一个更改时，缓存的对象即过时，并从缓存中移除。</param>
        <param name="start">检查数组中对象的上次修改日期所依据的时间。</param>
        <summary>初始化 <see cref="T:System.Web.Caching.CacheDependency" /> 类的新实例，它监视一组（到文件或目录的）路径的更改情况并指定更改监视开始的时间。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果任何目录或文件中指定`filenames`参数中未找到文件系统中，它将被视为丢失。 如果缺少目录或文件时使用依赖项对象将添加到<xref:System.Web.Caching.Cache>，将从删除的缓存的对象<xref:System.Web.Caching.Cache>创建该目录或文件时。  
  
 例如，假设您添加到对象<xref:System.Web.Caching.Cache>并依赖于以下的文件路径： c:\stocks\xyz.dat。 如果该文件未找到时<xref:System.Web.Caching.CacheDependency>对象创建，但更高版本创建，xyz.dat 文件创建时删除缓存的对象。  
  
> [!NOTE]
>  更改跟踪将立即开始并不直接基于`start`参数。 使用`start`传入参数传递的日期和时间在过去，想要检查的数组的上次修改的日期`filenames`参数。 如果的上次修改的数组中的任何对象的日期晚于日期和时间设置传入`start`参数，缓存的项已从<xref:System.Web.Caching.Cache>。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Web.Caching.CacheDependency>将传递两个 XML 文件的对象和一个<xref:System.DateTime.Now%2A?displayProperty=nameWithType>值作为参数传递中包括该对象时<xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType>方法调用。  
  
 [!code-csharp[CacheDependency Constructor4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor4/CS/depmultifilestimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor4/VB/depmultifilestimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">缓存对象所依赖的一组（到文件或目录的）路径。 当这些资源中的任何一个更改时，缓存的对象即过时，并从缓存中移除。</param>
        <param name="cachekeys">一组缓存键，新对象监视它们的更改。 当这些缓存键中的任何一个发生更改时，与此依赖项对象关联的缓存对象即过时，并从缓存中移除。</param>
        <summary>初始化 <see cref="T:System.Web.Caching.CacheDependency" /> 类的新实例，它监视一组（到文件或目录的）路径、缓存键的更改情况或同时监视二者的更改情况。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此外，如果任何目录或文件中指定`filenames`参数中未找到文件系统中，它将被视为丢失。 如果缺少目录或文件时使用依赖项对象将添加到<xref:System.Web.Caching.Cache>，将从删除的缓存的对象<xref:System.Web.Caching.Cache>创建该目录或文件时。  
  
 例如，假设您添加到对象<xref:System.Web.Caching.Cache>并依赖于以下的文件路径： c:\stocks\xyz.dat。 如果该文件未找到时<xref:System.Web.Caching.CacheDependency>对象创建，但更高版本创建，xyz.dat 文件创建时删除缓存的对象。  
  
 但是，`cachekeys`依赖项不起作用相同的方式。 如果至少一个中的值`cachekeys`参数不存在的插入操作时，插入失败。 请注意，没有对此方案中引发的异常。  
  
## Examples  
 下面的代码段演示了如何将项插入到应用程序的<xref:System.Web.Caching.Cache>并依赖于另一个项的键放置在缓存中。 由于此方法使用数组语法，因此必须定义的键的数目的项要添加到<xref:System.Web.Caching.Cache>依赖。  
  
 [!code-csharp[Key based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Key based dependency/CS/DependencyKeycs.aspx#1)]
 [!code-vb[Key based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Key based dependency/VB/DependencyKeyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">缓存对象所依赖的一组（到文件或目录的）路径。 当这些资源中的任何一个更改时，缓存的对象即过时，并从缓存中移除。</param>
        <param name="cachekeys">一组缓存键，新对象监视它们的更改。 当这些缓存键中的任何一个发生更改时，与此依赖项对象关联的缓存对象即过时，并从缓存中移除。</param>
        <param name="start">检查在 <paramref name="filenames" /> 和 <paramref name="cachekeys" /> 数组中传递的对象的上次修改日期所依据的日期和时间。</param>
        <summary>初始化 <see cref="T:System.Web.Caching.CacheDependency" /> 类的新实例，它监视一组（到文件或目录的）路径、缓存键的更改情况或同时监视二者的更改情况。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此外，如果任何目录或文件中指定`filenames`参数中未找到文件系统中，它将被视为丢失。 如果缺少目录或文件时使用依赖项对象将添加到<xref:System.Web.Caching.Cache>，将从删除的缓存的对象<xref:System.Web.Caching.Cache>创建该目录或文件时。  
  
 例如，假设您添加到对象<xref:System.Web.Caching.Cache>并依赖于以下的文件路径： c:\stocks\xyz.dat。 如果该文件未找到时<xref:System.Web.Caching.CacheDependency>对象创建，但更高版本创建，xyz.dat 文件创建时删除缓存的对象。  
  
 但是，`cachekeys`依赖项不起作用相同的方式。 如果至少一个中的值`cachekeys`参数不存在的插入操作时，插入失败。 请注意，没有对此方案中引发的异常。

> [!NOTE]
>  更改跟踪将立即开始并不直接基于`start`参数。 使用`start`传入参数传递的日期和时间在过去，想要检查的任何对象的上次修改的日期`filenames`或`cachekeys`参数。 如果的上次修改任何这些对象的日期晚于日期和时间设置传入`start`参数，缓存的项已从<xref:System.Web.Caching.Cache>。  
  
   
  
## Examples  
 下面的代码示例创建`CreateDependency`方法。 当调用此方法时，它会创建<xref:System.DateTime>对象和<xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType>属性用于将项添加到缓存`key`参数`key1`并将值`Value 1`。 一个字符串，数组`dependencyKey`，然后创建值为`key1`也。 这<xref:System.Web.Caching.CacheDependency>构造函数，然后实例化<xref:System.Web.Caching.CacheDependency>对象，它将传递`dependencyKey`和<xref:System.DateTime>对象作为参数自变量。 <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType>方法使用接下来，调用<xref:System.Web.Caching.CacheDependency>对象作为参数。 这使得添加到缓存使用的对象<xref:System.Web.Caching.Cache.Insert%2A>方法依赖于`key1`密钥。  
  
 [!code-csharp[CacheDependency Constructor6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor6/CS/depkeytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor6/VB/depkeytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
      </Parameters>
      <Docs>
        <param name="filenames">缓存对象所依赖的一组（到文件或目录的）路径。 当这些资源中的任何一个更改时，缓存的对象即过时，并从缓存中移除。</param>
        <param name="cachekeys">一组缓存键，新对象监视它们的更改。 当这些缓存键中的任何一个发生更改时，与此依赖项对象关联的缓存对象即过时，并从缓存中移除。</param>
        <param name="dependency">此实例所依赖的 <see cref="T:System.Web.Caching.CacheDependency" /> 类的另一个实例。</param>
        <summary>初始化 <see cref="T:System.Web.Caching.CacheDependency" /> 类的新实例，它监视一组（到文件或目录的）路径、缓存键的更改情况或同时监视二者的更改情况。 它还使自己依赖于 <see cref="T:System.Web.Caching.CacheDependency" /> 类的一个单独的实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此外，如果任何目录或文件中指定`filenames`参数中未找到文件系统中，它将被视为丢失。 如果缺少目录或文件时使用依赖项对象将添加到<xref:System.Web.Caching.Cache>，将从删除的缓存的对象<xref:System.Web.Caching.Cache>创建该目录或文件时。  
  
 例如，假设您添加到对象<xref:System.Web.Caching.Cache>并依赖于以下的文件路径： c:\stocks\xyz.dat。 如果该文件未找到时<xref:System.Web.Caching.CacheDependency>对象创建，但更高版本创建，xyz.dat 文件创建时删除缓存的对象。  
  
 但是，`cachekeys`依赖项不起作用相同的方式。 如果至少一个中的值`cachekeys`参数不存在的插入操作时，插入失败。 请注意，没有对此方案中引发的异常。
  
## Examples  
 下面的代码示例创建`CreateDependency`方法。 调用此方法时，它使用<xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType>属性将项添加到缓存`key`的参数`key1`并将值`Value 1`。 一个字符串，数组`dependencyKey`，然后创建值为`key1`也。 <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType>构造函数用于创建<xref:System.Web.Caching.CacheDependency>对象， `dep1`，哪些传递`dependencyKey`作为参数传递。 第二个<xref:System.Web.Caching.CacheDependency>对象， `dep2`，使用此构造函数，创建`dep1`作为第三个参数自变量传递。 此第二个依赖项是依赖于第一个。 <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType>方法使用第二个接下来，调用<xref:System.Web.Caching.CacheDependency>对象作为参数。 如果第一个依赖项以任何方式发生更改，则将无效的缓存的项。  
  
 [!code-csharp[CacheDependency Constructor7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor7/CS/dependencycs.aspx#1)]
 [!code-vb[CacheDependency Constructor7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor7/VB/dependencyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">缓存对象所依赖的一组（到文件或目录的）路径。 当这些资源中的任何一个更改时，缓存的对象即过时，并从缓存中移除。</param>
        <param name="cachekeys">一组缓存键，新对象监视它们的更改。 当这些缓存键中的任何一个发生更改时，与此依赖项对象关联的缓存对象即过时，并从缓存中移除。</param>
        <param name="dependency">此实例所依赖的 <see cref="T:System.Web.Caching.CacheDependency" /> 类的另一个实例。</param>
        <param name="start">检查数组中对象和 <see cref="T:System.Web.Caching.CacheDependency" /> 对象的上次修改日期所依据的时间。</param>
        <summary>初始化 <see cref="T:System.Web.Caching.CacheDependency" /> 类的新实例，它监视一组（到文件或目录的）路径、缓存键的更改情况或同时监视二者的更改情况。 它还使自己依赖于 <see cref="T:System.Web.Caching.CacheDependency" /> 类的另一个实例以及更改监视开始的时间。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此外，如果任何目录或文件中指定`filenames`参数中未找到文件系统中，它将被视为丢失。 如果缺少目录或文件时使用依赖项对象将添加到<xref:System.Web.Caching.Cache>，将从删除的缓存的对象<xref:System.Web.Caching.Cache>创建该目录或文件时。  
  
 例如，假设您添加到对象<xref:System.Web.Caching.Cache>并依赖于以下的文件路径： c:\stocks\xyz.dat。 如果该文件未找到时<xref:System.Web.Caching.CacheDependency>对象创建，但更高版本创建，xyz.dat 文件创建时删除缓存的对象。  
 
 但是，`cachekeys`依赖项不起作用相同的方式。 如果至少一个中的值`cachekeys`参数不存在的插入操作时，插入失败。 请注意，没有对此方案中引发的异常。

> [!NOTE]
>  更改跟踪将立即开始并不直接基于`start`参数。 使用`start`传入参数传递的日期和时间在过去，想要检查的任何对象的上次修改的日期`filenames`， `cachekeys`，或`dependency`参数。 如果的上次修改任何这些对象的日期晚于日期和时间传递`start`参数，缓存的项已从<xref:System.Web.Caching.Cache>。  
  
   
  
## Examples  
 下面的代码示例演示`CreateDependency`方法。 当调用此方法时，它会创建<xref:System.DateTime>对象和<xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType>属性用于将项添加到缓存中使用的密钥参数`key1`并将值`Value 1`。 一个字符串，数组`dependencyKey`，然后使用设置的值为其第一个 （且唯一的） 索引处的值创建`key1`也。 <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType>构造函数随后用于创建<xref:System.Web.Caching.CacheDependency>对象， `dep1`，哪些传递`dependencyKey`作为参数传递。 第二个<xref:System.Web.Caching.CacheDependency>对象， `dep2`，使用此构造函数，然后创建`dep1`和<xref:System.DateTime>对象作为参数自变量传递。 此第二个依赖项是依赖于第一个和依赖项监视将开始之后 10 秒`CreateDependency`调用方法。 <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType>方法使用第二个接下来，调用<xref:System.Web.Caching.CacheDependency>对象作为参数。 如果第一个依赖项以任何方式发生更改，则将无效的缓存的项。  
  
 [!code-csharp[CacheDependency Constructor8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor8/CS/dependencytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor8/VB/dependencytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName="DependencyDispose">
      <MemberSignature Language="C#" Value="protected virtual void DependencyDispose ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DependencyDispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.DependencyDispose" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DependencyDispose ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DependencyDispose();" />
      <MemberSignature Language="F#" Value="abstract member DependencyDispose : unit -&gt; unit&#xA;override this.DependencyDispose : unit -&gt; unit" Usage="cacheDependency.DependencyDispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Web.Caching.CacheDependency" /> 类和从 <see cref="T:System.Web.Caching.CacheDependency" /> 派生的所有类使用的资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从派生的任何类<xref:System.Web.Caching.CacheDependency>类是实现此方法以清理派生的类具有使用的资源所必需。  
  
   
  
## Examples  
 下面的代码示例显示了继承的类<xref:System.Web.Caching.CacheDependency>类，并重写<xref:System.Web.Caching.CacheDependency.DependencyDispose%2A>方法。 当调用此方法时，名为自定义布尔值属性设置`Disposed`到`true`。  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cacheDependency.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Web.Caching.CacheDependency" /> 对象使用的资源。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInit">
      <MemberSignature Language="C#" Value="protected internal void FinishInit ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void FinishInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.FinishInit" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub FinishInit ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void FinishInit();" />
      <MemberSignature Language="F#" Value="member this.FinishInit : unit -&gt; unit" Usage="cacheDependency.FinishInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>完成 <see cref="T:System.Web.Caching.CacheDependency" /> 对象的初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Caching.CacheDependency.FinishInit%2A>方法完成的初始化<xref:System.Web.Caching.CacheDependency>对象。 所有调用此方法<xref:System.Web.Caching.CacheDependency>构造函数。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Web.Caching.CacheDependency.FinishInit" />必须完成的初始化派生类的构造函数的末尾调用方法<see cref="T:System.Web.Caching.CacheDependency" />对象。</para></block>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileDependencies">
      <MemberSignature Language="C#" Value="public virtual string[] GetFileDependencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFileDependencies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetFileDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileDependencies () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetFileDependencies();" />
      <MemberSignature Language="F#" Value="abstract member GetFileDependencies : unit -&gt; string[]&#xA;override this.GetFileDependencies : unit -&gt; string[]" Usage="cacheDependency.GetFileDependencies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取文件依赖项。</summary>
        <returns>文件依赖项。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUniqueID">
      <MemberSignature Language="C#" Value="public virtual string GetUniqueID ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetUniqueID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetUniqueID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUniqueID () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetUniqueID();" />
      <MemberSignature Language="F#" Value="abstract member GetUniqueID : unit -&gt; string&#xA;override this.GetUniqueID : unit -&gt; string" Usage="cacheDependency.GetUniqueID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>检索 <see cref="T:System.Web.Caching.CacheDependency" /> 对象的唯一标识符。</summary>
        <returns><see cref="T:System.Web.Caching.CacheDependency" /> 对象的唯一标识符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法也可特别用于跟踪的多个实例<xref:System.Web.Caching.CacheDependency>项或应用程序相关联的类。  
  
 标识符是 （适用于文件依赖项） 的文件名称或键名称 （针对缓存键依赖项） 和一个字符串，此方法将分配到的依赖项的组合。 在派生类中<xref:System.Web.Caching.CacheDependency>类，您可以重写此方法以自定义如何为其生成的唯一标识符。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Web.Caching.AggregateCacheDependency>名为的对象`aggDep`，以两个<xref:System.Web.Caching.CacheDependency>其数组中的对象。 一次`aggDep`实例化时，该代码调用<xref:System.Web.Caching.CacheDependency.GetUniqueID%2A>方法来生成这两个依赖项的唯一标识符的`aggDep`包含并显示到包含页的标识符。 随后将项添加到<xref:System.Web.Caching.Cache>，并使用<xref:System.Web.Caching.Cache.Insert%2A>方法，与`aggDep`作为依赖项。  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Web.Caching.CacheDependency.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Web.Caching.CacheDependency" /> 对象是否已更改。</summary>
        <value>如果 <see cref="T:System.Web.Caching.CacheDependency" /> 对象已更改，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以将项添加到 ASP.NET 应用程序的<xref:System.Web.Caching.Cache>与<xref:System.Web.Caching.CacheDependency>。 当<xref:System.Web.Caching.CacheDependency>发生更改，添加到的项<xref:System.Web.Caching.Cache>失效并从缓存中删除。 可以使用此属性以确定是否<xref:System.Web.Caching.CacheDependency>已更改，并重新创建中的项<xref:System.Web.Caching.Cache>如果发生这种。  
  
   
  
## Examples  
 下面的代码示例演示了如何使用<xref:System.Web.Caching.CacheDependency.HasChanged%2A>属性来确定是否<xref:System.Web.Caching.CacheDependency>自上一个请求中的某个项后更改<xref:System.Web.Caching.Cache>。 `dt`传入值`start`参数设置为<xref:System.DateTime.Now%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName="ItemRemoved">
      <MemberSignature Language="C#" Value="public void ItemRemoved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ItemRemoved() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.ItemRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Sub ItemRemoved ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ItemRemoved();" />
      <MemberSignature Language="F#" Value="member this.ItemRemoved : unit -&gt; unit" Usage="cacheDependency.ItemRemoved " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>删除监视的缓存项时调用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepDependenciesAlive">
      <MemberSignature Language="C#" Value="public void KeepDependenciesAlive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void KeepDependenciesAlive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.KeepDependenciesAlive" />
      <MemberSignature Language="VB.NET" Value="Public Sub KeepDependenciesAlive ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void KeepDependenciesAlive();" />
      <MemberSignature Language="F#" Value="member this.KeepDependenciesAlive : unit -&gt; unit" Usage="cacheDependency.KeepDependenciesAlive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>更新依赖于此项的每个缓存项的上次访问时间。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyDependencyChanged">
      <MemberSignature Language="C#" Value="protected void NotifyDependencyChanged (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void NotifyDependencyChanged(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub NotifyDependencyChanged (sender As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void NotifyDependencyChanged(System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.NotifyDependencyChanged : obj * EventArgs -&gt; unit" Usage="cacheDependency.NotifyDependencyChanged (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="e" Type="System.EventArgs" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sender">事件源。</param>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" /> 对象。</param>
        <summary>通知 <see cref="T:System.Web.Caching.CacheDependency" /> 基对象由派生的 <see cref="T:System.Web.Caching.CacheDependency" /> 类表示的依赖项已更改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从派生的任何类<xref:System.Web.Caching.CacheDependency>类必须实现此方法。  
  
 从类派生时<xref:System.Web.Caching.CacheDependency>类，您可以使用任何方法或未覆盖的属性的基本功能。 当您创建派生类的实例时，它表示文件、 缓存键、 数据库表中或想要使缓存的项依赖于其他任意对象。 此方法依赖项发生更改时通知的基本功能<xref:System.Web.Caching.CacheDependency>类的项已更改，以便的值<xref:System.Web.Caching.CacheDependency.HasChanged%2A>和<xref:System.Web.Caching.CacheDependency.UtcLastModified%2A>可以更新属性。  
  
   
  
## Examples  
 下面的代码示例显示了继承的类<xref:System.Web.Caching.CacheDependency>类。 它将创建一个公共方法： `ResetDependency`，使用<xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A>方法，以便更改的依赖项的修改的时间，然后调用<xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A>方法。  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName="SetCacheDependencyChanged">
      <MemberSignature Language="C#" Value="public void SetCacheDependencyChanged (Action&lt;object,EventArgs&gt; dependencyChangedAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCacheDependencyChanged(class System.Action`2&lt;object, class System.EventArgs&gt; dependencyChangedAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCacheDependencyChanged (dependencyChangedAction As Action(Of Object, EventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCacheDependencyChanged(Action&lt;System::Object ^, EventArgs ^&gt; ^ dependencyChangedAction);" />
      <MemberSignature Language="F#" Value="member this.SetCacheDependencyChanged : Action&lt;obj, EventArgs&gt; -&gt; unit" Usage="cacheDependency.SetCacheDependencyChanged dependencyChangedAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyChangedAction" Type="System.Action&lt;System.Object,System.EventArgs&gt;" Index="0" FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="dependencyChangedAction">依赖项更改的操作。</param>
        <summary>添加 Action 方法，处理通知感兴趣的参与方有关此依赖项的更改。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUtcLastModified">
      <MemberSignature Language="C#" Value="protected void SetUtcLastModified (DateTime utcLastModified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetUtcLastModified(valuetype System.DateTime utcLastModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetUtcLastModified (utcLastModified As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetUtcLastModified(DateTime utcLastModified);" />
      <MemberSignature Language="F#" Value="member this.SetUtcLastModified : DateTime -&gt; unit" Usage="cacheDependency.SetUtcLastModified utcLastModified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utcLastModified" Type="System.DateTime" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="utcLastModified">依赖项的上次更改时间。</param>
        <summary>标记依赖项的上次更改时间。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例显示了继承的类<xref:System.Web.Caching.CacheDependency>类。 它将创建一个公共方法： `ResetDependency`，使用<xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A>方法，以便更改的依赖项的修改的时间，然后调用<xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A>方法。  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
    <Member MemberName="TakeOwnership">
      <MemberSignature Language="C#" Value="public bool TakeOwnership ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TakeOwnership() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.TakeOwnership" />
      <MemberSignature Language="VB.NET" Value="Public Function TakeOwnership () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TakeOwnership();" />
      <MemberSignature Language="F#" Value="member this.TakeOwnership : unit -&gt; bool" Usage="cacheDependency.TakeOwnership " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>允许第一个用户声明对此依赖项的独占拥有权。</summary>
        <returns>如果此项第一个获得所有权，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法声明使用依赖项。 如果另一项之前调用此方法，并且花费了所有权，`false`返回。 一个<xref:System.Web.Caching.CacheDependency>只能由一个缓存项。 当某项与任何指定的缓存依赖项添加到缓存后时，缓存应获得这些依赖项，以确保，它们不会重复使用某个位置其他的所有权。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcLastModified">
      <MemberSignature Language="C#" Value="public DateTime UtcLastModified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcLastModified" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcLastModified As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcLastModified { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcLastModified : DateTime" Usage="System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取依赖项的上次更改时间。</summary>
        <value>依赖项的上次更改时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性被测量以协调世界时 (UTC) （也称为格林尼治标准时间）。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Caching.AggregateCacheDependency>要添加的项，请使用两个类<xref:System.Web.Caching.CacheDependency>个对象依赖关系， <xref:System.Web.Caching.Cache>。 当请求<xref:System.Web.Caching.Cache>项时，代码检查该项是否处于<xref:System.Web.Caching.Cache>。 如果是，<xref:System.Web.Caching.CacheDependency.UtcLastModified%2A>属性转换为一个字符串，并在页面上显示。 项和其两个依赖项不是这样，如果将创建并添加到<xref:System.Web.Caching.Cache>。  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">缓存应用程序数据</related>
      </Docs>
    </Member>
  </Members>
</Type>