<Type Name="AuthenticationService" FullName="System.Web.ApplicationServices.AuthenticationService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d897ae83eb4104674fa1bea5f802fc828cf168a5" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32692136" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AuthenticationService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AuthenticationService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.ApplicationServices.AuthenticationService" />
  <TypeSignature Language="VB.NET" Value="Public Class AuthenticationService" />
  <TypeSignature Language="C++ CLI" Value="public ref class AuthenticationService" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ServiceModel.Activation.AspNetCompatibilityRequirements(RequirementsMode=System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Required)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ServiceModel.ServiceBehavior(ConcurrencyMode=System.ServiceModel.ConcurrencyMode.Multiple, InstanceContextMode=System.ServiceModel.InstanceContextMode.Single, Namespace="http://asp.net/ApplicationServices/v200")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ServiceModel.ServiceContract(Namespace="http://asp.net/ApplicationServices/v200")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>启用作为 Web 服务对 ASP.NET Forms 身份验证的访问。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.ApplicationServices.AuthenticationService>对象可用于通过 Windows Communication Foundation (WCF) 服务的用户进行身份验证。 必须通过的应用程序之外的 Web 应用程序将用户凭据存储中的 ASP.NET 成员资格用户进行身份验证时，你可以使用 WCF 身份验证服务。 应用程序必须能够发送和使用 SOAP 格式的消息。 通过<xref:System.Web.ApplicationServices.AuthenticationService>类，你可以在登录用户时，日志用户 out、 验证凭据，检查身份验证状态、 自定义身份验证，并设置身份验证 cookie。  
  
 <xref:System.Web.ApplicationServices.AuthenticationService>类包含应访问只能通过 WCF 服务的四个方法： <xref:System.Web.ApplicationServices.AuthenticationService.IsLoggedIn%2A>， <xref:System.Web.ApplicationServices.AuthenticationService.Login%2A>， <xref:System.Web.ApplicationServices.AuthenticationService.Logout%2A>，和<xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>方法。 若要调用这些方法，你启用 Web 服务器上的身份验证服务，，然后连接到 Web 服务的 WCF 兼容客户端应用程序。 有关如何配置身份验证服务的信息，请参阅[如何： 启用 WCF 身份验证服务](http://msdn.microsoft.com/library/f7913259-762e-4a73-a771-ac9e42903f44)。  
  
 若要登录在用户，你可以传递到的用户凭据<xref:System.Web.ApplicationServices.AuthenticationService.Login%2A>方法。 如果凭据有效，<xref:System.Web.ApplicationServices.AuthenticationService>类创建的身份验证 cookie。 如果身份验证 cookie 已过期，你知道用户的凭据进行了身份验证并不需要再次验证凭据。 (无 cookie 的身份验证不能通过<xref:System.Web.ApplicationServices.AuthenticationService>类。)  
  
 <xref:System.Web.ApplicationServices.AuthenticationService>可以引发两个事件：<xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>和<xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>。 <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>事件发生时验证用户凭据。 创建的事件处理程序<xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>事件以自定义如何验证用户凭据。 <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>事件发生时已验证用户凭据之后设置身份验证 cookie。 创建的事件处理程序<xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>事件，以自定义身份验证 cookie。  
  
 <xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>方法检查用户凭据进行身份验证，但它不返回的身份验证票证。 使用<xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>时用户以前已登录，因此你必须检查在新的应用程序会话开始时的凭据是否仍然有效。  
  
 使用 WCF 身份验证服务的控制台应用程序的示例，请参阅[演练： 使用 ASP.NET 应用程序服务](http://msdn.microsoft.com/library/f3f394f0-20d6-4361-aa8f-4b21bf4933eb)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AuthenticationService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.ApplicationServices.AuthenticationService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AuthenticationService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.ApplicationServices.AuthenticationService" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticating">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;System.Web.ApplicationServices.AuthenticatingEventArgs&gt; Authenticating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.ApplicationServices.AuthenticatingEventArgs&gt; Authenticating" />
      <MemberSignature Language="DocId" Value="E:System.Web.ApplicationServices.AuthenticationService.Authenticating" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event Authenticating As EventHandler(Of AuthenticatingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler&lt;System::Web::ApplicationServices::AuthenticatingEventArgs ^&gt; ^ Authenticating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.ApplicationServices.AuthenticatingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当验证用户凭据时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>时验证用户凭据时将引发事件。 创建的事件处理程序<xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>事件以自定义如何验证用户凭据。  
  
   
  
## Examples  
 下面的示例演示如何将绑定的事件处理程序<xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>中的事件`Application_Start`的 Global.asax 文件的方法。  
  
 [!code-csharp[System.Web.Security.LoginService_MultipleCredentials#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.LoginService_MultipleCredentials/cs/Global.asax#1)]
 [!code-vb[System.Web.Security.LoginService_MultipleCredentials#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.LoginService_MultipleCredentials/vb/Global.asax#1)]  
  
 下面的示例演示的事件处理程序<xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>Global.asax 文件中的事件。 事件处理程序读取从两个身份验证值<xref:System.Web.ApplicationServices.AuthenticatingEventArgs.CustomCredential%2A>属性并将它们以及用户名和密码与自定义身份验证类名为`StudentAuthentication`。  
  
 [!code-csharp[System.Web.Security.LoginService_MultipleCredentials#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.LoginService_MultipleCredentials/cs/Global.asax#2)]
 [!code-vb[System.Web.Security.LoginService_MultipleCredentials#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.LoginService_MultipleCredentials/vb/Global.asax#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.ApplicationServices.AuthenticatingEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CreatingCookie">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;System.Web.ApplicationServices.CreatingCookieEventArgs&gt; CreatingCookie;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.ApplicationServices.CreatingCookieEventArgs&gt; CreatingCookie" />
      <MemberSignature Language="DocId" Value="E:System.Web.ApplicationServices.AuthenticationService.CreatingCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event CreatingCookie As EventHandler(Of CreatingCookieEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler&lt;System::Web::ApplicationServices::CreatingCookieEventArgs ^&gt; ^ CreatingCookie;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.ApplicationServices.CreatingCookieEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当设置身份验证 Cookie 时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>后已验证用户凭据设置身份验证 cookie 时引发事件。 创建的事件处理程序<xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>事件，以自定义身份验证 cookie。  
  
   
  
## Examples  
 下面的示例演示如何将绑定到一个事件处理程序<xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>中的事件`Application_Start`的 Global.asax 文件的方法。  
  
 [!code-csharp[System.Web.Security.LoginService.CreatingCookieEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.LoginService.CreatingCookieEventArgs/cs/Global.asax#1)]
 [!code-vb[System.Web.Security.LoginService.CreatingCookieEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.LoginService.CreatingCookieEventArgs/vb/Global.asax#1)]  
  
 下面的示例演示的事件处理程序<xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>Global.asax 文件中的事件。 事件处理程序自定义身份验证 cookie，通过添加中的值<xref:System.Web.ApplicationServices.CreatingCookieEventArgs.CustomCredential%2A>属性<xref:System.Web.Security.FormsAuthenticationTicket.UserData%2A>属性。 应用商店<xref:System.Web.ApplicationServices.CreatingCookieEventArgs.CustomCredential%2A>仅当你知道该属性中的数据不是敏感的 cookie 中的属性。 恶意用户可以访问在 cookie 中的值。  
  
 [!code-csharp[System.Web.Security.LoginService.CreatingCookieEventArgs#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.LoginService.CreatingCookieEventArgs/cs/Global.asax#2)]
 [!code-vb[System.Web.Security.LoginService.CreatingCookieEventArgs#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.LoginService.CreatingCookieEventArgs/vb/Global.asax#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.ApplicationServices.CreatingCookieEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="IsLoggedIn">
      <MemberSignature Language="C#" Value="public bool IsLoggedIn ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsLoggedIn() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.ApplicationServices.AuthenticationService.IsLoggedIn" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLoggedIn () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsLoggedIn();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ServiceModel.OperationContract</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定当前用户是否已经过身份验证。</summary>
        <returns>
          如果该用户已经过身份验证，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.ApplicationServices.AuthenticationService.IsLoggedIn%2A>方法检查是否当前的用户进行身份验证通过检查<xref:System.Security.Principal.IIdentity.IsAuthenticated%2A>属性来。  
  
> [!NOTE]
>  不要调用<xref:System.Web.ApplicationServices.AuthenticationService.IsLoggedIn%2A>从 Web 服务器执行的代码的方法。 你调用<xref:System.Web.ApplicationServices.AuthenticationService.IsLoggedIn%2A>仅作为 WCF 服务的一部分的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Login">
      <MemberSignature Language="C#" Value="public bool Login (string username, string password, string customCredential, bool isPersistent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Login(string username, string password, string customCredential, bool isPersistent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.ApplicationServices.AuthenticationService.Login(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Login (username As String, password As String, customCredential As String, isPersistent As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Login(System::String ^ username, System::String ^ password, System::String ^ customCredential, bool isPersistent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ServiceModel.OperationContract</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="customCredential" Type="System.String" />
        <Parameter Name="isPersistent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="username">要验证的用户名。</param>
        <param name="password">指定的用户的密码。</param>
        <param name="customCredential">要验证的除 <c>userName</c> 和 <c>password</c> 之外的一个或多个值（如果有）。</param>
        <param name="isPersistent">指示身份验证票证在各会话中是否都保持有效的一个值。</param>
        <summary>检查用户凭据，如果凭据有效，则创建一个身份验证票证 (Cookie)。</summary>
        <returns>
          如果用户凭据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.ApplicationServices.AuthenticationService.Login%2A>方法用于验证通过成员资格提供程序的用户凭据。 你可以使用默认成员资格提供程序，或在运行时指定自定义成员资格提供程序。 <xref:System.Web.ApplicationServices.AuthenticationService>类传递`userName`和`password`到成员资格提供程序的<xref:System.Web.Security.MembershipProvider.ValidateUser%2A>方法，但不能通过`customCredential`。 如果<xref:System.Web.Security.MembershipProvider.ValidateUser%2A>返回`true`，<xref:System.Web.ApplicationServices.AuthenticationService>创建作为 cookie 的身份验证票证。 设置`isPersistent`参数`true`创建超出当前的会话持续的身份验证票证。  
  
> [!NOTE]
>  始终使用该身份验证服务与安全套接字层 (SSL，使用 HTTPS) 来保护敏感数据。  
  
 <xref:System.Web.ApplicationServices.AuthenticationService.Login%2A>方法引发<xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>事件和<xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>事件。 创建的事件处理程序<xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>以自定义身份验证，如检查的值值`customCredential`或验证通过非默认成员身份提供商的凭据。 中的值`customCredential`默认成员资格提供程序不能验证。 若要自定义身份验证 cookie，请创建一个事件处理程序<xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>。  
  
> [!NOTE]
>  不要调用<xref:System.Web.ApplicationServices.AuthenticationService.Login%2A>从 Web 服务器执行的代码的方法。 你调用<xref:System.Web.ApplicationServices.AuthenticationService.Login%2A>仅作为 WCF 服务的一部分的方法。 有关详细信息，请参阅[ASP.NET 身份验证](http://msdn.microsoft.com/library/fc10b0ef-4ce4-4a7f-9174-886325221ee1)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userName" /> 或 <paramref name="password" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Logout">
      <MemberSignature Language="C#" Value="public void Logout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Logout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.ApplicationServices.AuthenticationService.Logout" />
      <MemberSignature Language="VB.NET" Value="Public Sub Logout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Logout();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ServiceModel.OperationContract</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除浏览器中的身份验证票证 (Cookie)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.ApplicationServices.AuthenticationService.Logout%2A>方法清除浏览器的 cookie 集合中的身份验证 cookie。 用户必须重新登录以进行身份验证。  
  
 <xref:System.Web.ApplicationServices.AuthenticationService>类不存储有关哪些身份验证票证已被清除的服务器上的信息。  
  
> [!NOTE]
>  不要调用<xref:System.Web.ApplicationServices.AuthenticationService.Logout%2A>从 Web 服务器执行的代码的方法。 你调用<xref:System.Web.ApplicationServices.AuthenticationService.Logout%2A>仅作为 WCF 服务的一部分的方法。 有关详细信息，请参阅[ASP.NET 身份验证](http://msdn.microsoft.com/library/fc10b0ef-4ce4-4a7f-9174-886325221ee1)。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.Security.FormsAuthentication.SignOut" />
      </Docs>
    </Member>
    <Member MemberName="ValidateUser">
      <MemberSignature Language="C#" Value="public bool ValidateUser (string username, string password, string customCredential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValidateUser(string username, string password, string customCredential) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.ApplicationServices.AuthenticationService.ValidateUser(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateUser (username As String, password As String, customCredential As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValidateUser(System::String ^ username, System::String ^ password, System::String ^ customCredential);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ServiceModel.OperationContract</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="customCredential" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要验证的用户名。</param>
        <param name="password">指定的用户的密码。</param>
        <param name="customCredential">要验证的除 <c>userName</c> 和 <c>password</c> 之外的一个或多个值（如果有）。</param>
        <summary>在不颁发身份验证票证的情况下对用户凭据进行身份验证。</summary>
        <returns>
          如果用户凭据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>方法进行身份验证的用户凭据，但未设置的身份验证 cookie。 没有身份验证 cookie，用户将不会记录即使的凭据有效。  
  
 使用<xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>方法时必须检查用户的凭据是否有效而不会收到的身份验证 cookie。 例如，如果身份验证 cookie 已存储在客户端应用程序，但你想要验证的用户的凭据仍然有效，新会话启动时可能会执行此操作。  
  
 <xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>方法引发<xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>事件，但不会引发<xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>事件。  
  
> [!NOTE]
>  不要调用<xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>从 Web 服务器执行的代码的方法。 你调用<xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>仅作为 WCF 服务的一部分的方法。 有关详细信息，请参阅[ASP.NET 身份验证](http://msdn.microsoft.com/library/fc10b0ef-4ce4-4a7f-9174-886325221ee1)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userName" /> 或 <paramref name="password" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>