<Type Name="ISerializable" FullName="System.Runtime.Serialization.ISerializable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="17f55c59f17b4264695f566b7e06f8e8c6188ed4" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48602980" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISerializable" />
  <TypeSignature Language="F#" Value="type ISerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>允许对象控制其自己的序列化和反序列化过程。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可能会进行序列化任何类必须标记有<xref:System.SerializableAttribute>。 如果一个类需要控制其序列化过程，它可以实现<xref:System.Runtime.Serialization.ISerializable>接口。 <xref:System.Runtime.Serialization.Formatter>调用<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>在序列化时，并填充所提供<xref:System.Runtime.Serialization.SerializationInfo>来表示对象所需的所有数据。 <xref:System.Runtime.Serialization.Formatter>创建<xref:System.Runtime.Serialization.SerializationInfo>与图中的对象的类型。 发送代理本身就可以使用所需要的对象<xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>并<xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A>上的方法<xref:System.Runtime.Serialization.SerializationInfo>若要更改所传输的信息。  
  
 在类继承的情况下就可以序列化从一个基类实现，该类派生的类<xref:System.Runtime.Serialization.ISerializable>。 在这种情况下，派生的类应调用基类实现<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>其实现内部<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>。 否则，基类中的数据不会序列化。  
  
 <xref:System.Runtime.Serialization.ISerializable>接口隐含具有签名构造函数的构造函数 (<xref:System.Runtime.Serialization.SerializationInfo>信息，<xref:System.Runtime.Serialization.StreamingContext>上下文)。 在反序列化时，当前的构造函数调用中的数据后才<xref:System.Runtime.Serialization.SerializationInfo>格式化程序反序列化。 一般情况下，如果未密封类，则应保护此构造函数。  
  
 不能保证对象被反序列化的顺序。 例如，如果一种类型引用的类型已反，会发生异常。 如果要创建具有此类依赖项的类型，您可以解决此问题通过实现`IDeserializationCallback`接口和`OnDeserialization`方法。  
  
 序列化体系结构处理扩展的对象类型<xref:System.MarshalByRefObject>扩展的类型与相同<xref:System.Object>。 这些类型可以使用标记<xref:System.SerializableAttribute>并实现<xref:System.Runtime.Serialization.ISerializable>接口作为任何其他对象类型。 它们的对象状态将捕获并保存到流上。  
  
 当通过使用这些类型<xref:System.Runtime.Remoting>，远程处理基础结构提供抢先于典型的序列化，而是序列化的代理的代理项<xref:System.MarshalByRefObject>。 代理项是一个帮助程序，知道如何序列化和反序列化特定类型的对象。 在大多数情况下，用户看不到的代理的类型将为<xref:System.Runtime.Remoting.ObjRef>。  
  
 作为一种常规设计模式，它是不寻常的类将标有 serializable 属性和扩展<xref:System.MarshalByRefObject>。 开发人员应仔细考虑可能的序列化和远程处理方案时合并这两个特性。 这可能是适用的一个示例是使用<xref:System.IO.MemoryStream>。 虽然类的基类<xref:System.IO.MemoryStream>(<xref:System.IO.Stream>) 从<xref:System.MarshalByRefObject>，则可以捕获的状态<xref:System.IO.MemoryStream>并将其还原随意。 它，因此，可能有意义的此流的状态序列化到数据库并在以后某个时刻还原的时间。 但是，当使用远程处理功能，此类型的对象会通过代理转。  
  
 有关扩展的类的序列化的详细信息<xref:System.MarshalByRefObject>，请参阅<xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>。 有关实现详细信息<xref:System.Runtime.Serialization.ISerializable>，请参阅[自定义序列化](~/docs/standard/serialization/custom-serialization.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Runtime.Serialization.ISerializable>接口可定义一个类的自定义序列化行为。  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>实现此接口允许对象在其自己的序列化和反序列化的参与。</para>
    </block>
    <altmember cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />
    <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML 和 SOAP 序列化</related>
    <related type="Article" href="~/docs/standard/serialization/custom-serialization.md">自定义序列化</related>
  </Docs>
  <Members>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="iSerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
        <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中包含的任何对象<xref:System.Runtime.Serialization.SerializationInfo>会自动跟踪和格式化程序序列化。  
  
 调用的代码<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>需要<xref:System.Security.Permissions.SecurityPermission>提供序列化服务。 关联枚举：<xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>。  
  
> [!NOTE]
>  不保证，此方法将进行一次每个对象实例序列化期间调用。 因此，应实现该方法，其行为将是无论它调用的次数相同的方式。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>方法以设置序列化对象的替代值。 该代码使用<xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A>方法的<xref:System.Runtime.Serialization.SerializationInfo>类来序列化对象时存储的备用值。 相反，当的构造函数`Person`类被称为反序列化期间，使用检索的替代值<xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A>方法和重新分配到对象的字段。  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <related type="Article" href="~/docs/standard/serialization/custom-serialization.md">自定义序列化</related>
      </Docs>
    </Member>
  </Members>
</Type>