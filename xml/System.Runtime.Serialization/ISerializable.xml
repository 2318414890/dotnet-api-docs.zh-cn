<Type Name="ISerializable" FullName="System.Runtime.Serialization.ISerializable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="93cba3467c895b67f4a77cea665837530a382f08" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36629184" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISerializable" />
  <TypeSignature Language="F#" Value="type ISerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8ff8e-101">允许对象控制其自己的序列化和反序列化过程。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8ff8e-101">Allows an object to control its own serialization and deserialization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff8e-102">可能会进行序列化的任何类都必须标记为<xref:System.SerializableAttribute>。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-102">Any class that might be serialized must be marked with the <xref:System.SerializableAttribute>.</span></span> <span data-ttu-id="8ff8e-103">如果需要控制其序列化过程的一个类，它可以实现<xref:System.Runtime.Serialization.ISerializable>接口。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-103">If a class needs to control its serialization process, it can implement the <xref:System.Runtime.Serialization.ISerializable> interface.</span></span> <span data-ttu-id="8ff8e-104"><xref:System.Runtime.Serialization.Formatter>调用<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>在序列化时，填充提供<xref:System.Runtime.Serialization.SerializationInfo>表示该对象所需的所有数据。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-104">The <xref:System.Runtime.Serialization.Formatter> calls the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> at serialization time and populates the supplied <xref:System.Runtime.Serialization.SerializationInfo> with all the data required to represent the object.</span></span> <span data-ttu-id="8ff8e-105"><xref:System.Runtime.Serialization.Formatter>创建<xref:System.Runtime.Serialization.SerializationInfo>与图中的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-105">The <xref:System.Runtime.Serialization.Formatter> creates a <xref:System.Runtime.Serialization.SerializationInfo> with the type of the object in the graph.</span></span> <span data-ttu-id="8ff8e-106">需要向代理发送本身就可以使用的对象<xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>和<xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A>方法<xref:System.Runtime.Serialization.SerializationInfo>若要更改所传输的信息。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-106">Objects that need to send proxies for themselves can use the <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> and <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> methods on <xref:System.Runtime.Serialization.SerializationInfo> to change the transmitted information.</span></span>  
  
 <span data-ttu-id="8ff8e-107">对于类继承，则可能要序列化从实现的基类派生的类<xref:System.Runtime.Serialization.ISerializable>。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-107">In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements <xref:System.Runtime.Serialization.ISerializable>.</span></span> <span data-ttu-id="8ff8e-108">在这种情况下，派生的类应调用基类实现的<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>其实现内部<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-108">In this case, the derived class should call the base class implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> inside its implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>.</span></span> <span data-ttu-id="8ff8e-109">否则，从基类数据不会序列化。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-109">Otherwise, the data from the base class will not be serialized.</span></span>  
  
 <span data-ttu-id="8ff8e-110"><xref:System.Runtime.Serialization.ISerializable>接口隐含签名构造函数的构造函数 (<xref:System.Runtime.Serialization.SerializationInfo>信息，<xref:System.Runtime.Serialization.StreamingContext>上下文)。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-110">The <xref:System.Runtime.Serialization.ISerializable> interface implies a constructor with the signature constructor (<xref:System.Runtime.Serialization.SerializationInfo> information, <xref:System.Runtime.Serialization.StreamingContext> context).</span></span> <span data-ttu-id="8ff8e-111">在反序列化时，当前的构造函数调用中的数据后才<xref:System.Runtime.Serialization.SerializationInfo>已反序列化格式化程序。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-111">At deserialization time, the current constructor is called only after the data in the <xref:System.Runtime.Serialization.SerializationInfo> has been deserialized by the formatter.</span></span> <span data-ttu-id="8ff8e-112">一般情况下，如果类未密封，则应保护此构造函数。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-112">In general, this constructor should be protected if the class is not sealed.</span></span>  
  
 <span data-ttu-id="8ff8e-113">无法保证对象被反序列化的顺序。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-113">The order in which objects are deserialized cannot be guaranteed.</span></span> <span data-ttu-id="8ff8e-114">例如，如果一个类型引用的类型，不反序列化尚未，将发生异常。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-114">For example, if one type references a type that has not been deserialized yet, an exception will occur.</span></span> <span data-ttu-id="8ff8e-115">如果要创建具有此类依赖项的类型，你可以解决此问题通过实现`IDeserializationCallback`接口和`OnDeserialization`方法。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-115">If you are creating types that have such dependencies, you can work around the problem by implementing the `IDeserializationCallback` interface and the `OnDeserialization` method.</span></span>  
  
 <span data-ttu-id="8ff8e-116">序列化体系结构处理扩展的对象类型<xref:System.MarshalByRefObject>扩展的类型相同<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-116">The serialization architecture handles object types that extend <xref:System.MarshalByRefObject> the same as types that extend <xref:System.Object>.</span></span> <span data-ttu-id="8ff8e-117">这些类型可标记为<xref:System.SerializableAttribute>和实现<xref:System.Runtime.Serialization.ISerializable>作为任何其他对象类型的接口。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-117">These types can be marked with the <xref:System.SerializableAttribute> and implement the <xref:System.Runtime.Serialization.ISerializable> interface as any other object type.</span></span> <span data-ttu-id="8ff8e-118">将捕获其对象状态，并将其保存到流。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-118">Their object state will be captured and persisted onto the stream.</span></span>  
  
 <span data-ttu-id="8ff8e-119">这些类型使用通过时<xref:System.Runtime.Remoting>，远程处理基础结构提供时会抢占典型的序列化并改为序列化的代理的代理项<xref:System.MarshalByRefObject>。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-119">When these types are being used through <xref:System.Runtime.Remoting>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <xref:System.MarshalByRefObject>.</span></span> <span data-ttu-id="8ff8e-120">代理项是一个帮助器，知道如何序列化和反序列化的特定类型的对象。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-120">A surrogate is a helper that knows how to serialize and deserialize objects of a particular type.</span></span> <span data-ttu-id="8ff8e-121">代理，对在大多数情况下，用户不可见的类型将为<xref:System.Runtime.Remoting.ObjRef>。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-121">The proxy, invisible to the user in most cases, will be of type <xref:System.Runtime.Remoting.ObjRef>.</span></span>  
  
 <span data-ttu-id="8ff8e-122">为常规设计模式中，它将是很少会类可以同时标记为可序列化的属性和扩展<xref:System.MarshalByRefObject>。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-122">As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <xref:System.MarshalByRefObject>.</span></span> <span data-ttu-id="8ff8e-123">开发人员应仔细考虑可能的序列化和远程处理方案组合使用这两个特性。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-123">Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics.</span></span> <span data-ttu-id="8ff8e-124">这可能是适用的一个示例是使用<xref:System.IO.MemoryStream>。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-124">One example where this might be applicable is with a <xref:System.IO.MemoryStream>.</span></span> <span data-ttu-id="8ff8e-125">尽管的基本类<xref:System.IO.MemoryStream>(<xref:System.IO.Stream>) 从<xref:System.MarshalByRefObject>，可以捕获的状态<xref:System.IO.MemoryStream>并将其还原随意。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-125">While the base class of <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) extends from <xref:System.MarshalByRefObject>, it is possible to capture the state of a <xref:System.IO.MemoryStream> and restore it at will.</span></span> <span data-ttu-id="8ff8e-126">它，因此，可能有意义的此流的状态序列化到数据库并将其在后面某个时间点还原时间。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-126">It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time.</span></span> <span data-ttu-id="8ff8e-127">但是，当使用通过远程处理，此类型的对象将设置代理。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-127">However, when used through remoting, an object of this type would be proxied.</span></span>  
  
 <span data-ttu-id="8ff8e-128">有关扩展的类的序列化的详细信息<xref:System.MarshalByRefObject>，请参阅<xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-128">For more information about serialization of classes that extend <xref:System.MarshalByRefObject>, see <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>.</span></span> <span data-ttu-id="8ff8e-129">有关实现详细信息<xref:System.Runtime.Serialization.ISerializable>，请参阅[自定义序列化](~/docs/standard/serialization/custom-serialization.md)。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-129">For more information about implementing <xref:System.Runtime.Serialization.ISerializable>, see [Custom Serialization](~/docs/standard/serialization/custom-serialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff8e-130">下面的代码示例演示如何将<xref:System.Runtime.Serialization.ISerializable>接口可定义自定义序列化行为的类。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-130">The following code example demonstrates the use of the <xref:System.Runtime.Serialization.ISerializable> interface to define custom serialization behavior for a class.</span></span>  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="8ff8e-131">
        <para>实现此接口可允许要参与其自己的序列化和反序列化的对象。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="8ff8e-131">
          <para>Implement this interface to allow an object to take part in its own serialization and deserialization.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />
  </Docs>
  <Members>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="iSerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="8ff8e-132">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ff8e-132">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="8ff8e-133">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ff8e-133">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8ff8e-134">使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ff8e-134">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff8e-135">中包含的任何对象<xref:System.Runtime.Serialization.SerializationInfo>会自动跟踪和序列化格式化程序。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-135">Any objects that are included in the <xref:System.Runtime.Serialization.SerializationInfo> are automatically tracked and serialized by the formatter.</span></span>  
  
 <span data-ttu-id="8ff8e-136">调用的代码<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>需要<xref:System.Security.Permissions.SecurityPermission>提供序列化服务。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-136">Code that calls <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> requires the <xref:System.Security.Permissions.SecurityPermission> for providing serialization services.</span></span> <span data-ttu-id="8ff8e-137">关联枚举：<xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-137">Associated enumeration: <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ff8e-138">不保证，此方法将调用一次每个对象实例在序列化过程。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-138">It is not guaranteed that this method will be called only once per object instance during serialization.</span></span> <span data-ttu-id="8ff8e-139">因此，该方法应实现其行为将无论它调用次数相同的方式。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-139">Therefore, the method should be implemented in such a way that its behavior will be the same regardless of the number of times it is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff8e-140">下面的示例使用<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>方法以设置序列化对象的替代值。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-140">The following example uses the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> method to set alternate values for a serialized object.</span></span> <span data-ttu-id="8ff8e-141">该代码使用<xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A>方法<xref:System.Runtime.Serialization.SerializationInfo>类来存储对象进行序列化时的备用值。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-141">The code uses the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> method of the <xref:System.Runtime.Serialization.SerializationInfo> class to store the alternate values when the object is serialized.</span></span> <span data-ttu-id="8ff8e-142">相反，当的构造函数`Person`类称为反序列化期间，使用检索的替代值<xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A>方法和重新分配到对象的字段。</span><span class="sxs-lookup"><span data-stu-id="8ff8e-142">Conversely, when the constructor of the `Person` class is called during deserialization, the alternatve values are retrieved using the <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> method and reassigned to the object's fields.</span></span>  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="8ff8e-143">调用方没有所要求的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8ff8e-143">The caller does not have the required permission.</span>
          </span>
        </exception>
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
      </Docs>
    </Member>
  </Members>
</Type>