<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DataContractAttribute.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae25fbb5-14a8-44f2-90c2-3c6d6fcaae7f9381053a785b7c23121ec86b709cd483651a437a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9381053a785b7c23121ec86b709cd483651a437a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b899505ed6d42225f2b3c9150bfdc080d0d1f9b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/28/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>Specifies that the type defines or implements a data contract and is serializable by a serializer, such as the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.DataContractSerializer" /&gt;</ph>.</source>
          <target state="translated">指定该类型要定义或实现一个数据协定，并可由序列化程序（如 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.DataContractSerializer" /&gt;</ph>）进行序列化。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>To make their type serializable, type authors must define a data contract for their type.</source>
          <target state="translated">若要使其类型可序列化，类型作者必须为其类型定义数据协定。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>Apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> attribute to types (classes, structures, or enumerations) that are used in serialization and deserialization operations by the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>.</source>
          <target state="translated">将 <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> 属性应用于由 <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> 执行的序列化和反序列化操作中所使用的类型（类、结构或枚举）。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>If you send or receive messages by using the <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> infrastructure, you should also apply the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> to any classes that hold and manipulate data sent in messages.</source>
          <target state="translated">如果您通过使用 <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 基础结构发送或接收消息，还应将 <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> 应用于任何保存和操作这些消息中发送的数据的类。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> data contracts, see <bpt id="p1">[</bpt>Using Data Contracts<ept id="p1">](~/docs/framework/wcf/feature-details/using-data-contracts.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> 数据协定，请参阅<bpt id="p1">[</bpt>使用数据协定<ept id="p1">](~/docs/framework/wcf/feature-details/using-data-contracts.md)</ept>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>You must also apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> to any field, property, or event that holds values you want to serialize.</source>
          <target state="translated">此外，还必须将 <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> 应用于任何保存您要序列化的值的字段、属性或事件。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>By applying the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph>, you explicitly enable the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> to serialize and deserialize the data.</source>
          <target state="translated">通过应用 <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph>，可以显式启用 <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> 来序列化和反序列化数据。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>You can apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> to private fields.</source>
          <target state="translated">可将 <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> 应用于私有字段。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>Be aware that the data returned by the field (even if it is private) is serialized and deserialized, and thus can be viewed or intercepted by a malicious user or process.</source>
          <target state="translated">请注意，字段（即使是私有字段）所返回的数据将被序列化和反序列化，因此恶意用户或进程可以查看或截获这些数据。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> data contracts, see the topics listed in <bpt id="p1">[</bpt>Using Data Contracts<ept id="p1">](~/docs/framework/wcf/feature-details/using-data-contracts.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> 数据协定，请参阅中列出的主题<bpt id="p1">[</bpt>使用数据协定<ept id="p1">](~/docs/framework/wcf/feature-details/using-data-contracts.md)</ept>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>Data Contracts</source>
          <target state="translated">数据协定</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>A <bpt id="p1">*</bpt>data contract<ept id="p1">*</ept> is an abstract description of a set of fields with a name and data type for each field.</source>
          <target state="translated">A<bpt id="p1">*</bpt>数据协定<ept id="p1">*</ept>是一组字段的抽象说明，与每个字段的名称和数据类型。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>The data contract exists outside of any single implementation to allow services on different platforms to interoperate.</source>
          <target state="translated">数据协定存在于任何单个实现的外部，以使不同平台上的服务可以交互操作。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>As long as the data passed between the services conforms to the same contract, all the services can process the data.</source>
          <target state="translated">只要在服务之间传递的数据符合同一协定，这些数据就可以由所有服务进行处理。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>This processing is also known as a <bpt id="p1">*</bpt>loosely coupled system<ept id="p1">*</ept>.</source>
          <target state="translated">此处理过程也称为将<bpt id="p1">*</bpt>松耦合系统<ept id="p1">*</ept>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>A data contract is also similar to an interface in that the contract specifies how data must be delivered so that it can be processed by an application.</source>
          <target state="translated">此外，数据协定还与接口类似，因为它指定了为使数据可由应用程序进行处理而必须使用的传送方式。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>For example, the data contract may call for a data type named "Person" that has two text fields, named "FirstName" and "LastName".</source>
          <target state="translated">例如，数据协定可以定义一个名为“Person”的数据类型，它有两个文本字段，分别名为“FirstName”和“LastName”。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>To create a data contract, apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> to the class and apply the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> to any fields or properties that must be serialized.</source>
          <target state="translated">若要创建数据协定，请将 <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> 应用于类并将 <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> 应用于所有必须序列化的字段或属性。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>When serialized, the data conforms to the data contract that is implicitly built into the type.</source>
          <target state="translated">序列化后，数据将符合隐式内置到类型中的数据协定。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>A data contract differs significantly from an actual interface in its inheritance behavior.</source>
          <target state="translated">在其继承行为方面，数据协定明显不同于实际接口。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>Interfaces are inherited by any derived types.</source>
          <target state="translated">接口由任何派生类型继承。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>When you apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> to a base class, the derived types do not inherit the attribute or the behavior.</source>
          <target state="translated">在将 <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> 应用于基类时，派生类型不会继承属性或行为。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>However, if a derived type has a data contract, the data members of the base class are serialized.</source>
          <target state="translated">但是，如果派生类型具有数据协定，则基类的数据成员将被序列化。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>However, you must apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> to new members in a derived class to make them serializable.</source>
          <target state="translated">不过，若要使派生类中的新成员可序列化，必须向这些成员应用 <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>XML Schema Documents and the SvcUtil Tool</source>
          <target state="translated">XML 架构文档和 SvcUtil 工具</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>If you are exchanging data with other services, you must describe the data contract.</source>
          <target state="translated">如果要与其他服务交换数据，则必须描述数据协定。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>For the current version of the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>, an XML schema can be used to define data contracts.</source>
          <target state="translated">对于 <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> 的当前版本，可使用 XML 架构来定义数据协定。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>(Other forms of metadata/description could be used for the same purpose.) To create an XML schema from your application, use the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> with the <bpt id="p2">**</bpt>/dconly<ept id="p2">**</ept> command line option.</source>
          <target state="translated">（也可以使用其他形式的元数据/说明来实现此目的。）若要从你的应用程序中创建 XML 架构，使用<bpt id="p1">[</bpt>ServiceModel 元数据实用工具 (Svcutil.exe)<ept id="p1">](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>与<bpt id="p2">**</bpt>/dconly<ept id="p2">**</ept>命令行选项。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>When the input to the tool is an assembly, by default, the tool generates a set of XML schemas that define all the data contract types found in that assembly.</source>
          <target state="translated">如果该工具的输入为程序集，则默认情况下该工具会生成一组 XML 架构，这些架构定义了该程序集中包含的所有数据协定类型。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>Conversely, you can also use the Svcutil.exe tool to create Visual Basic or C# class definitions that conform to the requirements of XML schemas that use constructs that can be expressed by data contracts.</source>
          <target state="translated">反过来，还可使用 Svcutil.exe 工具创建符合以下 XML 架构的需求的 Visual Basic 或 C# 类定义：XML 架构使用可由数据协定表示的构造。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>In this case, the <bpt id="p1">**</bpt>/dconly<ept id="p1">**</ept> command line option is not required.</source>
          <target state="translated">在这种情况下， <bpt id="p1">**</bpt>/dconly<ept id="p1">**</ept>则不需要命令行选项。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>If the input to the Svcutil.exe tool is an XML schema, by default, the tool creates a set of classes.</source>
          <target state="translated">如果 Svcutil.exe 工具的输入为 XML 架构，则默认情况下该工具会创建一组类。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>If you examine those classes, you find that the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> has been applied.</source>
          <target state="translated">如果对这些类进行检查，您会发现 <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> 已经应用。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>You can use those classes to create a new application to process data that must be exchanged with other services.</source>
          <target state="translated">可以使用这些类创建一个新的应用程序，用来处理必须与其他服务交换的数据。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>You can also run the tool against an endpoint that returns a Web Services Description Language (WSDL) document to automatically generate the code and configuration to create an <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> client.</source>
          <target state="translated">此外，您还可以对返回 Web Services 描述语言 (WSDL) 文档的终结点运行该工具，以自动生成用于创建 <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 客户端的代码和配置。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>The generated code includes types that are marked with the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph>.</source>
          <target state="translated">所生成的代码包含带有 <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> 标记的类型。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>Reusing Existing Types</source>
          <target state="translated">重用现有类型</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>A data contract has two basic requirements: a stable name and a list of members.</source>
          <target state="translated">数据协定具有两个基本要求：一个稳定的名称和一个成员列表。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>The stable name consists of the namespace uniform resource identifier (URI) and the local name of the contract.</source>
          <target state="translated">该稳定名称由该协定的命名空间统一资源标识符 (URI) 和本地名称组成。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>By default, when you apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> to a class, it uses the class name as the local name and the class's namespace (prefixed with "<ph id="ph2">http://schemas.datacontract.org/2004/07/</ph>") as the namespace URI.</source>
          <target state="translated">默认情况下，当你将应用<ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph>它可以为类，来使用作为本地名称和类的命名空间的类名称 (带有前缀"<ph id="ph2">http://schemas.datacontract.org/2004/07/</ph>") 作为命名空间 URI。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>You can override the defaults by setting the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Name%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A&gt;</ph> properties.</source>
          <target state="translated">可通过设置 <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Name%2A&gt;</ph> 和 <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A&gt;</ph> 属性来重写这些默认值。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>You can also change the namespace by applying the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ContractNamespaceAttribute&gt;</ph> to the namespace.</source>
          <target state="translated">此外，还可通过将 <ph id="ph1">&lt;xref:System.Runtime.Serialization.ContractNamespaceAttribute&gt;</ph> 应用于命名空间来更改命名空间。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>Use this capability when you have an existing type that processes data exactly as you require but has a different namespace and class name from the data contract.</source>
          <target state="translated">当现有类型能够完全根据您的需要处理数据，但其命名空间和类名与数据协定不同时，请使用此功能。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>By overriding the default values, you can reuse your existing type and have the serialized data conform to the data contract.</source>
          <target state="translated">通过重写默认值，可以重用现有类型并使序列化数据符合数据协定。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>In any code, you can use the word <ph id="ph1">`DataContract`</ph> instead of the longer <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph>.</source>
          <target state="translated">在任意代码中，都可以用 <ph id="ph1">`DataContract`</ph> 一词来代替较长的 <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>Versioning</source>
          <target state="translated">版本管理</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>A data contract can also accommodate later versions of itself.</source>
          <target state="translated">数据协定还可以与其自身的后续版本兼容。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>That is, when a later version of the contract includes extra data, that data is stored and returned to a sender untouched.</source>
          <target state="translated">也就是说，当协定的后续版本包含额外数据时，已存储并返回给发送方的数据将保持不变。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>To do this, implement the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IExtensibleDataObject&gt;</ph> interface.</source>
          <target state="translated">为此，应实现 <ph id="ph1">&lt;xref:System.Runtime.Serialization.IExtensibleDataObject&gt;</ph> 接口。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> versioning, see <bpt id="p1">[</bpt>Data Contract Versioning<ept id="p1">](~/docs/framework/wcf/feature-details/data-contract-versioning.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> 版本控制，请参阅<bpt id="p1">[</bpt>数据协定版本管理<ept id="p1">](~/docs/framework/wcf/feature-details/data-contract-versioning.md)</ept>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>The following example serializes and deserializes a class named <ph id="ph1">`Person`</ph> to which the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> has been applied.</source>
          <target state="translated">下面的示例序列化和反序列化了一个名为 <ph id="ph1">`Person`</ph> 的类，该类已应用 <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.DataContractAttribute">
          <source>Note that the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Name%2A&gt;</ph> properties have been set to values that override the default settings.</source>
          <target state="translated">请注意，<ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A&gt;</ph> 和 <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Name%2A&gt;</ph> 属性已设置为对默认设置进行重写的值。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.DataContractAttribute.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.DataContractAttribute" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.DataContractAttribute" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly">
          <source>Gets whether <ph id="ph1">&lt;see cref="P:System.Runtime.Serialization.DataContractAttribute.Name" /&gt;</ph> has been explicitly set.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="P:System.Runtime.Serialization.DataContractAttribute.Name" /&gt;</ph> 是否已显式设置。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the name has been explicitly set; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">返回<ph id="ph1">&lt;see langword="true" /&gt;</ph>如果名称已显式设置; 否则为<ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly">
          <source>Gets whether <ph id="ph1">&lt;see cref="P:System.Runtime.Serialization.DataContractAttribute.Namespace" /&gt;</ph> has been explicitly set.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="P:System.Runtime.Serialization.DataContractAttribute.Namespace" /&gt;</ph> 是否已显式设置。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the namespace has been explicitly set; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">返回<ph id="ph1">&lt;see langword="true" /&gt;</ph>如果命名空间已显式设置; 否则为<ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Runtime.Serialization.DataContractAttribute.IsReference">
          <source>Gets or sets a value that indicates whether to preserve object reference data.</source>
          <target state="translated">获取或设置一个值，该值指示是否保留对象引用数据。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.IsReference">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to keep object reference data using standard XML; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果使用标准 XML 保留对象引用数据，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.IsReference">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.IsReference">
          <source>Use the <ph id="ph1">`IsReference`</ph> property to instruct the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> to insert XML constructs that preserve object reference information.</source>
          <target state="translated">使用 <ph id="ph1">`IsReference`</ph> 属性来指示 <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> 插入保留对象引用信息的 XML 构造。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly">
          <source>Gets whether <ph id="ph1">&lt;see cref="P:System.Runtime.Serialization.DataContractAttribute.IsReference" /&gt;</ph> has been explicitly set.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="P:System.Runtime.Serialization.DataContractAttribute.IsReference" /&gt;</ph> 是否已显式设置。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the reference has been explicitly set; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 如果已显式设置引用;否则为<ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.Runtime.Serialization.DataContractAttribute.Name">
          <source>Gets or sets the name of the data contract for the type.</source>
          <target state="translated">获取或设置类型的数据协定的名称。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Name">
          <source>The local name of a data contract.</source>
          <target state="translated">数据协定的本地名称。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Name">
          <source>The default is the name of the class that the attribute is applied to.</source>
          <target state="translated">默认值是应用了该属性的类的名称。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Name">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Name%2A&gt;</ph> property is used to give a name to a data contract, which is the name of the type in XML schema.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Name%2A&gt;</ph> 属性用于为数据协定指定名称，该名称也将成为 XML 架构中类型的名称。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Name">
          <source>For more information, see <bpt id="p1">[</bpt>Data Contract Names<ept id="p1">](~/docs/framework/wcf/feature-details/data-contract-names.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>数据协定名称<ept id="p1">](~/docs/framework/wcf/feature-details/data-contract-names.md)</ept>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Name">
          <source>By default, the name of a data contract is the name of the type that the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> is applied to.</source>
          <target state="translated">默认情况下，数据协定的名称是应用了 <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> 的类型的名称。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Name">
          <source>However, there may be reasons to change this default name.</source>
          <target state="translated">不过，可能出于某些原因更改此默认名称。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Name">
          <source>One reason is to allow an existing type to process data that must conform to an existing data contract.</source>
          <target state="translated">其中一个原因就是使现有类型可以处理必须符合现有数据协定的数据。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Name">
          <source>For example, there exists a type named <ph id="ph1">`Person`</ph> but the data contract, embodied in an XML schema, requires that the name be <ph id="ph2">`Customer`</ph>.</source>
          <target state="translated">例如，有一个名为 <ph id="ph1">`Person`</ph> 的类型，但包含在某个 XML 架构中的数据协定要求该名称为 <ph id="ph2">`Customer`</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Name">
          <source>The contract can be satisfied by setting the property value to <ph id="ph1">`Customer`</ph>.</source>
          <target state="translated">可通过将该属性值设置为 <ph id="ph1">`Customer`</ph> 来满足该协定。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Name">
          <source>A second reason is to allow the generation of names that are invalid as type names.</source>
          <target state="translated">另一个原因是允许生成不能作为类型名的名称。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Name">
          <source>For example, if a data contract demands a name that is not allowable as a type name, set the property value to that disallowed name.</source>
          <target state="translated">例如，如果数据协定需要一个不允许作为类型名的名称，则将该属性值设置为这一不允许使用的名称。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Name">
          <source>For instance, the string "$value" is disallowed as a type name but is allowed as a <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Name%2A&gt;</ph> property value.</source>
          <target state="translated">例如，不允许使用字符串“$value”作为类型名，但允许使用它作为 <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Name%2A&gt;</ph> 属性值。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.Runtime.Serialization.DataContractAttribute.Namespace">
          <source>Gets or sets the namespace for the data contract for the type.</source>
          <target state="translated">获取或设置类型的数据协定的命名空间。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Namespace">
          <source>The namespace of the contract.</source>
          <target state="translated">协定的命名空间。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Namespace">
          <source>Use this property to specify a particular namespace if your type must return data that complies with a specific data contract.</source>
          <target state="translated">如果类型返回的数据必须符合特定数据协定，请使用此属性来指定特定的命名空间。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Namespace">
          <source>For the data to be successfully transmitted, the name of the data in a data contract must be the same in both the client and the server.</source>
          <target state="translated">为了成功传送数据，数据协定中的数据名必须与客户端和服务器中的数据名保持一致。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Namespace">
          <source>Visual Basic projects, by default, add a prefix to the namespace defined in each file (called the "root namespace," named after the project).</source>
          <target state="translated">Visual Basic 项目中，默认情况下，将前缀添加到在每个文件 （称为"根命名空间，"命名项目） 中定义的命名空间。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Namespace">
          <source>Adding this prefix causes the client and server namespaces to be different for the same type.</source>
          <target state="translated">添加此前缀会造成相同类型的客户端命名空间和服务器命名空间不相同。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.DataContractAttribute.Namespace">
          <source>The solution is to set the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A&gt;</ph> property to "", or to explicitly set the data contract namespace in this property.</source>
          <target state="translated">解决方法是设置<ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A&gt;</ph>属性设置为""，或在此属性中显式设置数据协定命名空间。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>