<Type Name="ISynchronizedInputProvider" FullName="System.Windows.Automation.Provider.ISynchronizedInputProvider">
  <TypeSignature Language="C#" Value="public interface ISynchronizedInputProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizedInputProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizedInputProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizedInputProvider" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("29db1a06-02ce-4cf7-9b42-565d4fab20ee")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2de35-101">公开一些方法，以方便 UI 自动化客户端访问支持同步输入的控件。</span><span class="sxs-lookup"><span data-stu-id="2de35-101">Exposes methods to facilitate UI Automation client access to controls that support synchronized input.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2de35-102">实现此接口上的 UI 自动化提供程序必须支持<xref:System.Windows.Automation.SynchronizedInputPattern>控件模式。</span><span class="sxs-lookup"><span data-stu-id="2de35-102">Implement this interface on a UI Automation provider that must support the <xref:System.Windows.Automation.SynchronizedInputPattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ISynchronizedInputProvider.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Cancel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2de35-103">停止对输入的侦听。</span><span class="sxs-lookup"><span data-stu-id="2de35-103">Stops listening for input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2de35-104">如果提供程序当前正在侦听输入，它将恢复到正常操作。</span><span class="sxs-lookup"><span data-stu-id="2de35-104">If the provider is currently listening for input, it reverts to normal operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="public void StartListening (System.Windows.Automation.SynchronizedInputType inputType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartListening(valuetype System.Windows.Automation.SynchronizedInputType inputType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ISynchronizedInputProvider.StartListening(System.Windows.Automation.SynchronizedInputType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartListening (inputType As SynchronizedInputType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartListening(System::Windows::Automation::SynchronizedInputType inputType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputType" Type="System.Windows.Automation.SynchronizedInputType" />
      </Parameters>
      <Docs>
        <param name="inputType"><span data-ttu-id="2de35-105">要侦听的输入的类型。</span><span class="sxs-lookup"><span data-stu-id="2de35-105">The type of input to listen for.</span></span></param>
        <summary><span data-ttu-id="2de35-106">指定提供程序开始对指定类型的输入进行侦听。</span><span class="sxs-lookup"><span data-stu-id="2de35-106">Designates that the provider start listening for input of the specified type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2de35-107">当 WPF 找到匹配的输入时，它会检查传入的事件的路由。</span><span class="sxs-lookup"><span data-stu-id="2de35-107">When WPF finds matching input, it checks the route of the incoming event.</span></span> <span data-ttu-id="2de35-108">如果正在侦听的输入的自动化元素不在路由，则丢弃输入和<xref:System.Windows.Automation.SynchronizedInputPattern.InputDiscardedEvent>引发事件。</span><span class="sxs-lookup"><span data-stu-id="2de35-108">If the automation element that is listening for the input is not in the route, the input is discarded and the <xref:System.Windows.Automation.SynchronizedInputPattern.InputDiscardedEvent> event is raised.</span></span> <span data-ttu-id="2de35-109">如果在输入被接收通过侦听该类型的自动化元素<xref:System.Windows.Automation.SynchronizedInputPattern.InputReachedTargetEvent>事件是引发; 否则为<xref:System.Windows.Automation.SynchronizedInputPattern.InputReachedOtherElementEvent>引发事件。</span><span class="sxs-lookup"><span data-stu-id="2de35-109">If the input is received by the automation element listening for that type, the <xref:System.Windows.Automation.SynchronizedInputPattern.InputReachedTargetEvent> event is raised; otherwise, the <xref:System.Windows.Automation.SynchronizedInputPattern.InputReachedOtherElementEvent> event is raised.</span></span>  
  
 <span data-ttu-id="2de35-110">接收输入后, 提供程序将停止侦听，并将继续正常进行。</span><span class="sxs-lookup"><span data-stu-id="2de35-110">After receiving the input, the provider stops listening and continues normally.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>