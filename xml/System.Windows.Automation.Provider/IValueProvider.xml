<Type Name="IValueProvider" FullName="System.Windows.Automation.Provider.IValueProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0d891c1f038e6eee95b8b85ed17d6a77c0253d83" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39881535" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IValueProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IValueProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IValueProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IValueProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IValueProvider" />
  <TypeSignature Language="F#" Value="type IValueProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.Guid("c7935180-6fb3-4201-b174-7df73adbf64a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="fa93b-101">公开方法和属性，以支持对内部值未跨越范围并且可以表示为字符串的控件进行 UI 自动化客户端访问。</span>
      <span class="sxs-lookup">
        <span data-stu-id="fa93b-101">Exposes methods and properties to support UI Automation client access to controls having an intrinsic value that does not span a range and that can be represented as a string.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa93b-102">控件的值可能会或可能不可编辑，具体取决于控件及其设置。</span><span class="sxs-lookup"><span data-stu-id="fa93b-102">The value of the control may or may not be editable depending on the control and its settings.</span></span>  
  
 <span data-ttu-id="fa93b-103">必须支持的 UI 自动化提供程序上实现<xref:System.Windows.Automation.ValuePattern>控件模式。</span><span class="sxs-lookup"><span data-stu-id="fa93b-103">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.ValuePattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.ValuePattern" />
  </Docs>
  <Members>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Automation.Provider.IValueProvider.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa93b-104">获取一个值，该值指定控件的值是否是只读的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa93b-104">Gets a value that specifies whether the value of a control is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa93b-105">如果值为只读的，则为 <see langword="true" />；如果可以修改它，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa93b-105">
              <see langword="true" /> if the value is read-only; <see langword="false" /> if it can be modified.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa93b-106">在允许调用 <xref:System.Windows.Automation.AutomationElement.IsEnabledProperty> 之前，控件应将其 `true` 设置为 <xref:System.Windows.Automation.ValuePattern.IsReadOnlyProperty> ，并将其 `false` 设置为 <xref:System.Windows.Automation.Provider.IValueProvider.SetValue%2A>。</span><span class="sxs-lookup"><span data-stu-id="fa93b-106">A control should have its <xref:System.Windows.Automation.AutomationElement.IsEnabledProperty> set to `true` and its <xref:System.Windows.Automation.ValuePattern.IsReadOnlyProperty> set to `false` before allowing a call to <xref:System.Windows.Automation.Provider.IValueProvider.SetValue%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa93b-107">下面的示例显示了此方法允许将值更改的控件的实现。</span><span class="sxs-lookup"><span data-stu-id="fa93b-107">The following example shows an implementation of this method for a control that allows its value to be changed.</span></span>  
  
 [!code-csharp[UIAIValueProvider_snip#IsReadOnly](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIValueProvider_snip/CSharp/ValueFragment.cs#isreadonly)]
 [!code-vb[UIAIValueProvider_snip#IsReadOnly](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIValueProvider_snip/visualbasic/valuefragment.vb#isreadonly)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IValueProvider.SetValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : string -&gt; unit" Usage="iValueProvider.SetValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fa93b-108">要设置的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa93b-108">The value to set.</span>
          </span>
          <span data-ttu-id="fa93b-109">提供程序负责将该值转换为适当的数据类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa93b-109">The provider is responsible for converting the value to the appropriate data type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa93b-110">设置控件的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa93b-110">Sets the value of a control.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa93b-111">单行编辑控件支持通过实现 <xref:System.Windows.Automation.Provider.IValueProvider>编程访问其内容。</span><span class="sxs-lookup"><span data-stu-id="fa93b-111">Single-line edit controls support programmatic access to their contents by implementing <xref:System.Windows.Automation.Provider.IValueProvider>.</span></span> <span data-ttu-id="fa93b-112">但是，多行编辑控件不实现 <xref:System.Windows.Automation.Provider.IValueProvider>；相反，它们通过实现 <xref:System.Windows.Automation.Provider.ITextProvider>来提供对其内容的访问。</span><span class="sxs-lookup"><span data-stu-id="fa93b-112">However, multi-line edit controls do not implement <xref:System.Windows.Automation.Provider.IValueProvider>; instead they provide access to their content by implementing <xref:System.Windows.Automation.Provider.ITextProvider>.</span></span>  
  
 <span data-ttu-id="fa93b-113">控件，如<xref:System.Windows.Automation.ControlType.ListItem>并<xref:System.Windows.Automation.ControlType.TreeItem>必须实现<xref:System.Windows.Automation.Provider.IValueProvider>如果任一项的值是可编辑，而不考虑当前编辑模式的控件。</span><span class="sxs-lookup"><span data-stu-id="fa93b-113">Controls such as <xref:System.Windows.Automation.ControlType.ListItem> and <xref:System.Windows.Automation.ControlType.TreeItem> must implement <xref:System.Windows.Automation.Provider.IValueProvider> if the value of any of the items is editable, regardless of the current edit mode of the control.</span></span> <span data-ttu-id="fa93b-114">父控件还必须实现<xref:System.Windows.Automation.Provider.IValueProvider>如果子项是可编辑。</span><span class="sxs-lookup"><span data-stu-id="fa93b-114">The parent control must also implement <xref:System.Windows.Automation.Provider.IValueProvider> if the child items are editable.</span></span>  
  
 <span data-ttu-id="fa93b-115">![可编辑列表项。](~/add/media/uia-valuepattern-editable-listitem.PNG "可编辑列表项。")</span><span class="sxs-lookup"><span data-stu-id="fa93b-115">![Editable list item.](~/add/media/uia-valuepattern-editable-listitem.PNG "Editable list item.")</span></span>  
<span data-ttu-id="fa93b-116">可编辑列表项的示例</span><span class="sxs-lookup"><span data-stu-id="fa93b-116">Example of an Editable List Item</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa93b-117">下面的代码示例演示了允许将值设置为有限长度的字符串的自定义控件。</span><span class="sxs-lookup"><span data-stu-id="fa93b-117">The following example code demonstrates a custom control that allows its value to be set to a string of limited length.</span></span>  
  
 [!code-csharp[UIAIValueProvider_snip#SetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIValueProvider_snip/CSharp/ValueFragment.cs#setvalue)]
 [!code-vb[UIAIValueProvider_snip#SetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIValueProvider_snip/visualbasic/valuefragment.vb#setvalue)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fa93b-118">如果向控件传递了格式不正确的区域设置特定信息（如格式不正确的日期）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa93b-118">If locale-specific information is passed to a control in an incorrect format such as an incorrectly formatted date.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fa93b-119">如果无法将新值从字符串转换为控件可识别的格式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa93b-119">If a new value cannot be converted from a string to a format the control recognizes.</span>
          </span>
        </exception>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException">
          <span data-ttu-id="fa93b-120">当尝试操作未启用的控件时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa93b-120">When an attempt is made to manipulate a control that is not enabled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IValueProvider.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Windows.Automation.Provider.IValueProvider.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa93b-121">获取控件的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa93b-121">Gets the value of the control.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa93b-122">以字符串形式表示的控件值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa93b-122">The value of the control as a string.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa93b-123">单行编辑控件通过实现来支持以编程方式访问其内容<xref:System.Windows.Automation.Provider.IValueProvider>(除了<xref:System.Windows.Automation.Provider.ITextProvider>)。</span><span class="sxs-lookup"><span data-stu-id="fa93b-123">Single-line edit controls support programmatic access to their contents by implementing <xref:System.Windows.Automation.Provider.IValueProvider> (in addition to <xref:System.Windows.Automation.Provider.ITextProvider>).</span></span> <span data-ttu-id="fa93b-124">但是，多行编辑控件不实现<xref:System.Windows.Automation.Provider.IValueProvider>。</span><span class="sxs-lookup"><span data-stu-id="fa93b-124">However, multi-line edit controls do not implement <xref:System.Windows.Automation.Provider.IValueProvider>.</span></span>  
  
 <span data-ttu-id="fa93b-125">若要检索多行编辑控件的文本内容，控件必须实现<xref:System.Windows.Automation.Provider.ITextProvider>。</span><span class="sxs-lookup"><span data-stu-id="fa93b-125">To retrieve the textual contents of multi-line edit controls, the controls must implement <xref:System.Windows.Automation.Provider.ITextProvider>.</span></span> <span data-ttu-id="fa93b-126">但是， <xref:System.Windows.Automation.Provider.ITextProvider> 不支持设置控件的值。</span><span class="sxs-lookup"><span data-stu-id="fa93b-126">However, <xref:System.Windows.Automation.Provider.ITextProvider> does not support setting the value of a control.</span></span>  
  
 <span data-ttu-id="fa93b-127"><xref:System.Windows.Automation.Provider.IValueProvider> 不支持检索格式设置信息或子字符串值。</span><span class="sxs-lookup"><span data-stu-id="fa93b-127"><xref:System.Windows.Automation.Provider.IValueProvider> does not support the retrieval of formatting information or substring values.</span></span> <span data-ttu-id="fa93b-128">在这些情况下，请实现 <xref:System.Windows.Automation.Provider.ITextProvider> 。</span><span class="sxs-lookup"><span data-stu-id="fa93b-128">Implement <xref:System.Windows.Automation.Provider.ITextProvider> in these scenarios.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa93b-129">下面的示例显示了此方法允许要检索其值的控件的实现。</span><span class="sxs-lookup"><span data-stu-id="fa93b-129">The following example shows an implementation of this method for a control that allows its value to be retrieved.</span></span>  
  
 [!code-csharp[UIAIValueProvider_snip#Value](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIValueProvider_snip/CSharp/ValueFragment.cs#value)]
 [!code-vb[UIAIValueProvider_snip#Value](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIValueProvider_snip/visualbasic/valuefragment.vb#value)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>