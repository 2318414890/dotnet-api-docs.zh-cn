<Type Name="AutomationInteropProvider" FullName="System.Windows.Automation.Provider.AutomationInteropProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7b47a0bffba0474247c9ee317576129a7065bceb" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51907020" /></Metadata><TypeSignature Language="C#" Value="public static class AutomationInteropProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AutomationInteropProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.AutomationInteropProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class AutomationInteropProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutomationInteropProvider abstract sealed" />
  <TypeSignature Language="F#" Value="type AutomationInteropProvider = class" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 UI 自动化提供程序和 UI 自动化客户端应用程序之间的通信提供支持。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AppendRuntimeId">
      <MemberSignature Language="C#" Value="public const int AppendRuntimeId = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 AppendRuntimeId = (3)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId" />
      <MemberSignature Language="VB.NET" Value="Public Const AppendRuntimeId As Integer  = 3" />
      <MemberSignature Language="C++ CLI" Value="public: int AppendRuntimeId = 3;" />
      <MemberSignature Language="F#" Value="val mutable AppendRuntimeId : int" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>包含一个值，当作为由 UI 自动化提供程序传递到 <see cref="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId" /> 的数组的第一个元素返回时，指示该 ID 是不完整的，且应该追加到基本提供程序所提供的 ID。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现中通常使用此字段<xref:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId%2A>片段中没有直接承载在窗口中的元素。  
  
   
  
## Examples  
 下面的示例是实现<xref:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId%2A?displayProperty=nameWithType>列表项。  
  
 [!code-csharp[UIAFragmentProvider_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#101)]
 [!code-vb[UIAFragmentProvider_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientsAreListening">
      <MemberSignature Language="C#" Value="public static bool ClientsAreListening { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool ClientsAreListening" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.AutomationInteropProvider.ClientsAreListening" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ClientsAreListening As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool ClientsAreListening { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientsAreListening : bool" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.ClientsAreListening" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指定是否有任何 UI 自动化客户端应用程序订阅 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 事件。</summary>
        <value>如果客户端订阅事件，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIAFragmentProvider_snip#122](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListFragment.cs#122)]
 [!code-vb[UIAFragmentProvider_snip#122](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListFragment.vb#122)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/9fe2f01b-f7d8-49a8-a185-d4472b9976c0">从 UI 自动化提供程序中引发事件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/69eebd8b-39ed-40e7-93cc-4457c4caf746">UI 自动化事件概述</related>
      </Docs>
    </Member>
    <Member MemberName="HostProviderFromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Automation.Provider.IRawElementProviderSimple HostProviderFromHandle (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Automation.Provider.IRawElementProviderSimple HostProviderFromHandle(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.AutomationInteropProvider.HostProviderFromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HostProviderFromHandle (hwnd As IntPtr) As IRawElementProviderSimple" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Automation::Provider::IRawElementProviderSimple ^ HostProviderFromHandle(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member HostProviderFromHandle : nativeint -&gt; System.Windows.Automation.Provider.IRawElementProviderSimple" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.HostProviderFromHandle hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">窗口的句柄。</param>
        <summary>返回表示指定的窗口的 UI 自动化提供程序。</summary>
        <returns>指定窗口的原始元素提供程序。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回的接口只能传递回[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]。 尝试在接口上调用方法将引发异常。  
  
   
  
## Examples  
 [!code-csharp[UIAFragmentProvider_snip#121](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListFragment.cs#121)]
 [!code-vb[UIAFragmentProvider_snip#121](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListFragment.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateLimit">
      <MemberSignature Language="C#" Value="public const int InvalidateLimit = 20;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 InvalidateLimit = (20)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.Provider.AutomationInteropProvider.InvalidateLimit" />
      <MemberSignature Language="VB.NET" Value="Public Const InvalidateLimit As Integer  = 20" />
      <MemberSignature Language="C++ CLI" Value="public: int InvalidateLimit = 20;" />
      <MemberSignature Language="F#" Value="val mutable InvalidateLimit : int" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.InvalidateLimit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>20</MemberValue>
      <Docs>
        <summary>指定在进行批处理之前要发送的最大事件数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此值确定是否通知提供的各个事件如<xref:System.Windows.Automation.StructureChangeType.ChildAdded>或大容量事件如<xref:System.Windows.Automation.StructureChangeType.ChildrenBulkAdded>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemsInvalidateLimit">
      <MemberSignature Language="C#" Value="public const int ItemsInvalidateLimit = 5;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 ItemsInvalidateLimit = (5)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.Provider.AutomationInteropProvider.ItemsInvalidateLimit" />
      <MemberSignature Language="VB.NET" Value="Public Const ItemsInvalidateLimit As Integer  = 5" />
      <MemberSignature Language="C++ CLI" Value="public: int ItemsInvalidateLimit = 5;" />
      <MemberSignature Language="F#" Value="val mutable ItemsInvalidateLimit : int" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.ItemsInvalidateLimit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>在批处理容器中的项之前要发送的事件的最大数目。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseAutomationEvent">
      <MemberSignature Language="C#" Value="public static void RaiseAutomationEvent (System.Windows.Automation.AutomationEvent eventId, System.Windows.Automation.Provider.IRawElementProviderSimple provider, System.Windows.Automation.AutomationEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RaiseAutomationEvent(class System.Windows.Automation.AutomationEvent eventId, class System.Windows.Automation.Provider.IRawElementProviderSimple provider, class System.Windows.Automation.AutomationEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.AutomationInteropProvider.RaiseAutomationEvent(System.Windows.Automation.AutomationEvent,System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.AutomationEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RaiseAutomationEvent (eventId As AutomationEvent, provider As IRawElementProviderSimple, e As AutomationEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RaiseAutomationEvent(System::Windows::Automation::AutomationEvent ^ eventId, System::Windows::Automation::Provider::IRawElementProviderSimple ^ provider, System::Windows::Automation::AutomationEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member RaiseAutomationEvent : System.Windows.Automation.AutomationEvent * System.Windows.Automation.Provider.IRawElementProviderSimple * System.Windows.Automation.AutomationEventArgs -&gt; unit" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.RaiseAutomationEvent (eventId, provider, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventId" Type="System.Windows.Automation.AutomationEvent" />
        <Parameter Name="provider" Type="System.Windows.Automation.Provider.IRawElementProviderSimple" />
        <Parameter Name="e" Type="System.Windows.Automation.AutomationEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventId">事件标识符。</param>
        <param name="provider">与该事件关联的元素。</param>
        <param name="e">有关事件的信息。</param>
        <summary>引发模式事件或自定义事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不应只需通过模式实现引发模式事件。 例如，<xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent>时调用该控件，应引发通过<xref:System.Windows.Automation.InvokePattern.Invoke%2A>或通过鼠标或键盘输入。 这样一来，客户端可以通知系统事件。  
  
   
  
## Examples  
 [!code-csharp[UIAFragmentProvider_snip#122](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListFragment.cs#122)]
 [!code-vb[UIAFragmentProvider_snip#122](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListFragment.vb#122)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/9fe2f01b-f7d8-49a8-a185-d4472b9976c0">从 UI 自动化提供程序中引发事件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/69eebd8b-39ed-40e7-93cc-4457c4caf746">UI 自动化事件概述</related>
      </Docs>
    </Member>
    <Member MemberName="RaiseAutomationPropertyChangedEvent">
      <MemberSignature Language="C#" Value="public static void RaiseAutomationPropertyChangedEvent (System.Windows.Automation.Provider.IRawElementProviderSimple element, System.Windows.Automation.AutomationPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RaiseAutomationPropertyChangedEvent(class System.Windows.Automation.Provider.IRawElementProviderSimple element, class System.Windows.Automation.AutomationPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.AutomationInteropProvider.RaiseAutomationPropertyChangedEvent(System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.AutomationPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RaiseAutomationPropertyChangedEvent (element As IRawElementProviderSimple, e As AutomationPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RaiseAutomationPropertyChangedEvent(System::Windows::Automation::Provider::IRawElementProviderSimple ^ element, System::Windows::Automation::AutomationPropertyChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member RaiseAutomationPropertyChangedEvent : System.Windows.Automation.Provider.IRawElementProviderSimple * System.Windows.Automation.AutomationPropertyChangedEventArgs -&gt; unit" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.RaiseAutomationPropertyChangedEvent (element, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.Automation.Provider.IRawElementProviderSimple" />
        <Parameter Name="e" Type="System.Windows.Automation.AutomationPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="element">与该事件关联的元素。</param>
        <param name="e">有关事件的信息。</param>
        <summary>[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 属性更改时引发事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIAFragmentProvider_snip#123](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListFragment.cs#123)]
 [!code-vb[UIAFragmentProvider_snip#123](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListFragment.vb#123)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/9fe2f01b-f7d8-49a8-a185-d4472b9976c0">从 UI 自动化提供程序中引发事件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/69eebd8b-39ed-40e7-93cc-4457c4caf746">UI 自动化事件概述</related>
      </Docs>
    </Member>
    <Member MemberName="RaiseStructureChangedEvent">
      <MemberSignature Language="C#" Value="public static void RaiseStructureChangedEvent (System.Windows.Automation.Provider.IRawElementProviderSimple provider, System.Windows.Automation.StructureChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RaiseStructureChangedEvent(class System.Windows.Automation.Provider.IRawElementProviderSimple provider, class System.Windows.Automation.StructureChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.AutomationInteropProvider.RaiseStructureChangedEvent(System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.StructureChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RaiseStructureChangedEvent (provider As IRawElementProviderSimple, e As StructureChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RaiseStructureChangedEvent(System::Windows::Automation::Provider::IRawElementProviderSimple ^ provider, System::Windows::Automation::StructureChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member RaiseStructureChangedEvent : System.Windows.Automation.Provider.IRawElementProviderSimple * System.Windows.Automation.StructureChangedEventArgs -&gt; unit" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.RaiseStructureChangedEvent (provider, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Windows.Automation.Provider.IRawElementProviderSimple" />
        <Parameter Name="e" Type="System.Windows.Automation.StructureChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="provider">与该事件关联的元素。</param>
        <param name="e">有关事件的信息。</param>
        <summary>[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 树更改时引发事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 更改的树状结构中的一个示例是子元素添加到或从列表框中，删除或要展开或折叠树视图中。  
  
 删除子元素后，运行时标识符的元素或其容器的传递给<xref:System.Windows.Automation.StructureChangedEventArgs>构造函数。 当前版本的中[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]，但是，没有提供程序的实例没有简便的方法来发现其运行时标识符。 <xref:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId%2A>方法通常返回一个数组，包含<xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId>，指示一个幻数[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]系统创建控件的每个实例的唯一标识符。 提供的原始值<xref:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId%2A>不应在事件中，因为它是向客户端无意义，并且不能用于标识特定的实例。  
  
 鉴于此限制的类型的事件<xref:System.Windows.Automation.StructureChangeType.ChildAdded>和<xref:System.Windows.Automation.StructureChangeType.ChildRemoved>不是非常有用。 或者，始终使用<xref:System.Windows.Automation.StructureChangeType.ChildrenBulkAdded>和<xref:System.Windows.Automation.StructureChangeType.ChildrenBulkRemoved>，传递 0 作为运行时标识符。 不能使用`null`，因为这将引发异常。 客户端将会通知你已在容器中进行了更改 (由标识`sender`参数传递给<xref:System.Windows.Automation.StructureChangedEventHandler>)、 没有哪一个子元素的特定通知已添加或删除。  
  
   
  
## Examples  
 下面的示例显示如何引发事件时，添加子级或从自定义列表框中删除。  
  
 [!code-csharp[FragmentProvider#101](~/samples/snippets/csharp/VS_Snippets_Wpf/FragmentProvider/CSharp/ListFragment.cs#101)]
 [!code-vb[FragmentProvider#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FragmentProvider/VisualBasic/ListFragment.vb#101)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.StructureChangedEventArgs.#ctor(System.Windows.Automation.StructureChangeType,System.Int32[])" />
        <related type="Article" href="https://msdn.microsoft.com/library/69eebd8b-39ed-40e7-93cc-4457c4caf746">UI 自动化事件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/9fe2f01b-f7d8-49a8-a185-d4472b9976c0">从 UI 自动化提供程序中引发事件</related>
      </Docs>
    </Member>
    <Member MemberName="ReturnRawElementProvider">
      <MemberSignature Language="C#" Value="public static IntPtr ReturnRawElementProvider (IntPtr hwnd, IntPtr wParam, IntPtr lParam, System.Windows.Automation.Provider.IRawElementProviderSimple el);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ReturnRawElementProvider(native int hwnd, native int wParam, native int lParam, class System.Windows.Automation.Provider.IRawElementProviderSimple el) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.AutomationInteropProvider.ReturnRawElementProvider(System.IntPtr,System.IntPtr,System.IntPtr,System.Windows.Automation.Provider.IRawElementProviderSimple)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReturnRawElementProvider (hwnd As IntPtr, wParam As IntPtr, lParam As IntPtr, el As IRawElementProviderSimple) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr ReturnRawElementProvider(IntPtr hwnd, IntPtr wParam, IntPtr lParam, System::Windows::Automation::Provider::IRawElementProviderSimple ^ el);" />
      <MemberSignature Language="F#" Value="static member ReturnRawElementProvider : nativeint * nativeint * nativeint * System.Windows.Automation.Provider.IRawElementProviderSimple -&gt; nativeint" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.ReturnRawElementProvider (hwnd, wParam, lParam, el)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
        <Parameter Name="wParam" Type="System.IntPtr" />
        <Parameter Name="lParam" Type="System.IntPtr" />
        <Parameter Name="el" Type="System.Windows.Automation.Provider.IRawElementProviderSimple" />
      </Parameters>
      <Docs>
        <param name="hwnd">元素窗口的句柄。</param>
        <param name="wParam"><see langword="WM_GETOBJECT" /> 消息的 <see langword="wParam" /> 成员。</param>
        <param name="lParam"><see langword="WM_GETOBJECT" /> 消息的 <see langword="lParam" /> 成员。</param>
        <param name="el">元素的 UI 自动化提供程序。</param>
        <summary>返回响应 <see langword="WM_GETOBJECT" /> 消息的元素的 UI 自动化提供程序。</summary>
        <returns>将消息传递给基窗口过程之前应分配给 <see cref="P:System.Windows.Forms.Message.Result" /> 的数据的指针。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIAFragmentProvider_snip#116](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListFragment.cs#116)]
 [!code-vb[UIAFragmentProvider_snip#116](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListFragment.vb#116)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/55d419c0-2201-4101-90c9-2888df4dbb47">公开 UI 自动化提供程序</related>
        <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">服务器端 UI 自动化提供程序实现</related>
      </Docs>
    </Member>
    <Member MemberName="RootObjectId">
      <MemberSignature Language="C#" Value="public const int RootObjectId = -25;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 RootObjectId = (-25)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.Provider.AutomationInteropProvider.RootObjectId" />
      <MemberSignature Language="VB.NET" Value="Public Const RootObjectId As Integer  = -25" />
      <MemberSignature Language="C++ CLI" Value="public: int RootObjectId = -25;" />
      <MemberSignature Language="F#" Value="val mutable RootObjectId : int" Usage="System.Windows.Automation.Provider.AutomationInteropProvider.RootObjectId" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-25</MemberValue>
      <Docs>
        <summary>包含一个值，该值用在 <see langword="lParam" /> 消息的 <see langword="WM_GETOBJECT" /> 成员中，指出服务器应该返回一个对根原始元素提供程序的引用。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/55d419c0-2201-4101-90c9-2888df4dbb47">公开 UI 自动化提供程序</related>
      </Docs>
    </Member>
  </Members>
</Type>