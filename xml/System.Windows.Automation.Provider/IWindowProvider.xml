<Type Name="IWindowProvider" FullName="System.Windows.Automation.Provider.IWindowProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="644159038f400a8d228091aebc13941444b88edb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30616161" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWindowProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWindowProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IWindowProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWindowProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWindowProvider" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("987df77b-db06-4d77-8f8a-86a9c3bb90b9")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1d258-101">公开方法和属性，以支持 UI 自动化客户端访问控件，这些控件在传统的图形用户界面 (GUI) 中提供基于窗口的重要功能。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1d258-101">Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d258-102">实现 UI 自动化提供程序必须支持上<xref:System.Windows.Automation.WindowPattern>控件模式。</span><span class="sxs-lookup"><span data-stu-id="1d258-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.WindowPattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.WindowPattern" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1d258-103">尝试关闭窗口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-103">Attempts to close the window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d258-104"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> 必须立即返回而不阻止。</span><span class="sxs-lookup"><span data-stu-id="1d258-104"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> must return immediately without blocking.</span></span>  
  
 <span data-ttu-id="1d258-105"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> 引发 <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> 事件。</span><span class="sxs-lookup"><span data-stu-id="1d258-105"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event.</span></span> <span data-ttu-id="1d258-106">如果可能，在控件完成其关联的操作后，应引发事件。</span><span class="sxs-lookup"><span data-stu-id="1d258-106">If possible, the event should be raised after the control has completed its associated action.</span></span>  
  
 <span data-ttu-id="1d258-107">当在拆分窗格控件上调用，此方法会关闭窗格，并删除关联的拆分。</span><span class="sxs-lookup"><span data-stu-id="1d258-107">When called on a split pane control, this method will close the pane and remove the associated split.</span></span> <span data-ttu-id="1d258-108">此方法也可能关闭所有其他窗格，具体取决于实现。</span><span class="sxs-lookup"><span data-stu-id="1d258-108">This method might also close all other panes, depending on implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1d258-109">当控件无法执行请求的操作时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-109">When the control is unable to perform the requested action.</span>
          </span>
        </exception>
        <exception cref="T:System.Windows.Automation.ElementNotAvailableException">
          <span data-ttu-id="1d258-110">当目标元素不再可用时（例如窗口已关闭）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-110">When the target element is no longer available (for example, the window has closed).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InteractionState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowInteractionState InteractionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowInteractionState InteractionState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InteractionState As WindowInteractionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowInteractionState InteractionState { System::Windows::Automation::WindowInteractionState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowInteractionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d258-111">获取窗口的交互状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-111">Gets the interaction state of the window.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d258-112">控件的 <see cref="T:System.Windows.Automation.WindowInteractionState" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-112">The <see cref="T:System.Windows.Automation.WindowInteractionState" /> of the control.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsModal">
      <MemberSignature Language="C#" Value="public bool IsModal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsModal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsModal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsModal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsModal { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d258-113">获取一个值，该值指定窗口是否为模式窗口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-113">Gets a value that specifies whether the window is modal.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d258-114">如果窗口为模式窗口，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-114">
              <see langword="true" /> if the window is modal; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTopmost">
      <MemberSignature Language="C#" Value="public bool IsTopmost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTopmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTopmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTopmost { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d258-115">获取一个值，该值指定该窗口是否是按 z 顺序的最顶端元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-115">Gets a value that specifies whether the window is the topmost element in the z-order.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d258-116">如果窗口是最顶层元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-116">
              <see langword="true" /> if the window is topmost; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Maximizable">
      <MemberSignature Language="C#" Value="public bool Maximizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Maximizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Maximizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Maximizable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d258-117">获取一个值，该值指定窗口是否可以最大化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-117">Gets a value that specifies whether the window can be maximized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d258-118">如果窗口可以最大化，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-118">
              <see langword="true" /> if the window can be maximized; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Minimizable">
      <MemberSignature Language="C#" Value="public bool Minimizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Minimizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minimizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Minimizable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d258-119">获取一个值，该值指定窗口是否可以最小化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-119">Gets a value that specifies whether the window can be minimized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d258-120">如果窗口可以最小化，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-120">
              <see langword="true" /> if the window can be minimized; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVisualState">
      <MemberSignature Language="C#" Value="public void SetVisualState (System.Windows.Automation.WindowVisualState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisualState(valuetype System.Windows.Automation.WindowVisualState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetVisualState (state As WindowVisualState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetVisualState(System::Windows::Automation::WindowVisualState state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Windows.Automation.WindowVisualState" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="1d258-121">请求的窗口可视状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-121">The requested visual state of the window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d258-122">更改窗口的可视状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-122">Changes the visual state of the window.</span>
          </span>
          <span data-ttu-id="1d258-123">例如，将其最小化或最大化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-123">For example, minimizes or maximizes it.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1d258-124">当控件不支持请求的行为时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-124">When the control does not support the requested behavior.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="VisualState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowVisualState VisualState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowVisualState VisualState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.VisualState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisualState As WindowVisualState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowVisualState VisualState { System::Windows::Automation::WindowVisualState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowVisualState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d258-125">获取窗口的可视状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-125">Gets the visual state of the window.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d258-126">窗口的可视状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-126">The visual state of the window.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForInputIdle(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle(int milliseconds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds">
          <span data-ttu-id="1d258-127">等待关联进程变为空闲状态的时间（以毫秒为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-127">The amount of time, in milliseconds, to wait for the associated process to become idle.</span>
          </span>
          <span data-ttu-id="1d258-128">最大值为 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-128">The maximum is <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d258-129">在指定时间阻止或在关联进程进入空闲状态之前持续阻止调用代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-129">Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d258-130">如果窗口已进入空闲状态，则为 <see langword="true" />；如果发生超时。则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-130">
              <see langword="true" /> if the window has entered the idle state; <see langword="false" /> if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d258-131">此方法通常与的处理结合使用<xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>。</span><span class="sxs-lookup"><span data-stu-id="1d258-131">This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.</span></span>  
  
 <span data-ttu-id="1d258-132">实现都依赖于基础的应用程序框架;因此，此方法可能会返回一段时间后窗口可供用户输入。</span><span class="sxs-lookup"><span data-stu-id="1d258-132">The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input.</span></span> <span data-ttu-id="1d258-133">调用的代码不应依赖于此方法可确定窗口进入空闲状态的确切时间。</span><span class="sxs-lookup"><span data-stu-id="1d258-133">The calling code should not rely on this method to ascertain exactly when the window has become idle.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1d258-134">当传递的参数不是有效的数字时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d258-134">When the parameter passed in is not a valid number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>