<Type Name="SessionAuthenticationModule" FullName="System.IdentityModel.Services.SessionAuthenticationModule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bfc00bae16230ee8b87771b9f6d3425616c8245e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36481917" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SessionAuthenticationModule : System.IdentityModel.Services.HttpModuleBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SessionAuthenticationModule extends System.IdentityModel.Services.HttpModuleBase" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.SessionAuthenticationModule" />
  <TypeSignature Language="VB.NET" Value="Public Class SessionAuthenticationModule&#xA;Inherits HttpModuleBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class SessionAuthenticationModule : System::IdentityModel::Services::HttpModuleBase" />
  <TypeSignature Language="F#" Value="type SessionAuthenticationModule = class&#xA;    inherit HttpModuleBase" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.Services.HttpModuleBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="07c73-101">实现一个 在 ws-discovery 方案下处理会话 cookies 的 ASP.NET 模块。</span>
      <span class="sxs-lookup">
        <span data-stu-id="07c73-101">Implements an ASP.NET module that processes session cookies in WS-Federation scenarios.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-102">ASP.NET 管道中出现时<xref:System.IdentityModel.Services.SessionAuthenticationModule>(SAM) 处理 WS 联合身份验证方案中的会话 cookie。</span><span class="sxs-lookup"><span data-stu-id="07c73-102">When present in the ASP.NET pipeline, the <xref:System.IdentityModel.Services.SessionAuthenticationModule> (SAM) processes session cookies in WS-Federation scenarios.</span></span> <span data-ttu-id="07c73-103">它使用指定的 cookie 处理<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>原始会话 cookie 读取从 HTTP 请求并将其写入到 HTTP 响应的属性。</span><span class="sxs-lookup"><span data-stu-id="07c73-103">It uses the cookie handler specified by the <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> property to read the raw session cookie from the HTTP request and write it to the HTTP response.</span></span> <span data-ttu-id="07c73-104">它使用<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>配置的应用程序进行反序列化到原始会话 cookie<xref:System.IdentityModel.Tokens.SessionSecurityToken>对象。</span><span class="sxs-lookup"><span data-stu-id="07c73-104">It uses the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> that is configured for an application to deserialize the raw session cookie into <xref:System.IdentityModel.Tokens.SessionSecurityToken> objects.</span></span> <span data-ttu-id="07c73-105">会话的安全令牌包含声明 (<xref:System.Security.Claims.Claim>) 和主体 (<xref:System.Security.Claims.ClaimsPrincipal>) 与为其请求提供服务的实体关联。</span><span class="sxs-lookup"><span data-stu-id="07c73-105">The session security token contains the claims (<xref:System.Security.Claims.Claim>) and principal (<xref:System.Security.Claims.ClaimsPrincipal>) associated with the entity for which the request is being served.</span></span>  
  
 <span data-ttu-id="07c73-106">SAM 将添加其<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>事件处理程序<xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=nameWithType>ASP.NET 管道中的事件。</span><span class="sxs-lookup"><span data-stu-id="07c73-106">The SAM adds its <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> event handler to the <xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=nameWithType> event in the ASP.NET pipeline.</span></span> <span data-ttu-id="07c73-107">此处理程序截获登录请求，如果没有会话 cookie 中，将其反序列化为一个会话令牌，并将设置<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>和<xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType>属性设置为会话令牌中包含的声明主体。</span><span class="sxs-lookup"><span data-stu-id="07c73-107">This handler intercepts sign-in requests, and, if there is a session cookie, deserializes it into a session token, and sets the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> and <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> properties to the claims principal contained in the session token.</span></span> <span data-ttu-id="07c73-108">它调用多个由 SAM 公开在此过程中的其他方法。</span><span class="sxs-lookup"><span data-stu-id="07c73-108">It invokes several of the other methods exposed by the SAM during this process.</span></span>  
  
 <span data-ttu-id="07c73-109"><xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法可以调用以从中注销用户会话 （例如，在 SignOut.aspx.cs 代码隐藏文件中）。</span><span class="sxs-lookup"><span data-stu-id="07c73-109">The <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> method can be invoked to sign the user out of a session (for example, in a SignOut.aspx.cs code-behind file).</span></span>  
  
 <span data-ttu-id="07c73-110">SAM 公开提供对其处理管道的访问的多个事件。</span><span class="sxs-lookup"><span data-stu-id="07c73-110">The SAM exposes several events that provide access to its processing pipeline.</span></span> <span data-ttu-id="07c73-111"><xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived>和<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated>事件使您能够修改读取从 cookie 或在处理过程中创建的会话令牌。</span><span class="sxs-lookup"><span data-stu-id="07c73-111">The <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived> and <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated> events enable you to modify session tokens that are read from cookies or created during processing.</span></span> <span data-ttu-id="07c73-112">通常情况下，这是若要添加、 删除或转换在令牌中的声明或调整其过期时间。</span><span class="sxs-lookup"><span data-stu-id="07c73-112">Typically, this is done to add, remove, or transform claims in the token or to adjust its expiration time.</span></span> <span data-ttu-id="07c73-113"><xref:System.IdentityModel.Services.SessionAuthenticationModule.SigningOut>， <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignedOut>，和<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError>事件提供挂钩到的注销请求处理。</span><span class="sxs-lookup"><span data-stu-id="07c73-113">The <xref:System.IdentityModel.Services.SessionAuthenticationModule.SigningOut>, <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignedOut>, and <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError> events provide hooks into the processing of sign-out requests.</span></span> <span data-ttu-id="07c73-114">对于许多情况下，只需将这些事件的处理程序添加到 global.asax.cs 文件中，通常将足够。</span><span class="sxs-lookup"><span data-stu-id="07c73-114">For many scenarios, simply adding handlers for these events, often to the global.asax.cs file, will be sufficient.</span></span>  
  
 <span data-ttu-id="07c73-115">对于更复杂的方案，你可以派生自<xref:System.IdentityModel.Services.SessionAuthenticationModule>实现自定义 SAM。</span><span class="sxs-lookup"><span data-stu-id="07c73-115">For more complicated scenarios, you can derive from <xref:System.IdentityModel.Services.SessionAuthenticationModule> to implement a custom SAM.</span></span> <span data-ttu-id="07c73-116">为实现此目标，许多期间调用的方法<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>和<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>公开，以便你可以在会话处理生命周期的特定阶段提供自定义行为。</span><span class="sxs-lookup"><span data-stu-id="07c73-116">To this end, many of the methods that are invoked during <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> and <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> are exposed so that you can provide custom behavior at specific stages of the session processing lifecycle.</span></span>  
  
 <span data-ttu-id="07c73-117">你也可以通过将其添加到下的 HTTP 模块向 ASP.NET 管道配置文件中添加 SAM`<system.webServer>`元素为 IIS 7 和更高版本或`<system.web>`元素对于 IIS 7 之前的版本。</span><span class="sxs-lookup"><span data-stu-id="07c73-117">You can add the SAM to the ASP.NET pipeline in a configuration file by adding it to the HTTP modules under either the `<system.webServer>` element for IIS version 7 and later or under the `<system.web>` element for versions prior to IIS 7.</span></span> <span data-ttu-id="07c73-118">可以使用配置的 cookie 处理由 SAM [ &lt;cookieHandler&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md)元素。</span><span class="sxs-lookup"><span data-stu-id="07c73-118">The cookie handler used by the SAM can be configured with the [&lt;cookieHandler&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) element.</span></span>  
  
   
  
## Examples  
 [!code-csharp[WifSAM#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifsam/cs/webapplication1/global.asax.cs#1)]  
  
 <span data-ttu-id="07c73-119">下面的 XML 演示如何在 ASP.NET 管道中配置 SAM。</span><span class="sxs-lookup"><span data-stu-id="07c73-119">The following XML shows how to configure the SAM in the ASP.NET pipeline.</span></span> <span data-ttu-id="07c73-120">为简洁起见，此处省略的典型配置中存在的多个其他元素。</span><span class="sxs-lookup"><span data-stu-id="07c73-120">Many other elements that are present in a typical configuration are omitted here for brevity.</span></span>  
  
```xml  
<configuration>  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="SessionAuthenticationModule" type="System.IdentityModel.Services.SessionAuthenticationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
      <add name="WsFederationAuthenticationModule" type="System.IdentityModel.Services.WSFederationAuthenticationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionAuthenticationModule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionAuthenticationModule();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07c73-121">初始化 <see cref="T:System.IdentityModel.Services.SessionAuthenticationModule" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-121">Initializes a new instance of the <see cref="T:System.IdentityModel.Services.SessionAuthenticationModule" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-122"><xref:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode%2A>属性设置为`false`和<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>属性初始化为的默认实例<xref:System.IdentityModel.Services.CookieHandlerElement.ChunkedCookieHandler%2A>类。</span><span class="sxs-lookup"><span data-stu-id="07c73-122">The <xref:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode%2A> property is set to `false` and the <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> property is initialized to a default instance of the <xref:System.IdentityModel.Services.CookieHandlerElement.ChunkedCookieHandler%2A> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateSessionSecurityToken">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateSessionSecurityToken (System.IdentityModel.Tokens.SessionSecurityToken sessionToken, bool writeCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateSessionSecurityToken(class System.IdentityModel.Tokens.SessionSecurityToken sessionToken, bool writeCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateSessionSecurityToken (sessionToken As SessionSecurityToken, writeCookie As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateSessionSecurityToken(System::IdentityModel::Tokens::SessionSecurityToken ^ sessionToken, bool writeCookie);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateSessionSecurityToken : System.IdentityModel.Tokens.SessionSecurityToken * bool -&gt; unit&#xA;override this.AuthenticateSessionSecurityToken : System.IdentityModel.Tokens.SessionSecurityToken * bool -&gt; unit" Usage="sessionAuthenticationModule.AuthenticateSessionSecurityToken (sessionToken, writeCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionToken" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
        <Parameter Name="writeCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sessionToken">
          <span data-ttu-id="07c73-123">使用会话安全令牌检查传入的 HTTP 请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-123">The session security token to use to authenticate the incoming HTTP request.</span>
          </span>
        </param>
        <param name="writeCookie">
          <span data-ttu-id="07c73-124">编写会话 cookie，则为 <see langword="true" />；否则 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-124">
              <see langword="true" /> to write the session cookie; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-125">通过验证传入会话标志请求该传入的身份验证。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-125">Authenticates the incoming request by validating the incoming session token.</span>
          </span>
          <span data-ttu-id="07c73-126">在成功验证之后，其将使用指定的 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 更新当前 HTTP 上下文和线程主体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-126">Upon successful validation, it updates the current HTTP context and thread principal with the specified  <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-127"><xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A>方法调用从<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="07c73-127">The <xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A> method is called from the <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> method.</span></span> <span data-ttu-id="07c73-128">它调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken%2A>方法来验证传入令牌和更新<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>和<xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="07c73-128">It calls the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken%2A> method to validate the incoming token and update the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> and the <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="07c73-129">如果`writeCookie`参数是`true`、<xref:System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie%2A>方法调用以将会话令牌编写为一个 cookie。</span><span class="sxs-lookup"><span data-stu-id="07c73-129">If the `writeCookie` parameter is `true`, the <xref:System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie%2A> method is invoked to write the session token to a cookie.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsSessionTokenCookie">
      <MemberSignature Language="C#" Value="public bool ContainsSessionTokenCookie (System.Web.HttpCookieCollection httpCookieCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsSessionTokenCookie(class System.Web.HttpCookieCollection httpCookieCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie(System.Web.HttpCookieCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsSessionTokenCookie(System::Web::HttpCookieCollection ^ httpCookieCollection);" />
      <MemberSignature Language="F#" Value="member this.ContainsSessionTokenCookie : System.Web.HttpCookieCollection -&gt; bool" Usage="sessionAuthenticationModule.ContainsSessionTokenCookie httpCookieCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpCookieCollection" Type="System.Web.HttpCookieCollection" />
      </Parameters>
      <Docs>
        <param name="httpCookieCollection">
          <span data-ttu-id="07c73-130">要在其中搜索的 cookies 集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-130">The collection of cookies in which to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-131">确定指定的会话cookie是否在指定的cookie集合中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-131">Determines whether a session cookie is in the specified cookie collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07c73-132">如果找到一个会话 cookie，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-132">
              <see langword="true" /> if a session cookie is found; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07c73-133">
            <paramref name="httpCookieCollection" /> 为 null</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-133">
              <paramref name="httpCookieCollection" /> is null</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContextSessionSecurityToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SessionSecurityToken ContextSessionSecurityToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SessionSecurityToken ContextSessionSecurityToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ContextSessionSecurityToken As SessionSecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::IdentityModel::Tokens::SessionSecurityToken ^ ContextSessionSecurityToken { System::IdentityModel::Tokens::SessionSecurityToken ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContextSessionSecurityToken : System.IdentityModel.Tokens.SessionSecurityToken" Usage="System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SessionSecurityToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07c73-134">获取当前 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 的活动 <see cref="T:System.Web.HttpContext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-134">Gets the active <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> for the current <see cref="T:System.Web.HttpContext" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07c73-135">活动会话安全标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-135">The active session security token.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieHandler">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Services.CookieHandler CookieHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Services.CookieHandler CookieHandler" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler" />
      <MemberSignature Language="VB.NET" Value="Public Property CookieHandler As CookieHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Services::CookieHandler ^ CookieHandler { System::IdentityModel::Services::CookieHandler ^ get(); void set(System::IdentityModel::Services::CookieHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CookieHandler : System.IdentityModel.Services.CookieHandler with get, set" Usage="System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Services.CookieHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07c73-136">获取用于读取、写入和删除会话 Cookie 的 Cookie 处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-136">Gets the cookie handler that is used to read, write, and delete session cookies.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07c73-137">Cookie 处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-137">The cookie handler.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-138"><xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>属性由初始化<xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="07c73-138">The <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> property is initialized by the <xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration%2A> method.</span></span> <span data-ttu-id="07c73-139">此方法将根据上指定的 cookie 处理程序的属性初始化<xref:System.IdentityModel.Services.Configuration.FederationConfiguration>设置的对象<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="07c73-139">This method initializes the property based on the cookie handler specified on the <xref:System.IdentityModel.Services.Configuration.FederationConfiguration> object that is set on the <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="07c73-140">你可以通过配置文件中设置的 cookie 处理[ &lt;cookieHandler&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md)元素。</span><span class="sxs-lookup"><span data-stu-id="07c73-140">You can set the cookie handler in a configuration file through the [&lt;cookieHandler&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) element.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie" />
        <altmember cref="M:System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie(System.IdentityModel.Tokens.SessionSecurityToken@)" />
        <altmember cref="M:System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie(System.IdentityModel.Tokens.SessionSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="CreateSessionSecurityToken">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SessionSecurityToken CreateSessionSecurityToken (System.Security.Claims.ClaimsPrincipal principal, string context, DateTime validFrom, DateTime validTo, bool isPersistent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IdentityModel.Tokens.SessionSecurityToken CreateSessionSecurityToken(class System.Security.Claims.ClaimsPrincipal principal, string context, valuetype System.DateTime validFrom, valuetype System.DateTime validTo, bool isPersistent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.DateTime,System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSessionSecurityToken (principal As ClaimsPrincipal, context As String, validFrom As DateTime, validTo As DateTime, isPersistent As Boolean) As SessionSecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IdentityModel::Tokens::SessionSecurityToken ^ CreateSessionSecurityToken(System::Security::Claims::ClaimsPrincipal ^ principal, System::String ^ context, DateTime validFrom, DateTime validTo, bool isPersistent);" />
      <MemberSignature Language="F#" Value="member this.CreateSessionSecurityToken : System.Security.Claims.ClaimsPrincipal * string * DateTime * DateTime * bool -&gt; System.IdentityModel.Tokens.SessionSecurityToken" Usage="sessionAuthenticationModule.CreateSessionSecurityToken (principal, context, validFrom, validTo, isPersistent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SessionSecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="validFrom" Type="System.DateTime" />
        <Parameter Name="validTo" Type="System.DateTime" />
        <Parameter Name="isPersistent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="principal">
          <span data-ttu-id="07c73-141">在令牌中要被捕捉的主体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-141">The principal to be captured in the token.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="07c73-142">应用程序定义的上下文字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-142">An application-defined context string.</span>
          </span>
        </param>
        <param name="validFrom">
          <span data-ttu-id="07c73-143">该标识有效的最初时刻。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-143">The first instant in which this token is valid.</span>
          </span>
        </param>
        <param name="validTo">
          <span data-ttu-id="07c73-144">该令牌有效的最初时刻。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-144">The last instant in which this token is valid.</span>
          </span>
        </param>
        <param name="isPersistent">
          <span data-ttu-id="07c73-145">如果值应由用户代理执行，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-145">
              <see langword="true" /> if the value should be persisted by the user agent; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-146">使用配置会话标记处理程序，从指定参数创建 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-146">Creates a <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> from the specified parameters by using the configured session token handler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07c73-147">会话标识。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-147">The session token.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="07c73-148">没有已配置的无效会话标记处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-148">There is not a valid session token handler configured.</span>
          </span>
          <span data-ttu-id="07c73-149">（在 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 属性中未配置  <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" />。）</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-149">(There is no <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> configured in the <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" /> property.)</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteSessionTokenCookie">
      <MemberSignature Language="C#" Value="public void DeleteSessionTokenCookie ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteSessionTokenCookie() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteSessionTokenCookie ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteSessionTokenCookie();" />
      <MemberSignature Language="F#" Value="member this.DeleteSessionTokenCookie : unit -&gt; unit" Usage="sessionAuthenticationModule.DeleteSessionTokenCookie " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07c73-150">从堆栈中移除最顶层会话并将其返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-150">Deletes the session cookie and removes it from the cache.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-151">通过使用指定的 cookie 处理程序中删除会话 cookie<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="07c73-151">Deletes the session cookie by using the cookie handler specified by the <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> property.</span></span> <span data-ttu-id="07c73-152">在调用此方法通过注销<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="07c73-152">This method is called during sign-out by the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeModule">
      <MemberSignature Language="C#" Value="protected override void InitializeModule (System.Web.HttpApplication context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InitializeModule(class System.Web.HttpApplication context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule(System.Web.HttpApplication)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InitializeModule (context As HttpApplication)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InitializeModule(System::Web::HttpApplication ^ context);" />
      <MemberSignature Language="F#" Value="override this.InitializeModule : System.Web.HttpApplication -&gt; unit" Usage="sessionAuthenticationModule.InitializeModule context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpApplication" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="07c73-153">包含该模块的 HTTP 应用对程序对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-153">The HTTP application object that contains this module.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-154">初始化模块并为其从模块的 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 应用程序对象处理事件做好准备。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-154">Initializes the module and prepares it to handle events from the module's [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] application object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-155">将添加<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>和<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest%2A>到处理程序<xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=nameWithType>和<xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=nameWithType>指定的应用程序对象事件`context`参数。</span><span class="sxs-lookup"><span data-stu-id="07c73-155">Adds the <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> and the <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest%2A> handlers to the <xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=nameWithType> and <xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=nameWithType> events of the application object specified by the `context` parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializePropertiesFromConfiguration">
      <MemberSignature Language="C#" Value="protected override void InitializePropertiesFromConfiguration ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InitializePropertiesFromConfiguration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InitializePropertiesFromConfiguration ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InitializePropertiesFromConfiguration();" />
      <MemberSignature Language="F#" Value="override this.InitializePropertiesFromConfiguration : unit -&gt; unit" Usage="sessionAuthenticationModule.InitializePropertiesFromConfiguration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07c73-156">初始化基于在配置文件中的定义的模块属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-156">Initializes the module properties based on definitions in the configuration file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-157">初始化<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>来自处理程序的配置中指定的属性<xref:System.IdentityModel.Services.Configuration.FederationConfiguration?displayProperty=nameWithType>设置的对象<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="07c73-157">Initializes the <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> property from the handler specified in configuration by the <xref:System.IdentityModel.Services.Configuration.FederationConfiguration?displayProperty=nameWithType> object that is set on the <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="07c73-158">你可以通过配置文件中指定的 cookie 处理[ &lt;cookieHandler&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md)元素。</span><span class="sxs-lookup"><span data-stu-id="07c73-158">You can specify the cookie handler in a configuration file through the [&lt;cookieHandler&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) element.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReferenceMode">
      <MemberSignature Language="C#" Value="public bool IsReferenceMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReferenceMode" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode" />
      <MemberSignature Language="VB.NET" Value="Public Property IsReferenceMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReferenceMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsReferenceMode : bool with get, set" Usage="System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07c73-159">获取或设置一个值，该值指定是否应在会话 Cookie 中存储会话信息（声明值等），或是否应通过使用 Cookie 仅存储引用在服务器端上存储会话内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-159">Gets or sets a value that specifies whether the session information (claim values, etc.) should be stored in the session cookie or whether the session content should be stored on the server side, using the cookie to store just a reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07c73-160">如果发布的 cookies 在引用模式中，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-160">
              <see langword="true" /> if issued cookies are in reference mode; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="07c73-161">默认值为 <see langword="false" />，指定了发布的 cookie 不处于引用模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-161">The default is <see langword="false" />, which specifies that issued cookies are not in reference mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-162">在引用模式下，<xref:System.IdentityModel.Tokens.SessionSecurityToken>存储在服务器端缓存 (一个对象，派生自<xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>)。</span><span class="sxs-lookup"><span data-stu-id="07c73-162">In reference mode, the <xref:System.IdentityModel.Tokens.SessionSecurityToken> is stored in a server-side cache (an object that derives from <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>).</span></span> <span data-ttu-id="07c73-163">颁发的 cookie 中只包含用于从缓存中检索令牌的上下文标识符。</span><span class="sxs-lookup"><span data-stu-id="07c73-163">The issued cookie just contains a context identifier that is used to retrieve the token from the cache.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="07c73-164">若要在引用模式下操作提供的处理程序的 Microsoft 建议<xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated?displayProperty=nameWithType>global.asax.cs 文件和设置中的事件<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=nameWithType>令牌上的属性中传递<xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="07c73-164">To operate in reference mode, Microsoft recommends providing a handler for the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated?displayProperty=nameWithType> event in the global.asax.cs file and setting the <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=nameWithType> property on the token passed in the <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="07c73-165">这将确保会话令牌在为每个请求的引用模式下运行，并且通过仅设置偏好<xref:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode%2A?displayProperty=nameWithType>会话身份验证模块上的属性。</span><span class="sxs-lookup"><span data-stu-id="07c73-165">This will ensure that the session token operates in reference mode for every request and is favored over merely setting the <xref:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode%2A?displayProperty=nameWithType> property on the Session Authentication Module.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAuthenticateRequest">
      <MemberSignature Language="C#" Value="protected virtual void OnAuthenticateRequest (object sender, EventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAuthenticateRequest(object sender, class System.EventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAuthenticateRequest(System::Object ^ sender, EventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnAuthenticateRequest : obj * EventArgs -&gt; unit&#xA;override this.OnAuthenticateRequest : obj * EventArgs -&gt; unit" Usage="sessionAuthenticationModule.OnAuthenticateRequest (sender, eventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="eventArgs" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="07c73-166">事件的源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-166">The source for the event.</span>
          </span>
          <span data-ttu-id="07c73-167">这将是 <see cref="T:System.Web.HttpApplication" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-167">This will be an <see cref="T:System.Web.HttpApplication" /> object.</span>
          </span>
        </param>
        <param name="eventArgs">
          <span data-ttu-id="07c73-168">事件的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-168">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-169">从 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 管道处理 <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-169">Handles the <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> event from the [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] pipeline.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-170">此方法执行以下任务：</span><span class="sxs-lookup"><span data-stu-id="07c73-170">This method does the following:</span></span>  
  
1.  <span data-ttu-id="07c73-171">调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie%2A>方法来读取<xref:System.IdentityModel.Tokens.SessionSecurityToken>从会话 cookie，如果有的话。</span><span class="sxs-lookup"><span data-stu-id="07c73-171">Invokes the <xref:System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie%2A> method to read a <xref:System.IdentityModel.Tokens.SessionSecurityToken> from the session cookie, if one is present.</span></span>  
  
2.  <span data-ttu-id="07c73-172">如果会话安全令牌不能为读 （最有可能是因为尚未建立会话），将返回。</span><span class="sxs-lookup"><span data-stu-id="07c73-172">If a session security token cannot be read (most likely because a session has not been established), return.</span></span>  
  
3.  <span data-ttu-id="07c73-173">调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived%2A>方法来引发<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived>事件。</span><span class="sxs-lookup"><span data-stu-id="07c73-173">Invokes the <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived%2A> method to raise the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived> event.</span></span> <span data-ttu-id="07c73-174">用于读取从 cookie 要修改的标记或取消的请求，这提供了机会。</span><span class="sxs-lookup"><span data-stu-id="07c73-174">This provides an opportunity for the token read from the cookie to be modified or for the request to be canceled.</span></span> <span data-ttu-id="07c73-175">处理程序还可以指定应颁发令牌，通过设置<xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.ReissueCookie%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="07c73-175">The handler can also specify that the token should be reissued, by setting the <xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.ReissueCookie%2A?displayProperty=nameWithType> property.</span></span>  
  
4.  <span data-ttu-id="07c73-176">如果要重新颁发令牌，将其从缓存中删除，并调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated%2A>方法来引发<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated>事件。</span><span class="sxs-lookup"><span data-stu-id="07c73-176">If the token is to be reissued, removes it from the cache and invokes the <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated%2A> method to raise the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated> event.</span></span> <span data-ttu-id="07c73-177">这提供机会再次要修改的令牌。</span><span class="sxs-lookup"><span data-stu-id="07c73-177">This provides opportunity for the token to again be modified.</span></span> <span data-ttu-id="07c73-178">此外可以通过设置修改重新发出行为<xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=nameWithType>事件处理程序中的属性。</span><span class="sxs-lookup"><span data-stu-id="07c73-178">The reissue behavior can also be modified by setting the <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=nameWithType> property in the event handler.</span></span>  
  
5.  <span data-ttu-id="07c73-179">调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A>方法进行身份验证用户。</span><span class="sxs-lookup"><span data-stu-id="07c73-179">Invokes the <xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A> method to authenticate the user.</span></span> <span data-ttu-id="07c73-180">如果成功，这将面临设置的效果<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>属性中包含的主体<xref:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal%2A?displayProperty=nameWithType>的传入令牌的属性。</span><span class="sxs-lookup"><span data-stu-id="07c73-180">If successful, this has the effect of setting the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property to the principal that is contained in the <xref:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal%2A?displayProperty=nameWithType> property of the incoming token.</span></span>  
  
6.  <span data-ttu-id="07c73-181">如果会话已过期，将调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="07c73-181">If the session has expired, invokes the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> method.</span></span>  
  
 <span data-ttu-id="07c73-182"><xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>方法添加到的处理程序<xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=nameWithType>中的事件<xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="07c73-182">The <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> method is added to the handlers for the <xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=nameWithType> event in the <xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="07c73-183">没有已配置的无效会话标记处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-183">There is not a valid session token handler configured.</span>
          </span>
          <span data-ttu-id="07c73-184">（在 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 属性中未配置  <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" />。）</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-184">(There is no <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> configured in the <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" /> property.)</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OnPostAuthenticateRequest">
      <MemberSignature Language="C#" Value="protected virtual void OnPostAuthenticateRequest (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPostAuthenticateRequest(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPostAuthenticateRequest (sender As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPostAuthenticateRequest(System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPostAuthenticateRequest : obj * EventArgs -&gt; unit&#xA;override this.OnPostAuthenticateRequest : obj * EventArgs -&gt; unit" Usage="sessionAuthenticationModule.OnPostAuthenticateRequest (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="07c73-185">事件的源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-185">The source for the event.</span>
          </span>
          <span data-ttu-id="07c73-186">这将是 <see cref="T:System.Web.HttpApplication" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-186">This will be an <see cref="T:System.Web.HttpApplication" /> object.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="07c73-187">事件的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-187">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-188">从 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 管道处理 <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-188">Handles the <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" /> event from the [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] pipeline.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-189">默认实现为空。</span><span class="sxs-lookup"><span data-stu-id="07c73-189">The default implementation is empty.</span></span>  
  
 <span data-ttu-id="07c73-190"><xref:System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest%2A>处理程序添加到的处理程序<xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=nameWithType>中的事件<xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="07c73-190">The <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest%2A> handler is added to the handlers for the <xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=nameWithType> event in the <xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSessionSecurityTokenCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionSecurityTokenCreated (System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionSecurityTokenCreated(class System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionSecurityTokenCreated (args As SessionSecurityTokenCreatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionSecurityTokenCreated(System::IdentityModel::Services::SessionSecurityTokenCreatedEventArgs ^ args);" />
      <MemberSignature Language="F#" Value="abstract member OnSessionSecurityTokenCreated : System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs -&gt; unit&#xA;override this.OnSessionSecurityTokenCreated : System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs -&gt; unit" Usage="sessionAuthenticationModule.OnSessionSecurityTokenCreated args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="07c73-191">事件的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-191">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-192">引发 <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-192">Raises the <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-193">从调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="07c73-193">Called from the <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSessionSecurityTokenReceived">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionSecurityTokenReceived (System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionSecurityTokenReceived(class System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived(System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionSecurityTokenReceived (args As SessionSecurityTokenReceivedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionSecurityTokenReceived(System::IdentityModel::Services::SessionSecurityTokenReceivedEventArgs ^ args);" />
      <MemberSignature Language="F#" Value="abstract member OnSessionSecurityTokenReceived : System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs -&gt; unit&#xA;override this.OnSessionSecurityTokenReceived : System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs -&gt; unit" Usage="sessionAuthenticationModule.OnSessionSecurityTokenReceived args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="07c73-194">事件的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-194">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-195">引发 <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-195">Raises the <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-196">从调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="07c73-196">Called from the <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSignedOut">
      <MemberSignature Language="C#" Value="protected virtual void OnSignedOut (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSignedOut(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSignedOut (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSignedOut(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSignedOut : EventArgs -&gt; unit&#xA;override this.OnSignedOut : EventArgs -&gt; unit" Usage="sessionAuthenticationModule.OnSignedOut e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="07c73-197">事件的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-197">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-198">引发 <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SignedOut" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-198">Raises the <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SignedOut" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-199">此方法调用从<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法后注销已执行并且会话 cookie 已被删除。</span><span class="sxs-lookup"><span data-stu-id="07c73-199">This method is invoked from the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> method after the sign-out has been performed and the session cookie has been deleted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSigningOut">
      <MemberSignature Language="C#" Value="protected virtual void OnSigningOut (System.IdentityModel.Services.SigningOutEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSigningOut(class System.IdentityModel.Services.SigningOutEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSigningOut (e As SigningOutEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSigningOut(System::IdentityModel::Services::SigningOutEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSigningOut : System.IdentityModel.Services.SigningOutEventArgs -&gt; unit&#xA;override this.OnSigningOut : System.IdentityModel.Services.SigningOutEventArgs -&gt; unit" Usage="sessionAuthenticationModule.OnSigningOut e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IdentityModel.Services.SigningOutEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="07c73-200">事件的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-200">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-201">引发 <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SigningOut" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-201">Raises the <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SigningOut" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-202">此方法调用从<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法来执行注销。它被调用之前删除会话 cookie。</span><span class="sxs-lookup"><span data-stu-id="07c73-202">This method is invoked from the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> method to perform sign-out. It is invoked before the session cookie is deleted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSignOutError">
      <MemberSignature Language="C#" Value="protected virtual void OnSignOutError (System.IdentityModel.Services.ErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSignOutError(class System.IdentityModel.Services.ErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSignOutError (e As ErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSignOutError(System::IdentityModel::Services::ErrorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSignOutError : System.IdentityModel.Services.ErrorEventArgs -&gt; unit&#xA;override this.OnSignOutError : System.IdentityModel.Services.ErrorEventArgs -&gt; unit" Usage="sessionAuthenticationModule.OnSignOutError e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IdentityModel.Services.ErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="07c73-203">事件的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-203">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-204">引发 <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-204">Raises the <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-205">此方法调用从<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法如果注销过程中发生错误。</span><span class="sxs-lookup"><span data-stu-id="07c73-205">This method is invoked from the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> method if an error occurs during sign-out.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadSessionTokenFromCookie">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SessionSecurityToken ReadSessionTokenFromCookie (byte[] sessionCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IdentityModel.Tokens.SessionSecurityToken ReadSessionTokenFromCookie(unsigned int8[] sessionCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadSessionTokenFromCookie (sessionCookie As Byte()) As SessionSecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IdentityModel::Tokens::SessionSecurityToken ^ ReadSessionTokenFromCookie(cli::array &lt;System::Byte&gt; ^ sessionCookie);" />
      <MemberSignature Language="F#" Value="member this.ReadSessionTokenFromCookie : byte[] -&gt; System.IdentityModel.Tokens.SessionSecurityToken" Usage="sessionAuthenticationModule.ReadSessionTokenFromCookie sessionCookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SessionSecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionCookie" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="sessionCookie">
          <span data-ttu-id="07c73-206">包含会话标记的原始格式的 cookie。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-206">The cookie, in raw form, that contains the session token.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-207">从指定的会话 Cookie 读取 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-207">Reads a <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> from the specified session cookie.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07c73-208">从 Cookie 读取的会话标识。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-208">The session token that was read from the cookie.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="07c73-209">没有已配置的无效会话标记处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-209">There is not a valid session token handler configured.</span>
          </span>
          <span data-ttu-id="07c73-210">（在 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 属性中未配置  <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" />。）</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-210">(There is no <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> configured in the <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" /> property.)</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SessionSecurityTokenCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs&gt; SessionSecurityTokenCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs&gt; SessionSecurityTokenCreated" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated" />
      <MemberSignature Language="VB.NET" Value="Public Event SessionSecurityTokenCreated As EventHandler(Of SessionSecurityTokenCreatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IdentityModel::Services::SessionSecurityTokenCreatedEventArgs ^&gt; ^ SessionSecurityTokenCreated;" />
      <MemberSignature Language="F#" Value="member this.SessionSecurityTokenCreated : EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs&gt; " Usage="member this.SessionSecurityTokenCreated : System.EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07c73-211">当会话安全标记已创建时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-211">Occurs when a session security token has been created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-212">你可以使用此事件之前已写入到 cookie 修改会话安全令牌。</span><span class="sxs-lookup"><span data-stu-id="07c73-212">You can use this event to modify the session security token before it is written to a cookie.</span></span>  
  
 <span data-ttu-id="07c73-213"><xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated>内引发事件<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>方法之后会话令牌 (<xref:System.IdentityModel.Tokens.SessionSecurityToken>) 已创建。</span><span class="sxs-lookup"><span data-stu-id="07c73-213">The <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated> event is raised from within the <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> method after a session token (<xref:System.IdentityModel.Tokens.SessionSecurityToken>) has been created.</span></span> <span data-ttu-id="07c73-214">发生这种情况，例如，如果一个事件处理程序<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived>事件修改该令牌。</span><span class="sxs-lookup"><span data-stu-id="07c73-214">This happens, for example, if an event handler for the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived> event modifies the token.</span></span>  
  
 <span data-ttu-id="07c73-215">此事件可用于修改的会话令牌的属性，然后它会进一步沿管道传递并用于发出请求 （用户） 的实体进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="07c73-215">You can use this event to modify properties of the session token before it is passed further along the pipeline and is used to authenticate the entity making the request (user).</span></span>  
  
 <span data-ttu-id="07c73-216">在事件处理程序，您可以访问通过令牌<xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="07c73-216">In an event handler, you can access the token through the <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="07c73-217">令牌之后，你可以确保将它写入返回到 cookie 通过设置<xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=nameWithType>属性`true`。</span><span class="sxs-lookup"><span data-stu-id="07c73-217">After modifying the token, you can ensure that it is written back to the cookie by setting the <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=nameWithType> property to `true`.</span></span> <span data-ttu-id="07c73-218">与，<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated>事件，<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated>不是可取消的事件。</span><span class="sxs-lookup"><span data-stu-id="07c73-218">Unlike, the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated> event, <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated> is not a cancelable event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07c73-219">下面的代码演示的处理程序<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated>实现 ASP.NET web 应用程序的 global.asax.cs 文件中的事件。</span><span class="sxs-lookup"><span data-stu-id="07c73-219">The following code shows a handler for the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated> event implemented in the global.asax.cs file of an ASP.NET web application.</span></span> <span data-ttu-id="07c73-220">你还必须向事件添加处理程序。</span><span class="sxs-lookup"><span data-stu-id="07c73-220">You must also add the handler to the event.</span></span> <span data-ttu-id="07c73-221">更完整的示例所示<xref:System.IdentityModel.Services.SessionAuthenticationModule>概述主题。</span><span class="sxs-lookup"><span data-stu-id="07c73-221">A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.</span></span>  
  
 [!code-csharp[WifSAM#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifsam/cs/webapplication1/global.asax.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionSecurityTokenReceived">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs&gt; SessionSecurityTokenReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs&gt; SessionSecurityTokenReceived" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived" />
      <MemberSignature Language="VB.NET" Value="Public Event SessionSecurityTokenReceived As EventHandler(Of SessionSecurityTokenReceivedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IdentityModel::Services::SessionSecurityTokenReceivedEventArgs ^&gt; ^ SessionSecurityTokenReceived;" />
      <MemberSignature Language="F#" Value="member this.SessionSecurityTokenReceived : EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs&gt; " Usage="member this.SessionSecurityTokenReceived : System.EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07c73-222">当会话安全标记已从 cookie 读取时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-222">Occurs when a session security token has been read from a cookie.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-223"><xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived>内引发事件<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>方法之后会话令牌 (<xref:System.IdentityModel.Tokens.SessionSecurityToken>) 已成功从会话 cookie 读取。</span><span class="sxs-lookup"><span data-stu-id="07c73-223">The <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived> event is raised from within the <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> method after a session token (<xref:System.IdentityModel.Tokens.SessionSecurityToken>) has been successfully read from the session cookie.</span></span>  
  
 <span data-ttu-id="07c73-224">此事件可用于修改的会话令牌的属性，然后它会进一步沿管道传递并用于发出请求 （用户） 的实体进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="07c73-224">You can use this event to modify properties of the session token before it is passed further along the pipeline and is used to authenticate the entity making the request (user).</span></span> <span data-ttu-id="07c73-225">一种最常见的方案需要修改会话过期时间 (可通过访问<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A?displayProperty=nameWithType>属性) 重写中通过配置设置的会话到期时间`lifetime`属性[ &lt;sessionTokenRequirement&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/sessiontokenrequirement.md)元素。</span><span class="sxs-lookup"><span data-stu-id="07c73-225">One of the most common scenarios involves modifying the session expiration time (accessible through the <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A?displayProperty=nameWithType> property) to override the session expiration time set in configuration through the `lifetime` attribute of the [&lt;sessionTokenRequirement&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/sessiontokenrequirement.md) element.</span></span> <span data-ttu-id="07c73-226">通过修改此属性对于每个请求，你可以实现滑动的会话;也就是说，在其生存期将扩展每个会话的时间的用户访问站点。</span><span class="sxs-lookup"><span data-stu-id="07c73-226">By modifying this property on each request, you can implement a sliding session; that is, a session in which the lifetime is extended each time the user accesses the site.</span></span>  
  
 <span data-ttu-id="07c73-227">在事件处理程序，您可以访问通过令牌<xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.SessionToken%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="07c73-227">In an event handler, you can access the token through the <xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.SessionToken%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="07c73-228">令牌之后，你可以确保将它写入返回到 cookie 通过设置<xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.ReissueCookie%2A?displayProperty=nameWithType>到`true`。</span><span class="sxs-lookup"><span data-stu-id="07c73-228">After modifying the token, you can ensure that it is written back to the cookie by setting the <xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.ReissueCookie%2A?displayProperty=nameWithType> to `true`.</span></span> <span data-ttu-id="07c73-229">最后，<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived>事件是否可取消的事件，而可以设置<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性<xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs>中止进一步处理的请求。</span><span class="sxs-lookup"><span data-stu-id="07c73-229">Finally, the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived> event is a cancelable event, and you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs> to abort further processing of the request.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07c73-230">下面的代码演示的处理程序<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived>实现 ASP.NET web 应用程序的 global.asax.cs 文件中的事件。</span><span class="sxs-lookup"><span data-stu-id="07c73-230">The following code shows a handler for the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived> event implemented in the global.asax.cs file of an ASP.NET web application.</span></span> <span data-ttu-id="07c73-231">你还必须向事件添加处理程序。</span><span class="sxs-lookup"><span data-stu-id="07c73-231">You must also add the handler to the event.</span></span> <span data-ttu-id="07c73-232">更完整的示例所示<xref:System.IdentityModel.Services.SessionAuthenticationModule>概述主题。</span><span class="sxs-lookup"><span data-stu-id="07c73-232">A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.</span></span>  
  
 [!code-csharp[WifSAM#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifsam/cs/webapplication1/global.asax.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPrincipalFromSessionToken">
      <MemberSignature Language="C#" Value="protected virtual void SetPrincipalFromSessionToken (System.IdentityModel.Tokens.SessionSecurityToken sessionSecurityToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetPrincipalFromSessionToken(class System.IdentityModel.Tokens.SessionSecurityToken sessionSecurityToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetPrincipalFromSessionToken(System::IdentityModel::Tokens::SessionSecurityToken ^ sessionSecurityToken);" />
      <MemberSignature Language="F#" Value="abstract member SetPrincipalFromSessionToken : System.IdentityModel.Tokens.SessionSecurityToken -&gt; unit&#xA;override this.SetPrincipalFromSessionToken : System.IdentityModel.Tokens.SessionSecurityToken -&gt; unit" Usage="sessionAuthenticationModule.SetPrincipalFromSessionToken sessionSecurityToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionSecurityToken" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
      </Parameters>
      <Docs>
        <param name="sessionSecurityToken">
          <span data-ttu-id="07c73-233">从其开始设置主体的会话标识。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-233">The session token from which to set the principal.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-234">将 <see cref="T:System.Web.HttpContext" /> 和 <see cref="T:System.Threading.Thread" /> 的主体设置到包含在指定会话标记的主体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-234">Sets the principal on the <see cref="T:System.Web.HttpContext" /> and <see cref="T:System.Threading.Thread" /> to the principal that is contained in the specified session token.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-235">调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken%2A>方法和集<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>属性和<xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType>属性<xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>使用返回的标识。</span><span class="sxs-lookup"><span data-stu-id="07c73-235">Invokes the <xref:System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken%2A> method and sets the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property and the <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> property on <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType> using the identities that are returned.</span></span>  
  
 <span data-ttu-id="07c73-236">此方法调用从<xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="07c73-236">This method is called from the <xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignedOut">
      <MemberSignature Language="C#" Value="public event EventHandler SignedOut;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SignedOut" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.SessionAuthenticationModule.SignedOut" />
      <MemberSignature Language="VB.NET" Value="Public Event SignedOut As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SignedOut;" />
      <MemberSignature Language="F#" Value="member this.SignedOut : EventHandler " Usage="member this.SignedOut : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07c73-237">在用户注销之后发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-237">Occurs after the user is signed out.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-238">从引发<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法紧后面<xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="07c73-238">Raised from the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> method just after the <xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A> method is invoked.</span></span>  
  
 <span data-ttu-id="07c73-239">此事件不能保证调用为每个会话。</span><span class="sxs-lookup"><span data-stu-id="07c73-239">This event is not guaranteed to be called for every session.</span></span> <span data-ttu-id="07c73-240">例如，可能在客户端删除 cookie 在这种情况下，引发此事件将永远不会因为没有删除该会话的服务器端事件。</span><span class="sxs-lookup"><span data-stu-id="07c73-240">For example, the cookies may be deleted at the client-side, in which case, this event would never be raised because there is no server-side event for deleting the session.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07c73-241">下面的代码演示的处理程序<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignedOut>实现 ASP.NET web 应用程序的 global.asax.cs 文件中的事件。</span><span class="sxs-lookup"><span data-stu-id="07c73-241">The following code shows a handler for the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignedOut> event implemented in the global.asax.cs file of an ASP.NET web application.</span></span> <span data-ttu-id="07c73-242">你还必须向事件添加处理程序。</span><span class="sxs-lookup"><span data-stu-id="07c73-242">You must also add the handler to the event.</span></span> <span data-ttu-id="07c73-243">更完整的示例所示<xref:System.IdentityModel.Services.SessionAuthenticationModule>概述主题。</span><span class="sxs-lookup"><span data-stu-id="07c73-243">A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.</span></span>  
  
 [!code-csharp[WifSAM#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifsam/cs/webapplication1/global.asax.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningOut">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.SigningOutEventArgs&gt; SigningOut;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.SigningOutEventArgs&gt; SigningOut" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.SessionAuthenticationModule.SigningOut" />
      <MemberSignature Language="VB.NET" Value="Public Event SigningOut As EventHandler(Of SigningOutEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IdentityModel::Services::SigningOutEventArgs ^&gt; ^ SigningOut;" />
      <MemberSignature Language="F#" Value="member this.SigningOut : EventHandler&lt;System.IdentityModel.Services.SigningOutEventArgs&gt; " Usage="member this.SigningOut : System.EventHandler&lt;System.IdentityModel.Services.SigningOutEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.SigningOutEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07c73-244">在删除登录会话之前发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-244">Occurs before deleting the sign-in session.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-245">从引发<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法之前<xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="07c73-245">Raised from the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> method just before the <xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A> method is invoked.</span></span>  
  
 <span data-ttu-id="07c73-246">此事件不能保证调用为每个会话。</span><span class="sxs-lookup"><span data-stu-id="07c73-246">This event is not guaranteed to be called for every session.</span></span> <span data-ttu-id="07c73-247">例如，可能在客户端删除 cookie 在这种情况下，引发此事件将永远不会因为没有删除该会话的服务器端事件。</span><span class="sxs-lookup"><span data-stu-id="07c73-247">For example, the cookies may be deleted at the client-side, in which case, this event would never be raised because there is no server-side event for deleting the session.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07c73-248">下面的代码演示的处理程序<xref:System.IdentityModel.Services.SessionAuthenticationModule.SigningOut>实现 ASP.NET web 应用程序的 global.asax.cs 文件中的事件。</span><span class="sxs-lookup"><span data-stu-id="07c73-248">The following code shows a handler for the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SigningOut> event implemented in the global.asax.cs file of an ASP.NET web application.</span></span> <span data-ttu-id="07c73-249">你还必须向事件添加处理程序。</span><span class="sxs-lookup"><span data-stu-id="07c73-249">You must also add the handler to the event.</span></span> <span data-ttu-id="07c73-250">更完整的示例所示<xref:System.IdentityModel.Services.SessionAuthenticationModule>概述主题。</span><span class="sxs-lookup"><span data-stu-id="07c73-250">A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.</span></span>  
  
 [!code-csharp[WifSAM#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifsam/cs/webapplication1/global.asax.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignOut">
      <MemberSignature Language="C#" Value="public virtual void SignOut ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SignOut() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.SignOut" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SignOut ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SignOut();" />
      <MemberSignature Language="F#" Value="abstract member SignOut : unit -&gt; unit&#xA;override this.SignOut : unit -&gt; unit" Usage="sessionAuthenticationModule.SignOut " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07c73-251">注销当前用户并引发相应事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-251">Signs the current user out and raises the associated events.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-252">调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut%2A>， <xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A>，和<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut%2A>方法执行注销。如果发生异常，<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError%2A>调用方法来引发<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError>事件。</span><span class="sxs-lookup"><span data-stu-id="07c73-252">Invokes the <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut%2A>, <xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A>, and <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut%2A> methods to perform sign-out. If an exception occurs, the <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError%2A> method is invoked to raise the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError> event.</span></span> <span data-ttu-id="07c73-253">你可以设置<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性<xref:System.IdentityModel.Services.ErrorEventArgs>对象传递到此事件来取消注销并阻止未传播至客户端异常事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="07c73-253">You can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.IdentityModel.Services.ErrorEventArgs> object passed into the event handler for this event to cancel the sign-out and prevent the exception from being propagated to the client.</span></span>  
  
 <span data-ttu-id="07c73-254">你可以重写此方法可添加特定于应用程序的行为。</span><span class="sxs-lookup"><span data-stu-id="07c73-254">You can override this method to add application-specific behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07c73-255">下面的代码演示调用的代码<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>从 ASP.NET web 应用程序中的 SignOut.aspx 页 (SignOut.aspx.cs) 的方法。</span><span class="sxs-lookup"><span data-stu-id="07c73-255">The following code shows code for invoking the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> method from a SignOut.aspx page (SignOut.aspx.cs) in an ASP.NET web application.</span></span> <span data-ttu-id="07c73-256">更完整的示例所示<xref:System.IdentityModel.Services.SessionAuthenticationModule>概述主题。</span><span class="sxs-lookup"><span data-stu-id="07c73-256">A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.</span></span>  
  
 [!code-csharp[WifSAM#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifsam/cs/webapplication1/global.asax.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignOutError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.ErrorEventArgs&gt; SignOutError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.ErrorEventArgs&gt; SignOutError" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError" />
      <MemberSignature Language="VB.NET" Value="Public Event SignOutError As EventHandler(Of ErrorEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IdentityModel::Services::ErrorEventArgs ^&gt; ^ SignOutError;" />
      <MemberSignature Language="F#" Value="member this.SignOutError : EventHandler&lt;System.IdentityModel.Services.ErrorEventArgs&gt; " Usage="member this.SignOutError : System.EventHandler&lt;System.IdentityModel.Services.ErrorEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.ErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07c73-257">当在注销期间有错误时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-257">Occurs when there is an error during sign-out.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-258">从引发<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法时注销过程中发生错误。</span><span class="sxs-lookup"><span data-stu-id="07c73-258">Raised from the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> method when an error occurs during sign-out.</span></span>  
  
 <span data-ttu-id="07c73-259">在事件处理程序，你可以在事件导致从引发的异常<xref:System.IdentityModel.Services.ErrorEventArgs.Exception%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="07c73-259">In an event handler, you can get the exception that resulted in the event being raised from the <xref:System.IdentityModel.Services.ErrorEventArgs.Exception%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="07c73-260">你可以取消进一步处理的异常，这会具有的不通过设置传播到客户端，异常结果<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性<xref:System.IdentityModel.Services.ErrorEventArgs>到`true`。</span><span class="sxs-lookup"><span data-stu-id="07c73-260">You can cancel further processing of the exception, which has the result of not propagating the exception to the client, by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.IdentityModel.Services.ErrorEventArgs> to `true`.</span></span>  
  
 <span data-ttu-id="07c73-261">此事件不能保证调用为每个会话。</span><span class="sxs-lookup"><span data-stu-id="07c73-261">This event is not guaranteed to be called for every session.</span></span> <span data-ttu-id="07c73-262">例如，可能在客户端删除 cookie 在这种情况下，引发此事件将永远不会因为没有删除该会话的服务器端事件。</span><span class="sxs-lookup"><span data-stu-id="07c73-262">For example, the cookies may be deleted at the client-side, in which case, this event would never be raised because there is no server-side event for deleting the session.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07c73-263">下面的代码演示的处理程序<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError>实现 ASP.NET web 应用程序的 global.asax.cs 文件中的事件。</span><span class="sxs-lookup"><span data-stu-id="07c73-263">The following code shows a handler for the <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError> event implemented in the global.asax.cs file of an ASP.NET web application.</span></span> <span data-ttu-id="07c73-264">你还必须向事件添加处理程序。</span><span class="sxs-lookup"><span data-stu-id="07c73-264">You must also add the handler to the event.</span></span> <span data-ttu-id="07c73-265">更完整的示例所示<xref:System.IdentityModel.Services.SessionAuthenticationModule>概述主题。</span><span class="sxs-lookup"><span data-stu-id="07c73-265">A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.</span></span>  
  
 [!code-csharp[WifSAM#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifsam/cs/webapplication1/global.asax.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadSessionTokenFromCookie">
      <MemberSignature Language="C#" Value="public bool TryReadSessionTokenFromCookie (out System.IdentityModel.Tokens.SessionSecurityToken sessionToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadSessionTokenFromCookie([out] class System.IdentityModel.Tokens.SessionSecurityToken&amp; sessionToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie(System.IdentityModel.Tokens.SessionSecurityToken@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadSessionTokenFromCookie (ByRef sessionToken As SessionSecurityToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReadSessionTokenFromCookie([Runtime::InteropServices::Out] System::IdentityModel::Tokens::SessionSecurityToken ^ % sessionToken);" />
      <MemberSignature Language="F#" Value="member this.TryReadSessionTokenFromCookie :  -&gt; bool" Usage="sessionAuthenticationModule.TryReadSessionTokenFromCookie sessionToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionToken" Type="System.IdentityModel.Tokens.SessionSecurityToken&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="sessionToken">
          <span data-ttu-id="07c73-266">当此方法返回时，包含从会话 Cookie 读取的会话安全标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-266">When this method returns, contains the session security token that was read from the session cookie.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-267">尝试从一个会话 cookie 中读取一个 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />，并返回指示此会话 cookie 是否成功读取的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-267">Attempts to read a <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> from a session cookie and returns a value that indicates whether the session cookie was successfully read.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07c73-268">如果从请求中成功读取了会话 cookie，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-268">
              <see langword="true" /> if the session cookie was successfully read from the request; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-269">通过使用的 cookie 处理程序配置中读取 cookie<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>属性并调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie%2A>方法从 cookie 读取令牌。</span><span class="sxs-lookup"><span data-stu-id="07c73-269">Reads the cookie by using the cookie handler that is configured in the <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> property and then invokes the <xref:System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie%2A> method to read the token from the cookie.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateSessionToken">
      <MemberSignature Language="C#" Value="protected System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt; ValidateSessionToken (System.IdentityModel.Tokens.SessionSecurityToken sessionSecurityToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.Claims.ClaimsIdentity&gt; ValidateSessionToken(class System.IdentityModel.Tokens.SessionSecurityToken sessionSecurityToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Security::Claims::ClaimsIdentity ^&gt; ^ ValidateSessionToken(System::IdentityModel::Tokens::SessionSecurityToken ^ sessionSecurityToken);" />
      <MemberSignature Language="F#" Value="member this.ValidateSessionToken : System.IdentityModel.Tokens.SessionSecurityToken -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;" Usage="sessionAuthenticationModule.ValidateSessionToken sessionSecurityToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionSecurityToken" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
      </Parameters>
      <Docs>
        <param name="sessionSecurityToken">
          <span data-ttu-id="07c73-270">要验证的标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-270">The token to validate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-271">验证指定的 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 并返回其标识。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-271">Validates the specified <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> and returns its identities.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07c73-272">包含在标记中的标识的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-272">The collection of identities that are contained in the token.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-273">此方法调用从<xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="07c73-273">This method is called from the <xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A> method.</span></span> <span data-ttu-id="07c73-274">它将调用<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A?displayProperty=nameWithType>的配置的会话令牌处理程序以验证此令牌并提取其标识的方法。</span><span class="sxs-lookup"><span data-stu-id="07c73-274">It invokes the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A?displayProperty=nameWithType> method of the configured session token handler to validate the token and extract its identities.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IdentityModel.Services.FederatedSessionExpiredException">
          <span data-ttu-id="07c73-275">标记已过期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-275">The token has expired.</span>
          </span>
        </exception>
        <exception cref="T:System.IdentityModel.Services.FederationException">
          <span data-ttu-id="07c73-276">标记的开始时间尚未有效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-276">The token start time is not yet valid.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="07c73-277">没有已配置的无效会话标记处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-277">There is not a valid session token handler configured.</span>
          </span>
          <span data-ttu-id="07c73-278">（在 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 属性中未配置  <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" />。）</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-278">(There is no <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> configured in the <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" /> property.)</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSessionTokenToCookie">
      <MemberSignature Language="C#" Value="public void WriteSessionTokenToCookie (System.IdentityModel.Tokens.SessionSecurityToken sessionToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteSessionTokenToCookie(class System.IdentityModel.Tokens.SessionSecurityToken sessionToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie(System.IdentityModel.Tokens.SessionSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteSessionTokenToCookie (sessionToken As SessionSecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteSessionTokenToCookie(System::IdentityModel::Tokens::SessionSecurityToken ^ sessionToken);" />
      <MemberSignature Language="F#" Value="member this.WriteSessionTokenToCookie : System.IdentityModel.Tokens.SessionSecurityToken -&gt; unit" Usage="sessionAuthenticationModule.WriteSessionTokenToCookie sessionToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionToken" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
      </Parameters>
      <Docs>
        <param name="sessionToken">
          <span data-ttu-id="07c73-279">要写入的会话安全令牌。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-279">The session security token to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07c73-280">将指定的 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 写入会话 cookie。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-280">Writes the specified <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> to a session cookie.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07c73-281">通过使用配置中的 cookie 处理写入 cookie<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="07c73-281">Writes the cookie by using the cookie handler that is configured in the <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07c73-282">
            <paramref name="sessionToken" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-282">
              <paramref name="sessionToken" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="07c73-283">没有已配置的无效会话标记处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-283">There is not a valid session token handler configured.</span>
          </span>
          <span data-ttu-id="07c73-284">（在 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 属性中未配置  <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" />。）</span>
          <span class="sxs-lookup">
            <span data-stu-id="07c73-284">(There is no <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> configured in the <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" /> property.)</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>