<Type Name="ClaimsPrincipalPermission" FullName="System.IdentityModel.Services.ClaimsPrincipalPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="97a920f61b9b131d328d66e3be820d13c431fae9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36558490" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.ISecurityEncodable, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ClaimsPrincipalPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClaimsPrincipalPermission&#xA;Implements IPermission, ISecurityEncodable, IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsPrincipalPermission sealed : System::Security::IPermission, System::Security::ISecurityEncodable, System::Security::Permissions::IUnrestrictedPermission" />
  <TypeSignature Language="F#" Value="type ClaimsPrincipalPermission = class&#xA;    interface IPermission&#xA;    interface ISecurityEncodable&#xA;    interface IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示使用 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> 实施的权限，以确定对资源的访问是否应授予活动原则。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>类提供的功能，以通过使用执行命令性的访问检查<xref:System.Security.Claims.ClaimsAuthorizationManager>配置的应用程序。 通过调用<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法或静态<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>方法，你可以提供对从执行路径中的资源的你的代码根据为声明身份验证管理器定义的授权策略的保护。 可以执行使用声明性的访问检查<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>类。  
  
> [!IMPORTANT]
>  <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>类使用由配置的声明授权管理器<xref:System.IdentityModel.Configuration.IdentityConfiguration>，设置下<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType>属性。 这是在所有情况下，即使在其中未使用 WS 联合身份验证; 的方案中 true例如，活动 (WCF) Web 应用程序和控制台应用程序。 你可以指定的声明授权管理器配置中或以编程方式。 若要在配置文件中指定的声明授权管理器，设置[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)元素下的[ &lt;identityConfiguration&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)元素，并确保，通过引用此标识配置[ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md)由运行时加载的元素 （例如，通过设置`identityConfigurationName`属性)。 若要以编程方式设置声明授权管理器，提供的处理程序<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType>事件。  
  
 在一个级别上提供的功能<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>类似于基于角色的访问权限检查 (RBAC) 通过提供<xref:System.Security.Permissions.PrincipalPermission>类; 但是，<xref:System.Security.Claims.ClaimsAuthorizationManager>类执行检查基于由活动主体提供的声明。 这使不是可通过纯 RBAC，其中多的权限通常收集在单个角色的更多粒度。 因为可以在代码中的资源特定的操作要求的权限和后端策略可以用于配置哪些声明，基于声明的授权可能是，更重要的是，实现的业务逻辑和授权策略的更好地分离提供实体必须具有为了满足此要求。 如 RBAC，<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>与派生自的类实现的代码访问安全性不同，即执行基于用户的访问检查，<xref:System.Security.CodeAccessPermission>类并使用堆栈审核以确保代码的所有调用方已被授予权限， <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>执行仅在当前主体上的其检查。  
  
 静态<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>方法检查指定操作对指定资源的访问。 资源和操作都是字符串，并且通常是 Uri。 也可以初始化的实例<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>与操作和资源以及调用<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法。 构造函数仅接受单个资源和操作，尽管<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>对象可以通过组合<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>和<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>方法。 通过使用这些方法创建的权限可能包含多个资源操作对。  
  
 这两种方法通过调用确定访问<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>方法使用的配置的声明授权管理器<xref:System.Security.Claims.AuthorizationContext>组成活动主体 (<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>)，资源，以及的操作。 它们将引发<xref:System.Security.SecurityException>如果当前主体无权执行操作，执行资源; 否则，执行过程。  
  
 情况下<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>包含多个资源操作对，<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>的权限中包含的资源操作对每个调用方法。  调用<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>成功执行活动的主体必须授权所有权限中包含的资源操作对。  
  
   
  
## Examples  
 下面的示例演示如何通过使用保护资源<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法，<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>方法，或<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>声明。 每种情况下，配置<xref:System.Security.Claims.ClaimsAuthorizationManager>调用以评估对指定的资源和操作当前主体。 如果当前主体未被授权对指定的资源，指定操作<xref:System.Security.SecurityException>则引发该异常; 否则为执行将继续。  
  
 [!code-csharp[WifCppWithCam#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#1)]  
  
 下面的 XML 演示使用自定义声明授权所需的最低配置管理器和<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>类。 你必须在最低限度上，同时声明`system.identityModel`和`system.identityModel.services`中`<configSection>`元素，然后指定在你授权管理器[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)元素下的默认标识配置。 这将确保从默认联合身份验证配置引用了授权管理器。 或者，您可以指定授权管理器中在其下的指定的标识配置的名称`identityConfigurationName`属性[ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md)元素。  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  <configSections>  
    <!-- WIF configuration sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    <section name="system.identityModel.services" type="System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
  </configSections>  
  
  <startup>  
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />  
  </startup>  
  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type ="MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager"/>  
    </identityConfiguration>  
  </system.identityModel>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute" />
    <altmember cref="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration" />
    <altmember cref="T:System.Security.Claims.ClaimsAuthorizationManager" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsPrincipalPermission (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsPrincipalPermission(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Services.ClaimsPrincipalPermission : string * string -&gt; System.IdentityModel.Services.ClaimsPrincipalPermission" Usage="new System.IdentityModel.Services.ClaimsPrincipalPermission (resource, action)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">主体应该被授权的资源。</param>
        <param name="action">应为其授权当前主体的操作。</param>
        <summary>创建 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>对象初始化使用指定的资源操作对。 你可以调用<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法来执行访问检查。  
  
 构造函数仅接受单个资源和操作，尽管<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>对象可以通过组合<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>和<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>方法。 通过这些方法创建的权限可能包含多个资源操作对。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resource" /> 为 <see langword="null" /> 或空字符串。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public static void CheckAccess (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckAccess(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CheckAccess (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CheckAccess(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="static member CheckAccess : string * string -&gt; unit" Usage="System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess (resource, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">主体应该被授权的资源。</param>
        <param name="action">应为其授权当前主体的操作。</param>
        <summary>检查是否授权当前主体在指定资源上执行指定操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须指定操作对指定资源授权主体或<xref:System.Security.SecurityException>引发异常。  
  
 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>的配置的声明授权管理器的方法调用与<xref:System.Security.Claims.AuthorizationContext>组成活动主体 (<xref:System.Threading.Thread.CurrentPrincipal%2A>)，资源，以及的操作。  
  
   
  
## Examples  
 下面的示例演示如何通过使用保护资源<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>方法。 配置的声明授权管理器调用来评估当前主体针对指定的资源和操作。 如果当前主体未被授权对指定的资源，指定操作<xref:System.Security.SecurityException>则引发该异常; 否则为执行将继续。  
  
 [!code-csharp[WifCppWithCam#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当前主体无法从 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> 进行分配。  - 或 -  没有配置的 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />。</exception>
        <exception cref="T:System.Security.SecurityException">授权检查已失败。</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; System.Security.IPermission&#xA;override this.Copy : unit -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回当前 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 实例的副本。</summary>
        <returns>一个从当前实例中复制的 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit&#xA;override this.Demand : unit -&gt; unit" Usage="claimsPrincipalPermission.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>检查当前主体是否获得与当前实例关联的资源操作对的授权。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当前的主体必须授权的与此实例关联的资源操作对所有或<xref:System.Security.SecurityException>引发异常。  
  
 构造函数仅接受单个资源和操作，尽管<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>对象可以通过组合<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>和<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>方法。 通过这些方法创建的权限可能包含多个资源操作对。  
  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法调用<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>方法使用的配置的声明授权管理器<xref:System.Security.Claims.AuthorizationContext>组成活动主体 (<xref:System.Threading.Thread.CurrentPrincipal%2A>) 的资源，以及为每个包含的资源操作对操作在权限。 有关<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>成功活动主体必须授权所有权限中包含的资源操作对。  
  
   
  
## Examples  
 下面的示例演示如何通过使用保护资源<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法。 配置的声明授权管理器调用来评估当前主体针对指定的资源和操作。 如果当前主体未被授权对指定的资源，指定操作<xref:System.Security.SecurityException>则引发该异常; 否则为执行将继续。  
  
 [!code-csharp[WifCppWithCam#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当前主体无法从 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> 进行分配。  - 或 -  没有配置的 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />。</exception>
        <exception cref="T:System.Security.SecurityException">授权检查已失败。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public void FromXml (System.Security.SecurityElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXml (element As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FromXml(System::Security::SecurityElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member FromXml : System.Security.SecurityElement -&gt; unit&#xA;override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="claimsPrincipalPermission.FromXml element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="element">用于重新构造权限的 XML 编码。</param>
        <summary>通过指定的 XML 内码重新构建当前权限及其状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重新构造通过调用创建的 XML 编码的权限<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">该编码中包含未识别的元素或特性或不正确形成的 XML。</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">要与当前权限相交的该权限。 必须为 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 的实例。</param>
        <summary>返回一个权限，该权限是当前权限与指定权限的交集。</summary>
        <returns>一个新的 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />，表示当前权限与指定权限的交集；或为 <see langword="null" />（如果 <paramref name="target" /> 为 <paramref name="null" />，或者不是 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 的一个实例）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的权限具有仅在当前权限和指定权限中存在的资源操作对。 资源操作对中只有一个或多个权限存在不包括在内。 有关<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>若要在新的权限上成功运行，当前主体仅需要能获得所共有当前权限和指定的权限的资源操作对的授权。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : System.Security.IPermission -&gt; bool&#xA;override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="claimsPrincipalPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">对其子集关系测试的权限。 必须为 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 的实例。</param>
        <summary>返回一个值，该值指示当前权限是否为指定权限的一个子集。</summary>
        <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果所有资源操作包含在当前的权限也会呈现在指定的权限，则当前的权限是指定权限的子集。 如果`target`是`null`或不是实例的<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A>返回`false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberSignature Language="F#" Value="abstract member IsUnrestricted : unit -&gt; bool&#xA;override this.IsUnrestricted : unit -&gt; bool" Usage="claimsPrincipalPermission.IsUnrestricted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个值，指示权限是否不受限。</summary>
        <returns>如果权限不受限，则为 <see langword="true" />；否则为 <see langword="false" />。 始终返回 <see langword="true" />，指示权限不受限。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="abstract member ToXml : unit -&gt; System.Security.SecurityElement&#xA;override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="claimsPrincipalPermission.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回当前权限及其状态的 XML 编码形式。</summary>
        <returns>当前权限及其状态的 XML 编码形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 主体可以重新构造从其 XML 编码格式通过调用<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Union : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Union target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">将与当前权限合并的该权限。 该对象的类型必须是 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。</param>
        <summary>返回一个新权限，该权限是当前权限与指定权限的并集。 具有当前实例和目标实例中存在的所有资源操作对的 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 对象。</summary>
        <returns>一个新的 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />，表示当前权限与指定权限的联合；或为 <see langword="null" />（如果 <paramref name="target" /> 为 <paramref name="null" />，或者不是 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 的一个实例）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回权限都具有的所有资源操作对存在于当前权限和所有资源操作对的显示指定的权限。 有关<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>若要在新的权限上成功运行，当前主体必须为所有存在于当前权限的资源操作对和的存在在指定的权限的资源操作对所有授权。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>