<Type Name="IClientChannelSinkProvider" FullName="System.Runtime.Remoting.Channels.IClientChannelSinkProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3bd7a2f648fe377dd92ff9b68dd1ddac86741156" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30485861" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IClientChannelSinkProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IClientChannelSinkProvider" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IClientChannelSinkProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IClientChannelSinkProvider" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为远程处理消息从其流过的客户端信道创建客户端信道接收器。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 信道接收器已连接到客户端通道通过实现的<xref:System.Runtime.Remoting.Channels.IClientChannelSinkProvider>接口。 所有远程处理客户端通道提供采用构造函数<xref:System.Runtime.Remoting.Channels.IClientChannelSinkProvider>作为参数。  
  
 信道接收器提供程序存储在一个链，并且用户负责将链接所有通道接收器提供程序在一起传递到通道构造函数的外部一个之前。 <xref:System.Runtime.Remoting.Channels.IClientChannelSinkProvider> 提供一个名为属性<xref:System.Runtime.Remoting.Channels.IServerChannelSinkProvider.Next%2A>为此目的。  
  
 当在配置文件中指定多个通道接收器提供程序时，远程处理基础结构将这些链接在一起的配置文件中找到它们的顺序。 将创建信道接收器提供程序，在创建通道时会<xref:System.Runtime.Remoting.RemotingConfiguration.Configure%2A?displayProperty=nameWithType>调用。  
  
   
  
## Examples  
 下面的代码示例说明了此接口的实现。  
  
 [!code-cpp[Remoting_Sinks#30](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Sinks/CPP/clientsink.cpp#30)]
 [!code-csharp[Remoting_Sinks#30](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Sinks/CS/clientsink.cs#30)]  
  
 请参阅<xref:System.Runtime.Remoting.Channels.IClientChannelSink>接口对应的客户端接收器实现的一个示例的文档。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateSink">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Channels.IClientChannelSink CreateSink (System.Runtime.Remoting.Channels.IChannelSender channel, string url, object remoteChannelData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Channels.IClientChannelSink CreateSink(class System.Runtime.Remoting.Channels.IChannelSender channel, string url, object remoteChannelData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.IClientChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelSender,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSink (channel As IChannelSender, url As String, remoteChannelData As Object) As IClientChannelSink" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::Channels::IClientChannelSink ^ CreateSink(System::Runtime::Remoting::Channels::IChannelSender ^ channel, System::String ^ url, System::Object ^ remoteChannelData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Channels.IClientChannelSink</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="channel" Type="System.Runtime.Remoting.Channels.IChannelSender" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="remoteChannelData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="channel">信道，为其构造当前接收器链。</param>
        <param name="url">要连接到的对象的 URL。 如果连接完全基于 <c>remoteChannelData</c> 参数中包含的信息，则该参数可以为 <see langword="null" />。</param>
        <param name="remoteChannelData">描述远程服务器上的信道的信道数据对象。</param>
        <summary>创建接收器链。</summary>
        <returns>新生成的信道接收器链中的第一个接收器，或 <see langword="null" />（指示此提供程序将不会或不能为此终结点提供连接）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Runtime.Remoting.Channels.IClientChannelSinkProvider.CreateSink%2A>方法被调用时，它会创建其自己的通道接收器，转发<xref:System.Runtime.Remoting.Channels.IClientChannelSinkProvider.CreateSink%2A>调用链 （如果有） 中的下一步接收器提供程序，并确保下一个接收器和当前链接在一起。  
  
   
  
## Examples  
 下面的代码示例说明了此方法的实现。  
  
 [!code-cpp[Remoting_Sinks#33](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Sinks/CPP/clientsink.cpp#33)]
 [!code-csharp[Remoting_Sinks#33](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Sinks/CS/clientsink.cs#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">直接调用方没有基础结构权限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于操作基础结构代码。 要求值： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />;权限值： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Channels.IClientChannelSinkProvider Next { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Remoting.Channels.IClientChannelSinkProvider Next" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.IClientChannelSinkProvider.Next" />
      <MemberSignature Language="VB.NET" Value="Public Property Next As IClientChannelSinkProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Remoting::Channels::IClientChannelSinkProvider ^ Next { System::Runtime::Remoting::Channels::IClientChannelSinkProvider ^ get(); void set(System::Runtime::Remoting::Channels::IClientChannelSinkProvider ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Channels.IClientChannelSinkProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置信道接收器提供程序链中的下一个接收器提供程序。</summary>
        <value>信道接收器提供程序链中的下一个接收器提供程序。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例说明了此属性的实现。  
  
 [!code-cpp[Remoting_Sinks#32](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Sinks/CPP/clientsink.cpp#32)]
 [!code-csharp[Remoting_Sinks#32](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Sinks/CS/clientsink.cs#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">直接调用方没有基础结构权限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于操作基础结构代码。 要求值： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />;权限值： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>