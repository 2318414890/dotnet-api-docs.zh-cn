<Type Name="LinqDataSourceSelectEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceSelectEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5b57cd8718bab2771416b1d4f805a0d2822a27ec" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30599151" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceSelectEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceSelectEventArgs extends System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceSelectEventArgs&#xA;Inherits CancelEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceSelectEventArgs : System::ComponentModel::CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="E:System.Web.UI.WebControls.LinqDataSource.Selecting" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>对象传递给事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件<xref:System.Web.UI.WebControls.LinqDataSource>控件。 你使用<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>对象来手动指定会返回哪些数据，并排序和分页时它返回的数据的方式。 你可以以编程方式添加或删除参数 GroupBy、 OrderBy、 OrderGroupsBy、 选择，以及在何处使用子句<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.GroupByParameters%2A>， <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderByParameters%2A>， <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderGroupsByParameters%2A>， <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.SelectParameters%2A>，和<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.WhereParameters%2A>集合。  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>属性使您可以更改用于此查询的数据对象。 如果你将对象分配给<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>属性，该对象将用于查询而不是中指定的对象<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性<xref:System.Web.UI.WebControls.LinqDataSource>控件。  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Arguments%2A>属性使您可以自定义如何返回的数据的排序和分页。 数据绑定控件将排序和分页属性通过传递<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Arguments%2A>属性。 如果你需要手动处理排序或分页，设置<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>属性或<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>属性<xref:System.Web.UI.WebControls.LinqDataSource>控制转移到`false`。 然后你可以执行自定义的查询进行排序或处理程序中的分页<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。  
  
 如果<xref:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount%2A>属性设置为`true`，您必须返回的值<xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何设置<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>属性设置为通过使用语言集成查询 (LINQ) 进行搜索的结果。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default2.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/default2.aspx.vb#2)]  
  
 下面的示例演示如何设置<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>到网页中定义的字符串值数组的属性。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.LinqDataSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceSelectEventArgs (System.Web.UI.DataSourceSelectArguments arguments, System.Collections.Generic.IDictionary&lt;string,object&gt; whereParameters, System.Collections.Specialized.IOrderedDictionary orderByParameters, System.Collections.Generic.IDictionary&lt;string,object&gt; groupByParameters, System.Collections.Generic.IDictionary&lt;string,object&gt; orderGroupsByParameters, System.Collections.Generic.IDictionary&lt;string,object&gt; selectParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.DataSourceSelectArguments arguments, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; whereParameters, class System.Collections.Specialized.IOrderedDictionary orderByParameters, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; groupByParameters, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; orderGroupsByParameters, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; selectParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.#ctor(System.Web.UI.DataSourceSelectArguments,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Specialized.IOrderedDictionary,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (arguments As DataSourceSelectArguments, whereParameters As IDictionary(Of String, Object), orderByParameters As IOrderedDictionary, groupByParameters As IDictionary(Of String, Object), orderGroupsByParameters As IDictionary(Of String, Object), selectParameters As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceSelectEventArgs(System::Web::UI::DataSourceSelectArguments ^ arguments, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ whereParameters, System::Collections::Specialized::IOrderedDictionary ^ orderByParameters, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ groupByParameters, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ orderGroupsByParameters, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ selectParameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
        <Parameter Name="whereParameters" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="orderByParameters" Type="System.Collections.Specialized.IOrderedDictionary" />
        <Parameter Name="groupByParameters" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="orderGroupsByParameters" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="selectParameters" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="arguments">从数据绑定控件传递过来的值，用于确定数据的分页和排序方式。 有关更多信息，请参见 <see cref="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Arguments" /> 属性。</param>
        <param name="whereParameters">用于创建 Where 子句的参数集合。 有关更多信息，请参见 <see cref="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.WhereParameters" /> 属性。</param>
        <param name="orderByParameters">用于创建 Order By 子句的参数集合。 有关更多信息，请参见 <see cref="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderByParameters" /> 属性。</param>
        <param name="groupByParameters">用于创建 Group By 子句的参数集合。 有关更多信息，请参见 <see cref="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.GroupByParameters" /> 属性。</param>
        <param name="orderGroupsByParameters">参数的集合，用来创建用于对分组数据进行排序的子句。 有关更多信息，请参见 <see cref="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderGroupsByParameters" /> 属性。</param>
        <param name="selectParameters">用于创建 Select 子句的参数集合。 有关更多信息，请参见 <see cref="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.SelectParameters" /> 属性。</param>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataSourceSelectArguments Arguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.DataSourceSelectArguments Arguments" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Arguments As DataSourceSelectArguments" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataSourceSelectArguments ^ Arguments { System::Web::UI::DataSourceSelectArguments ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceSelectArguments</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于确定数据返回方式的值。</summary>
        <value>包含用于确定数据返回方式的值的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据绑定控件将属性传递给<xref:System.Web.UI.WebControls.LinqDataSource>通过控制<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Arguments%2A>属性，以便指定进行分页和排序方式。 如果<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>属性或<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>属性设置为`true`、<xref:System.Web.UI.WebControls.LinqDataSource>控件自动进行排序或基于从数据绑定控件的属性的分页。  
  
 你可以自定义排序和分页从查询通过设置数据的方式<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>和<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>属性设置为`false`，然后创建的处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。 在事件处理程序，使用<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Arguments%2A>属性来检索排序和分页从数据绑定控件的属性。 然后查询根据需要自定义，根据从属性<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Arguments%2A>属性。 如果<xref:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount%2A>属性<xref:System.Web.UI.DataSourceSelectArguments>对象设置为`true`，您必须返回的值<xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.DataSourceSelectArguments" />
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ GroupByParameters { System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建 GroupBy 子句的参数集合。</summary>
        <value>包含 GroupBy 子句参数的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你使用<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.GroupByParameters%2A>属性访问参数的处理程序中的 GroupBy 子句<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。 可以通过添加或移除此集合中的参数来修改 GroupBy 子句。 默认情况下，<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.GroupByParameters%2A>属性<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>对象包含添加到任何参数<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>属性<xref:System.Web.UI.WebControls.LinqDataSource>控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ OrderByParameters { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建 OrderBy 子句的参数集合。</summary>
        <value>包含 OrderBy 子句参数的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你使用<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderByParameters%2A>属性访问参数的处理程序中的 OrderBy 子句<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。 可以通过添加或移除此集合中的参数来修改 OrderBy 子句。 默认情况下，<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderByParameters%2A>属性<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>对象包含添加到任何参数<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>的<xref:System.Web.UI.WebControls.LinqDataSource>控件。  
  
 当<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>属性设置为`true`中的参数<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderByParameters%2A>集合不需要命名为。 数据将根据中的参数的序列排序<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderByParameters%2A>集合。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ OrderGroupsByParameters { System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数的集合，这些参数用于创建指定如何对分组数据进行排序的子句。</summary>
        <value>一个对象，其中包含指定如何对分组数据进行排序的子句的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据分组通过设置<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>属性，可以通过设置分组的数据进行排序<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>属性设成一个用于对数据进行分组的属性。  
  
 你使用<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderGroupsByParameters%2A>属性访问参数的处理程序中的组 Order By 子句<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。 可以通过添加或移除此集合中的参数来修改组 Order By 子句。  
  
 默认情况下，<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderGroupsByParameters%2A>属性<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>对象包含以声明方式为添加任何参数<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>的<xref:System.Web.UI.WebControls.LinqDataSource>控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public object Result { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result" />
      <MemberSignature Language="VB.NET" Value="Public Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Result { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在数据查询中使用的数据对象。</summary>
        <value>表示查询数据的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，<xref:System.Web.UI.WebControls.LinqDataSource>控件将其查询表达式应用于对象中定义<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性。 中的处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件，你可以手动更改哪种对象通过设置查询<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>对对象的属性。 例如，你可以使用<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>属性来查询内存中集合在 Web 页中，或从 LINQ 查询表达式中获取的结果。 你可以设置<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>的任何对象的属性。 如果对象没有实现<xref:System.Collections.Generic.IEnumerable%601>接口，<xref:System.Web.UI.WebControls.LinqDataSource>控件中实现的对象中包装对象<xref:System.Collections.Generic.IEnumerable%601>接口。  
  
 当<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>属性设置为任何值`null`、<xref:System.Web.UI.WebControls.LinqDataSource>控件不查询中定义的对象<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性。 相反，它会查询中的对象<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>属性。  
  
> [!NOTE]
>  当你将设置<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>属性到对象，请不要使用`null`以表示不包含任何数据的对象。 <xref:System.Web.UI.WebControls.LinqDataSource>控件将解释`null`以意味着<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>未设置属性，然后它将创建并查询中的对象<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性。 若要表示不包含数据的对象，设置<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>属性<xref:System.Collections.IList>或<xref:System.Collections.Generic.IList%601>不包含任何元素的对象。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating>， <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>，和<xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing>时以编程方式设置，将不会引发事件<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>到对象，以及两个其他条件适用时属性。 条件是原始值不需要存储在或中的对象的视图状态，<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性实现<xref:System.Data.Linq.ITable>接口。  
  
   
  
## Examples  
 下面的示例演示如何设置<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>到 LINQ 查询的结果的属性。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default2.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/default2.aspx.vb#2)]  
  
 下面的示例演示如何设置<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>网页中定义为字符串值的数组的属性。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ SelectParameters { System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建 Select 子句的参数集合。</summary>
        <value>包含 Select 子句参数的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你使用<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.SelectParameters%2A>属性访问参数的处理程序中的 Select 子句<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。 可以通过添加或移除此集合中的参数来修改 Select 子句。 默认情况下，<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.SelectParameters%2A>属性<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>对象包含添加到任何参数<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>的<xref:System.Web.UI.WebControls.LinqDataSource>控件。  
  
   
  
## Examples  
 下面的示例演示如何将参数添加到<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.SelectParameters%2A>集合。 添加的这个参数用于计算调整后的价格基于是否对产品打折产品。 该示例的第一部分演示的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default5.aspx#5)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default5.aspx#5)]  
  
 该示例的第二部分显示定义 Select 子句的标记。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default5.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default5.aspx#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ WhereParameters { System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建 Where 子句的参数集合。</summary>
        <value>包含 Where 子句参数的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你使用<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.WhereParameters%2A>属性设置为针对在哪里访问参数的处理程序中的子句<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。 你可以修改 Where 子句通过添加或移除此集合中的参数。 默认情况下，<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.WhereParameters%2A>属性<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>对象包含添加到任何参数<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>的<xref:System.Web.UI.WebControls.LinqDataSource>控件。  
  
 添加通过参数时<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.WhereParameters%2A>集合<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>对象，或者必须包括中的参数的占位符<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>属性或一组<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>属性`true`。 例如，如果你添加一个名为参数`ProductName`事件处理程序中<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件，你必须设置<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>属性`true`或设置<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>属性`ProductName=@ProductName`。  
  
   
  
## Examples  
 下面的示例演示如何将参数添加到<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.WhereParameters%2A>集合。 添加的参数将限制返回的产品仅值为"Bike"这些产品中`Name`属性。 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>属性设置为`true`以便参数将自动包含在 Where 子句。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      </Docs>
    </Member>
  </Members>
</Type>