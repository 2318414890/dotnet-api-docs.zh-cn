<Type Name="LoginView" FullName="System.Web.UI.WebControls.LoginView">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5d3a1e9301f9be231127d0fb1014e0990b5540f1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36380702" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LoginView : System.Web.UI.Control, System.Web.UI.INamingContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LoginView extends System.Web.UI.Control implements class System.Web.UI.INamingContainer" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LoginView" />
  <TypeSignature Language="VB.NET" Value="Public Class LoginView&#xA;Inherits Control&#xA;Implements INamingContainer" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoginView : System::Web::UI::Control, System::Web::UI::INamingContainer" />
  <TypeSignature Language="F#" Value="type LoginView = class&#xA;    inherit Control&#xA;    interface INamingContainer" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.INamingContainer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("ViewChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("CurrentView")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LoginViewDesigner,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.Themeable(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>依据给定用户的身份验证状态和角色成员资格为该用户显示相应的内容模板。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本主题内容：  
  
-   [介绍](#introduction)  
  
-   [声明性语法](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>介绍  
 <xref:System.Web.UI.WebControls.LoginView>控件将显示不同网站内容模板 （或"视图"） 为不同的用户，基于是否对用户进行身份验证，并且，如果哪些 Web 站点角色，因此，他或她所属。  
  
> [!NOTE]
>  如果你不熟悉的 ASP.NET 提供的登录控件集，请参阅[ASP.NET 登录控件概述](http://msdn.microsoft.com/library/ac032230-6469-4b03-b68d-03ef2643a24d)才能继续。 有关与登录控件和成员资格相关的其他主题的列表，请参阅[使用成员资格管理用户](http://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd)。  
  
 模板存储在<xref:System.Web.UI.WebControls.LoginView.AnonymousTemplate%2A>属性显示到网站，这些用户未登录到任何访问者。 一旦用户注册后，该站点会显示与中的用户的角色之一相关联的任一模板<xref:System.Web.UI.WebControls.LoginView.RoleGroups%2A>属性或在指定的默认模板<xref:System.Web.UI.WebControls.LoginView.LoggedInTemplate%2A>属性。  
  
 <xref:System.Web.UI.WebControls.LoginView>控件管理后不将模板分配到的任何三个模板属性的不同模板之间切换<xref:System.Web.UI.WebControls.LoginView>类：  
  
-   <xref:System.Web.UI.WebControls.LoginView.AnonymousTemplate%2A> -指定要显示给用户未登录到网站的模板。 在登录的用户将不会看到此模板。  
  
-   <xref:System.Web.UI.WebControls.LoginView.LoggedInTemplate%2A> -指定要向登录到网站，但不是属于任何角色组具有已定义模板的用户显示的默认模板。  
  
-   <xref:System.Web.UI.WebControls.LoginView.RoleGroups%2A> -指定要向登录的用户都具有已定义的角色组模板的角色的成员显示的模板。 内容模板是与某一组中的角色相关联<xref:System.Web.UI.WebControls.RoleGroup>实例。  
  
 在源中定义的顺序搜索角色组模板。 第一个匹配的角色组模板是向用户显示。 如果用户是多个角色的成员，则使用与任何用户的角色匹配的第一个角色组模板。 如果多个模板是与单个角色关联，则使用仅第一个定义的模板。  
  
 下表描述的行为<xref:System.Web.UI.WebControls.LoginView>控制当使用模板的各种组合。  
  
|LoggedIn 模板属性|匿名模板属性|RoleGroups 属性|LoginView 行为|  
|--------------------------------|---------------------------------|-------------------------|------------------------|  
|未设置|未设置|未设置|不显示任何内容。|  
|Set|未设置|未设置|仅当用户登录时，显示内容。|  
|未设置|Set|未设置|仅在用户未登录时，显示内容。|  
|未设置|未设置|Set|显示中的第一个模板<xref:System.Web.UI.WebControls.LoginView.RoleGroups%2A>与用户的角色之一相匹配的集合。 如果不找到任何匹配项，则显示任何内容。|  
|Set|Set|未设置|如果用户已登录，将显示在指定的模板<xref:System.Web.UI.WebControls.LoginView.LoggedInTemplate%2A>属性。 如果在用户未登录，将显示在指定的模板<xref:System.Web.UI.WebControls.LoginView.AnonymousTemplate%2A>属性。|  
|Set|Set|Set|如果用户已登录，将显示中的第一个模板<xref:System.Web.UI.WebControls.LoginView.RoleGroups%2A>与用户的角色之一相匹配的集合。 如果不找到任何匹配项，则显示在指定的模板<xref:System.Web.UI.WebControls.LoginView.LoggedInTemplate%2A>属性。 如果用户未登录，将显示在指定的模板<xref:System.Web.UI.WebControls.LoginView.AnonymousTemplate%2A>属性。|  
|Set|未设置|Set|如果用户已登录，将显示中的第一个模板<xref:System.Web.UI.WebControls.LoginView.RoleGroups%2A>与用户的角色之一相匹配的集合。 如果不找到任何匹配项，则显示在指定的模板<xref:System.Web.UI.WebControls.LoginView.LoggedInTemplate%2A>属性。 如果用户未登录，不会显示。|  
|未设置|Set|Set|如果用户已登录，将显示中的第一个模板<xref:System.Web.UI.WebControls.LoginView.RoleGroups%2A>与用户的角色之一相匹配的集合。 如果不找到任何匹配项，则不会显示。 如果用户未登录，将显示在指定的模板<xref:System.Web.UI.WebControls.LoginView.AnonymousTemplate%2A>属性。|  
  
 <xref:System.Web.UI.WebControls.LoginView.AnonymousTemplate%2A>和<xref:System.Web.UI.WebControls.LoginView.LoggedInTemplate%2A>可以用于设置任何身份验证方案<xref:System.Security.Principal.IIdentity.Name%2A>属性<xref:System.Web.UI.Page>对象的<xref:System.Web.UI.Page.User%2A>属性。 你必须配置要使用的角色管理<xref:System.Web.UI.WebControls.LoginView.RoleGroups%2A>属性来定义模板基本网站上的用户的角色上。 有关详细信息，请参阅[了解角色管理](http://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6)。  
  
 <xref:System.Web.UI.Control.Focus%2A>方法不会设置到网页的最初关注点<xref:System.Web.UI.WebControls.LoginView>控件或其任何子控件。 中包含的控件<xref:System.Web.UI.WebControls.LoginView>后创建控件<xref:System.Web.UI.Control.PreRender>事件。 若要将焦点设置到所包含的子控件<xref:System.Web.UI.WebControls.LoginView>，处理`On_PreRender`并调用其<xref:System.Web.UI.Control.Focus%2A>方法。  你还可以使用<xref:System.Web.UI.WebControls.LoginView.ViewChanging>和<xref:System.Web.UI.WebControls.LoginView.ViewChanged>事件以编程方式访问中的控件<xref:System.Web.UI.WebControls.LoginView>控件模板。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>声明性语法  
  
```  
<asp:LoginView  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    OnViewChanged="ViewChanged event handler"  
    OnViewChanging="ViewChanging event handler"  
    runat="server"  
    SkinID="string"  
    Visible="True|False"  
>  
        <AnonymousTemplate>  
            <!-- child controls -->  
        </AnonymousTemplate>  
        <LoggedInTemplate>  
            <!-- child controls -->  
        </LoggedInTemplate>  
        <RoleGroups>  
                <asp:RoleGroup  
                    Roles="string"  
                >  
                        <ContentTemplate>  
                            <!-- child controls -->  
                        </ContentTemplate>  
                </asp:RoleGroup>  
        </RoleGroups>  
</asp:LoginView>  
```  
  
   
  
## Examples  
 下面的代码示例演示如何为每个支持的三个模板类型设置模板<xref:System.Web.UI.WebControls.LoginView>控件。  
  
 [!code-aspx-csharp[LoginViewClass#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginViewClass/CS/loginviewclasscs.aspx#1)]
 [!code-aspx-vb[LoginViewClass#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginViewClass/VB/loginviewclassvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Security.Roles" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LoginView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LoginView.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LoginView();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.LoginView" /> 控件的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate AnonymousTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate AnonymousTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LoginView.AnonymousTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AnonymousTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ AnonymousTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AnonymousTemplate : System.Web.UI.ITemplate with get, set" Usage="System.Web.UI.WebControls.LoginView.AnonymousTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.LoginView))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置向未登录到网站的用户显示的模板。</summary>
        <value>要显示的 <see cref="T:System.Web.UI.ITemplate" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LoginView.AnonymousTemplate%2A>属性指定的内容的模板，它们未登录到网站时，向网站用户显示。 此时会显示此模板时<xref:System.Security.Principal.IIdentity.Name%2A>属性<xref:System.Web.UI.Page><xref:System.Web.UI.Page.User%2A>属性是`null`。  
  
 <xref:System.Web.UI.WebControls.LoginView.AnonymousTemplate%2A>向经过身份验证的用户永远不会显示模板。 如果<xref:System.Web.UI.WebControls.LoginView.AnonymousTemplate%2A>属性为空，则向未登录的用户显示任何内容。  
  
   
  
## Examples  
 下面的代码示例使用模板中指定<xref:System.Web.UI.WebControls.LoginView.AnonymousTemplate%2A>模板，以显示邀请注册个性化的服务。  
  
 [!code-aspx-csharp[LoginViewAnonymousTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginViewAnonymousTemplate/CS/loginviewanonymoustemplatecs.aspx#1)]
 [!code-aspx-vb[LoginViewAnonymousTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginViewAnonymousTemplate/VB/loginviewanonymoustemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public override System.Web.UI.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LoginView.Controls" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Controls As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ControlCollection ^ Controls { System::Web::UI::ControlCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Controls : System.Web.UI.ControlCollection" Usage="System.Web.UI.WebControls.LoginView.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含 <see cref="T:System.Web.UI.ControlCollection" /> 控件的子控件的 <see cref="T:System.Web.UI.WebControls.LoginView" /> 对象。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.LoginView" /> 控件的子控件集合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected internal override void CreateChildControls ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void CreateChildControls() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LoginView.CreateChildControls" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub CreateChildControls ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void CreateChildControls();" />
      <MemberSignature Language="F#" Value="override this.CreateChildControls : unit -&gt; unit" Usage="loginView.CreateChildControls " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建构成 <see cref="T:System.Web.UI.WebControls.LoginView" /> 控件的子控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LoginView.CreateChildControls%2A>方法创建的各个控件，构成<xref:System.Web.UI.WebControls.LoginView>控件。 创建的控件集而异的用户显示的内容模板。 例如，当用户未登录到网站，仅包含在模板中的控件中指定的<xref:System.Web.UI.WebControls.LoginView.AnonymousTemplate%2A>创建属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataBind">
      <MemberSignature Language="C#" Value="public override void DataBind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DataBind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LoginView.DataBind" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub DataBind ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void DataBind();" />
      <MemberSignature Language="F#" Value="override this.DataBind : unit -&gt; unit" Usage="loginView.DataBind " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将数据源绑定到 <see cref="T:System.Web.UI.WebControls.LoginView" /> 及其所有子控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.LoginView.DataBind%2A>方法将数据绑定到源中<xref:System.Web.UI.WebControls.LoginView>控件及其子级。 此方法会解析中的所有数据绑定表达式<xref:System.Web.UI.WebControls.LoginView>控件和活动模板中的任何子控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableTheming">
      <MemberSignature Language="C#" Value="public override bool EnableTheming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableTheming" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LoginView.EnableTheming" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property EnableTheming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableTheming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableTheming : bool with get, set" Usage="System.Web.UI.WebControls.LoginView.EnableTheming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否能对 <see cref="T:System.Web.UI.WebControls.LoginView" /> 控件应用主题。</summary>
        <value>如果使用主题，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LoginView.EnableTheming%2A>属性指示是否为启用主题<xref:System.Web.UI.WebControls.LoginView>控件。 <xref:System.Web.UI.WebControls.LoginView.EnableTheming%2A>是否为中包含的控件启用主题属性还会影响其<xref:System.Web.UI.WebControls.LoginView.Controls%2A>集合。 当<xref:System.Web.UI.WebControls.LoginView.EnableTheming%2A>属性是`true`，应用程序的主题目录中搜索要应用的控件外观。 如果用于特定的控件中的主题目录存在，则不会应用的外观。 当<xref:System.Web.UI.WebControls.LoginView.EnableTheming%2A>属性是`false`，则不搜索主题目录和内容<xref:System.Web.UI.WebControls.LoginView.SkinID%2A>不使用属性。  
  
 控件可以重写<xref:System.Web.UI.WebControls.LoginView.EnableTheming%2A>值由其父控件或包含的页的设置。 例如，如果父控件具有<xref:System.Web.UI.WebControls.LoginView.EnableTheming%2A>设置为`false`，你可以有选择地将主题应用于父项中包含的设置的子控件<xref:System.Web.UI.WebControls.LoginView.EnableTheming%2A>属性`true`上各个子控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.LoginView.SkinID" />
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public override void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LoginView.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Focus();" />
      <MemberSignature Language="F#" Value="override this.Focus : unit -&gt; unit" Usage="loginView.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为控件设置输入焦点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LoginView.Focus%2A>方法不会设置到网页的最初关注点<xref:System.Web.UI.WebControls.LoginView>控件或任何其子控件。 中包含的控件<xref:System.Web.UI.WebControls.LoginView>后创建控件<xref:System.Web.UI.Control.PreRender>事件。 若要将焦点设置到所包含的子控件<xref:System.Web.UI.WebControls.LoginView>，处理`On_PreRender`并调用其<xref:System.Web.UI.Control.Focus%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">调用 <see cref="M:System.Web.UI.WebControls.LoginView.Focus" /> 方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected internal override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LoginView.LoadControlState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub LoadControlState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void LoadControlState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadControlState : obj -&gt; unit" Usage="loginView.LoadControlState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">表示要还原的控件状态的 <see cref="T:System.Object" />。</param>
        <summary>此方法实现 <see cref="M:System.Web.UI.Control.LoadControlState(System.Object)" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoggedInTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate LoggedInTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate LoggedInTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LoginView.LoggedInTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property LoggedInTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ LoggedInTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LoggedInTemplate : System.Web.UI.ITemplate with get, set" Usage="System.Web.UI.WebControls.LoginView.LoggedInTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.LoginView))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置向已登录网站但不属于 <see cref="P:System.Web.UI.WebControls.LoginView.RoleGroups" /> 属性中指定的任何角色组的网站用户显示的模板。</summary>
        <value>要显示的 <see cref="T:System.Web.UI.ITemplate" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LoginView.LoggedInTemplate%2A>两个以下条件满足时，向网站用户显示的属性：  
  
-   <xref:System.Security.Principal.IIdentity.Name%2A>属性<xref:System.Web.UI.Page><xref:System.Web.UI.Page.User%2A>属性不是 `null`  
  
-   用户不属于中定义的角色组<xref:System.Web.UI.WebControls.LoginView.RoleGroups%2A>属性。  
  
 <xref:System.Web.UI.WebControls.LoginView.LoggedInTemplate%2A>属性指定用于身份验证的网站用户的默认模板。 如果你尚未配置角色管理<xref:System.Web.UI.WebControls.LoginView.LoggedInTemplate%2A>是唯一的模板可用于身份验证的用户。 有关配置角色管理的详细信息，请参阅[了解角色管理](http://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.LoginView.LoggedInTemplate%2A>模板，以显示为登录的用户的个性化信息的链接。  
  
 [!code-aspx-csharp[LoginViewAnonymousTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginViewAnonymousTemplate/CS/loginviewanonymoustemplatecs.aspx#1)]
 [!code-aspx-vb[LoginViewAnonymousTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginViewAnonymousTemplate/VB/loginviewanonymoustemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Security.Roles" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LoginView.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="loginView.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Web.UI.Control.Init" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LoginView.OnInit%2A>方法执行初始化<xref:System.Web.UI.WebControls.LoginView>控件。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.LoginView.OnInit%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.LoginView.OnInit(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.LoginView.OnInit(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LoginView.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="loginView.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" /> 对象。</param>
        <summary>根据登录用户的角色确定显示哪个角色组模板。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LoginView.OnPreRender%2A>方法调用期间<xref:System.Web.UI.Control.PreRender>事件，以确定要向用户显示的内容模板。 如果<xref:System.Security.Principal.IIdentity.Name%2A>属性<xref:System.Web.UI.Page><xref:System.Web.UI.Page.User%2A>属性是`null`中, 指定的模板<xref:System.Web.UI.WebControls.LoginView.AnonymousTemplate%2A>显示属性; 否则，将显示与用户的角色关联的模板。 如果用户不属于一个定义的角色组，或如果你尚未配置角色管理<xref:System.Web.UI.WebControls.LoginView>控件将显示在指定的模板<xref:System.Web.UI.WebControls.LoginView.LoggedInTemplate%2A>属性。 有关配置角色管理的详细信息，请参阅[角色管理提供程序](http://msdn.microsoft.com/library/71ddd651-5f91-471b-ad9f-61249b0bf0d5)。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.LoginView.OnPreRender%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.LoginView.OnPreRender(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.LoginView.OnPreRender(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnViewChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnViewChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnViewChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LoginView.OnViewChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnViewChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnViewChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnViewChanged : EventArgs -&gt; unit&#xA;override this.OnViewChanged : EventArgs -&gt; unit" Usage="loginView.OnViewChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" /> 对象。</param>
        <summary>在 <see cref="E:System.Web.UI.WebControls.LoginView.ViewChanged" /> 控件切换视图之后引发 <see cref="T:System.Web.UI.WebControls.LoginView" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Web.UI.WebControls.LoginView>控件切换视图，它将从上一模板中移除的控件并从新的模板创建新的子控件。 <xref:System.Web.UI.WebControls.LoginView.OnViewChanged%2A>创建新的子控件后调用方法。  
  
 使用<xref:System.Web.UI.WebControls.LoginView.OnViewChanged%2A>方法来执行任何处理，如数据绑定，需要初始化新的视图上的控件。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.LoginView.OnViewChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.LoginView.OnViewChanged(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.LoginView.OnViewChanged(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.LoginView.ViewChanged" />
        <altmember cref="M:System.Web.UI.WebControls.LoginView.OnViewChanging(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnViewChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnViewChanging (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnViewChanging(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LoginView.OnViewChanging(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnViewChanging (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnViewChanging(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnViewChanging : EventArgs -&gt; unit&#xA;override this.OnViewChanging : EventArgs -&gt; unit" Usage="loginView.OnViewChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" /> 对象。</param>
        <summary>在 <see cref="E:System.Web.UI.WebControls.LoginView.ViewChanging" /> 控件切换视图之前引发 <see cref="T:System.Web.UI.WebControls.LoginView" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Web.UI.WebControls.LoginView>控件切换视图，它从上一模板中删除控件，并从新的模板创建新的子控件。 <xref:System.Web.UI.WebControls.LoginView.OnViewChanging%2A>删除以前的控件之前调用方法。  
  
 使用<xref:System.Web.UI.WebControls.LoginView.OnViewChanging%2A>方法来执行任何必要的处理，如控件会被删除之前保存控制信息。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.LoginView.OnViewChanging%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.LoginView.OnViewChanging(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.LoginView.OnViewChanging(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.LoginView.ViewChanging" />
        <altmember cref="M:System.Web.UI.WebControls.LoginView.OnViewChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LoginView.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="loginView.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" />，用于在客户端浏览器上呈现服务器控件内容。</param>
        <summary>使用指定的 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象将 Web 服务器控件内容呈现给客户端浏览器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LoginView.Render%2A>方法用于呈现客户端的浏览器使用指定的服务器控件内容<xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType>对象。  
  
 **请注意**此方法主要由控件开发人员来扩展<xref:System.Web.UI.WebControls.LoginView>控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RoleGroups">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.RoleGroupCollection RoleGroups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.RoleGroupCollection RoleGroups" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LoginView.RoleGroups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RoleGroups As RoleGroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::RoleGroupCollection ^ RoleGroups { System::Web::UI::WebControls::RoleGroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RoleGroups : System.Web.UI.WebControls.RoleGroupCollection" Usage="System.Web.UI.WebControls.LoginView.RoleGroups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Filterable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.RoleGroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取将内容模板与特定角色相关联的角色组集合。</summary>
        <value>一个包含已定义角色组模板的 <see cref="T:System.Web.UI.WebControls.RoleGroupCollection" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LoginView.RoleGroups%2A>属性包含与 Web 站点上的各种角色关联的内容模板。 中的集合<xref:System.Web.UI.WebControls.LoginView.RoleGroups%2A>属性搜索源中定义模板的顺序。 第一个匹配的角色组模板是向用户显示。 如果用户是多个角色的成员，则使用与任何用户的角色匹配的第一个角色组模板。 如果多个模板与单个角色关联，则将使用的第一个定义的模板。  
  
 如果登录的用户不属于任何角色组集合中包含的角色，该站点会显示在指定的内容模板<xref:System.Web.UI.WebControls.LoginView.LoggedInTemplate%2A>属性。 匿名用户永远不会显示中包含任何模板<xref:System.Web.UI.WebControls.LoginView.RoleGroups%2A>集合。  
  
 你必须配置要使用的角色管理<xref:System.Web.UI.WebControls.LoginView.RoleGroups%2A>属性来定义模板基于 Web 站点上的用户的角色。 有关详细信息，请参阅[了解角色管理](http://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6)。  
  
 无法通过主题或样式表主题设置此属性。 有关详细信息，请参阅<xref:System.Web.UI.ThemeableAttribute>和[ASP.NET 主题和皮肤](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.LoginView.RoleGroups%2A>集合。 因为<xref:System.Web.UI.WebControls.LoginView.AnonymousTemplate%2A>和<xref:System.Web.UI.WebControls.LoginView.LoggedInTemplate%2A>未设置属性，将仅向属于与定义的内容模板的角色的用户显示的内容。  
  
 [!code-aspx-csharp[LoginViewRoleGroups#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginViewRoleGroups/CS/loginviewrolegroupscs.aspx#1)]
 [!code-aspx-vb[LoginViewRoleGroups#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginViewRoleGroups/VB/loginviewrolegroupsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Security.Roles" />
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected internal override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LoginView.SaveControlState" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function SaveControlState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Object ^ SaveControlState();" />
      <MemberSignature Language="F#" Value="override this.SaveControlState : unit -&gt; obj" Usage="loginView.SaveControlState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存将页面回发到服务器之后发生的所有服务器控件状态更改。</summary>
        <returns>返回服务器控件的当前状态。 如果没有与该控件关联的状态，则此方法返回 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.SaveControlState" />
      </Docs>
    </Member>
    <Member MemberName="SetDesignModeState">
      <MemberSignature Language="C#" Value="protected override void SetDesignModeState (System.Collections.IDictionary data);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetDesignModeState(class System.Collections.IDictionary data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LoginView.SetDesignModeState(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetDesignModeState (data As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetDesignModeState(System::Collections::IDictionary ^ data);" />
      <MemberSignature Language="F#" Value="override this.SetDesignModeState : System.Collections.IDictionary -&gt; unit" Usage="loginView.SetDesignModeState data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="data">包含控件的设计时数据的 <see cref="T:System.Collections.IDictionary" />。</param>
        <summary>为控件设置设计时数据。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="SkinID">
      <MemberSignature Language="C#" Value="public override string SkinID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SkinID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LoginView.SkinID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SkinID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SkinID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SkinID : string with get, set" Usage="System.Web.UI.WebControls.LoginView.SkinID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置应用于 <see cref="T:System.Web.UI.WebControls.LoginView" /> 控件的外观。</summary>
        <value>应用于 <see cref="T:System.Web.UI.WebControls.LoginView" /> 控件的外观的名称。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用控件的外观包含在主题目录中的一个或多个外观文件中。 <xref:System.Web.UI.WebControls.LoginView.SkinID%2A>属性指定哪些这些将应用于控件的外观。 外观是特定于特定的控件;不能共享之间的不同类型的控件的外观设置。  
  
 如果你未设置<xref:System.Web.UI.WebControls.LoginView.SkinID%2A>属性，如果已定义控件使用的默认外观。 例如，如果而无需外观 ID 为定义<xref:System.Web.UI.WebControls.Image>控制，则该外观适用于所有<xref:System.Web.UI.WebControls.Image>控件，不显式引用它按 ID 的外观和，未设置为禁用主题。 如果为定义具有 ID 的外观<xref:System.Web.UI.WebControls.Image>控制，则该外观仅适用于<xref:System.Web.UI.WebControls.Image>控制其<xref:System.Web.UI.WebControls.WebControl.SkinID%2A>设置为该 id。  
  
 如果主题目录中的外观文件不包含具有指定的外观<xref:System.Web.UI.WebControls.LoginView.SkinID%2A>、<xref:System.ArgumentException>在运行时引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">主题中不存在 <see cref="P:System.Web.UI.WebControls.LoginView.SkinID" /> 属性中指定的外观。</exception>
        <altmember cref="P:System.Web.UI.WebControls.LoginView.EnableTheming" />
      </Docs>
    </Member>
    <Member MemberName="ViewChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ViewChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ViewChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LoginView.ViewChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ViewChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ViewChanged;" />
      <MemberSignature Language="F#" Value="member this.ViewChanged : EventHandler " Usage="member this.ViewChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在视图更改后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Web.UI.WebControls.LoginView>控件切换视图，它将从上一模板中移除的控件并从新的模板创建新的子控件。 <xref:System.Web.UI.WebControls.LoginView.ViewChanged>仅在创建新的子控件后，将引发事件。  
  
 使用<xref:System.Web.UI.WebControls.LoginView.ViewChanged>事件以执行任何处理，如数据绑定，需要初始化新的视图上的控件。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.LoginView.ViewChanged>如果用户的登录状态更改到页回发期间才引发事件。 <xref:System.Web.UI.WebControls.LoginView.ViewChanged>如果用户登录时使用，不会引发事件<xref:System.Web.UI.WebControls.Login>控件，或如果使用在用户注销<xref:System.Web.UI.WebControls.LoginStatus>控件。 <xref:System.Web.UI.WebControls.LoginView.ViewChanged>事件将也会发生如果用户在登录或注销后执行一个重定向。 举例说明时<xref:System.Web.UI.WebControls.LoginView.ViewChanged>事件会发生在用户注销通过调用时<xref:System.Web.Security.FormsAuthentication.SignOut%2A>无需重定向到另一页的方法。 在页上，向下一步回发期间<xref:System.Web.UI.WebControls.LoginView>控件将检测用户的登录状态中的更改，然后引发<xref:System.Web.UI.WebControls.LoginView.ViewChanged>事件。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.LoginView.OnViewChanged(System.EventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.LoginView.ViewChanging" />
      </Docs>
    </Member>
    <Member MemberName="ViewChanging">
      <MemberSignature Language="C#" Value="public event EventHandler ViewChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ViewChanging" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LoginView.ViewChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ViewChanging As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ViewChanging;" />
      <MemberSignature Language="F#" Value="member this.ViewChanging : EventHandler " Usage="member this.ViewChanging : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在视图更改前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Web.UI.WebControls.LoginView>控件切换视图，它将从上一模板中移除的控件并从新的模板创建新的子控件。 <xref:System.Web.UI.WebControls.LoginView.ViewChanging>删除以前的控件之前，将引发事件。  
  
 使用<xref:System.Web.UI.WebControls.LoginView.ViewChanging>事件以执行任何处理，如保存所需的控件信息之前控件会被删除。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.LoginView.ViewChanging>如果用户的登录状态更改到页回发期间才引发事件。 <xref:System.Web.UI.WebControls.LoginView.ViewChanging>如果用户登录时使用，不会引发事件<xref:System.Web.UI.WebControls.Login>控件，或如果使用在用户注销<xref:System.Web.UI.WebControls.LoginStatus>控件。 <xref:System.Web.UI.WebControls.LoginView.ViewChanging>事件将也会发生如果用户在登录或注销后执行一个重定向。 举例说明时<xref:System.Web.UI.WebControls.LoginView.ViewChanging>事件会发生在用户注销通过调用时<xref:System.Web.Security.FormsAuthentication.SignOut%2A>无需重定向到另一页的方法。 在页上，向下一步回发期间<xref:System.Web.UI.WebControls.LoginView>控件将检测用户的登录状态中的更改，然后引发<xref:System.Web.UI.WebControls.LoginView.ViewChanging>事件。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.LoginView.OnViewChanging(System.EventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.LoginView.ViewChanged" />
      </Docs>
    </Member>
  </Members>
</Type>