<Type Name="FormViewUpdatedEventArgs" FullName="System.Web.UI.WebControls.FormViewUpdatedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="81d385d36b6acfafb752e571b24a00b8be64b9a3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30599671" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FormViewUpdatedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FormViewUpdatedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class FormViewUpdatedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormViewUpdatedEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>控件都将引发<xref:System.Web.UI.WebControls.FormView.ItemUpdated>事件时的更新按钮 (带有按钮其`CommandName`属性设置为"更新") 在控件内单击时，之后<xref:System.Web.UI.WebControls.FormView>控件更新记录。 这使您可以提供执行自定义的例程，例如检查更新操作的结果，每次此事件发生时的事件处理方法。  
  
 A<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs>对象传递给事件处理方法，可用于确定受影响的记录和任何可能发生的异常数。 若要确定更新操作所影响的记录数，请使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>属性。 使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>属性以确定是否发生任何异常。 您还可以指示是否处理了该异常的事件处理方法中通过设置<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>属性。 如果你需要访问已更新记录的原始键字段值，请使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>属性。 可以使用访问原始的非键字段值<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A>属性。 更新后的值 （其中包括更新的键字段的值，如果你允许用户编辑键字段） 访问使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>属性。  
  
 默认情况下，<xref:System.Web.UI.WebControls.FormView>控件返回到所指定的模式<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>后更新操作的属性。 当处理更新操作期间发生的异常，您可以保留<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式，通过设置<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>属性`true`。  
  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
 有关 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> 类的实例的初始属性值列表，请参见 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.%23ctor%2A> 构造函数。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs>对象传递到事件处理方法<xref:System.Web.UI.WebControls.FormView.ItemUpdated>事件，以确定是否在更新操作期间发生了异常。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.FormView" />
    <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormViewUpdatedEventArgs (int affectedRows, Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 affectedRows, class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (affectedRows As Integer, e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormViewUpdatedEventArgs(int affectedRows, Exception ^ e);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="affectedRows" Type="System.Int32" />
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="affectedRows">受更新操作影响的行的数目。</param>
        <param name="e">一个 <see cref="T:System.Exception" />，表示在执行更新操作时引发的异常。 如果未引发异常，则将 <see langword="null" /> 用于此参数。</param>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数初始化的新实例<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs>类。  
  
 下表显示了 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> 类的某个实例的初始属性值。  
  
|Property|初始值|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>|`affectedRows` 参数的值。|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>|<xref:System.Exception?displayProperty=nameWithType>对象中包含`e`参数。|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>|初始化为`false`。|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>|初始化为`false`。|  
  
> [!NOTE]
>  在引发事件时，将主要由控件开发人员使用此构造函数。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
      </Docs>
    </Member>
    <Member MemberName="AffectedRows">
      <MemberSignature Language="C#" Value="public int AffectedRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AffectedRows" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AffectedRows As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AffectedRows { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取受更新操作影响的行数。</summary>
        <value>受更新操作影响的行的数目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>属性以确定更新操作所影响的记录数。 此属性通常用于验证在以下情况下更新了正确的记录数：  
  
-   验证已更新单个记录。 有时编写不当的 update 语句可以更新多个记录。  
  
-   验证不会引发异常的更新操作期间发生错误时，已更新某个记录。  
  
-   验证支持冲突检测 （开放式并发检查），如的数据源控件时，已更新某个记录<xref:System.Web.UI.WebControls.SqlDataSource>和<xref:System.Web.UI.WebControls.ObjectDataSource>控制，具有其<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>属性设置为`ConflictOptions.CompareAllValues`枚举值. 在此设置，可能不会更新已被另一个用户同时修改的记录。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>属性以验证已更新某个记录。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取更新操作过程中引发的异常（如果有）。</summary>
        <value>一个 <see cref="T:System.Exception" /> 对象，表示更新操作过程中引发的异常。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>属性以确定异常 （如果有） 更新操作过程中引发。 如果未引发异常，此属性将返回 `null`。  
  
> [!NOTE]
>  如果引发了异常，并且你决定要处理的事件处理程序中的异常，请务必设置<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>属性`true`; 否则为再次引发异常<xref:System.Web.UI.WebControls.FormView>控件。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>属性来确定在更新操作期间是否发生了异常。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在更新操作过程中所引发的异常是否已在事件处理程序中得到处理。</summary>
        <value>
          如果异常已在事件处理程序中得到处理，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当更新操作期间引发了异常时，则使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>属性以指示是否处理了该异常在事件处理程序。 当此属性设置为`true`，处理且不会再次引发该异常被视为<xref:System.Web.UI.WebControls.FormView>控件。 如果此属性设置为`false`，再次引发异常。 若要确定引发哪个异常，请使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>属性以指示是否处理了该异常在事件处理程序。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
      </Docs>
    </Member>
    <Member MemberName="KeepInEditMode">
      <MemberSignature Language="C#" Value="public bool KeepInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepInEditMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepInEditMode { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在更新操作完成后 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件是否仍保持在编辑模式下。</summary>
        <value>
          如果在更新操作之后仍处于编辑模式，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，<xref:System.Web.UI.WebControls.FormView>控件返回到所指定的模式<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>后更新操作的属性。 使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>属性指定是否<xref:System.Web.UI.WebControls.FormView>控件应继续处于编辑模式。 若要保留<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式，将此属性设置为`true`。  
  
> [!NOTE]
>  仅当 （如正在引发的异常） 发生的情况下需要与往常一样行为不同的控件时，应使用此属性。 如果<xref:System.Web.UI.WebControls.FormView>控件需要继续处于编辑模式下，默认情况下，设置<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>属性改为。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>属性以保留<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式发生异常时。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DefaultMode" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary Keys" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ Keys { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个字典，该字典包含已更新记录的原始键字段的名称/值对。</summary>
        <value>
          <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 包含一个字典，该字典由已更新记录的原始键字段的名称/值对组成。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>属性包含的键字段中列出的原始值<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>属性<xref:System.Web.UI.WebControls.FormView>控件。 使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>属性来访问已更新记录的键字段的值。 例如，可以使用这些值来记录更新的记录。  
  
> [!NOTE]
>  如果你允许要更新的键字段的值的用户<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A>属性包含原始的键字段值。 更新后的值存储在<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>属性。  
  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>属性返回<xref:System.Collections.Specialized.OrderedDictionary>实现对象<xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=nameWithType>接口。 <xref:System.Collections.Specialized.OrderedDictionary>对象包含<xref:System.Collections.DictionaryEntry?displayProperty=nameWithType>表示已更新记录的字段的对象。 若要访问的字段名称，使用<xref:System.Collections.Specialized.OrderedDictionary.Keys%2A>属性<xref:System.Collections.Specialized.OrderedDictionary>对象。 同样，通过使用访问的字段值<xref:System.Collections.Specialized.OrderedDictionary.Values%2A>属性。  
  
> [!NOTE]
>  作为快捷方式，你还可以使用的索引器<xref:System.Collections.Specialized.OrderedDictionary>直接对象访问该字段值。 数据源的字段顺序所依赖的控件 (如<xref:System.Web.UI.WebControls.AccessDataSource>) 只能按索引访问字段值。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>属性来访问已更新记录的键字段的值。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.Specialized.OrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Keys" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Values" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
      </Docs>
    </Member>
    <Member MemberName="NewValues">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary NewValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary NewValues" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewValues As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ NewValues { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个字典，该字典包含已更新记录的新字段的名称/值对。</summary>
        <value>一个 <see cref="T:System.Collections.Specialized.IOrderedDictionary" />，包含被更新记录的新字段名称/值对字典。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>属性来访问已更新记录新的字段值。 例如，可以使用这些值来记录更新的记录。  
  
> [!NOTE]
>  如果你允许要更新的键字段的值的用户<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A>属性包含原始的键字段值。 更新后的值存储在<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>属性。  
  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>属性返回<xref:System.Collections.Specialized.OrderedDictionary>实现对象<xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=nameWithType>接口。 <xref:System.Collections.Specialized.OrderedDictionary>对象包含<xref:System.Collections.DictionaryEntry?displayProperty=nameWithType>表示已更新记录的字段的对象。 若要访问的字段名称，使用<xref:System.Collections.Specialized.OrderedDictionary.Keys%2A>属性<xref:System.Collections.Specialized.OrderedDictionary>对象。 同样，通过使用访问的字段值<xref:System.Collections.Specialized.OrderedDictionary.Values%2A>属性。  
  
> [!NOTE]
>  作为快捷方式，你还可以使用的索引器<xref:System.Collections.Specialized.OrderedDictionary>直接对象访问该字段值。 数据源的字段顺序所依赖的控件 (如<xref:System.Web.UI.WebControls.AccessDataSource>) 只能按索引访问字段值。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>属性来访问用于非键字段的更新的记录由用户输入的新值。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertedEventHandler" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.Specialized.OrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Keys" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Values" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
      </Docs>
    </Member>
    <Member MemberName="OldValues">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary OldValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary OldValues" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OldValues As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ OldValues { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个字典，该字典包含已更新记录的原始非键字段的名称/值对。</summary>
        <value>一个 <see cref="T:System.Collections.Specialized.IOrderedDictionary" />，包含被更新记录的原始字段名称/值对字典。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A>属性来访问已更新记录的原始非键字段值。 例如，可以使用这些值来记录更新的记录。 支持冲突检测 （开放式并发检查），如数据源控件<xref:System.Web.UI.WebControls.SqlDataSource>和<xref:System.Web.UI.WebControls.ObjectDataSource>控件，使用其<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>属性设置为`ConflictOptions.CompareAllValues`也将对这些原始值进行比较执行更新操作之前数据库中的记录。 如果已由另一个用户同时修改一条记录，不会更新记录。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A>属性不包含键字段。 如果你允许要更新的键字段的值的用户，原始的键字段值存储在<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A>属性。 更新后的值存储在<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>属性。  
  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>属性返回<xref:System.Collections.Specialized.OrderedDictionary>实现对象<xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=nameWithType>接口。 <xref:System.Collections.Specialized.OrderedDictionary>对象包含<xref:System.Collections.DictionaryEntry?displayProperty=nameWithType>表示已更新记录的字段的对象。 若要访问的字段名称，使用<xref:System.Collections.Specialized.OrderedDictionary.Keys%2A>属性<xref:System.Collections.Specialized.OrderedDictionary>对象。 同样，通过使用访问的字段值<xref:System.Collections.Specialized.OrderedDictionary.Values%2A>属性。  
  
> [!NOTE]
>  作为快捷方式，你还可以使用的索引器<xref:System.Collections.Specialized.OrderedDictionary>直接对象访问该字段值。 数据源的字段顺序所依赖的控件 (如<xref:System.Web.UI.WebControls.AccessDataSource>) 只能按索引访问字段值。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A>属性来访问已更新记录的非键字段的原始值。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.Specialized.OrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Keys" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Values" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
      </Docs>
    </Member>
  </Members>
</Type>