<Type Name="LinqDataSourceUpdateEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="26c4a4c800f2c511c215ea68c572e8abf6bcaba4" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37534757" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceUpdateEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceUpdateEventArgs extends System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceUpdateEventArgs&#xA;Inherits CancelEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceUpdateEventArgs : System::ComponentModel::CancelEventArgs" />
  <TypeSignature Language="F#" Value="type LinqDataSourceUpdateEventArgs = class&#xA;    inherit CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="0fd1e-101">为 <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updating" /> 事件提供数据。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0fd1e-101">Provides data for the <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updating" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0fd1e-102"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>对象传递给任何事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-102">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object is passed to any event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="0fd1e-103">可以使用<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>对象中的数据源执行更新操作之前检查的数据。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-103">You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object to examine the data before the update operation is executed in the data source.</span></span> <span data-ttu-id="0fd1e-104">然后可以验证数据，检查验证异常引发的数据类，或更改更新前的值。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-104">You can then validate the data, examine validation exceptions thrown by the data class, or change a value before the update.</span></span> <span data-ttu-id="0fd1e-105">此外可以取消更新操作。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-105">You can also cancel the update operation.</span></span>  
  
 <span data-ttu-id="0fd1e-106"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A>对象包含最初从数据源检索的数据。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-106">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> object contains the data that was originally retrieved from the data source.</span></span> <span data-ttu-id="0fd1e-107"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>对象包含在更新操作期间将数据源中保存的数据。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-107">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> object contains the data that will be saved in the data source during the update operation.</span></span>  
  
 <span data-ttu-id="0fd1e-108">如果该对象表示数据源引发验证异常之前更新的数据<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A>属性包含的一个实例<xref:System.Web.UI.WebControls.LinqDataSourceValidationException>类。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-108">If the object that represents the data source throws a validation exception before updating the data, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.</span></span> <span data-ttu-id="0fd1e-109">您可以检索通过所有验证异常<xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-109">You can retrieve all the validation exceptions through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property.</span></span> <span data-ttu-id="0fd1e-110">如果不验证会引发异常，<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A>属性包含`null`。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-110">If no validation exception is thrown, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains `null`.</span></span> <span data-ttu-id="0fd1e-111">如果处理验证异常，并且不想要重新引发的异常设置<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A>属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-111">If you handle the validation exceptions and do not want the exception to be re-thrown, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="0fd1e-112">默认情况下<xref:System.Web.UI.WebControls.LinqDataSource>原始视图中值从数据源控件存储状态在网页上，除其<xref:System.Data.Linq.Mapping.ColumnAttribute>属性标记为`UpdateCheck.Never`。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-112">By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control stores the original values from the data source in view state on the Web page, except those whose <xref:System.Data.Linq.Mapping.ColumnAttribute> attribute is marked as `UpdateCheck.Never`.</span></span> <span data-ttu-id="0fd1e-113">LINQ to SQL 会自动更新的数据之前检查数据的完整性。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-113">LINQ to SQL automatically checks the integrity of the data before updating the data.</span></span> <span data-ttu-id="0fd1e-114">做到这一点通过将视图状态中存储的原始值的数据源中的当前值进行比较。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-114">It does this by comparing the current values in the data source with the original values stored in view state.</span></span> <span data-ttu-id="0fd1e-115">如果数据源中的值已更改，LINQ to SQL 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-115">LINQ to SQL raises an exception if the values in the data source have changed.</span></span> <span data-ttu-id="0fd1e-116">可以通过创建一个处理程序执行额外的数据验证<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-116">You can perform additional data validation by creating a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0fd1e-117">下面的示例演示的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-117">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="0fd1e-118">该示例演示了如何比较中的属性<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A>属性和<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>属性来确定是否在值`Category`属性已更改。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-118">The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed.</span></span> <span data-ttu-id="0fd1e-119">如果是这样，`CategoryChanged`中的对象的属性<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-119">If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 <span data-ttu-id="0fd1e-120">下面的示例演示的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-120">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="0fd1e-121">它通过使用显示的任何验证异常消息<xref:System.Web.UI.WebControls.Label>控件。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-121">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0fd1e-122">初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0fd1e-122">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.LinqDataSourceValidationException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As LinqDataSourceValidationException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Web::UI::WebControls::LinqDataSourceValidationException ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs : System.Web.UI.WebControls.LinqDataSourceValidationException -&gt; System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Web.UI.WebControls.LinqDataSourceValidationException" />
      </Parameters>
      <Docs>
        <param name="exception">
          <span data-ttu-id="0fd1e-123">在验证要更新的数据时发生的异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0fd1e-123">The exception that occurred when validating the data to update.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0fd1e-124">使用指定的异常初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0fd1e-124">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> class with the specified exception.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (object originalObject, object newObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object originalObject, object newObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (originalObject As Object, newObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Object ^ originalObject, System::Object ^ newObject);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs : obj * obj -&gt; System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs (originalObject, newObject)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="originalObject" Type="System.Object" />
        <Parameter Name="newObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="originalObject">
          <span data-ttu-id="0fd1e-125">具有 <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> 属性中指定类型的对象，该对象包含从数据源检索的初始值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0fd1e-125">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the initial values that were retrieved from the data source.</span>
          </span>
        </param>
        <param name="newObject">
          <span data-ttu-id="0fd1e-126">具有 <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> 属性中指定类型的对象，该对象包含将保存在数据源中的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0fd1e-126">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the values that will be saved in the data source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0fd1e-127">初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0fd1e-127">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.LinqDataSourceValidationException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As LinqDataSourceValidationException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LinqDataSourceValidationException ^ Exception { System::Web::UI::WebControls::LinqDataSourceValidationException ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceValidationException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0fd1e-128">获取在执行更新操作之前验证数据时引发的异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0fd1e-128">Gets the exception that was thrown while the data was being validated before the update operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0fd1e-129">如果发生错误，则为该异常；否则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0fd1e-129">The exception, if an error occurred; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0fd1e-130">如果执行更新操作之前引发验证异常，则该异常存储在<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-130">If a validation exception is raised before the update operation is performed, the exception is stored in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property.</span></span> <span data-ttu-id="0fd1e-131">中的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件，可以检索通过异常<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-131">In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you can retrieve the exception through the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0fd1e-132">下面的示例演示的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-132">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="0fd1e-133">它通过使用显示的任何验证异常消息<xref:System.Web.UI.WebControls.Label>控件。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-133">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0fd1e-134">获取或设置一个值，该值指示异常是否已得到处理而不该再次引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0fd1e-134">Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0fd1e-135">如果异常已得到处理，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0fd1e-135">
              <see langword="true" /> if the exception was handled; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0fd1e-136">可以创建的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件来检查在更新操作之前发生的验证异常。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-136">You can create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event to examine validation exceptions that occurred before the update operation.</span></span> <span data-ttu-id="0fd1e-137">如果处理异常，并且不希望它再次引发设置<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A>属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-137">If you handle the exception and do not want it to be thrown again, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`.</span></span> <span data-ttu-id="0fd1e-138">如果未设置<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A>属性设置为`true`，异常将传播到调用堆栈中的下一个事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-138">If you do not set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`, the exception will be propagated to the next event handler in the call stack.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0fd1e-139">下面的示例演示的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-139">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="0fd1e-140">它通过使用显示的任何验证异常消息<xref:System.Web.UI.WebControls.Label>控件。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-140">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewObject">
      <MemberSignature Language="C#" Value="public object NewObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NewObject : obj" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0fd1e-141">获取包含将保存在数据源中的值的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0fd1e-141">Gets the object that contains the values that will be saved in the data source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0fd1e-142">具有 <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> 属性中指定类型的对象，该对象包含要保存的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0fd1e-142">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the data to save.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0fd1e-143">创建事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件并检索<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>属性以验证数据。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-143">Create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event and retrieve the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to validate the data.</span></span> <span data-ttu-id="0fd1e-144">您还可以更改的数据或取消更新操作。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-144">You can also change the data or cancel the update operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0fd1e-145">下面的示例演示的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-145">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="0fd1e-146">该示例演示了如何比较中的属性<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A>属性和<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>属性来确定是否在值`Category`属性已更改。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-146">The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed.</span></span> <span data-ttu-id="0fd1e-147">如果是这样，`CategoryChanged`中的对象的属性<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-147">If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalObject">
      <MemberSignature Language="C#" Value="public object OriginalObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OriginalObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OriginalObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalObject : obj" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0fd1e-148">获取包含最初从数据源检索的值的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0fd1e-148">Gets the object that contains the values that were originally retrieved from the data source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0fd1e-149">具有 <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> 属性中指定类型的对象，该对象包含从数据源检索的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0fd1e-149">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the data that was retrieved from the data source.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0fd1e-150">可以使用<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A>属性可以检查针对数据源中的当前值的原始值，并可以取消更新操作或采取其他措施。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-150">You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property to check the original values against the current values in the data source and to cancel the update operation or take other action.</span></span>  
  
 <span data-ttu-id="0fd1e-151"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A>属性包含在网页中状态视图中保存的属性值。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-151">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property contains values for only the properties that are persisted in view state in the Web page.</span></span> <span data-ttu-id="0fd1e-152">在这些情况下将保留一个属性：</span><span class="sxs-lookup"><span data-stu-id="0fd1e-152">A property is persisted under these circumstances:</span></span>  
  
-   <span data-ttu-id="0fd1e-153">当它是数据绑定控件中显示。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-153">When it is displayed in a data-bound control.</span></span>  
  
-   <span data-ttu-id="0fd1e-154">当<xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=nameWithType>的属性<xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=nameWithType>属性设置为`Always`或`WhenChanged`。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-154">When the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=nameWithType> property of the <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=nameWithType> attribute is set to `Always` or `WhenChanged`.</span></span>  
  
 <span data-ttu-id="0fd1e-155">如果<xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A>属性设置为`Never`和的值不显示在数据绑定控件，在网页中不存储值。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-155">If the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> property is set to `Never` and the value is not displayed in a data-bound control, the value is not stored in the Web page.</span></span> <span data-ttu-id="0fd1e-156">在这种情况下，不能将它分配给<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-156">In that case, it cannot be assigned to the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0fd1e-157">下面的示例演示的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-157">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="0fd1e-158">该示例演示了如何比较中的属性<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A>属性和<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>属性来确定是否在值`Category`属性已更改。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-158">The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed.</span></span> <span data-ttu-id="0fd1e-159">如果是这样，`CategoryChanged`中的对象的属性<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="0fd1e-159">If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>