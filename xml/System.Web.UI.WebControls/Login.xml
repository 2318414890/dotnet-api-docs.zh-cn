<Type Name="Login" FullName="System.Web.UI.WebControls.Login">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5daee21dab9631e9fda4a85276f533c54caf34f4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30600491" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Login : System.Web.UI.WebControls.CompositeControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Login extends System.Web.UI.WebControls.CompositeControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Login" />
  <TypeSignature Language="VB.NET" Value="Public Class Login&#xA;Inherits CompositeControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Login : System::Web::UI::WebControls::CompositeControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.CompositeControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Authenticate")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LoginDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供用户界面 (UI) 元素以便登录网站。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本主题内容：  
  
-   [介绍](#introduction)  
  
-   [样式和模板](#styles_and_templates)  
  
-   [验证分组](#validation_groupings)  
  
-   [辅助功能](#accessibility)  
  
-   [应用 CSS 样式](#applying_styles)  
  
-   [声明性语法](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>介绍  
 <xref:System.Web.UI.WebControls.Login>控件是提供对 Web 站点上的用户进行身份验证所需所有常见 UI 元素的复合控件。 以下三个元素都需要所有登录方案：  
  
-   用于标识用户的唯一用户名。  
  
-   要验证的用户标识的密码。  
  
-   用于向服务器发送的登录信息的登录按钮。  
  
 <xref:System.Web.UI.WebControls.Login>控件还提供了以下可选 UI 元素，以便支持其他函数：  
  
-   对于密码提醒链接。  
  
-   记住我的复选框保留会话之间的登录信息。  
  
-   登录时出现问题的用户帮助链接。  
  
-   将用户重定向到的注册页注册新的用户链接。  
  
-   登录窗体显示的说明文本。  
  
-   当用户而不填充用户名称或密码字段中单击登录按钮时显示的自定义错误文本。  
  
-   显示登录失败时的自定义错误文本。  
  
-   发生登录成功后的自定义操作。  
  
-   如果用户已登录到站点隐藏 login 控件的方法。  
  
 显示哪些控件为必选和可选的表，请参阅<xref:System.Web.UI.WebControls.Login.LayoutTemplate%2A>属性。  
  
> [!NOTE]
>  如果你不熟悉的 ASP.NET 提供的登录控件集，请参阅[ASP.NET 登录控件概述](http://msdn.microsoft.com/library/ac032230-6469-4b03-b68d-03ef2643a24d)才能继续。 有关与登录控件和成员资格相关的其他主题的列表，请参阅[使用成员资格管理用户](http://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd)。  
  
> [!IMPORTANT]
>  接受用户输入是一个潜在的安全威胁。 恶意用户可以发送数据，用于公开的漏洞或运行程序会尝试生成的密码。 为了提高安全性，处理用户输入时，应使用的控件的验证功能和安全配置的任何数据提供程序为您的控件。 有关详细信息，请参阅[保护登录控件](http://msdn.microsoft.com/library/d85075bc-9c1a-4453-8a0c-539b10853c9c)， [Web 应用程序的基本安全实践](http://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad)，和[保护成员资格](http://msdn.microsoft.com/library/2dab2012-c278-426a-bb0d-93b260c428a7)。  
  
 <xref:System.Web.UI.WebControls.Login>控件使用成员资格提供程序来获取用户凭据。 除非另有指定，否则，<xref:System.Web.UI.WebControls.Login>控件使用 Web.config 文件中定义默认成员资格提供程序。 若要指定不同的提供程序，设置<xref:System.Web.UI.WebControls.Login.MembershipProvider%2A>到其中一个成员资格提供程序名称的属性在应用程序的 Web.config 文件中定义。 有关详细信息，请参阅[成员资格提供程序](http://msdn.microsoft.com/library/d2c90ff6-aa86-4001-b2c5-e5c99cb7f68f)。  
  
 如果你想要使用自定义身份验证服务，则可以使用<xref:System.Web.UI.WebControls.Login.OnAuthenticate%2A>方法来调用服务。  
  
<a name="styles_and_templates"></a>   
## <a name="styles-and-templates"></a>样式和模板  
 外观<xref:System.Web.UI.WebControls.Login>控件是通过模板和样式设置完全可自定义。 所有 UI 文本消息也都是可自定义的属性通过<xref:System.Web.UI.WebControls.Login>类。 默认接口文本自动进行了本地化基于服务器上的区域设置。  
  
 如果<xref:System.Web.UI.WebControls.Login>控件自定义模板，则<xref:System.Web.UI.WebControls.WebControl.AccessKey%2A>属性和<xref:System.Web.UI.WebControls.WebControl.TabIndex%2A>属性将被忽略。 在这种情况下，设置<xref:System.Web.UI.WebControls.WebControl.AccessKey%2A>属性和<xref:System.Web.UI.WebControls.WebControl.TabIndex%2A>直接每个模板子控件的属性。  
  
 <xref:System.Web.UI.WebControls.Login> 控件属性的文本框，如表示<xref:System.Web.UI.WebControls.Login.UserName%2A>和<xref:System.Web.UI.WebControls.Login.Password%2A>，页生命周期的所有阶段都可访问。 控件将选取由最终用户的方式进行任何更改<xref:System.Web.UI.WebControls.TextBox.TextChanged>由文本框触发的事件。  
  
> [!NOTE]
>  如果您嵌入<xref:System.Web.UI.WebControls.Login>中控制<xref:System.Web.UI.WebControls.WizardStep>对象，显式设置<xref:System.Web.UI.WebControls.Wizard.ActiveStepIndex%2A>中的属性`Page_Load`事件处理程序当用户进行身份验证。 <xref:System.Web.UI.WebControls.Wizard>控件没有自动前进到下一个<xref:System.Web.UI.WebControls.WizardStep>在此方案中的对象。  
  
 下表列出<xref:System.Web.UI.WebControls.Login>控件的样式属性并说明每个样式属性会影响哪些用户界面元素。 有关哪些属性的每个样式应用到的列表，请参阅的单个样式属性的文档。  
  
|样式属性|受影响的 UI 元素|  
|--------------------|-------------------------|  
|<xref:System.Web.UI.WebControls.Login.BorderPadding%2A>|控件内容和控件的边框之间的空间。|  
|<xref:System.Web.UI.WebControls.Login.CheckBoxStyle%2A>|记住我复选框。|  
|<xref:System.Web.UI.WebControls.Login.FailureTextStyle%2A>|登录失败文本。|  
|<xref:System.Web.UI.WebControls.Login.InstructionTextStyle%2A>|告知用户如何使用控件的页面上的说明文本。|  
|<xref:System.Web.UI.WebControls.Login.LabelStyle%2A>|所有输入字段，例如文本框的标签。|  
|<xref:System.Web.UI.WebControls.Login.TextBoxStyle%2A>|文本输入的输入的字段。|  
|<xref:System.Web.UI.WebControls.Login.TitleTextStyle%2A>|标题文本。|  
|<xref:System.Web.UI.WebControls.Login.ValidatorTextStyle%2A>|由于验证错误而失败的登录尝试时向用户显示的文本。|  
|<xref:System.Web.UI.WebControls.Login.HyperLinkStyle%2A>|链接到其他页。|  
|<xref:System.Web.UI.WebControls.Login.LoginButtonStyle%2A>|登录按钮。|  
  
<a name="validation_groupings"></a>   
## <a name="validation-groupings"></a>验证分组  
 <xref:System.Web.UI.WebControls.Login.UserName%2A>和<xref:System.Web.UI.WebControls.Login.Password%2A>属性具有<xref:System.Web.UI.WebControls.RequiredFieldValidator>与它们可以阻止用户且不提供所需的信息提交页面相关联的控件。  
  
 <xref:System.Web.UI.WebControls.Login>控件使用的验证组，以便在同一页上的其他字段<xref:System.Web.UI.WebControls.Login>单独验证控件。 默认情况下，<xref:System.Web.UI.Control.ID%2A>属性<xref:System.Web.UI.WebControls.Login>控件用作验证组的名称。 例如，<xref:System.Web.UI.WebControls.Login>具有 ID"Login1"控件将使用"Login1"的验证组名称。 如果你想要设置的验证组，<xref:System.Web.UI.WebControls.Login>控件是的一部分，您必须将控件模板和更改的验证组名称。  
  
<a name="applying_styles"></a>   
## <a name="applying-css-styles"></a>应用 CSS 样式  
 <xref:System.Web.UI.WebControls.Login>控制可用于在标记中指定 CSS 样式规则。 如果你使用模板的外观进行自定义<xref:System.Web.UI.WebControls.Login>控件，你可以在模板中标记中指定 CSS 样式。 在这种情况下，没有额外的外部表是必需的。 你可以防止通过设置呈现表<xref:System.Web.UI.WebControls.Login.RenderOuterTable%2A>属性`false`。  
  
<a name="accessibility"></a>   
## <a name="accessibility"></a>可访问性  
 有关如何配置此控件，以使其生成符合辅助功能标准的标记的信息，请参阅[Visual Studio 和 ASP.NET 中的辅助功能](http://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13)和[ASP.NET 控件和可访问性](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>声明性语法  
  
```  
<asp:Login  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderPadding="integer"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CreateUserIconUrl="uri"  
    CreateUserText="string"  
    CreateUserUrl="uri"  
    CssClass="string"  
    DestinationPageUrl="uri"  
    DisplayRememberMe="True|False"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    FailureAction="Refresh|RedirectToLoginPage"  
    FailureText="string"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
               Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    HelpPageIconUrl="uri"  
    HelpPageText="string"  
    HelpPageUrl="uri"  
    ID="string"  
    InstructionText="string"  
    LoginButtonImageUrl="uri"  
    LoginButtonText="string"  
    LoginButtonType="Button|Image|Link"  
    MembershipProvider="string"  
    OnAuthenticate="Authenticate event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnLoggedIn="LoggedIn event handler"  
    OnLoggingIn="LoggingIn event handler"  
    OnLoginError="LoginError event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    Orientation="Horizontal|Vertical"  
    PasswordLabelText="string"  
    PasswordRecoveryIconUrl="uri"  
    PasswordRecoveryText="string"  
    PasswordRecoveryUrl="uri"  
    PasswordRequiredErrorMessage="string"  
    RememberMeSet="True|False"  
    RememberMeText="string"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    TextLayout="TextOnLeft|TextOnTop"  
    TitleText="string"  
    ToolTip="string"  
    UserName="string"  
    UserNameLabelText="string"  
    UserNameRequiredErrorMessage="string"  
    Visible="True|False"  
    VisibleWhenLoggedIn="True|False"  
    Width="size"  
>  
        <CheckBoxStyle />  
        <FailureTextStyle />  
        <HyperLinkStyle />  
        <InstructionTextStyle />  
        <LabelStyle />  
        <LayoutTemplate>  
            <!-- child controls -->  
        </LayoutTemplate>  
        <LoginButtonStyle />  
        <TextBoxStyle />  
        <TitleTextStyle />  
        <ValidatorTextStyle />  
</asp:Login>  
```  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.Login>控件来提供 UI 用于登录到网站。  
  
 [!code-aspx-csharp[LoginClass#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginClass/CS/loginclasscs.aspx#1)]
 [!code-aspx-vb[LoginClass#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginClass/VB/loginclassvb.aspx#1)]  
  
 下面的代码示例演示如何将扩展<xref:System.Web.UI.WebControls.Login>控件。 `CustomLogin`控件包括<xref:System.Web.UI.WebControls.DropDownList>控件使用户可以选择使用进行身份验证的成员资格提供程序。 （这些提供程序配置在 Web.config 中。）在<xref:System.Web.UI.WebControls.Login.OnLoggingIn%2A>方法，<xref:System.Web.UI.WebControls.Login.MembershipProvider%2A>属性设置为的所选值<xref:System.Web.UI.WebControls.DropDownList>控件。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-csharp[Samples.AspNet.Controls.CustomLogin#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Controls.CustomLogin/CS/FarmasLogin.cs#1)]
 [!code-vb[Samples.AspNet.Controls.CustomLogin#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Controls.CustomLogin/VB/FarmasLogin.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Security.Membership" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Login ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Login.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Login();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Web.UI.WebControls.Login" /> 控件的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login>构造函数创建的新实例<xref:System.Web.UI.WebControls.Login>可以以编程方式插入到网页上的控件。  
  
 下表显示的新实例的初始属性值<xref:System.Web.UI.WebControls.Login>。  
  
|Property|初始值|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.Login.RememberMeSet%2A>|`true`|  
|<xref:System.Web.UI.WebControls.Login.VisibleWhenLoggedIn%2A>|`true`|  
|<xref:System.Web.UI.WebControls.Login.FailureAction%2A>|`true`|  
|<xref:System.Web.UI.WebControls.Login.FailureText%2A>|"您的登录尝试失败。 请重试。”|  
|<xref:System.Web.UI.WebControls.Login.MembershipProvider%2A>|"Default"|  
|<xref:System.Web.UI.WebControls.Login.Orientation%2A>|<xref:System.Web.UI.WebControls.Orientation.Vertical>|  
|<xref:System.Web.UI.WebControls.Login.PasswordLabelText%2A>|"Password:"|  
|<xref:System.Web.UI.WebControls.Login.PasswordRequiredErrorMessage%2A>|"密码。|  
|<xref:System.Web.UI.WebControls.Login.RememberMeSet%2A>|`false`|  
|<xref:System.Web.UI.WebControls.Login.RememberMeText%2A>|"记住我下一次。"|  
|<xref:System.Web.UI.WebControls.Login.LoginButtonText%2A>|"登录"|  
|<xref:System.Web.UI.WebControls.Login.TextLayout%2A>|<xref:System.Web.UI.WebControls.LoginTextLayout.TextOnLeft>|  
|<xref:System.Web.UI.WebControls.Login.TitleText%2A>|"登录"|  
|<xref:System.Web.UI.WebControls.Login.UserNameLabelText%2A>|"用户名称:"|  
|<xref:System.Web.UI.WebControls.Login.UserNameRequiredErrorMessage%2A>|"用户名称"。|  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.Login.%23ctor%2A>构造函数来创建的新实例<xref:System.Web.UI.WebControls.Login>控件并将添加到该实例<xref:System.Web.UI.Control.Controls%2A>集合<xref:System.Web.UI.WebControls.PlaceHolder>控件。  
  
 [!code-aspx-csharp[LoginLogin#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginLogin/CS/loginlogincs.aspx#1)]
 [!code-aspx-vb[LoginLogin#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginLogin/VB/loginloginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.AuthenticateEventHandler Authenticate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.AuthenticateEventHandler Authenticate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Login.Authenticate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Authenticate As AuthenticateEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::AuthenticateEventHandler ^ Authenticate;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.AuthenticateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>验证用户的身份后出现。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.Authenticate>用户使用时，将引发事件<xref:System.Web.UI.WebControls.Login>控件以要求在登录到网站。 可以使用自定义身份验证方案<xref:System.Web.UI.WebControls.Login.Authenticate>事件用户进行身份验证。  
  
> [!NOTE]
>  当用户使用<xref:System.Web.UI.WebControls.Login>控件中登录到网站时中的视图状态的所有数据和所有 post 数据将丢失。 不执行操作中的<xref:System.Web.UI.WebControls.Login.Authenticate>根据视图状态的事件。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.Login.Authenticate>事件来调用特定于站点的自定义身份验证的代码。  
  
 [!code-aspx-csharp[LoginAuthenticate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginAuthenticate/CS/loginauthenticatecs.aspx#1)]
 [!code-aspx-vb[LoginAuthenticate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginAuthenticate/VB/loginauthenticatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>自定义身份验证方案应设置<see cref="P:System.Web.UI.WebControls.AuthenticateEventArgs.Authenticated" />属性<see langword="true" />以指示用户已经过身份验证。  
  
 当用户提交他或她登录信息，<see cref="T:System.Web.UI.WebControls.Login" />控件首先引发<see cref="E:System.Web.UI.WebControls.Login.LoggingIn" />事件，则<see cref="E:System.Web.UI.WebControls.Login.Authenticate" />事件，并最后<see cref="E:System.Web.UI.WebControls.Login.LoggedIn" />事件。</para>
        </block>
        <altmember cref="T:System.Web.UI.WebControls.AuthenticateEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.AuthenticateEventArgs" />
        <altmember cref="M:System.Web.UI.WebControls.Login.OnAuthenticate(System.Web.UI.WebControls.AuthenticateEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BorderPadding">
      <MemberSignature Language="C#" Value="public virtual int BorderPadding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BorderPadding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.BorderPadding" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BorderPadding As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int BorderPadding { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.Login" /> 控件边框内的填充量。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.Login" /> 控件的内容与 <see cref="T:System.Web.UI.WebControls.Login" /> 控件的边框之间的空间量（以像素为单位）。 默认值为 <see langword="1" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Web.UI.WebControls.Login.BorderPadding%2A>属性存储视图状态中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Web.UI.WebControls.Login.BorderPadding" /> 属性被设置为小于 -1 的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckBoxStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle CheckBoxStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle CheckBoxStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.CheckBoxStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckBoxStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ CheckBoxStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对 <see cref="T:System.Web.UI.WebControls.Style" /> 对象的引用，它定义“记住我”复选框的设置。</summary>
        <value>对 <see cref="T:System.Web.UI.WebControls.Style" /> 的引用，它定义 <see cref="T:System.Web.UI.WebControls.Login" /> 控件的“记住我”复选框的样式设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.CheckBoxStyle%2A>属性获取的引用<xref:System.Web.UI.WebControls.Style>对象，供你用来更改的外观<xref:System.Web.UI.WebControls.Login>控件的记住我复选框。  
  
 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.Style>对象返回。 你可以在窗体中以声明方式设置这些属性`Property-Subproperty`，其中`Subproperty`表示的属性<xref:System.Web.UI.WebControls.Style>类 (例如， `CheckBoxStyle-ForeColor`)。 你可以以编程方式设置此属性的形式`Property.Subproperty`(例如， `CheckBoxStyle.ForeColor`)。  
  
 常用的设置包括自定义的背景色、 文本颜色和字体属性。 <xref:System.Web.UI.WebControls.Login.CheckBoxStyle%2A>属性定义的外观<xref:System.Web.UI.WebControls.Login.RememberMeText%2A>属性。  
  
 样式设置<xref:System.Web.UI.WebControls.Login.CheckBoxStyle%2A>属性合并的样式设置<xref:System.Web.UI.WebControls.Login>控件。 在中所做的任何设置<xref:System.Web.UI.WebControls.Login.CheckBoxStyle%2A>属性重写的属性中的相应设置<xref:System.Web.UI.WebControls.Login>控件。  
  
 以下<xref:System.Web.UI.WebControls.Login>控件样式属性重写了<xref:System.Web.UI.WebControls.Login.CheckBoxStyle%2A>设置：  
  
-   <xref:System.Web.UI.WebControls.WebControl.BackColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderStyle%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderWidth%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Enabled%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Font%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Height%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ToolTip%2A>  
  
-   <xref:System.Web.UI.Control.Visible%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Width%2A>  
  
 当你使用模板定义的外观<xref:System.Web.UI.WebControls.Login>控件，<xref:System.Web.UI.WebControls.Login.CheckBoxStyle%2A>属性不起作用。  
  
   
  
## Examples  
 下面的代码示例设置的文本颜色的记住我复选框以蓝色和字体样式为斜体通过设置属性的<xref:System.Web.UI.WebControls.Style>所引用对象<xref:System.Web.UI.WebControls.Login.CheckBoxStyle%2A>属性。  
  
 [!code-aspx-csharp[LoginCheckBoxStyle#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginCheckBoxStyle/CS/logincheckboxstylecs.aspx#1)]
 [!code-aspx-vb[LoginCheckBoxStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginCheckBoxStyle/VB/logincheckboxstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.RememberMeSet" />
        <altmember cref="P:System.Web.UI.WebControls.Login.RememberMeText" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected internal override void CreateChildControls ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void CreateChildControls() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Login.CreateChildControls" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub CreateChildControls ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void CreateChildControls();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建组成 <see cref="T:System.Web.UI.WebControls.Login" /> 控件的各个控件，并将事件处理程序与它们各自的事件相关联。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.CreateChildControls%2A>方法创建的控件的撰写实例<xref:System.Web.UI.WebControls.Login>控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUserIconUrl">
      <MemberSignature Language="C#" Value="public virtual string CreateUserIconUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CreateUserIconUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.CreateUserIconUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CreateUserIconUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CreateUserIconUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取显示在新用户的注册页链接旁边的图像的位置。</summary>
        <value>要显示的图像的 URL。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.CreateUserWizard" />
        <altmember cref="P:System.Web.UI.WebControls.Login.CreateUserText" />
        <altmember cref="P:System.Web.UI.WebControls.Login.CreateUserUrl" />
      </Docs>
    </Member>
    <Member MemberName="CreateUserText">
      <MemberSignature Language="C#" Value="public virtual string CreateUserText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CreateUserText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.CreateUserText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CreateUserText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CreateUserText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置新用户注册页的链接文本。</summary>
        <value>新用户注册页的链接文本。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.CreateUserText%2A>属性包含指向站点的注册页的文本。 注册页的 URL 中指定<xref:System.Web.UI.WebControls.Login.CreateUserUrl%2A>属性。  
  
 如果<xref:System.Web.UI.WebControls.Login.CreateUserUrl%2A>为空中的文本<xref:System.Web.UI.WebControls.Login.CreateUserText%2A>属性显示给用户，但未格式化的链接的形式。  
  
 如果<xref:System.Web.UI.WebControls.Login.CreateUserText%2A>属性为空，则在注册页的链接不是可供用户。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
   
  
## Examples  
 下面的代码示例设置<xref:System.Web.UI.WebControls.Login.CreateUserText%2A>属性设置为"注册新的用户..."  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[LoginCreateUserText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginCreateUserText/CS/logincreateusertextcs.aspx#1)]
 [!code-aspx-vb[LoginCreateUserText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginCreateUserText/VB/logincreateusertextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.CreateUserWizard" />
        <altmember cref="P:System.Web.UI.WebControls.Login.CreateUserIconUrl" />
        <altmember cref="P:System.Web.UI.WebControls.Login.CreateUserUrl" />
        <altmember cref="P:System.Web.UI.WebControls.Login.HyperLinkStyle" />
      </Docs>
    </Member>
    <Member MemberName="CreateUserUrl">
      <MemberSignature Language="C#" Value="public virtual string CreateUserUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CreateUserUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.CreateUserUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CreateUserUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CreateUserUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置新用户注册页的 URL。</summary>
        <value>新用户注册页的 URL。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.CreateUserUrl%2A>属性包含网站的新用户注册页的 URL。 <xref:System.Web.UI.WebControls.Login.CreateUserText%2A>属性包含用于链接的文本。  
  
 如果<xref:System.Web.UI.WebControls.Login.CreateUserText%2A>属性为空，则不向用户注册页链接。  
  
   
  
## Examples  
 下面的代码示例设置<xref:System.Web.UI.WebControls.Login.CreateUserUrl%2A>"register.aspx"的属性。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[LoginCreateUserText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginCreateUserText/CS/logincreateusertextcs.aspx#1)]
 [!code-aspx-vb[LoginCreateUserText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginCreateUserText/VB/logincreateusertextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.CreateUserWizard" />
        <altmember cref="P:System.Web.UI.WebControls.Login.CreateUserIconUrl" />
        <altmember cref="P:System.Web.UI.WebControls.Login.CreateUserText" />
      </Docs>
    </Member>
    <Member MemberName="DestinationPageUrl">
      <MemberSignature Language="C#" Value="public virtual string DestinationPageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationPageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.DestinationPageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DestinationPageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DestinationPageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在登录尝试成功时向用户显示的页面的 URL。</summary>
        <value>登录尝试成功时用户被重定向到的页面的 URL。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.DestinationPageUrl%2A>属性指定当登录尝试不成功时显示的页。  
  
 默认行为<xref:System.Web.UI.WebControls.Login>控制是将用户返回到引用的页中，或中定义的页`defaultUrl`的 Web.config 文件中的元素的属性。  
  
 <xref:System.Web.UI.WebControls.Login.DestinationPageUrl%2A>属性重写的默认行为<xref:System.Web.UI.WebControls.Login>控件，以及`defaultUrl`所做的配置文件中的设置。  
  
 无法通过主题或样式表主题设置此属性。 有关详细信息，请参阅<xref:System.Web.UI.ThemeableAttribute>和[ASP.NET 主题和皮肤](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)。  
  
   
  
## Examples  
 下面的代码示例设置<xref:System.Web.UI.WebControls.Login.DestinationPageUrl%2A>属性。 Page_Load 方法用于将引用的页面的 URL 附加到目标页的 URL，以便目标页可以将用户返回到原始页必要。  
  
 [!code-aspx-csharp[LoginDestinationPageUrl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginDestinationPageUrl/CS/logindestinationpageurlcs.aspx#1)]
 [!code-aspx-vb[LoginDestinationPageUrl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginDestinationPageUrl/VB/logindestinationpageurlvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayRememberMe">
      <MemberSignature Language="C#" Value="public virtual bool DisplayRememberMe { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisplayRememberMe" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.DisplayRememberMe" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DisplayRememberMe As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool DisplayRememberMe { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否显示复选框以使用户可以控制是否向浏览器发送持久性 Cookie。</summary>
        <value>
          如果显示复选框，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Web.UI.WebControls.Login.DisplayRememberMe%2A>属性设置为`true`中, 包含的文本<xref:System.Web.UI.WebControls.Login.RememberMeText%2A>页面上显示属性，以及记住我复选框。 当用户选择记住我复选框，发送到他或她的计算机的身份验证 cookie 仍然存在，以便将来访问站点上自动验证用户。 值<xref:System.Web.UI.WebControls.Login.RememberMeSet%2A>属性由设置所选内容中记住我复选框。  
  
 如果<xref:System.Web.UI.WebControls.Login.DisplayRememberMe%2A>是`false`、 记住我复选框不会显示在页面和用户是否身份验证 cookie 仍然存在或不具有不能控制。 您仍可以设置<xref:System.Web.UI.WebControls.Login.RememberMeSet%2A>属性`true`发送到用户的浏览器的持久性身份验证 cookie，而不显示复选框。  
  
> [!NOTE]
>  没有与用户的浏览器上设置持久性身份验证 cookie 的固有安全风险。 你应该确定是否可以接受你的站点的这些安全风险。 如果你设置<xref:System.Web.UI.WebControls.Login.RememberMeSet%2A>属性`true`和<xref:System.Web.UI.WebControls.Login.DisplayRememberMe%2A>属性`false`、 从公共浏览器中，如下所示吧例如，可以意外留下持久身份验证 cookie 的 Internet 访问你的网站的用户和下一步的浏览器的用户将能够访问您的网站以使用以前用户的凭据。  
  
 无法通过主题或样式表主题设置此属性。 有关详细信息，请参阅<xref:System.Web.UI.ThemeableAttribute>和[ASP.NET 主题和皮肤](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)。  
  
   
  
## Examples  
 下面的代码示例禁用了记住我复选框通过设置<xref:System.Web.UI.WebControls.Login.DisplayRememberMe%2A>属性`false`。  
  
 [!code-aspx-csharp[LoginEnableRememberMe#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginEnableRememberMe/CS/loginenableremembermecs.aspx#1)]
 [!code-aspx-vb[LoginEnableRememberMe#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginEnableRememberMe/VB/loginenableremembermevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.RememberMeSet" />
      </Docs>
    </Member>
    <Member MemberName="FailureAction">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.LoginFailureAction FailureAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.LoginFailureAction FailureAction" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.FailureAction" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property FailureAction As LoginFailureAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::LoginFailureAction FailureAction { System::Web::UI::WebControls::LoginFailureAction get(); void set(System::Web::UI::WebControls::LoginFailureAction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LoginFailureAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当登录尝试失败时发生的操作。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.LoginFailureAction" /> 枚举值之一。 默认值为 <see cref="F:System.Web.UI.WebControls.LoginFailureAction.Refresh" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.FailureAction%2A>属性定义的行为<xref:System.Web.UI.WebControls.Login>控制当用户没有成功登录到网站。  
  
 默认行为重新加载页面，并显示的内容<xref:System.Web.UI.WebControls.Login.FailureText%2A>属性来提醒用户的登录尝试失败。  
  
 当<xref:System.Web.UI.WebControls.Login.FailureAction%2A>设置为<xref:System.Web.UI.WebControls.LoginFailureAction.RedirectToLoginPage>，用户定向到 Web.config 文件中定义的登录页。  
  
 无法通过主题或样式表主题设置此属性。 有关详细信息，请参阅<xref:System.Web.UI.ThemeableAttribute>和[ASP.NET 主题和皮肤](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)。  
  
   
  
## Examples  
 下面的代码示例演示如何设置<xref:System.Web.UI.WebControls.Login.FailureAction%2A>属性以声明方式和代码。  
  
 [!code-aspx-csharp[LoginLoginFailureAction#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginLoginFailureAction/CS/loginloginfailureactioncs.aspx#1)]
 [!code-aspx-vb[LoginLoginFailureAction#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginLoginFailureAction/VB/loginloginfailureactionvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所选的值不是 <see cref="T:System.Web.UI.WebControls.LoginFailureAction" /> 枚举值之一。</exception>
      </Docs>
    </Member>
    <Member MemberName="FailureText">
      <MemberSignature Language="C#" Value="public virtual string FailureText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FailureText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.FailureText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property FailureText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FailureText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当登录尝试失败时显示的文本。</summary>
        <value>当登录尝试失败时向用户显示的文本。 默认值为“您的登录尝试失败。 请重试。”</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.FailureText%2A>属性指定的登录尝试失败时显示的字符串。  
  
 如果你定义的模板<xref:System.Web.UI.WebControls.Login>其中要显示的模板上的控件，可以指示<xref:System.Web.UI.WebControls.Login.FailureText%2A>属性使用<xref:System.Web.UI.WebControls.Literal>控件并提供相关的控件 ID"FailureText"。 当你使用模板，<xref:System.Web.UI.WebControls.Login.FailureTextStyle%2A>属性不应用于中指定的文本<xref:System.Web.UI.WebControls.Login.FailureText%2A>属性。  
  
 属性的默认文本进行了本地化根据服务器的当前区域设置。  
  
> [!NOTE]
>  出于安全原因，登录失败文本不应包含失败的特定原因。 例如，例如错误消息"的用户密码无效\<用户名 >"显示给潜在的攻击者，\<用户名 > 是在系统上的用户。 有关详细信息，请参阅[如何： 显示安全错误消息](http://msdn.microsoft.com/library/6f70ac33-6e11-4e98-ab7d-bae9c0e7eefa)。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
   
  
## Examples  
 下面的代码示例设置<xref:System.Web.UI.WebControls.Login.FailureText%2A>属性设置为"出错时中的日志记录你。 请重试。"。  
  
 [!code-aspx-csharp[LoginLoginFailureText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginLoginFailureText/CS/loginloginfailuretextcs.aspx#1)]
 [!code-aspx-vb[LoginLoginFailureText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginLoginFailureText/VB/loginloginfailuretextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.FailureTextStyle" />
      </Docs>
    </Member>
    <Member MemberName="FailureTextStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle FailureTextStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle FailureTextStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.FailureTextStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FailureTextStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ FailureTextStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对属性集合的引用，这些属性定义 <see cref="T:System.Web.UI.WebControls.Login" /> 控件中错误文本的外观。</summary>
        <value>对包含定义错误文本外观的属性的 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.FailureTextStyle%2A>属性获取的引用<xref:System.Web.UI.WebControls.TableItemStyle>对象，供你用来更改登录失败文本的外观。 默认值是以红色显示文本。  
  
 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.TableItemStyle>对象返回。 你可以在窗体中以声明方式设置这些属性`Property-Subproperty`，其中`Subproperty`表示的属性<xref:System.Web.UI.WebControls.TableItemStyle>类 (例如， `FailureTextStyle-ForeColor`)。 你可以以编程方式设置此属性的形式`Property.Subproperty`(例如， `FailureTextStyle.ForeColor`)。  
  
 常用的设置包括自定义的背景色、 文本颜色和字体属性。 <xref:System.Web.UI.WebControls.Login.FailureTextStyle%2A>属性定义的外观<xref:System.Web.UI.WebControls.Login.FailureText%2A>属性。  
  
 样式设置<xref:System.Web.UI.WebControls.Login.FailureTextStyle%2A>属性合并的样式设置<xref:System.Web.UI.WebControls.Login>控件。 在中所做的任何设置<xref:System.Web.UI.WebControls.Login.FailureTextStyle%2A>属性重写的属性中的相应设置<xref:System.Web.UI.WebControls.Login>控件。  
  
 以下<xref:System.Web.UI.WebControls.Login>控件样式属性重写了<xref:System.Web.UI.WebControls.Login.FailureTextStyle%2A>设置：  
  
-   <xref:System.Web.UI.WebControls.WebControl.BackColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderStyle%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderWidth%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Enabled%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Font%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Height%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ToolTip%2A>  
  
-   <xref:System.Web.UI.Control.Visible%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Width%2A>  
  
 当你使用模板定义的外观<xref:System.Web.UI.WebControls.Login>控件，<xref:System.Web.UI.WebControls.Login.FailureTextStyle%2A>属性不起作用。  
  
   
  
## Examples  
 下面的代码示例通过设置背景和文本的颜色属性指定的登录名失败文本样式<xref:System.Web.UI.WebControls.TableItemStyle>中引用对象<xref:System.Web.UI.WebControls.Login.FailureTextStyle%2A>属性。  
  
 [!code-aspx-csharp[LoginLoginFailureText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginLoginFailureText/CS/loginloginfailuretextcs.aspx#1)]
 [!code-aspx-vb[LoginLoginFailureText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginLoginFailureText/VB/loginloginfailuretextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.FailureText" />
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
      </Docs>
    </Member>
    <Member MemberName="HelpPageIconUrl">
      <MemberSignature Language="C#" Value="public virtual string HelpPageIconUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpPageIconUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.HelpPageIconUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HelpPageIconUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpPageIconUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要在登录帮助页面的链接旁显示的图像的位置。</summary>
        <value>要显示的图像的 URL。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.HelpPageText" />
        <altmember cref="P:System.Web.UI.WebControls.Login.HelpPageUrl" />
      </Docs>
    </Member>
    <Member MemberName="HelpPageText">
      <MemberSignature Language="C#" Value="public virtual string HelpPageText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpPageText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.HelpPageText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HelpPageText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpPageText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置登录帮助页链接的文本。</summary>
        <value>登录帮助页链接的文本。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.HelpPageText%2A>属性包含该网站的登录帮助页的链接文本。 登录帮助页的 URL 中指定<xref:System.Web.UI.WebControls.Login.HelpPageUrl%2A>属性。  
  
 如果<xref:System.Web.UI.WebControls.Login.HelpPageUrl%2A>为空中的文本<xref:System.Web.UI.WebControls.Login.HelpPageText%2A>向在页上，用户显示的属性，但未格式化的链接的形式。  
  
 如果<xref:System.Web.UI.WebControls.Login.HelpPageText%2A>属性为空，登录帮助页的链接，不能给用户。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.Login.HelpPageText%2A>属性来指定站点的登录帮助页的链接的文本。  
  
 [!code-aspx-csharp[LoginHelpPageText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginHelpPageText/CS/loginhelppagetextcs.aspx#1)]
 [!code-aspx-vb[LoginHelpPageText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginHelpPageText/VB/loginhelppagetextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.HelpPageIconUrl" />
        <altmember cref="P:System.Web.UI.WebControls.Login.HelpPageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.Login.HyperLinkStyle" />
      </Docs>
    </Member>
    <Member MemberName="HelpPageUrl">
      <MemberSignature Language="C#" Value="public virtual string HelpPageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpPageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.HelpPageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HelpPageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpPageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置登录帮助页的 URL。</summary>
        <value>登录帮助页的 URL。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.HelpPageUrl%2A>属性包含网站的登录帮助页的 URL。 <xref:System.Web.UI.WebControls.Login.HelpPageText%2A>属性包含用于链接的文本。  
  
 如果<xref:System.Web.UI.WebControls.Login.HelpPageUrl%2A>为空中的文本<xref:System.Web.UI.WebControls.Login.HelpPageText%2A>属性显示给用户，但未格式化的链接的形式。  
  
 如果<xref:System.Web.UI.WebControls.Login.HelpPageText%2A>属性为空，登录帮助页的链接，不能给用户。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.Login.HelpPageUrl%2A>属性指定的网站的登录名的帮助页的 URL。  
  
 [!code-aspx-csharp[LoginHelpPageText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginHelpPageText/CS/loginhelppagetextcs.aspx#1)]
 [!code-aspx-vb[LoginHelpPageText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginHelpPageText/VB/loginhelppagetextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.HelpPageIconUrl" />
        <altmember cref="P:System.Web.UI.WebControls.Login.HelpPageText" />
      </Docs>
    </Member>
    <Member MemberName="HyperLinkStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle HyperLinkStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle HyperLinkStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.HyperLinkStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HyperLinkStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ HyperLinkStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对属性集合的引用，这些属性定义 <see cref="T:System.Web.UI.WebControls.Login" /> 控件中超链接的外观。</summary>
        <value>对包含定义超链接外观的属性的 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.HyperLinkStyle%2A>属性定义中的超链接的外观<xref:System.Web.UI.WebControls.Login>控件。 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.TableItemStyle>对象返回。 你可以在窗体中以声明方式设置这些属性`Property-Subproperty`，其中`Subproperty`表示的属性<xref:System.Web.UI.WebControls.TableItemStyle>类 (例如， `HyperLinkStyle-ForeColor`)。 你可以以编程方式设置此属性的形式`Property.Subproperty`(例如， `HyperLinkStyle.ForeColor`)。  
  
 常用的设置包括自定义的背景色、 文本颜色和字体属性。 <xref:System.Web.UI.WebControls.Login.HyperLinkStyle%2A>属性定义以下属性的外观：  
  
-   <xref:System.Web.UI.WebControls.Login.CreateUserText%2A>  
  
-   <xref:System.Web.UI.WebControls.Login.HelpPageText%2A>  
  
-   <xref:System.Web.UI.WebControls.Login.PasswordRecoveryText%2A>  
  
 样式设置<xref:System.Web.UI.WebControls.Login.HyperLinkStyle%2A>属性合并的样式设置<xref:System.Web.UI.WebControls.Login>控件。 在中所做的任何设置<xref:System.Web.UI.WebControls.Login.HyperLinkStyle%2A>属性重写的属性中的相应设置<xref:System.Web.UI.WebControls.Login>控件。  
  
 以下<xref:System.Web.UI.WebControls.Login>样式属性重写了<xref:System.Web.UI.WebControls.Login.HyperLinkStyle%2A>设置：  
  
-   <xref:System.Web.UI.WebControls.WebControl.BackColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderStyle%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderWidth%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Enabled%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Font%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Height%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ToolTip%2A>  
  
-   <xref:System.Web.UI.Control.Visible%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Width%2A>  
  
 当你使用模板定义的外观<xref:System.Web.UI.WebControls.Login>控件，<xref:System.Web.UI.WebControls.Login.HyperLinkStyle%2A>属性不起作用。  
  
   
  
## Examples  
 下面的代码示例设置中的超链接<xref:System.Web.UI.WebControls.Login>绿色斜体文本格式设置的属性的控件<xref:System.Web.UI.WebControls.TableItemStyle>所引用对象<xref:System.Web.UI.WebControls.Login.HyperLinkStyle%2A>属性。  
  
 [!code-aspx-csharp[LoginHyperLinkStyle#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginHyperLinkStyle/CS/loginhyperlinkstylecs.aspx#1)]
 [!code-aspx-vb[LoginHyperLinkStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginHyperLinkStyle/VB/loginhyperlinkstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.CreateUserUrl" />
        <altmember cref="P:System.Web.UI.WebControls.Login.HelpPageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.Login.PasswordRecoveryUrl" />
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
      </Docs>
    </Member>
    <Member MemberName="InstructionText">
      <MemberSignature Language="C#" Value="public virtual string InstructionText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InstructionText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.InstructionText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property InstructionText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ InstructionText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用户的登录说明文本。</summary>
        <value>向用户显示的登录说明文本。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.InstructionText%2A>属性包含有关用户登录到网站的说明。 此文本显示在<xref:System.Web.UI.WebControls.Login>控件，在标题后。  
  
 如果<xref:System.Web.UI.WebControls.Login.InstructionText%2A>属性设置为<xref:System.String.Empty>，没有指令文本是可供用户。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.Login.InstructionText%2A>属性将指令中的文本插入<xref:System.Web.UI.WebControls.Login>控件。  
  
 [!code-aspx-csharp[LoginInstructionText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginInstructionText/CS/logininstructiontextcs.aspx#1)]
 [!code-aspx-vb[LoginInstructionText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginInstructionText/VB/logininstructiontextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.InstructionTextStyle" />
      </Docs>
    </Member>
    <Member MemberName="InstructionTextStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle InstructionTextStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle InstructionTextStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.InstructionTextStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstructionTextStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ InstructionTextStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，该对象定义 <see cref="T:System.Web.UI.WebControls.Login" /> 控件中的说明文本的设置。</summary>
        <value>对包含 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 控件说明文本的样式设置的 <see cref="T:System.Web.UI.WebControls.Login" /> 的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.InstructionTextStyle%2A>属性定义中的说明文本的外观<xref:System.Web.UI.WebControls.Login>控件。 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.TableItemStyle>对象返回。 你可以在窗体中以声明方式设置这些属性`Property-Subproperty`，其中`Subproperty`表示的属性<xref:System.Web.UI.WebControls.TableItemStyle>类 (例如， `InstructionTextStyle-ForeColor`)。 你可以以编程方式设置此属性的形式`Property.Subproperty`(例如， `InstructionTextStyle.ForeColor`)。  
  
 常用的设置包括自定义的背景色、 文本颜色和字体属性。 <xref:System.Web.UI.WebControls.Login.InstructionTextStyle%2A>属性定义的外观<xref:System.Web.UI.WebControls.Login.InstructionText%2A>属性。  
  
 样式设置<xref:System.Web.UI.WebControls.Login.InstructionTextStyle%2A>属性合并的样式设置<xref:System.Web.UI.WebControls.Login>控件。 在中所做的任何设置<xref:System.Web.UI.WebControls.Login.InstructionTextStyle%2A>属性重写的属性中的相应设置<xref:System.Web.UI.WebControls.Login>控件。  
  
 以下<xref:System.Web.UI.WebControls.Login>样式属性重写了<xref:System.Web.UI.WebControls.Login.InstructionTextStyle%2A>设置：  
  
-   <xref:System.Web.UI.WebControls.WebControl.BackColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderStyle%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderWidth%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Enabled%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Font%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Height%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ToolTip%2A>  
  
-   <xref:System.Web.UI.Control.Visible%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Width%2A>  
  
 当你使用模板定义的外观<xref:System.Web.UI.WebControls.Login>控件，<xref:System.Web.UI.WebControls.Login.InstructionTextStyle%2A>属性不起作用。  
  
   
  
## Examples  
 下面的代码示例通过设置属性的设置的说明文本和说明文本的背景色<xref:System.Web.UI.WebControls.TableItemStyle>所引用对象<xref:System.Web.UI.WebControls.Login.InstructionTextStyle%2A>属性。  
  
 [!code-aspx-csharp[LoginInstructionText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginInstructionText/CS/logininstructiontextcs.aspx#1)]
 [!code-aspx-vb[LoginInstructionText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginInstructionText/VB/logininstructiontextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LabelStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle LabelStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle LabelStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.LabelStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LabelStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ LabelStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，此对象定义 <see cref="T:System.Web.UI.WebControls.Login" /> 控件标签的设置。</summary>
        <value>对定义 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 控件标签的样式设置的 <see cref="T:System.Web.UI.WebControls.Login" /> 的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.LabelStyle%2A>属性定义中文本框标签的外观<xref:System.Web.UI.WebControls.Login>控件。 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.TableItemStyle>对象返回。 你可以在窗体中以声明方式设置这些属性`Property-Subproperty`，其中`Subproperty`表示的属性<xref:System.Web.UI.WebControls.TableItemStyle>类 (例如， `LabelStyle-ForeColor`)。 你可以以编程方式设置此属性的形式`Property.Subproperty`(例如， `LableStyle.ForeColor`)。  
  
 常用的设置包括自定义的背景色、 文本颜色和字体属性。 <xref:System.Web.UI.WebControls.Login.LabelStyle%2A>属性定义以下属性的外观：  
  
-   <xref:System.Web.UI.WebControls.Login.PasswordLabelText%2A>  
  
-   <xref:System.Web.UI.WebControls.Login.UserNameLabelText%2A>  
  
 样式设置<xref:System.Web.UI.WebControls.Login.LabelStyle%2A>属性合并的样式设置<xref:System.Web.UI.WebControls.Login>控件。 在中所做的任何设置<xref:System.Web.UI.WebControls.Login.LabelStyle%2A>属性重写的属性中的相应设置<xref:System.Web.UI.WebControls.Login>控件。  
  
 以下<xref:System.Web.UI.WebControls.Login>样式属性重写了<xref:System.Web.UI.WebControls.Login.LabelStyle%2A>设置：  
  
-   <xref:System.Web.UI.WebControls.WebControl.BackColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderStyle%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderWidth%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Enabled%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Font%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Height%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ToolTip%2A>  
  
-   <xref:System.Web.UI.Control.Visible%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Width%2A>  
  
 当你使用模板定义的外观<xref:System.Web.UI.WebControls.Login>控件，<xref:System.Web.UI.WebControls.Login.LabelStyle%2A>属性不起作用。  
  
   
  
## Examples  
 下面的代码示例设置的文本框标签，以便通过设置属性的蓝色斜体文本<xref:System.Web.UI.WebControls.TableItemStyle>所引用对象<xref:System.Web.UI.WebControls.Login.LabelStyle%2A>属性。  
  
 [!code-aspx-csharp[LoginLabelStyle#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginLabelStyle/CS/loginlabelstylecs.aspx#1)]
 [!code-aspx-vb[LoginLabelStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginLabelStyle/VB/loginlabelstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.PasswordLabelText" />
        <altmember cref="P:System.Web.UI.WebControls.Login.UserNameLabelText" />
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
      </Docs>
    </Member>
    <Member MemberName="LayoutTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate LayoutTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate LayoutTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.LayoutTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property LayoutTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ LayoutTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.Login))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于显示 <see cref="T:System.Web.UI.WebControls.Login" /> 控件的模板。</summary>
        <value>
          <see cref="T:System.Web.UI.ITemplate" />，包含用于显示 <see cref="T:System.Web.UI.WebControls.Login" /> 控件的模板。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.LayoutTemplate%2A>属性包含模板，它定义如何<xref:System.Web.UI.WebControls.Login>向用户显示控件。  
  
 下表列出了使用中的必选和可选控件<xref:System.Web.UI.WebControls.Login>控件模板。  
  
|ID 或命令名称|控件类型|必需/可选|  
|------------------------|------------------|------------------------|  
|`UserName`|实现任何控件<xref:System.Web.UI.IEditableTextControl>，包括<xref:System.Web.UI.WebControls.TextBox>，或自定义或第三方控件。|必需|  
|`Password`|实现任何控件<xref:System.Web.UI.IEditableTextControl>，包括<xref:System.Web.UI.WebControls.TextBox>，或自定义或第三方控件。|必需|  
|`RememberMe`|<xref:System.Web.UI.WebControls.CheckBox>|Optional|  
|`FailureText`|实现任何控件<xref:System.Web.UI.ITextControl>。|Optional|  
|`Login`|导致事件冒泡任何控件。|Optional|  
  
 <xref:System.Web.UI.WebControls.Login>控件将引发<xref:System.Web.HttpException>异常如果布局模板不包含所需的控件。 在可选控件 ID 赋予错误类型; 的控件不引发任何异常但是，该控件随后将被忽略<xref:System.Web.UI.WebControls.Login>控件。  
  
 登录控件均可以是导致事件上传方法，如任何控件<xref:System.Web.UI.WebControls.Button>， <xref:System.Web.UI.WebControls.LinkButton>，或<xref:System.Web.UI.WebControls.ImageButton>。 控件的命令名称属性必须设置为"登录"。  
  
 当模板用于<xref:System.Web.UI.WebControls.Login>控件时，只有以下属性会影响控件的行为：  
  
-   所有属性都继承自<xref:System.Web.UI.WebControls.WebControl>。 (有关详细信息，请参阅<xref:System.Web.UI.WebControls.Login>控件成员表。)  
  
-   <xref:System.Web.UI.WebControls.Login.DestinationPageUrl%2A>。  
  
-   <xref:System.Web.UI.WebControls.Login.VisibleWhenLoggedIn%2A>。  
  
-   <xref:System.Web.UI.WebControls.Login.LayoutTemplate%2A>。  
  
-   <xref:System.Web.UI.WebControls.Login.FailureAction%2A>。  
  
-   <xref:System.Web.UI.WebControls.Login.MembershipProvider%2A>。  
  
-   <xref:System.Web.UI.WebControls.Login.Password%2A>。  
  
-   <xref:System.Web.UI.WebControls.Login.RememberMeSet%2A>。  
  
-   <xref:System.Web.UI.WebControls.Login.UserName%2A>。  
  
 为设置模板时，所有其他属性都是处于非活动状态<xref:System.Web.UI.WebControls.Login>控件。  
  
   
  
## Examples  
 下面的代码示例为创建一个模板<xref:System.Web.UI.WebControls.Login>控件。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[LoginLayoutTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginLayoutTemplate/CS/loginlayouttemplatecs.aspx#1)]
 [!code-aspx-vb[LoginLayoutTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginLayoutTemplate/VB/loginlayouttemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Login.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">一个表示要还原的控件状态的对象。</param>
        <summary>从用 <see cref="M:System.Web.UI.WebControls.WebControl.SaveViewState" /> 方法保存的上一个请求还原视图状态信息。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="savedState" /> 不是有效的 <see cref="P:System.Web.UI.PageStatePersister.ViewState" />。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebControl.LoadViewState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LoggedIn">
      <MemberSignature Language="C#" Value="public event EventHandler LoggedIn;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LoggedIn" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Login.LoggedIn" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LoggedIn As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LoggedIn;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在用户登录到网站并进行身份验证后出现。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.LoggedIn>之后身份验证提供程序将检查用户的凭据和身份验证 cookie 排队等待发送到下一步的响应中的浏览器，将引发事件。 使用<xref:System.Web.UI.WebControls.Login.LoggedIn>事件，以便提供额外的处理，例如用户进行身份验证之后访问每个用户数据。  
  
 当用户提交他或她登录信息，<xref:System.Web.UI.WebControls.Login>控件首先引发<xref:System.Web.UI.WebControls.Login.LoggingIn>事件，则<xref:System.Web.UI.WebControls.Login.Authenticate>事件，并最后<xref:System.Web.UI.WebControls.Login.LoggedIn>事件。  
  
> [!NOTE]
>  当用户使用<xref:System.Web.UI.WebControls.Login>控件中登录到网站时中的视图状态的所有数据和所有 post 数据将丢失。 不执行操作中的<xref:System.Web.UI.WebControls.Login.LoggedIn>根据视图状态的事件。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.Login.LoggedIn>事件调用记录的用户登录名的特定于站点方法。  
  
 [!code-aspx-csharp[LoginAfterLogin#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginAfterLogin/CS/loginafterlogincs.aspx#1)]
 [!code-aspx-vb[LoginAfterLogin#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginAfterLogin/VB/loginafterloginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoggingIn">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.LoginCancelEventHandler LoggingIn;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.LoginCancelEventHandler LoggingIn" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Login.LoggingIn" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LoggingIn As LoginCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::LoginCancelEventHandler ^ LoggingIn;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LoginCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在用户未进行身份验证而提交登录信息时出现。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.LoggingIn>当用户提交登录信息，但在用户进行身份验证网站上之前，将引发事件。 使用<xref:System.Web.UI.WebControls.Login.LoggingIn>事件来设置对用户进行身份验证之前，你需要的任何信息。  
  
 你可以取消的登录尝试期间<xref:System.Web.UI.WebControls.Login.LoggingIn>事件通过设置<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性<xref:System.ComponentModel.CancelEventArgs>对象传递给`true`。  
  
 后<xref:System.Web.UI.WebControls.Login.LoggingIn>引发事件时，<xref:System.Web.UI.WebControls.Login>控件都将引发<xref:System.Web.UI.WebControls.Login.Authenticate>事件，然后<xref:System.Web.UI.WebControls.Login.LoggedIn>事件。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.Login.LoggingIn>事件，以确保用户输入中的格式正确的电子邮件地址<xref:System.Web.UI.WebControls.Login.UserName%2A>属性。 如果没有，则<xref:System.Web.UI.WebControls.Login.LoggingIn>事件取消的登录尝试，并显示错误消息使用<xref:System.Web.UI.WebControls.Login.InstructionText%2A>属性。  
  
 [!code-aspx-csharp[LoginBeforeLogin#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginBeforeLogin/CS/loginbeforelogincs.aspx#1)]
 [!code-aspx-vb[LoginBeforeLogin#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginBeforeLogin/VB/loginbeforeloginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoginButtonCommandName">
      <MemberSignature Language="C#" Value="public static readonly string LoginButtonCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string LoginButtonCommandName" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.Login.LoginButtonCommandName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoginButtonCommandName As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ LoginButtonCommandName;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与登录按钮关联的命令名。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.LoginButtonCommandName> 为只读字段，默认值为"登录"。 此值传递给<xref:System.Web.UI.WebControls.Login.OnBubbleEvent%2A>，如果值为"登录"，尝试登录当前的用户控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoginButtonImageUrl">
      <MemberSignature Language="C#" Value="public virtual string LoginButtonImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LoginButtonImageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.LoginButtonImageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property LoginButtonImageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ LoginButtonImageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置登录按钮使用的图像的 URL。</summary>
        <value>登录按钮使用的图像的 URL。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.LoginButtonImageUrl%2A>属性包含呈现为图像的 URL<xref:System.Web.UI.WebControls.Login>控件登录按钮时<xref:System.Web.UI.WebControls.Login.LoginButtonType%2A>属性设置为<xref:System.Web.UI.WebControls.ButtonType.Image>。  
  
 <xref:System.Web.UI.WebControls.Login.LoginButtonText%2A>属性用作中不显示图像的浏览器的图像的替换文字。  
  
   
  
## Examples  
 下面的代码示例设置<xref:System.Web.UI.WebControls.Login.LoginButtonImageUrl%2A>属性的图像的 URL。  
  
 [!code-aspx-csharp[LoginSubmitButtonImageUrl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginSubmitButtonImageUrl/CS/loginsubmitbuttonimageurlcs.aspx#1)]
 [!code-aspx-vb[LoginSubmitButtonImageUrl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginSubmitButtonImageUrl/VB/loginsubmitbuttonimageurlvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoginButtonStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Style LoginButtonStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.Style LoginButtonStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.LoginButtonStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LoginButtonStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::Style ^ LoginButtonStyle { System::Web::UI::WebControls::Style ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对 <see cref="T:System.Web.UI.WebControls.Style" /> 对象的引用，该对象允许您设置 <see cref="T:System.Web.UI.WebControls.Login" /> 控件中登录按钮的外观。</summary>
        <value>对表示登录按钮样式的 <see cref="T:System.Web.UI.WebControls.Style" /> 的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.Login.LoginButtonStyle%2A>属性来控制中的登录按钮的外观<xref:System.Web.UI.WebControls.Login>控件。 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.Style>对象返回。 你可以在窗体中以声明方式设置这些属性`Property-Subproperty`，其中`Subproperty`表示的属性<xref:System.Web.UI.WebControls.Style>类 (例如， `LoginButtonStyle-ForeColor`)。 你可以以编程方式设置此属性的形式`Property.Subproperty`(例如， `LoginButtonStyle.ForeColor`)。  
  
 常用的设置包括自定义的背景色、 文本颜色和字体属性。 <xref:System.Web.UI.WebControls.Login.LoginButtonStyle%2A>属性定义的登录按钮的外观。  
  
 样式设置<xref:System.Web.UI.WebControls.Login.LoginButtonStyle%2A>属性合并的样式设置<xref:System.Web.UI.WebControls.Login>控件。 在中所做的任何设置<xref:System.Web.UI.WebControls.Login.LoginButtonStyle%2A>属性重写的属性中的相应设置<xref:System.Web.UI.WebControls.Login>控件。  
  
 以下<xref:System.Web.UI.WebControls.Login>样式属性重写了<xref:System.Web.UI.WebControls.Login.LoginButtonStyle%2A>设置：  
  
-   <xref:System.Web.UI.WebControls.WebControl.BackColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderStyle%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderWidth%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Enabled%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Font%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Height%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ToolTip%2A>  
  
-   <xref:System.Web.UI.Control.Visible%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Width%2A>  
  
 当你使用模板定义的外观<xref:System.Web.UI.WebControls.Login>控件，<xref:System.Web.UI.WebControls.Login.LoginButtonStyle%2A>属性不起作用。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.Login.LoginButtonStyle%2A>属性来定义的外观<xref:System.Web.UI.WebControls.Login>控件登录按钮。  
  
 [!code-aspx-csharp[LoginButtonStyle#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginButtonStyle/CS/loginbuttonstylecs.aspx#1)]
 [!code-aspx-vb[LoginButtonStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginButtonStyle/VB/loginbuttonstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoginButtonText">
      <MemberSignature Language="C#" Value="public virtual string LoginButtonText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LoginButtonText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.LoginButtonText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property LoginButtonText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ LoginButtonText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.Login" /> 控件的登录按钮的文本。</summary>
        <value>用于 <see cref="T:System.Web.UI.WebControls.Login" /> 控件的登录按钮的文本。 默认值为“Login”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.LoginButtonText%2A>属性包含为显示的文本<xref:System.Web.UI.WebControls.Login>控件的登录按钮。 根据值<xref:System.Web.UI.WebControls.Login.LoginButtonType%2A>属性，<xref:System.Web.UI.WebControls.Login.LoginButtonText%2A>属性可以显示为上一个按钮的文本显示在浏览器中不呈现图像，图像的替代项为或链接的文本的文本。 下表描述了如何不同<xref:System.Web.UI.WebControls.Login.LoginButtonType%2A>值会影响<xref:System.Web.UI.WebControls.Login.LoginButtonText%2A>属性。  
  
|<xref:System.Web.UI.WebControls.Login.LoginButtonType%2A> 设置|如何<xref:System.Web.UI.WebControls.Login.LoginButtonText%2A>使用属性。|  
|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|  
|<xref:System.Web.UI.WebControls.ButtonType.Button>|为按钮的`Text`属性。|  
|<xref:System.Web.UI.WebControls.ButtonType.Image>|作为图像的替换文本。|  
|<xref:System.Web.UI.WebControls.ButtonType.Link>|为链接的文本。|  
  
 控件的默认文本根据服务器当前的区域设置进行本地化。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
   
  
## Examples  
 下面的代码示例演示如何在文本<xref:System.Web.UI.WebControls.Login.LoginButtonText%2A>属性的值会影响<xref:System.Web.UI.WebControls.Login.LoginButtonType%2A>属性。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[LoginButtonType#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginButtonType/CS/loginbuttontypecs.aspx#1)]
 [!code-aspx-vb[LoginButtonType#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginButtonType/VB/loginbuttontypevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoginButtonType">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.ButtonType LoginButtonType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ButtonType LoginButtonType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.LoginButtonType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property LoginButtonType As ButtonType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::ButtonType LoginButtonType { System::Web::UI::WebControls::ButtonType get(); void set(System::Web::UI::WebControls::ButtonType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ButtonType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在呈现 <see cref="T:System.Web.UI.WebControls.Login" /> 按钮时使用的按钮类型。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ButtonType" /> 枚举值之一。 默认值为 <see cref="F:System.Web.UI.WebControls.ButtonType.Button" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.LoginButtonType%2A>属性确定的一种按钮用于<xref:System.Web.UI.WebControls.Login>控件的登录按钮。 下表描述了不同的按钮类型。  
  
|<xref:System.Web.UI.WebControls.Login.LoginButtonType%2A> 设置|呈现的按钮类型|  
|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------|  
|<xref:System.Web.UI.WebControls.ButtonType.Button>|中指定的文本与 HTML 按钮<xref:System.Web.UI.WebControls.Login.LoginButtonText%2A>属性。|  
|<xref:System.Web.UI.WebControls.ButtonType.Image>|图像文件。 中指定的图像的 URL<xref:System.Web.UI.WebControls.Login.LoginButtonImageUrl%2A>属性。 中指定的字符串<xref:System.Web.UI.WebControls.Login.LoginButtonText%2A>属性用作映像替换文字。|  
|<xref:System.Web.UI.WebControls.ButtonType.Link>|中指定的文本的 HTML 链接<xref:System.Web.UI.WebControls.Login.LoginButtonText%2A>属性。|  
  
 当<xref:System.Web.UI.WebControls.Login.LoginButtonType%2A>属性设置为<xref:System.Web.UI.WebControls.ButtonType.Button>或<xref:System.Web.UI.WebControls.ButtonType.Link>，则内容的<xref:System.Web.UI.WebControls.Login.LoginButtonImageUrl%2A>忽略属性。  
  
   
  
## Examples  
 下面的代码示例演示的不同类型的登录按钮可用于<xref:System.Web.UI.WebControls.Login>控件。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[LoginButtonType#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginButtonType/CS/loginbuttontypecs.aspx#1)]
 [!code-aspx-vb[LoginButtonType#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginButtonType/VB/loginbuttontypevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">未将 <see cref="P:System.Web.UI.WebControls.Login.LoginButtonType" /> 属性设置为有效的 <see cref="T:System.Web.UI.WebControls.ButtonType" /> 枚举值。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoginError">
      <MemberSignature Language="C#" Value="public event EventHandler LoginError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LoginError" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Login.LoginError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LoginError As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LoginError;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当检测到登录错误时出现。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.LoginError>用户输入的凭据无效时引发事件。 你可以使用<xref:System.Web.UI.WebControls.Login.LoginError>事件将用户重定向到自定义错误页，以提供更多帮助，或登录失败的登录尝试。  
  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.Login.LoginError>事件，以向用户显示帮助链接，登录尝试失败时。  
  
 [!code-aspx-csharp[LoginLoginError#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginLoginError/CS/loginloginerrorcs.aspx#1)]
 [!code-aspx-vb[LoginLoginError#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginLoginError/VB/loginloginerrorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Login.OnLoginError(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="MembershipProvider">
      <MemberSignature Language="C#" Value="public virtual string MembershipProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MembershipProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.MembershipProvider" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property MembershipProvider As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ MembershipProvider { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件使用的成员资格数据提供程序的名称。</summary>
        <value>控件使用的成员资格数据提供程序的名称。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.MembershipProvider%2A>属性包含的数据提供程序提供的身份验证信息的名称<xref:System.Web.UI.WebControls.Login>控件。 在中定义有效的成员资格提供程序名称`<membership>`应用程序的 Machine.config 或 Web.config 文件中的元素。  
  
 如果你未设置<xref:System.Web.UI.WebControls.Login.MembershipProvider%2A>属性，它始终返回<xref:System.String.Empty>。  
  
 有关更多信息，请参见 <xref:System.Web.Security.Membership> 类。  
  
 无法通过主题或样式表主题设置此属性。 有关详细信息，请参阅<xref:System.Web.UI.ThemeableAttribute>和[ASP.NET 主题和皮肤](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAuthenticate">
      <MemberSignature Language="C#" Value="protected virtual void OnAuthenticate (System.Web.UI.WebControls.AuthenticateEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAuthenticate(class System.Web.UI.WebControls.AuthenticateEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Login.OnAuthenticate(System.Web.UI.WebControls.AuthenticateEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAuthenticate (e As AuthenticateEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAuthenticate(System::Web::UI::WebControls::AuthenticateEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.AuthenticateEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.AuthenticateEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.Login.Authenticate" /> 事件以验证用户身份。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.OnAuthenticate%2A> 方法引发 <xref:System.Web.UI.WebControls.Login.Authenticate> 事件。 使用<xref:System.Web.UI.WebControls.Login.Authenticate>事件以实现自定义身份验证方案。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.Login.OnAuthenticate%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.Login.Authenticate>事件来调用特定于站点的自定义身份验证的代码。  
  
 [!code-aspx-csharp[LoginOnAuthenticate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginOnAuthenticate/CS/loginonauthenticatecs.aspx#1)]
 [!code-aspx-vb[LoginOnAuthenticate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginOnAuthenticate/VB/loginonauthenticatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.Login.OnAuthenticate(System.Web.UI.WebControls.AuthenticateEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.Login.OnAuthenticate(System.Web.UI.WebControls.AuthenticateEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnBubbleEvent">
      <MemberSignature Language="C#" Value="protected override bool OnBubbleEvent (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnBubbleEvent(object source, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Login.OnBubbleEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnBubbleEvent (source As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnBubbleEvent(System::Object ^ source, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">事件源。</param>
        <param name="e">一个包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>确定是否将事件沿页面的用户界面 (UI) 服务器控件层次结构向上传递。</summary>
        <returns>
          如果事件已被取消，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.OnBubbleEvent%2A>方法实现<xref:System.Web.UI.Control.OnBubbleEvent%2A?displayProperty=nameWithType>方法将从子控件的事件传递到页层次结构。  
  
 如果当前事件发布<xref:System.Web.UI.WebControls.Login>控制登录按钮，<xref:System.Web.UI.WebControls.Login>控件尝试登录到网站。 否则，事件将沿页面控件层次结构向上传递。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.Login.OnBubbleEvent(System.Object,System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.Login.OnBubbleEvent(System.Object,System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="M:System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnLoggedIn">
      <MemberSignature Language="C#" Value="protected virtual void OnLoggedIn (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLoggedIn(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Login.OnLoggedIn(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLoggedIn (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLoggedIn(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>在用户登录到网站并已进行身份验证后引发 <see cref="E:System.Web.UI.WebControls.Login.LoggedIn" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.OnLoggedIn%2A> 方法引发 <xref:System.Web.UI.WebControls.Login.LoggedIn> 事件。 使用<xref:System.Web.UI.WebControls.Login.LoggedIn>事件，以便提供额外的处理，例如用户进行身份验证之后访问每个用户数据。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.Login.OnLoggedIn%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.Login.LoggedIn>事件调用记录的用户登录名的特定于站点方法。  
  
 [!code-aspx-csharp[LoginOnAfterLogin#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginOnAfterLogin/CS/loginonafterlogincs.aspx#1)]
 [!code-aspx-vb[LoginOnAfterLogin#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginOnAfterLogin/VB/loginonafterloginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.Login.OnLoggedIn(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.Login.OnLoggedIn(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLoggingIn">
      <MemberSignature Language="C#" Value="protected virtual void OnLoggingIn (System.Web.UI.WebControls.LoginCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLoggingIn(class System.Web.UI.WebControls.LoginCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Login.OnLoggingIn(System.Web.UI.WebControls.LoginCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLoggingIn (e As LoginCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLoggingIn(System::Web::UI::WebControls::LoginCancelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.LoginCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.LoginCancelEventArgs" />。</param>
        <summary>在用户提交登录信息但进行身份验证前引发 <see cref="E:System.Web.UI.WebControls.Login.LoggingIn" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.OnLoggingIn%2A> 方法引发 <xref:System.Web.UI.WebControls.Login.LoggingIn> 事件。 使用<xref:System.Web.UI.WebControls.Login.LoggingIn>事件以执行所验证的用户之前，你需要的任何处理或执行自定义验证。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.Login.OnLoggingIn%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.Login.LoggingIn>事件，以确保用户输入中的格式正确的电子邮件地址<xref:System.Web.UI.WebControls.Login.UserName%2A>属性。 如果没有，则<xref:System.Web.UI.WebControls.Login.LoggingIn>事件处理程序取消的登录尝试，并显示在指定的错误消息<xref:System.Web.UI.WebControls.Login.InstructionText%2A>属性。  
  
 [!code-aspx-csharp[LoginOnBeforeLogin#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginOnBeforeLogin/CS/loginonbeforelogincs.aspx#1)]
 [!code-aspx-vb[LoginOnBeforeLogin#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginOnBeforeLogin/VB/loginonbeforeloginvb.aspx#1)]  
  
 下面的代码示例演示如何将扩展<xref:System.Web.UI.WebControls.Login>控件。 `CustomLogin`控件包括<xref:System.Web.UI.WebControls.DropDownList>控件使用户可以选择使用进行身份验证的成员资格提供程序。 （这些提供程序配置在 Web.config 中。）在<xref:System.Web.UI.WebControls.Login.OnLoggingIn%2A>方法，<xref:System.Web.UI.WebControls.Login.MembershipProvider%2A>属性设置为的所选值<xref:System.Web.UI.WebControls.DropDownList>控件。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-csharp[Samples.AspNet.Controls.CustomLogin#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Controls.CustomLogin/CS/FarmasLogin.cs#1)]
 [!code-vb[Samples.AspNet.Controls.CustomLogin#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Controls.CustomLogin/VB/FarmasLogin.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.Login.OnLoggingIn(System.Web.UI.WebControls.LoginCancelEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.Login.OnLoggingIn(System.Web.UI.WebControls.LoginCancelEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLoginError">
      <MemberSignature Language="C#" Value="protected virtual void OnLoginError (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLoginError(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Login.OnLoginError(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLoginError (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLoginError(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>当登录尝试失败时引发 <see cref="E:System.Web.UI.WebControls.Login.LoginError" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.OnLoginError%2A> 方法引发 <xref:System.Web.UI.WebControls.Login.LoginError> 事件。 使用<xref:System.Web.UI.WebControls.Login.LoginError>事件，以便当用户的登录尝试失败时提供额外的处理，例如错误日志记录。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.Login.OnLoginError%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.Login.LoginError>事件，以向用户显示帮助链接，登录尝试失败时。  
  
 [!code-aspx-csharp[LoginOnLoginError#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginOnLoginError/CS/loginonloginerrorcs.aspx#1)]
 [!code-aspx-vb[LoginOnLoginError#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginOnLoginError/VB/loginonloginerrorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.Login.OnLoginError(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.Login.OnLoginError(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Login.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>实现基 <see cref="M:System.Web.UI.Control.OnPreRender(System.EventArgs)" /> 方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.OnPreRender%2A>方法实现<xref:System.Web.UI.Control.OnPreRender%2A?displayProperty=nameWithType>方法通知<xref:System.Web.UI.WebControls.Login>之前要执行任何必要的预呈现步骤保存视图状态和呈现内容的控件。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.Login.OnPreRender%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.Login.OnPreRender(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.Login.OnPreRender(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="M:System.Web.UI.Control.OnPreRender(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Orientation">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.Orientation Orientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Orientation Orientation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.Orientation" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Orientation As Orientation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::Orientation Orientation { System::Web::UI::WebControls::Orientation get(); void set(System::Web::UI::WebControls::Orientation value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Orientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定页面上 <see cref="T:System.Web.UI.WebControls.Login" /> 控件的元素的位置。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.Orientation" /> 枚举值之一。 默认值为 <see cref="F:System.Web.UI.WebControls.Orientation.Vertical" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.Orientation%2A>属性确定是否显示<xref:System.Web.UI.WebControls.Login>控制垂直格式，与<xref:System.Web.UI.WebControls.Login.UserName%2A>文本输入字段上方<xref:System.Web.UI.WebControls.Login.Password%2A>文本输入字段，或水平格式，与<xref:System.Web.UI.WebControls.Login.UserName%2A>文本输入字段旁边<xref:System.Web.UI.WebControls.Login.Password%2A>文本输入字段。  
  
   
  
## Examples  
 下面的代码示例显示更改的效果<xref:System.Web.UI.WebControls.Login.Orientation%2A>属性。  
  
 [!code-aspx-csharp[LoginLoginLayout#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginLoginLayout/CS/loginloginlayoutcs.aspx#1)]
 [!code-aspx-vb[LoginLoginLayout#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginLoginLayout/VB/loginloginlayoutvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">未将 <see cref="P:System.Web.UI.WebControls.Login.Orientation" /> 属性设置为有效的 <see cref="T:System.Web.UI.WebControls.Orientation" /> 枚举值。</exception>
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public virtual string Password { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.Password" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Password { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用户输入的密码。</summary>
        <value>用户输入的密码。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.Password%2A>属性包含用户输入的密码。 密码为明文形式。 有关详细信息，请参阅[Web 应用程序的基本安全实践](http://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad)。  
  
> [!NOTE]
>  如果你操作<xref:System.Web.UI.WebControls.Login.UserName%2A>或<xref:System.Web.UI.WebControls.Login.Password%2A>属性以编程方式，请务必在页生命周期中正确的时间进行操作。 值<xref:System.Web.UI.WebControls.Login.UserName%2A>和<xref:System.Web.UI.WebControls.Login.Password%2A>在期间不可用`Page_Load`阶段，但在`Pre_Render`阶段。  
  
 <xref:System.Web.UI.WebControls.Login> 控件属性的文本框，如表示<xref:System.Web.UI.WebControls.Login.UserName%2A>和<xref:System.Web.UI.WebControls.Login.Password%2A>，页生命周期的所有阶段都可访问。 控件将选取由最终用户的方式进行任何更改<xref:System.Web.UI.WebControls.TextBox.TextChanged>由文本框触发的事件。  
  
   
  
## Examples  
 下面的代码示例传递<xref:System.Web.UI.WebControls.Login.Password%2A>到自定义身份验证方法的属性。  
  
 [!code-aspx-csharp[LoginAuthenticate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginAuthenticate/CS/loginauthenticatecs.aspx#1)]
 [!code-aspx-vb[LoginAuthenticate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginAuthenticate/VB/loginauthenticatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordLabelText">
      <MemberSignature Language="C#" Value="public virtual string PasswordLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PasswordLabelText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.PasswordLabelText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PasswordLabelText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ PasswordLabelText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="P:System.Web.UI.WebControls.Login.Password" /> 文本框的标签文本。</summary>
        <value>
          <see cref="P:System.Web.UI.WebControls.Login.Password" /> 文本框的标签文本。 默认值为“Password:”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.PasswordLabelText%2A>属性包含的标签文本<xref:System.Web.UI.WebControls.Login.Password%2A>文本框。  
  
 <xref:System.Web.UI.WebControls.Login.TextLayout%2A>属性定义的字段标签放置的位置。  
  
 控件的默认文本根据服务器当前的区域设置进行本地化。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
   
  
## Examples  
 下面的代码示例设置<xref:System.Web.UI.WebControls.Login.PasswordLabelText%2A>属性设置为"用户密码:"。  
  
 [!code-aspx-csharp[LoginLabelText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginLabelText/CS/loginlabeltextcs.aspx#1)]
 [!code-aspx-vb[LoginLabelText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginLabelText/VB/loginlabeltextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordRecoveryIconUrl">
      <MemberSignature Language="C#" Value="public virtual string PasswordRecoveryIconUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PasswordRecoveryIconUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.PasswordRecoveryIconUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PasswordRecoveryIconUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ PasswordRecoveryIconUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取显示在密码恢复页链接旁边的图像的位置。</summary>
        <value>要显示的图像的 URL。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.PasswordRecoveryIconUrl" />
        <altmember cref="P:System.Web.UI.WebControls.Login.PasswordRecoveryText" />
        <altmember cref="P:System.Web.UI.WebControls.Login.PasswordRecoveryUrl" />
        <altmember cref="T:System.Web.UI.WebControls.PasswordRecovery" />
      </Docs>
    </Member>
    <Member MemberName="PasswordRecoveryText">
      <MemberSignature Language="C#" Value="public virtual string PasswordRecoveryText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PasswordRecoveryText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.PasswordRecoveryText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PasswordRecoveryText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ PasswordRecoveryText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置密码恢复页链接的文本。</summary>
        <value>密码恢复页链接的文本。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.PasswordRecoveryText%2A>属性包含指向站点的密码恢复页面的链接的文本。 中指定的密码恢复页面的 URL<xref:System.Web.UI.WebControls.Login.PasswordRecoveryUrl%2A>属性。  
  
 如果<xref:System.Web.UI.WebControls.Login.PasswordRecoveryUrl%2A>为空中的文本<xref:System.Web.UI.WebControls.Login.PasswordRecoveryText%2A>属性显示给用户，但未格式化的链接的形式。  
  
 如果<xref:System.Web.UI.WebControls.Login.PasswordRecoveryText%2A>属性为空，则不向用户提供到密码恢复页链接。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
   
  
## Examples  
 下面的代码示例设置<xref:System.Web.UI.WebControls.Login.PasswordRecoveryText%2A>属性来指定站点的密码恢复页的链接的文本。 该示例显示一个登录窗体，并将设置<xref:System.Web.UI.WebControls.Login.PasswordRecoveryUrl%2A>和<xref:System.Web.UI.WebControls.Login.PasswordRecoveryText%2A>属性。 如果用户单击"忘记了密码"，将显示 getPass.aspx 页。  
  
 [!code-aspx-csharp[LoginPasswordRecoveryText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginPasswordRecoveryText/CS/loginpasswordrecoverytextcs.aspx#1)]
 [!code-aspx-vb[LoginPasswordRecoveryText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginPasswordRecoveryText/VB/loginpasswordrecoverytextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.PasswordRecoveryIconUrl" />
        <altmember cref="P:System.Web.UI.WebControls.Login.PasswordRecoveryText" />
        <altmember cref="P:System.Web.UI.WebControls.Login.PasswordRecoveryUrl" />
        <altmember cref="P:System.Web.UI.WebControls.Login.HyperLinkStyle" />
        <altmember cref="T:System.Web.UI.WebControls.PasswordRecovery" />
      </Docs>
    </Member>
    <Member MemberName="PasswordRecoveryUrl">
      <MemberSignature Language="C#" Value="public virtual string PasswordRecoveryUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PasswordRecoveryUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.PasswordRecoveryUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PasswordRecoveryUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ PasswordRecoveryUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置密码恢复页的 URL。</summary>
        <value>密码恢复页的 URL。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.PasswordRecoveryUrl%2A>属性包含网站的密码恢复页面的 URL。 <xref:System.Web.UI.WebControls.Login.PasswordRecoveryText%2A>属性包含用于链接的文本。  
  
 如果<xref:System.Web.UI.WebControls.Login.PasswordRecoveryText%2A>属性为空，则不向用户提供到密码恢复页链接。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.Login.PasswordRecoveryUrl%2A>属性来指定站点的密码恢复页的 URL。 该示例显示一个登录窗体，并将设置<xref:System.Web.UI.WebControls.Login.PasswordRecoveryUrl%2A>和<xref:System.Web.UI.WebControls.Login.PasswordRecoveryText%2A>属性。 如果用户单击"忘记了密码"，将显示 getPass.aspx 页。  
  
 [!code-aspx-csharp[LoginPasswordRecoveryText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginPasswordRecoveryText/CS/loginpasswordrecoverytextcs.aspx#1)]
 [!code-aspx-vb[LoginPasswordRecoveryText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginPasswordRecoveryText/VB/loginpasswordrecoverytextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.PasswordRecoveryIconUrl" />
        <altmember cref="P:System.Web.UI.WebControls.Login.PasswordRecoveryText" />
        <altmember cref="P:System.Web.UI.WebControls.Login.PasswordRecoveryUrl" />
        <altmember cref="P:System.Web.UI.WebControls.Login.HyperLinkStyle" />
        <altmember cref="T:System.Web.UI.WebControls.PasswordRecovery" />
      </Docs>
    </Member>
    <Member MemberName="PasswordRequiredErrorMessage">
      <MemberSignature Language="C#" Value="public virtual string PasswordRequiredErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PasswordRequiredErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.PasswordRequiredErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PasswordRequiredErrorMessage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ PasswordRequiredErrorMessage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当密码字段为空时在 <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> 控件中显示的错误消息。</summary>
        <value>当密码字段为空时，在 <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> 控件中显示的错误消息。 默认值为“密码”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.PasswordRequiredErrorMessage%2A>属性包含中显示的错误消息<xref:System.Web.UI.WebControls.ValidationSummary>的登录页上的控件。  
  
 <xref:System.Web.UI.WebControls.Login.PasswordRequiredErrorMessage%2A>仅在满足以下条件时会显示属性值：  
  
-   A<xref:System.Web.UI.WebControls.ValidationSummary>控件是在页上存在。  
  
-   密码文本框中是由用户保留为空。  
  
 属性的默认文本进行了本地化根据服务器的当前区域设置。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
 同时<xref:System.Web.UI.WebControls.Login.PasswordRequiredErrorMessage%2A>和<xref:System.Web.UI.WebControls.Login.UserNameRequiredErrorMessage%2A>值包装在中的验证组<xref:System.Web.UI.WebControls.Login>控件。 若要显示，这些值<xref:System.Web.UI.WebControls.ValidationSummary.ValidationGroup%2A>属性<xref:System.Web.UI.WebControls.ValidationSummary>控件必须设置为<xref:System.Web.UI.Control.ID%2A>属性<xref:System.Web.UI.WebControls.Login>控件。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.UI.WebControls.ValidationSummary>控件来显示在指定的错误消息<xref:System.Web.UI.WebControls.Login.PasswordRequiredErrorMessage%2A>属性。  
  
 [!code-aspx-csharp[LoginRequiredErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginRequiredErrorMessage/CS/loginrequirederrormessagecs.aspx#1)]
 [!code-aspx-vb[LoginRequiredErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginRequiredErrorMessage/VB/loginrequirederrormessagevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RememberMeSet">
      <MemberSignature Language="C#" Value="public virtual bool RememberMeSet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RememberMeSet" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.RememberMeSet" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RememberMeSet As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RememberMeSet { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否将持久性身份验证 Cookie 发送到用户的浏览器。</summary>
        <value>
          如果发送持久性身份验证 Cookie，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Web.UI.WebControls.Login.RememberMeSet%2A>属性是`true`，发送到用户的计算机的身份验证 cookie 已设置为过期 50 在年中，因而当用户下一步访问网站时将使用持久性 cookie。 由于身份验证 cookie 将存在于用户的计算机上，用户将被视为已通过身份验证，并不会再次登录到网站。  
  
 当<xref:System.Web.UI.WebControls.Login.DisplayRememberMe%2A>属性是`true`、<xref:System.Web.UI.WebControls.Login.RememberMeSet%2A>属性设置为向用户显示复选框的值。  
  
 如果<xref:System.Web.UI.WebControls.Login.DisplayRememberMe%2A>属性是`false`、 记住我复选框不会显示在页面和用户具有不能控制是否是持久性的身份验证 cookie。 如果<xref:System.Web.UI.WebControls.Login.RememberMeSet%2A>属性是`true`，发送到用户的浏览器的身份验证 cookie 将持久性 cookie。  
  
 如果在用户登录网站利用<xref:System.Web.UI.WebControls.LoginStatus>控制，则持久性 cookie 清除从用户的计算机和用户将需要在下一步访问登录到站点。  
  
> [!NOTE]
>  没有与用户的浏览器上设置持久性身份验证 cookie 的固有安全风险。 你应该确定是否可以接受你的站点的这些安全风险。 如果你设置<xref:System.Web.UI.WebControls.Login.RememberMeSet%2A>属性`true`和<xref:System.Web.UI.WebControls.Login.DisplayRememberMe%2A>属性`false`、 从公共浏览器中，如下所示吧例如，可以意外留下持久身份验证 cookie 的 Internet 访问你的网站的用户和下一步的浏览器的用户将能够访问您的网站以使用以前用户的凭据。  
  
 无法通过主题或样式表主题设置此属性。 有关详细信息，请参阅<xref:System.Web.UI.ThemeableAttribute>和[ASP.NET 主题和皮肤](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.DisplayRememberMe" />
        <altmember cref="P:System.Web.UI.WebControls.Login.RememberMeText" />
      </Docs>
    </Member>
    <Member MemberName="RememberMeText">
      <MemberSignature Language="C#" Value="public virtual string RememberMeText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RememberMeText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.RememberMeText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RememberMeText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ RememberMeText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置“记住我”复选框的标签文本。</summary>
        <value>“记住我”复选框的标签文本。 默认值为“下次记住我。”</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.RememberMeText%2A>属性包含标签的文本的记住我<xref:System.Web.UI.WebControls.CheckBox>控件。  
  
 属性的默认文本进行了本地化根据服务器的当前区域设置。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Login.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">HTML 编写器。</param>
        <summary>使用指定的 HTML 编写器呈现登录窗体。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderOuterTable">
      <MemberSignature Language="C#" Value="public virtual bool RenderOuterTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderOuterTable" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.RenderOuterTable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RenderOuterTable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RenderOuterTable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IRenderOuterTableControl.RenderOuterTable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示控件是否将呈现的 HTML 包含在 <see langword="table" /> 元素中，以便应用内联样式。</summary>
        <value>
          如果控件将呈现的 HTML 包含在 <see langword="true" /> 元素中，则为 <see langword="table" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为了使内联样式属性，如<xref:System.Web.UI.WebControls.WebControl.ForeColor%2A>适用于所有控件呈现的 HTML，ASP.NET 将中呈现的 HTML`table`元素。 如果不希望外部`table`元素呈现，将此属性设置为`false`。 在这种情况下，如果你尝试设置应用于整个控件的样式属性的内联，则引发异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Login.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存调用 <see cref="M:System.Web.UI.WebControls.Style.TrackViewState" /> 方法后修改的任何状态。</summary>
        <returns>一个包含该控件的当前视图状态的对象；如果没有与该控件关联的视图状态，则为 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebControl.SaveViewState" />
      </Docs>
    </Member>
    <Member MemberName="SetDesignModeState">
      <MemberSignature Language="C#" Value="protected override void SetDesignModeState (System.Collections.IDictionary data);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetDesignModeState(class System.Collections.IDictionary data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Login.SetDesignModeState(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetDesignModeState (data As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetDesignModeState(System::Collections::IDictionary ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="data">包含控件的设计时数据的 <see cref="T:System.Collections.IDictionary" />。</param>
        <summary>为控件设置设计时数据。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.TagKey" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property TagKey As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Web::UI::HtmlTextWriterTag TagKey { System::Web::UI::HtmlTextWriterTag get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对应于 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 控件的 <see cref="T:System.Web.UI.WebControls.Login" /> 值。 此属性主要由控件开发人员使用。</summary>
        <value>始终返回 <see cref="F:System.Web.UI.HtmlTextWriterTag.Table" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.Login.TagKey%2A>属性来确定<xref:System.Web.UI.HtmlTextWriterTag>与关联的值<xref:System.Web.UI.WebControls.Login>控件。 此属性主要由控件开发人员使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextBoxStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Style TextBoxStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.Style TextBoxStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.TextBoxStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TextBoxStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::Style ^ TextBoxStyle { System::Web::UI::WebControls::Style ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对属性集合的引用，这些属性定义 <see cref="T:System.Web.UI.WebControls.Login" /> 控件中文本框的外观。</summary>
        <value>对 <see cref="T:System.Web.UI.WebControls.Style" /> 的引用，它包含定义文本框外观的属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.TextBoxStyle%2A>属性定义的用户名和密码的外观<xref:System.Web.UI.WebControls.TextBox>中控制<xref:System.Web.UI.WebControls.Login>控件。 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.Style>对象返回。 你可以在窗体中以声明方式设置这些属性`Property-Subproperty`，其中`Subproperty`表示的属性<xref:System.Web.UI.WebControls.Style>类 (例如， `TextBoxStyle-ForeColor`)。 你可以以编程方式设置此属性的形式`Property.Subproperty`(例如， `TextBoxStyle.ForeColor`)。  
  
 常用的设置包括自定义的背景色、 文本颜色和字体属性。 <xref:System.Web.UI.WebControls.Login.TextBoxStyle%2A>属性定义的用户名称和密码文本框的外观。  
  
 样式设置<xref:System.Web.UI.WebControls.Login.TextBoxStyle%2A>属性合并的样式设置<xref:System.Web.UI.WebControls.Login>控件。 在中所做的任何设置<xref:System.Web.UI.WebControls.Login.TextBoxStyle%2A>属性重写的属性中的相应设置<xref:System.Web.UI.WebControls.Login>控件。  
  
 以下<xref:System.Web.UI.WebControls.Login>样式属性重写了<xref:System.Web.UI.WebControls.Login.TextBoxStyle%2A>设置：  
  
-   <xref:System.Web.UI.WebControls.WebControl.BackColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderStyle%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderWidth%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Enabled%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Font%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Height%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ToolTip%2A>  
  
-   <xref:System.Web.UI.Control.Visible%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Width%2A>  
  
 当你使用模板定义的外观<xref:System.Web.UI.WebControls.Login>控件，<xref:System.Web.UI.WebControls.Login.TextBoxStyle%2A>属性不起作用。  
  
   
  
## Examples  
 下面的代码示例设置的用户名和密码的背景和文本颜色<xref:System.Web.UI.WebControls.TextBox>通过上设置属性的控件<xref:System.Web.UI.WebControls.Style>所引用对象<xref:System.Web.UI.WebControls.Login.TextBoxStyle%2A>属性。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[LoginTextBoxStyle#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginTextBoxStyle/CS/logintextboxstylecs.aspx#1)]
 [!code-aspx-vb[LoginTextBoxStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginTextBoxStyle/VB/logintextboxstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.Password" />
        <altmember cref="P:System.Web.UI.WebControls.Login.UserName" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="TextLayout">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.LoginTextLayout TextLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.LoginTextLayout TextLayout" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.TextLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TextLayout As LoginTextLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::LoginTextLayout TextLayout { System::Web::UI::WebControls::LoginTextLayout get(); void set(System::Web::UI::WebControls::LoginTextLayout value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LoginTextLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定 <see cref="T:System.Web.UI.WebControls.Login" /> 控件的每个标签相对于其关联文本框的位置。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.LoginTextLayout" /> 枚举值之一。 默认值为 <see cref="F:System.Web.UI.WebControls.LoginTextLayout.TextOnLeft" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Web.UI.WebControls.Login.TextLayout%2A>属性指定相对于其关联的文本的标签的位置框<xref:System.Web.UI.WebControls.Login>控件。 此属性使用其中一个设置<xref:System.Web.UI.WebControls.LoginTextLayout>枚举值。 下表列出可能的值。  
  
|LoginTextLayout value|描述|  
|---------------------------|-----------------|  
|<xref:System.Web.UI.WebControls.LoginTextLayout.TextOnLeft>|将标签放到关联的文本输入字段的左侧。|  
|<xref:System.Web.UI.WebControls.LoginTextLayout.TextOnTop>|将标签放到关联的文本输入字段的上方。|  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.LoginTextLayout>枚举可设置<xref:System.Web.UI.WebControls.Login.TextLayout%2A>属性<xref:System.Web.UI.WebControls.Login>控件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LoginTextLayout#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LoginTextLayout/CS/logintextlayoutcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LoginTextLayout#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LoginTextLayout/VB/logintextlayoutvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所选的值不是 <see cref="T:System.Web.UI.WebControls.LoginTextLayout" /> 枚举值之一。</exception>
      </Docs>
    </Member>
    <Member MemberName="TitleText">
      <MemberSignature Language="C#" Value="public virtual string TitleText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TitleText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.TitleText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TitleText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TitleText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.Login" /> 控件的标题。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.Login" /> 控件的标题。 默认值为“Login”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.TitleText%2A>属性指定显示在顶部的标题<xref:System.Web.UI.WebControls.Login>控件。  
  
 控件的默认文本根据服务器当前的区域设置进行本地化。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
   
  
## Examples  
 下面的代码示例设置<xref:System.Web.UI.WebControls.Login.TitleText%2A>属性。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[LoginTitleText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginTitleText/CS/logintitletextcs.aspx#1)]
 [!code-aspx-vb[LoginTitleText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginTitleText/VB/logintitletextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.TitleTextStyle" />
      </Docs>
    </Member>
    <Member MemberName="TitleTextStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle TitleTextStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle TitleTextStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.TitleTextStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TitleTextStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ TitleTextStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对属性集合的引用，这些属性定义 <see cref="T:System.Web.UI.WebControls.Login" /> 控件中标题文本的外观。</summary>
        <value>对包含定义标题文本外观的属性的 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.TitleTextStyle%2A>属性获取的引用<xref:System.Web.UI.WebControls.TableItemStyle>对象，用于更改标题中包含的外观<xref:System.Web.UI.WebControls.Login.TitleText%2A>属性。  
  
 <xref:System.Web.UI.WebControls.Login.TitleTextStyle%2A>属性定义中的标题的外观<xref:System.Web.UI.WebControls.Login>控件。 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.TableItemStyle>对象返回。 你可以在窗体中以声明方式设置这些属性`Property-Subproperty`，其中`Subproperty`表示的属性<xref:System.Web.UI.WebControls.TableItemStyle>类 (例如， `TitleStyle-ForeColor`)。 你可以以编程方式设置此属性的形式`Property.Subproperty`(例如， `TitleStyle.ForeColor`)。  
  
 常用的设置包括自定义的背景色、 文本颜色和字体属性。 <xref:System.Web.UI.WebControls.Login.TitleTextStyle%2A>属性定义的外观<xref:System.Web.UI.WebControls.Login.TitleText%2A>属性。  
  
 样式设置<xref:System.Web.UI.WebControls.Login.TitleTextStyle%2A>属性合并的样式设置<xref:System.Web.UI.WebControls.Login>控件。 在中所做的任何设置<xref:System.Web.UI.WebControls.Login.TitleTextStyle%2A>属性重写的属性中的相应设置<xref:System.Web.UI.WebControls.Login>控件。  
  
 以下<xref:System.Web.UI.WebControls.Login>样式属性重写了<xref:System.Web.UI.WebControls.Login.TitleTextStyle%2A>设置：  
  
-   <xref:System.Web.UI.WebControls.WebControl.BackColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderStyle%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.BorderWidth%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Enabled%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Font%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Height%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.ToolTip%2A>  
  
-   <xref:System.Web.UI.Control.Visible%2A>  
  
-   <xref:System.Web.UI.WebControls.WebControl.Width%2A>  
  
 当你使用模板定义的外观<xref:System.Web.UI.WebControls.Login>控件，<xref:System.Web.UI.WebControls.Login.TitleTextStyle%2A>属性不起作用。  
  
   
  
## Examples  
 下面的代码示例通过设置属性的设置文本颜色、 背景色和标题的字体粗细<xref:System.Web.UI.WebControls.TableItemStyle>所引用对象<xref:System.Web.UI.WebControls.Login.TitleTextStyle%2A>属性。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[LoginTitleText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginTitleText/CS/logintitletextcs.aspx#1)]
 [!code-aspx-vb[LoginTitleText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginTitleText/VB/logintitletextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Login.TitleText" />
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Login.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重写基 <see cref="M:System.Web.UI.Control.TrackViewState" /> 方法。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.WebControls.Login.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.Login.SaveViewState" />
      </Docs>
    </Member>
    <Member MemberName="UserName">
      <MemberSignature Language="C#" Value="public virtual string UserName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.UserName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UserName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UserName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用户输入的用户名。</summary>
        <value>用户输入的用户名。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.UserName%2A>属性包含用户输入的用户名。 <xref:System.Web.UI.WebControls.Login> 控件属性的文本框，如表示<xref:System.Web.UI.WebControls.Login.UserName%2A>和<xref:System.Web.UI.WebControls.Login.Password%2A>，页生命周期的所有阶段都可访问。 控件将选取由最终用户的方式进行任何更改<xref:System.Web.UI.WebControls.TextBox.TextChanged>由文本框触发的事件。  
  
   
  
## Examples  
 下面的代码示例传递<xref:System.Web.UI.WebControls.Login.UserName%2A>到自定义身份验证方法的属性。  
  
 [!code-aspx-csharp[LoginAuthenticate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginAuthenticate/CS/loginauthenticatecs.aspx#1)]
 [!code-aspx-vb[LoginAuthenticate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginAuthenticate/VB/loginauthenticatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserNameLabelText">
      <MemberSignature Language="C#" Value="public virtual string UserNameLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserNameLabelText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.UserNameLabelText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UserNameLabelText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UserNameLabelText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="P:System.Web.UI.WebControls.Login.UserName" /> 文本框的标签文本。</summary>
        <value>
          <see cref="P:System.Web.UI.WebControls.Login.UserName" /> 文本框的标签文本。 默认值为“用户名:”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.UserNameLabelText%2A>属性包含的标签文本<xref:System.Web.UI.WebControls.Login.UserName%2A>文本框。  
  
 <xref:System.Web.UI.WebControls.Login.TextLayout%2A>属性定义的字段标签放置的位置。  
  
 控件的默认文本根据服务器当前的区域设置进行本地化。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
   
  
## Examples  
 下面的代码示例演示了如何设置<xref:System.Web.UI.WebControls.Login.UserNameLabelText%2A>属性。  
  
 [!code-aspx-csharp[LoginLabelText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginLabelText/CS/loginlabeltextcs.aspx#1)]
 [!code-aspx-vb[LoginLabelText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginLabelText/VB/loginlabeltextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserNameRequiredErrorMessage">
      <MemberSignature Language="C#" Value="public virtual string UserNameRequiredErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserNameRequiredErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.UserNameRequiredErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UserNameRequiredErrorMessage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UserNameRequiredErrorMessage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当用户名字段为空时在 <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> 控件中显示的错误消息。</summary>
        <value>当用户名字段为空时在 <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> 控件中显示的错误消息。 默认值为“用户名。”</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.UserNameRequiredErrorMessage%2A>属性包含中显示的错误消息<xref:System.Web.UI.WebControls.ValidationSummary>的登录页上的控件。  
  
 <xref:System.Web.UI.WebControls.Login.UserNameRequiredErrorMessage%2A>仅在满足以下条件时会显示属性值：  
  
-   A<xref:System.Web.UI.WebControls.ValidationSummary>控件是在页上存在。  
  
-   用户的名称文本框是由用户保留为空。  
  
 控件的默认文本根据服务器当前的区域设置进行本地化。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
 同时<xref:System.Web.UI.WebControls.Login.PasswordRequiredErrorMessage%2A>和<xref:System.Web.UI.WebControls.Login.UserNameRequiredErrorMessage%2A>值包装在中的验证组<xref:System.Web.UI.WebControls.Login>控件。 若要显示，这些值<xref:System.Web.UI.WebControls.ValidationSummary.ValidationGroup%2A>属性<xref:System.Web.UI.WebControls.ValidationSummary>控件必须设置为<xref:System.Web.UI.Control.ID%2A>属性<xref:System.Web.UI.WebControls.Login>控件。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.ValidationSummary>控件来显示在指定的错误消息<xref:System.Web.UI.WebControls.Login.UserNameRequiredErrorMessage%2A>属性。  
  
 [!code-aspx-csharp[LoginRequiredErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginRequiredErrorMessage/CS/loginrequirederrormessagecs.aspx#1)]
 [!code-aspx-vb[LoginRequiredErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginRequiredErrorMessage/VB/loginrequirederrormessagevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidatorTextStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Style ValidatorTextStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.Style ValidatorTextStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.ValidatorTextStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidatorTextStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::Style ^ ValidatorTextStyle { System::Web::UI::WebControls::Style ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对 <see cref="T:System.Web.UI.WebControls.Style" /> 属性集合的引用，这些属性定义与 <see cref="T:System.Web.UI.WebControls.Login" /> 控件使用的验证程序关联的错误消息的外观。</summary>
        <value>包含样式设置的 <see cref="T:System.Web.UI.WebControls.Style" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出可用于使用自定义项的样式设置<xref:System.Web.UI.WebControls.Login.ValidatorTextStyle%2A>属性。  
  
|设置|描述|  
|-------------|-----------------|  
|`BackColor`|错误消息的背景色。 颜色可以是任何<xref:System.Drawing.Color>属性。|  
|`BorderColor`|错误消息的边框颜色。 颜色可以是任何<xref:System.Drawing.Color>属性。|  
|`BorderStyle`|错误消息的边框样式。 该样式可以是"None"、"点"、"虚线"、"实体"、"Double"、"凹线"、"Ridge"、"嵌入"或"开始"。 默认值为"NotSet"。 某些样式不清楚地出现除非`BorderWidth`值是否大于 2。|  
|`BorderWidth`|错误消息周围边框的宽度。|  
|`CssClass`|用于呈现错误消息的级联样式表 (CSS) 类。 如果指定其他设置，它们将覆盖样式表设置。|  
|`Font-Bold`|`true` 若要以粗体显示的错误消息文本。|  
|`Font-Italic`|`true` 若要以斜体显示的错误消息文本。|  
|`Font-Names`|字体的名称。|  
|`Font-Overline`|`true` 若要显示其上一条线的错误消息文本。|  
|`Font-Size`|在错误消息中作为文本的大小<xref:System.Web.UI.WebControls.FontUnit>对象。|  
|`Font-Strikeout`|`true` 若要为带删除线显示错误消息文本。|  
|`Font-Underline`|`true` 若要显示带下划线的错误消息文本。|  
|`ForeColor`|中的错误消息的文本颜色。 颜色可以是任何<xref:System.Drawing.Color>属性。|  
|`Height`|A<xref:System.Web.UI.WebControls.Unit>对象，表示的错误消息的高度。|  
|`Width`|A<xref:System.Web.UI.WebControls.Unit>表示宽度的错误消息的对象。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleWhenLoggedIn">
      <MemberSignature Language="C#" Value="public virtual bool VisibleWhenLoggedIn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VisibleWhenLoggedIn" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Login.VisibleWhenLoggedIn" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property VisibleWhenLoggedIn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool VisibleWhenLoggedIn { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在验证用户身份后是否显示 <see cref="T:System.Web.UI.WebControls.Login" /> 控件。</summary>
        <value>
          如果在验证用户身份后隐藏 <see cref="T:System.Web.UI.WebControls.Login" /> 控件，则为 <see langword="false" />；否则为 <see langword="true" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Login.VisibleWhenLoggedIn%2A>属性指定是否<xref:System.Web.UI.WebControls.Login>向经过身份验证的用户显示控件。 当该属性是`false`、<xref:System.Web.UI.WebControls.Login>当经过身份验证的用户访问站点时，控件不显示在页面上。 用于登录页和信息页面隐藏的网页上使用此<xref:System.Web.UI.WebControls.Login>后对用户已经过身份验证进行控制。  
  
 <xref:System.Web.UI.WebControls.Login.VisibleWhenLoggedIn%2A>属性不起任何作用<xref:System.Web.UI.WebControls.Login>在 Web.config 中或应用程序的配置文件中定义的默认登录页显示的控件。  
  
 无法通过主题或样式表主题设置此属性。 有关详细信息，请参阅<xref:System.Web.UI.ThemeableAttribute>和[ASP.NET 主题和皮肤](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)。  
  
   
  
## Examples  
 下面的代码示例设置<xref:System.Web.UI.WebControls.Login.VisibleWhenLoggedIn%2A>属性`true`指定<xref:System.Web.UI.WebControls.Login>控件未隐藏，并始终显示在页上，而不考虑用户是否已经过身份验证。  
  
 [!code-aspx-csharp[LoginHideWhenLoggedIn#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LoginHideWhenLoggedIn/CS/loginhidewhenloggedincs.aspx#1)]
 [!code-aspx-vb[LoginHideWhenLoggedIn#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LoginHideWhenLoggedIn/VB/loginhidewhenloggedinvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>