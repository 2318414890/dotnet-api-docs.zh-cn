<Type Name="LinqDataSourceValidationException" FullName="System.Web.UI.WebControls.LinqDataSourceValidationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1e981f63ff767e56cdf9c314c24269af58c7913" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36580782" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceValidationException : Exception, System.Web.DynamicData.IDynamicValidatorException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit LinqDataSourceValidationException extends System.Exception implements class System.Runtime.Serialization.ISerializable, class System.Web.DynamicData.IDynamicValidatorException" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceValidationException" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceValidationException&#xA;Inherits Exception&#xA;Implements IDynamicValidatorException" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceValidationException : Exception, System::Web::DynamicData::IDynamicValidatorException" />
  <TypeSignature Language="F#" Value="type LinqDataSourceValidationException = class&#xA;    inherit Exception&#xA;    interface IDynamicValidatorException&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicValidatorException</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="b9a6a-101">描述在 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件插入、更新或删除值之前验证新值或修改后的值期间发生的异常。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b9a6a-101">Describes an exception that occurred during validation of new or modified values before values are inserted, updated, or deleted by a <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9a6a-102"><xref:System.Web.UI.WebControls.LinqDataSourceValidationException>类包含类型转换和属性 setter 异常。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-102">The <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class contains type conversion and property setter exceptions.</span></span> <span data-ttu-id="b9a6a-103">所有验证过程中引发的异常都包含在<xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-103">All of the exceptions that are thrown during validation are contained in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection.</span></span> <span data-ttu-id="b9a6a-104">你可以通过循环访问检索每个验证异常<xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-104">You can retrieve each validation exception by iterating through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection.</span></span>  
  
 <span data-ttu-id="b9a6a-105">通常，可处理中的异常<xref:System.Web.UI.WebControls.LinqDataSource.Updating>， <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>，和<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>事件。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-105">You typically handle exceptions in the <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, and <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> events.</span></span> <span data-ttu-id="b9a6a-106">如果引发验证异常，`Exception`属性<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>， <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>，或<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>对象包含<xref:System.Web.UI.WebControls.LinqDataSourceValidationException>对象。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-106">If a validation exception is thrown, the `Exception` property of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>, <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>, or <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object contains a <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> object.</span></span> <span data-ttu-id="b9a6a-107">如果不引发任何异常，`Exception`属性包含`null`。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-107">If no exception is thrown, the `Exception` property contains `null`.</span></span>  
  
 <span data-ttu-id="b9a6a-108">若要处理验证异常，创建的处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>， <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>，或<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>事件。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-108">To handle validation exceptions, create a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, or <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event.</span></span> <span data-ttu-id="b9a6a-109">事件处理程序中，检查是否`Exception`的事件参数类的属性包含的值以外`null`。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-109">In the event handler, check whether the `Exception` property of the event argument class contains a value other than `null`.</span></span> <span data-ttu-id="b9a6a-110">如果`Exception`属性不为 null，引发了一个或多个验证异常，你可以检索在每个验证异常<xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-110">If the `Exception` property is not null, one or more validation exceptions were thrown and you can retrieve each validation exception in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property.</span></span>  
  
 <span data-ttu-id="b9a6a-111">如果值与属性的类型不匹配，则会发生验证异常。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-111">A validation exception can occur if a value does not match the type of the property.</span></span> <span data-ttu-id="b9a6a-112">例如，尝试使用非数字字符来更新是整数属性会导致验证异常。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-112">For example, trying to update an integer property by using non-numeric characters causes a validation exception.</span></span> <span data-ttu-id="b9a6a-113">LINQ to SQL 类还可以包含自定义的验证条件，以确保该属性包含一个值，在预期的范围或模式内。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-113">A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9a6a-114">下面的示例演示的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-114">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="b9a6a-115">它通过使用来显示任意验证异常消息<xref:System.Web.UI.WebControls.Label>控件。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-115">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b9a6a-116">初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-116">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceValidationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b9a6a-117">使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-117">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class with a system-supplied message that describes the error.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9a6a-118">描述错误的系统提供的消息将当前系统区域性考虑在内。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-118">The system-supplied message that describes the error takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="b9a6a-119">下表显示 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 类的实例的初始属性值。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-119">The following table shows the initial property values for an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.</span></span>  
  
|<span data-ttu-id="b9a6a-120">Property</span><span class="sxs-lookup"><span data-stu-id="b9a6a-120">Property</span></span>|<span data-ttu-id="b9a6a-121">“值”</span><span class="sxs-lookup"><span data-stu-id="b9a6a-121">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="b9a6a-122">`null`。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-122">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="b9a6a-123">系统提供的本地化说明。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-123">A system-supplied localized description.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceValidationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceValidationException : string -&gt; System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="new System.Web.UI.WebControls.LinqDataSourceValidationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="b9a6a-124">描述错误的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-124">The message that describes the error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b9a6a-125">使用指定的描述错误的消息初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-125">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class with a specified message that describes the error.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9a6a-126">下表显示 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 类的实例的初始属性值。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-126">The following table shows the initial property values for an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.</span></span>  
  
|<span data-ttu-id="b9a6a-127">Property</span><span class="sxs-lookup"><span data-stu-id="b9a6a-127">Property</span></span>|<span data-ttu-id="b9a6a-128">“值”</span><span class="sxs-lookup"><span data-stu-id="b9a6a-128">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="b9a6a-129">`null`。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-129">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="b9a6a-130">`message` 中指定的错误消息字符串。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-130">The error message string specified in `message`.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LinqDataSourceValidationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; LinqDataSourceValidationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceValidationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="new System.Web.UI.WebControls.LinqDataSourceValidationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="b9a6a-131">承载序列化对象数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-131">The object that holds the serialized object data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="b9a6a-132">有关源或目标的上下文信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-132">Context information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b9a6a-133">用序列化数据初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-133">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class with serialized data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9a6a-134">在反序列化，以便重建通过流传输的异常对象过程中调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-134">This constructor is called during deserialization to reconstitute the exception object that is transmitted over a stream.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException (string message, System.Collections.Generic.IDictionary&lt;string,Exception&gt; innerExceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Collections.Generic.IDictionary`2&lt;string, class System.Exception&gt; innerExceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Exception})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerExceptions As IDictionary(Of String, Exception))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceValidationException(System::String ^ message, System::Collections::Generic::IDictionary&lt;System::String ^, Exception ^&gt; ^ innerExceptions);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceValidationException : string * System.Collections.Generic.IDictionary&lt;string, Exception&gt; -&gt; System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="new System.Web.UI.WebControls.LinqDataSourceValidationException (message, innerExceptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerExceptions" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Exception&gt;" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="b9a6a-135">描述错误的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-135">The message that describes the error.</span>
          </span>
        </param>
        <param name="innerExceptions">
          <span data-ttu-id="b9a6a-136">验证异常的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-136">The collection of validation exceptions.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b9a6a-137">使用描述错误的指定消息和对内部异常的引用集合来初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-137">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class with a specified message that describes the error, and a collection of references to inner exceptions.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceValidationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceValidationException : string * Exception -&gt; System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="new System.Web.UI.WebControls.LinqDataSourceValidationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="b9a6a-138">描述错误的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-138">The message that describes the error.</span>
          </span>
        </param>
        <param name="innerException">
          <span data-ttu-id="b9a6a-139">导致当前异常的异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-139">The exception that is the cause of the current exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b9a6a-140">使用指定的错误消息和对内部异常的引用来初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-140">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class with a specified error message and a reference to the inner exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9a6a-141">通常不使用此构造函数，因为验证异常存储在<xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>属性，不<xref:System.Exception.InnerException%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-141">You typically will not use this constructor because validation exceptions are stored in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property, not the <xref:System.Exception.InnerException%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="linqDataSourceValidationException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="b9a6a-142">一个对象，保存有关所引发异常的序列化对象数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-142">The object that holds the serialized object data for the exception that is being thrown.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="b9a6a-143">有关源或目标的上下文信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-143">Context information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b9a6a-144">获取关于异常的信息并将其添加到 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-144">Gets information about the exception and adds it to the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9a6a-145"><xref:System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData%2A>方法将添加到异常有关的信息<xref:System.Runtime.Serialization.SerializationInfo>针对于序列化的对象。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-145">The <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData%2A> method adds information about the exception to the <xref:System.Runtime.Serialization.SerializationInfo> object that is targeted for serialization.</span></span> <span data-ttu-id="b9a6a-146">在反序列化期间重建异常从<xref:System.Runtime.Serialization.SerializationInfo>通过流传输。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-146">During deserialization, the exception is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> that is transmitted over the stream.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerExceptions">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,Exception&gt; InnerExceptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, class System.Exception&gt; InnerExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InnerExceptions As IDictionary(Of String, Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, Exception ^&gt; ^ InnerExceptions { System::Collections::Generic::IDictionary&lt;System::String ^, Exception ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InnerExceptions : System.Collections.Generic.IDictionary&lt;string, Exception&gt;" Usage="System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicValidatorException.InnerExceptions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Exception&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b9a6a-147">获取在验证新值或修改后的值期间发生的一个或多个异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-147">Gets one or more exceptions that occurred when new or modified data was being validated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b9a6a-148">一个包含异常的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9a6a-148">A collection that contains the exceptions.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9a6a-149"><xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>集合包含在更新之前的数据验证过程中引发的所有验证异常、 插入或删除操作。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-149">The <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection contains all the validation exceptions that were thrown during data validation before an update, insert, or delete operation.</span></span> <span data-ttu-id="b9a6a-150">如果值与属性的类型不匹配，则会发生验证异常。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-150">A validation exception can occur if a value does not match the type of the property.</span></span> <span data-ttu-id="b9a6a-151">例如，如果你尝试使用非数字字符更新是整数属性，将引发验证异常。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-151">For example, if you try to update an integer property by using non-numeric characters, a validation exception is thrown.</span></span> <span data-ttu-id="b9a6a-152">LINQ to SQL 类还可以包含自定义的验证条件，以确保该属性包含一个值，在预期的范围或模式内。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-152">A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9a6a-153">下面的示例演示的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-153">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="b9a6a-154">它通过使用来显示任意验证异常消息<xref:System.Web.UI.WebControls.Label>控件。</span><span class="sxs-lookup"><span data-stu-id="b9a6a-154">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
                In e.Exception.InnerExceptions  
          Label1.Text &= innerException.Key & ": " & _   
                  innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)   
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
            e.Exception.InnerExceptions)  
        {  
            Label1.Text += innerException.Key + ": " +   
                innerException.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>