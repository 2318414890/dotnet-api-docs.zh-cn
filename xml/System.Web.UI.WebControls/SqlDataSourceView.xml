<Type Name="SqlDataSourceView" FullName="System.Web.UI.WebControls.SqlDataSourceView">
  <Metadata><Meta Name="ms.openlocfilehash" Value="36b72febed5d89887e56d65061b555a9fe73cb27" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53391218" /></Metadata><TypeSignature Language="C#" Value="public class SqlDataSourceView : System.Web.UI.DataSourceView, System.Web.UI.IStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlDataSourceView extends System.Web.UI.DataSourceView implements class System.Web.UI.IStateManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SqlDataSourceView" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlDataSourceView&#xA;Inherits DataSourceView&#xA;Implements IStateManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlDataSourceView : System::Web::UI::DataSourceView, System::Web::UI::IStateManager" />
  <TypeSignature Language="F#" Value="type SqlDataSourceView = class&#xA;    inherit DataSourceView&#xA;    interface IStateManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceView</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IStateManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>支持 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件并为数据绑定控件提供一个接口，以便对关系数据库执行 SQL 数据操作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>类主要用于通过数据绑定控件，而不是作为页面代码中的可编程对象使用。  
  
 ASP.NET 数据源控件包含一个或多个数据源视图对象所表示的数据列表。 <xref:System.Web.UI.WebControls.SqlDataSourceView>类用于扩展<xref:System.Web.UI.DataSourceView>类中定义的功能<xref:System.Web.UI.WebControls.SqlDataSource>控件与它相关联，并实现数据源控件的基本数据功能。 <xref:System.Web.UI.WebControls.SqlDataSourceView>类实现的数据功能<xref:System.Web.UI.WebControls.SqlDataSource>控件，其中包括<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>， <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>， <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>，并<xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>操作，排序、 筛选和管理视图中保存的设置状态。  
  
 尽管<xref:System.Web.UI.WebControls.SqlDataSourceView>对象不直接公开到由页面开发人员<xref:System.Web.UI.WebControls.SqlDataSource>控件，许多其属性都是。 数据源视图执行的最基本操作是从基础数据库使用的数据检索<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法，检索<xref:System.Collections.IEnumerable>数据项的集合。 <xref:System.Web.UI.WebControls.SqlDataSourceView>类实现从关系数据库使用 SQL 查询检索数据。 以获得更大的灵活性和安全性，可以参数化 SQL 查询。 通过实现以下数据检索方法、 属性和事件<xref:System.Web.UI.WebControls.SqlDataSourceView>并直接通过公开其<xref:System.Web.UI.WebControls.SqlDataSource>向页面开发人员和其他调用方的控件：  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Selecting>事件  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Selected>事件  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>对象支持更新关系数据库使用 SQL 命令中的数据。 以获得更大的灵活性和安全性，可以参数化 SQL 命令。 数据绑定控件，如<xref:System.Web.UI.WebControls.GridView>并<xref:System.Web.UI.WebControls.DetailsView>，可以配置为执行使用自动更新<xref:System.Web.UI.WebControls.SqlDataSourceView>，而其他控件不能。 通过实现下列更新方法、 属性和事件<xref:System.Web.UI.WebControls.SqlDataSourceView>并直接通过公开其<xref:System.Web.UI.WebControls.SqlDataSource>向页面开发人员和其他调用方的控件：  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Updating>事件  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Updated>事件  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>支持将新的数据行插入到关系数据库。 中指定的 SQL 命令<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>属性可以参数化以获得更大的灵活性和安全性。 数据绑定控件，如<xref:System.Web.UI.WebControls.GridView>并<xref:System.Web.UI.WebControls.DetailsView>，可以配置为执行自动使用插入<xref:System.Web.UI.WebControls.SqlDataSourceView>，而其他控件不能。 以下插入方法、 属性和事件由实现<xref:System.Web.UI.WebControls.SqlDataSourceView>并直接通过公开其<xref:System.Web.UI.WebControls.SqlDataSource>向页面开发人员和其他调用方的控件：  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Inserting>事件  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>对象还支持从关系数据库中删除数据。 与其他命令一样的 SQL 命令中指定<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>属性可以参数化以获得更大的灵活性和安全性。 数据绑定控件，如<xref:System.Web.UI.WebControls.GridView>并<xref:System.Web.UI.WebControls.DetailsView>，可以配置为执行删除操作会自动使用<xref:System.Web.UI.WebControls.SqlDataSourceView>，而其他控件不能。 下列删除方法、 属性和事件由实现<xref:System.Web.UI.WebControls.SqlDataSourceView>并直接通过公开其<xref:System.Web.UI.WebControls.SqlDataSource>向页面开发人员和其他调用方的控件：  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Deleting>事件  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Deleted>事件  
  
 动态用于在数据检索期间对数据进行筛选的子句时，数据检索是功能更强大。 换而言之，SQL 查询使用静态其中子句不是为灵活且功能强大的 SQL 查询作为其中的 WHERE 子句中的值绑定到可以更改，如 Web 窗体页上的控件中显示的值的值。 而不是重新生成 SQL 查询和设置<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>每个页面加载的属性，可以使用<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>和<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>属性应用到数据检索动态筛选。 这些属性由实现<xref:System.Web.UI.WebControls.SqlDataSourceView>并直接通过公开其<xref:System.Web.UI.WebControls.SqlDataSource>向数据绑定控件和其他调用方的控件。  
  
 您可以检索与数据进行排序<xref:System.Web.UI.WebControls.SqlDataSource>通过添加一个 ORDER BY 子句，这会导致数据库以执行检索数据时，排序或通过对数据进行排序在内存中检索到的控件。 你可以提供到排序表达式<xref:System.Web.UI.WebControls.SqlDataSourceView>通过设置<xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>的属性<xref:System.Web.UI.DataSourceSelectArguments>对象传递给<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法。 语法<xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>属性是相同的语法<xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType>属性。 如果使用存储的过程来检索数据，还可以使用<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>属性指定一个参数，它专门用于对存储的过程调用的结果进行排序。  
  
 如果多个用户可以同时更改的数据库，则并发冲突的可能性。 <xref:System.Web.UI.WebControls.SqlDataSource>控件具有通过控件并发<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection?displayProperty=nameWithType>属性。 在中实现的功能<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection?displayProperty=nameWithType>属性。  
  
 与许多其他 Web 服务器控件一样<xref:System.Web.UI.WebControls.SqlDataSourceView>实现<xref:System.Web.UI.IStateManager>接口并使用视图状态来跟踪跨页请求其状态。 实现<xref:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState%2A>和属性和<xref:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState%2A>， <xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A>，和<xref:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState%2A>提供方法来启用该控件的视图状态跟踪。 有关详细信息，请参阅[ASP.NET 状态管理概述](https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100))。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.SqlDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceView" />
    <altmember cref="T:System.Web.UI.WebControls.AccessDataSourceView" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSourceView (System.Web.UI.WebControls.SqlDataSource owner, string name, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.SqlDataSource owner, string name, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.#ctor(System.Web.UI.WebControls.SqlDataSource,System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As SqlDataSource, name As String, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSourceView(System::Web::UI::WebControls::SqlDataSource ^ owner, System::String ^ name, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.SqlDataSourceView : System.Web.UI.WebControls.SqlDataSource * string * System.Web.HttpContext -&gt; System.Web.UI.WebControls.SqlDataSourceView" Usage="new System.Web.UI.WebControls.SqlDataSourceView (owner, name, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.WebControls.SqlDataSource" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="owner">与 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 相关联的数据源控件。</param>
        <param name="name">数据源视图的唯一名称（在拥有它的数据源控件的范围内）。</param>
        <param name="context">当前的 <see cref="T:System.Web.HttpContext" />。</param>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 类的新实例，该类将指定的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件设置为当前视图的所有者。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.%23ctor%2A>将调用构造函数<xref:System.Web.UI.WebControls.SqlDataSource.GetView%2A>方法以返回具有指定的数据源视图的新实例`name`参数。 <xref:System.Web.UI.WebControls.SqlDataSource>控件是仅有一个关联<xref:System.Web.UI.WebControls.SqlDataSourceView>对象在任一时刻，并始终将视图命名`Table`，尽管此命名限制规定<xref:System.Web.UI.WebControls.SqlDataSource>控制，不<xref:System.Web.UI.WebControls.SqlDataSourceView>。 您可以重写<xref:System.Web.UI.WebControls.SqlDataSource.GetView%2A>方法，以支持具有不同的命名约定的视图。  
  
 <xref:System.Web.HttpContext>对象，它通过传递`context`参数由数据源视图来访问参数对象，如<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>和<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="CancelSelectOnNullParameter">
      <MemberSignature Language="C#" Value="public bool CancelSelectOnNullParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelSelectOnNullParameter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CancelSelectOnNullParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CancelSelectOnNullParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CancelSelectOnNullParameter { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CancelSelectOnNullParameter : bool with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.CancelSelectOnNullParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> 集合中包含的任何一个参数为 <see langword="null" /> 时，是否取消数据检索操作。</summary>
        <value>如果当 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> 集合中包含的某个参数计算为 <see langword="true" /> 时取消数据检索操作，则为 <see langword="null" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A>属性存储在视图状态。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter" />
      </Docs>
    </Member>
    <Member MemberName="CanDelete">
      <MemberSignature Language="C#" Value="public override bool CanDelete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanDelete" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanDelete { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanDelete : bool" Usage="System.Web.UI.WebControls.SqlDataSourceView.CanDelete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控件关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 对象是否支持删除操作。</summary>
        <value>如果支持该操作，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanDelete%2A>属性返回`true`如果<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>属性设置。 如果未设置或未正确设置所有数据属性，删除操作可能仍会失败。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CanInsert">
      <MemberSignature Language="C#" Value="public override bool CanInsert { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanInsert" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanInsert { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanInsert : bool" Usage="System.Web.UI.WebControls.SqlDataSourceView.CanInsert" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控件关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 对象是否支持插入操作。</summary>
        <value>如果支持该操作，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanInsert%2A>属性返回`true`如果<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>属性设置。 如果未设置或未正确设置所有数据属性，插入操作可能仍会失败。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CanPage">
      <MemberSignature Language="C#" Value="public override bool CanPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanPage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanPage { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanPage : bool" Usage="System.Web.UI.WebControls.SqlDataSourceView.CanPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控件关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 对象是否支持将检索的数据分页。</summary>
        <value>在所有情况下均为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>对象不支持分页。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.StartRowIndex" />
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.MaximumRows" />
      </Docs>
    </Member>
    <Member MemberName="CanRetrieveTotalRowCount">
      <MemberSignature Language="C#" Value="public override bool CanRetrieveTotalRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRetrieveTotalRowCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRetrieveTotalRowCount As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRetrieveTotalRowCount { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRetrieveTotalRowCount : bool" Usage="System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控件关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 对象除了支持检索数据集外，是否还支持检索数据行总数。</summary>
        <value>在所有情况下均为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>对象不支持检索行计数。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount" />
      </Docs>
    </Member>
    <Member MemberName="CanSort">
      <MemberSignature Language="C#" Value="public override bool CanSort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanSort" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSort { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSort : bool" Usage="System.Web.UI.WebControls.SqlDataSourceView.CanSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控件关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 对象是否支持检索的数据的排序视图。</summary>
        <value>如果支持排序，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanSort%2A>属性返回`true`，如果当前<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>属性设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>值和<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>属性设置。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.SortExpression" />
      </Docs>
    </Member>
    <Member MemberName="CanUpdate">
      <MemberSignature Language="C#" Value="public override bool CanUpdate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanUpdate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanUpdate : bool" Usage="System.Web.UI.WebControls.SqlDataSourceView.CanUpdate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控件关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 对象是否支持更新操作。</summary>
        <value>如果支持该操作，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate%2A>属性返回`true`如果<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>属性设置。 如果未设置或未正确设置所有数据属性，删除操作可能仍会失败。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberSignature Language="F#" Value="member this.ConflictDetection : System.Web.UI.ConflictOptions with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置值，该值指示操作期间基础数据库中的一行数据更改时，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件如何执行更新和删除。</summary>
        <value><see cref="T:System.Web.UI.ConflictOptions" /> 值之一。 默认为 <see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>属性确定是否将旧的和新值的参数应用于`Update`方法。 例如，如果该命令是指定<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>属性返回<xref:System.Data.DataSet>对象包含列`Name`和`Number`，并<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions.OverwriteChanges>值，用于创建参数`Name`和`Number`更新操作。 如果<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions.CompareAllValues>值，用于创建参数`Name`， `Number`， `original_Name`，并`original_Number`。 (取决于原始值的参数的确切名称<xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>。)然后，将<xref:System.Web.UI.WebControls.SqlDataSourceView>对象确定方法是否在指定<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>属性具有相匹配的参数。  
  
 并发控制是数据存储区使用的控件如何读取和在多个客户端访问和操作同一数据存储区中更改数据的技术。 例如，一个客户端读取数据并呈现给用户，而另一个客户端读取相同的数据，并呈现给其他用户。 如果两个用户更新的数据，并将其提交到数据存储，则可能会出现某种意外的结果，因为两个客户端可能会更新相同数据的不同值。 这被视为冲突。 通过设置<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions.CompareAllValues>值，更新操作然后可以比较旧和新值传递到原始的数据源，以检测冲突并根据需要处理它们。  
  
 值<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>属性存储在视图状态。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所选值不是 <see cref="T:System.Web.UI.ConflictOptions" /> 值之一。</exception>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="override this.Delete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="sqlDataSourceView.Delete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys"><see cref="T:System.Collections.IDictionary" /> 操作要删除的对象或行键值的 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />。</param>
        <param name="oldValues">一个 <see cref="T:System.Collections.IDictionary" />，包含仅当 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 属性设置为 <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 值时才计算的行值。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> SQL 字符串、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" /> 集合中指定的任何参数，以及指定的 <paramref name="keys" /> 和 <paramref name="oldValues" /> 集合中的值执行删除操作。</summary>
        <returns>一个值，该值表示从基础数据库中删除的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>方法调用<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete%2A>方法，传递`keys`和`oldValues`参数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。  
  
或 
<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 属性设置为 <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 值但未传递 <paramref name="oldValues" /> 参数。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanDelete" /> 属性为 <see langword="false" />。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public string DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 对象用于从基础数据库中删除数据的 SQL 字符串。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 删除数据所用的 SQL 字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前正在使用的 ADO.NET 提供程序，该提供程序由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 属性标识。  
  
 如果 SQL 字符串是一个参数化查询或命令，则参数的占位符还取决于所使用的 ADO.NET 提供程序。 例如，如果提供程序<xref:System.Data.SqlClient?displayProperty=nameWithType>，这是默认提供程序<xref:System.Web.UI.WebControls.SqlDataSource>类，则参数的占位符是`'@parameterName'`。 但是，如果提供程序设置为<xref:System.Data.Odbc?displayProperty=nameWithType>或<xref:System.Data.OleDb?displayProperty=nameWithType>，则参数的占位符是`'?'`。 有关参数化的 SQL 查询和命令的详细信息，请参阅[使用参数使用 SqlDataSource 控件](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>可以是 SQL 字符串或存储过程的名称如果基础数据库支持的存储的过程。  
  
 值<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>属性存储在视图状态。  
  
   
  
## Examples  
 下面的代码示例演示如何设置<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>Northwind 数据库 Orders 表中删除一个订单的文本。 从订单表中检索数据并将其显示在<xref:System.Web.UI.WebControls.GridView>控件。 <xref:System.Web.UI.WebControls.GridView>呈现**删除**自动按钮时<xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>属性设置为`true`自动填充<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>集合并调用<xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>方法时**删除**单击按钮。 最后，此示例将删除数据，因为事件处理程序添加了尝试进行数据库备份到磁盘删除操作之前执行。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType DeleteCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> 属性中的文本是 SQL 语句还是存储过程的名称。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。 默认为 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A>属性存储在视图状态。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所选值不是 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Deleted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>完成删除操作后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.SqlDataSourceView.Deleted>后删除操作已完成的事件以检查的值输出参数。 输出参数中有<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>与事件相关联的对象。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数集合，该集合包含由 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> 属性使用的参数。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> 属性所使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>属性包含的参数化的 SQL 查询<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>集合包含任何<xref:System.Web.UI.WebControls.Parameter>对应的 SQL 字符串中的参数占位符的对象。  
  
 参数名称可能会受到<xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>属性; 具体而言，如果名称标识为主键，如密钥的指定，则使用`DataKeyNames`属性数据绑定控件，或在删除和更新情况下， <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions.CompareAllValues>值和一系列`oldValues`传递到相应的数据方法。 在这种情况下，格式字符串应用于在每个参数名称`oldValues`集合。  
  
 具体取决于 ADO.NET 提供程序中的参数的顺序<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>集合可能会很重要。 <xref:System.Data.OleDb?displayProperty=nameWithType>和<xref:System.Data.Odbc?displayProperty=nameWithType>提供程序将根据参数在参数化 SQL 查询中显示的顺序集合中的参数相关联。 <xref:System.Data.SqlClient?displayProperty=nameWithType>提供程序，这是默认的 ADO.NET 提供程序为<xref:System.Web.UI.WebControls.SqlDataSource>控件，将集合中的参数匹配的参数名称的 SQL 查询中的占位符 with 相关联。 有关参数化的 SQL 查询和命令的详细信息，请参阅[使用参数使用 SqlDataSource 控件](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
   
  
## Examples  
 下面的代码示例演示如何设置<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>文本从 Northwind 数据库中删除订单。 最初，从订单表中检索数据并显示在<xref:System.Web.UI.WebControls.DropDownList>控件。 必须显式声明<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>属性并调用<xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>方法时使用数据绑定控件，如<xref:System.Web.UI.WebControls.DropDownList>(与控件不同，如<xref:System.Web.UI.WebControls.GridView>和<xref:System.Web.UI.WebControls.DetailsView>，这会自动填充参数和调用<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>上数据源控件的方法)。 在此示例中，<xref:System.Web.UI.WebControls.Button.OnClick%2A>事件委托给私有<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A>事件处理程序，显式调用<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>方法的<xref:System.Web.UI.WebControls.SqlDataSource>控件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " Usage="member this.Deleting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行删除操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.SqlDataSourceView.Deleting>事件来执行特定于应用程序，以验证参数的值或更改之前的参数值的附加的初始化操作<xref:System.Web.UI.WebControls.SqlDataSource>控件执行删除操作。  
  
 与基础数据源的连接尚未打开，调用事件处理程序委托时。 因此，不能取消<xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>操作直接通过调用<xref:System.Data.Common.DbCommand.Cancel%2A>方法<xref:System.Data.Common.DbCommand>对象，它公开由<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>对象。 但是，可以通过设置取消该操作<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>的属性<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>到`true`。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何处理<xref:System.Web.UI.WebControls.SqlDataSource.Deleting>之前执行删除操作引发的事件。 因为此示例从 Northwind 数据库中，将删除数据<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A>添加处理程序，以尝试进行数据库备份到磁盘之前执行删除操作。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteDelete">
      <MemberSignature Language="C#" Value="protected override int ExecuteDelete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteDelete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteDelete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int ExecuteDelete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="override this.ExecuteDelete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="sqlDataSourceView.ExecuteDelete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys"><see cref="T:System.Collections.IDictionary" /> 操作要删除的对象或行键值的 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />。</param>
        <param name="oldValues">一个 <see cref="T:System.Collections.IDictionary" />，包含仅当 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 属性设置为 <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 值时才计算的行值。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> SQL 字符串、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" /> 集合中指定的任何参数，以及指定的 <paramref name="keys" /> 和 <paramref name="oldValues" /> 集合中的值执行删除操作。</summary>
        <returns>一个值，该值表示从基础数据库中删除的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>类实现继承<xref:System.Web.UI.DataSourceView.ExecuteDelete%2A>方法从数据库中删除数据。 页面开发人员和数据绑定控件作者不调用<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete%2A>方法直接; 相反，使用公开提供<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>方法。  
  
 中包含的值`keys`集合进行求值和所包含的所有值都合并<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>集合。 如果<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions.CompareAllValues>值时中, 包含的值`oldValues`集合都将使用<xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>属性并合并。  
  
 执行删除操作之前，请<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A>方法调用以引发<xref:System.Web.UI.WebControls.SqlDataSourceView.Deleting>事件。 可以处理此事件来检查参数的值并执行之前删除任何预处理。  
  
 若要执行删除操作，<xref:System.Web.UI.WebControls.SqlDataSourceView>对象生成<xref:System.Data.Common.DbCommand>对象使用<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>文本和任何关联<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>属性，然后执行<xref:System.Data.Common.DbCommand>对基础数据库对象。 在删除操作完成后，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A>方法调用以引发<xref:System.Web.UI.WebControls.SqlDataSourceView.Deleted>事件。 可以处理此事件来检查任何返回值和错误代码并执行所有后期处理步骤。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。  
  
- 或 - 
<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 属性设置为 <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 值但未传递 <paramref name="oldValues" /> 参数。</exception>
        <exception cref="T:System.Web.HttpException">当前用户没有访问数据库的正确权限。  
  
- 或 - 
控件的实例是 <see cref="T:System.Web.UI.WebControls.AccessDataSource" /> 控件，而且对指定的 <see cref="P:System.Web.UI.WebControls.AccessDataSource.DataFile" /> 属性路径的访问被拒绝。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanDelete" /> 属性为 <see langword="false" />。  
  
- 或 - 
使用 <see cref="T:System.Web.UI.WebControls.AccessDataSource" /> 控件的实例前，设计器没有正确映射设计时相对路径。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteInsert">
      <MemberSignature Language="C#" Value="protected override int ExecuteInsert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteInsert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteInsert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int ExecuteInsert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="override this.ExecuteInsert : System.Collections.IDictionary -&gt; int" Usage="sqlDataSourceView.ExecuteInsert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">与 <see cref="T:System.Collections.IDictionary" /> 属性一起使用以执行插入数据库操作的值的 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />。 如果不存在与查询关联的参数，或者如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> 属性不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> SQL 字符串、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" /> 集合中指定的所有参数，以及指定的 <paramref name="values" /> 集合中的值执行插入操作。</summary>
        <returns>一个值，该值表示插入到基础数据库中的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>类实现继承<xref:System.Web.UI.DataSourceView.ExecuteInsert%2A>方法将数据插入数据库。 页面开发人员和数据绑定控件作者不调用<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert%2A>方法直接; 相反，使用公开提供<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>方法。  
  
 执行插入操作之前，请<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>方法调用以引发<xref:System.Web.UI.WebControls.SqlDataSourceView.Inserting>事件。 可以处理此事件来检查参数的值并执行任何预处理之前插入。  
  
 若要执行插入操作，<xref:System.Web.UI.WebControls.SqlDataSourceView>对象生成<xref:System.Data.Common.DbCommand>对象使用<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>文本和任何关联<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A>属性，然后执行<xref:System.Data.Common.DbCommand>对基础数据库对象。 完成插入后，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>方法调用以引发<xref:System.Web.UI.WebControls.SqlDataSourceView.Inserted>事件。 可以处理此事件来检查任何返回值和错误代码并执行所有后期处理步骤。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。</exception>
        <exception cref="T:System.Web.HttpException">当前用户不具有访问数据库的正确权限。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanInsert" /> 属性为 <see langword="false" />。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteSelect">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerable ExecuteSelect (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Collections.IEnumerable ExecuteSelect(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ExecuteSelect (arguments As DataSourceSelectArguments) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Collections::IEnumerable ^ ExecuteSelect(System::Web::UI::DataSourceSelectArguments ^ arguments);" />
      <MemberSignature Language="F#" Value="override this.ExecuteSelect : System.Web.UI.DataSourceSelectArguments -&gt; System.Collections.IEnumerable" Usage="sqlDataSourceView.ExecuteSelect arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">用于请求对数据执行基本数据检索操作以外的操作的 <see cref="T:System.Web.UI.DataSourceSelectArguments" /> 对象。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> SQL 字符串以及 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> 集合中的所有参数从基础数据库中检索数据。</summary>
        <returns>一个数据行的 <see cref="T:System.Collections.IEnumerable" /> 列表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>类实现继承<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A>方法以从数据库中检索数据。 页面开发人员和数据绑定控件作者不调用<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A>方法直接; 相反，使用公开提供<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法。  
  
 执行数据检索之前，请<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A>方法调用以引发<xref:System.Web.UI.WebControls.SqlDataSourceView.Selecting>事件。 可以处理此事件来检查参数的值并执行任何预处理之前检索数据。  
  
 若要执行此操作，<xref:System.Web.UI.WebControls.SqlDataSourceView>对象生成<xref:System.Data.Common.DbCommand>对象使用<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>文本和任何关联<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>，并执行针对基础数据库。 在操作完成后，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A>方法调用以引发<xref:System.Web.UI.WebControls.SqlDataSource.Selected>事件。 您可以处理此事件，以检查任何返回值，错误代码，并执行所有后期处理步骤。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A>方法将返回<xref:System.Data.DataView>对象如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>，或<xref:System.Data.IDataReader>对象如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>。 关闭<xref:System.Data.IDataReader>对象读取数据完成。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>并且启用缓存，则<xref:System.Web.UI.WebControls.SqlDataSourceView>将从其中检索数据和数据操作期间将数据保存到缓存。 创建缓存，放弃或刷新基于指定的组合的缓存行为<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>属性。  
  
> [!IMPORTANT]
>  当使用 Windows 身份验证下的客户端模拟时，在第一个用户访问数据时缓存数据。 如果另一个用户请求相同的数据，从缓存检索数据。 不可以执行另一个调用到数据库，以验证用户的访问权限的数据检索的数据。 如果希望多个用户访问数据，并且您希望每个检索到的数据库的安全配置验证的数据，不使用缓存。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>和一个<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>已指定，以及提供的所有计算<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>和数据检索操作过程生成的筛选器应用于数据的列表。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">传递给 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" /> 方法的 <paramref name="arguments" /> 指定数据源在检索数据时应执行一些附加操作，以便对检索到的数据启用分页或排序，但此数据源控件不支持请求的功能。  
  
或 
启用了缓存，但没有将数据源的 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" /> 属性设置为 <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataSet" />。  
  
- 或 - 
设置了 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName" /> 属性，但是没有将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandType" /> 设置为 <see cref="F:System.Data.CommandType.StoredProcedure" />。</exception>
        <exception cref="T:System.InvalidOperationException">数据源无法建立数据库连接。  
  
- 或 - 
启用了缓存，但内部缓存和命令类型不匹配。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteUpdate">
      <MemberSignature Language="C#" Value="protected override int ExecuteUpdate (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteUpdate(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteUpdate (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int ExecuteUpdate(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="override this.ExecuteUpdate : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="sqlDataSourceView.ExecuteUpdate (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">与 <see cref="T:System.Collections.IDictionary" /> 属性一起使用以执行更新数据库操作的主键的 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />。 如果不存在与查询关联的键，或如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 属性不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <param name="values">与 <see cref="T:System.Collections.IDictionary" /> 属性一起使用以执行更新数据库操作的值的 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />。 如果不存在与查询关联的参数，或者如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <param name="oldValues"><see cref="T:System.Collections.IDictionary" />，表示数据库中的原始值。 如果不存在与查询关联的参数，或者如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 属性不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> SQL 字符串、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" /> 集合中的所有参数，以及指定的 <paramref name="keys" />、<paramref name="values" /> 和 <paramref name="oldValues" /> 集合中的值执行更新操作。</summary>
        <returns>一个值，该值表示基础数据库中被更新的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>类实现继承<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate%2A>方法来更新数据库中的数据。 页面开发人员和数据绑定控件作者不调用<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate%2A>方法直接; 相反，使用公开提供<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>方法。  
  
 中包含的值`keys`并`values`集合进行计算并与所包含的任何值合并<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>集合。 如果<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions.CompareAllValues>中, 包含的值`oldValues`集合都将使用<xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>和也将合并。  
  
 执行更新操作之前，请<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A>方法调用以引发<xref:System.Web.UI.WebControls.SqlDataSourceView.Updating>事件。 可以处理此事件，以检查参数的值并执行任何预处理之前更新。  
  
 若要执行此操作，<xref:System.Web.UI.WebControls.SqlDataSourceView>生成<xref:System.Data.Common.DbCommand>对象使用<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>文本和任何关联<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>属性，然后执行<xref:System.Data.Common.DbCommand>对基础数据库对象。 在操作完成后，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A>方法调用以引发<xref:System.Web.UI.WebControls.SqlDataSourceView.Updated>事件。 可以处理此事件来检查任何返回值和错误代码并执行所有后期处理步骤。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。  
  
或 
<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 属性设置为 <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 值但未传递 <paramref name="oldValues" /> 参数。</exception>
        <exception cref="T:System.Web.HttpException">当前用户不具有访问数据库的正确权限。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate" /> 属性为 <see langword="false" />。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterExpression : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置调用 <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Select" /> 方法时应用的筛选表达式。</summary>
        <value>表示使用 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> 方法检索数据时应用的筛选表达式的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关使用的语法<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>属性是一种格式字符串样式语法。 可以包括在参数<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>属性。 如果参数的类型为字符串或字符，将参数括在单引号内。 如果参数的数值类型，则不需要，引号引起来。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>集合中包含的参数，其计算结果中找到占位符<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>属性。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource>控件支持筛选数据时，才在`DataSet`模式。  
  
 值<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>属性存储在视图状态。  
  
> [!IMPORTANT]
>  应验证从客户端接收任何筛选器参数值。 在运行时只需将参数值替换为筛选器表达式，并将其应用于<xref:System.Data.DataView>返回的对象<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 如果使用的<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性作为一种安全措施可限制返回，筛选发生之前，必须验证参数值的项的数目。  
  
   
  
## Examples  
 下面的代码示例演示如何从 Northwind 数据库中检索数据和筛选使用其<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>属性。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>的属性<xref:System.Web.UI.WebControls.SqlDataSource>控件应用任何时间<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>执行方法以检索数据。 在此示例中，<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>属性包含一个筛选器参数，它包含在一个占位符<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合。 在此示例中，筛选器参数是<xref:System.Web.UI.WebControls.ControlParameter>绑定到的对象<xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A>属性的<xref:System.Web.UI.WebControls.DropDownList>控件。 因为<xref:System.Web.UI.WebControls.DropDownList>控件具有其<xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A>属性设置为`true`中, 有任何更改<xref:System.Web.UI.WebControls.DropDownList>的选择会导致要发布到服务器的页面和<xref:System.Web.UI.WebControls.GridView>控件重新绑定到数据源控件具有新的筛选器。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" /> 处于 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 模式中时设置了 <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataReader" /> 属性。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As SqlDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberSignature Language="F#" Value="member this.Filtering : System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler " Usage="member this.Filtering : System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行筛选操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering>事件来验证对值执行操作筛选器参数之前<xref:System.Web.UI.WebControls.SqlDataSourceView>对象执行筛选操作。 您可以取消<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法通过设置<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>的属性<xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs>对象传递给`true`。 仅当引发该事件<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>属性设置。  
  
> [!IMPORTANT]
>  应验证从客户端接收任何筛选器参数值。 在运行时只需将参数值替换为筛选器表达式，并将其应用于<xref:System.Data.DataView>返回的对象<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 如果使用的<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性作为一种安全措施可限制返回，筛选发生之前，必须验证参数值的项的数目。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Filtering" />
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSourceView.FilterParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" /> 字符串中的任何参数占位符关联的参数的集合。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含与在 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" /> 属性中找到的任何参数占位符相关联的一组参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中的参数<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>集合相关联的中指定所有参数<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>属性。 中指定的参数占位符<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>按顺序计算并与中的参数对象匹配<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>集合时<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>调用方法。  
  
> [!IMPORTANT]
>  应验证从客户端接收任何筛选器参数值。 在运行时只需将参数值替换为筛选器表达式，并将其应用于<xref:System.Data.DataView>返回的对象<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 如果使用的<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性作为一种安全措施可限制返回，筛选发生之前，必须验证参数值的项的数目。  
  
   
  
## Examples  
 下面的代码示例演示如何从 Northwind 数据库中检索数据和筛选使用其<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>属性。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>的属性<xref:System.Web.UI.WebControls.SqlDataSource>控件应用任何时间<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>执行方法以检索数据。 在此示例中，<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>属性包含一个筛选器参数，它包含在一个占位符<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合。 此外，筛选器参数是<xref:System.Web.UI.WebControls.ControlParameter>绑定到的对象<xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A>属性的<xref:System.Web.UI.WebControls.DropDownList>控件。 因为<xref:System.Web.UI.WebControls.DropDownList>控件具有其<xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A>属性设置为`true`中, 有任何更改<xref:System.Web.UI.WebControls.DropDownList>的选择会导致页面发布回服务器的信息和<xref:System.Web.UI.WebControls.GridView>控件重新绑定到的数据源控件新的筛选器。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="override this.Insert : System.Collections.IDictionary -&gt; int" Usage="sqlDataSourceView.Insert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values"><see cref="T:System.Collections.IDictionary" /> 属性用来执行插入数据库操作的参数的 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />。 如果不存在与查询关联的参数，或者如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> 不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> SQL 字符串、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" /> 集合中指定的所有参数，以及指定的 <paramref name="values" /> 集合中的值执行插入操作。</summary>
        <returns>一个值，该值表示插入到基础数据库中的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>方法调用<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert%2A>方法，传递`values`参数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanInsert" /> 属性为 <see langword="false" />。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public string InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 对象用来将数据插入到基础数据库中的 SQL 字符串。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 插入数据所用的 SQL 字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前正在使用的 ADO.NET 提供程序，该提供程序由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 属性标识。 如果 SQL 字符串是一个参数化查询或命令，则参数的占位符还取决于所使用的 ADO.NET 提供程序。 例如，如果提供程序<xref:System.Data.SqlClient?displayProperty=nameWithType>，这是默认提供程序<xref:System.Web.UI.WebControls.SqlDataSource>类，则参数的占位符是`'@parameterName'`。 但是，如果提供程序设置为<xref:System.Data.Odbc?displayProperty=nameWithType>或<xref:System.Data.OleDb?displayProperty=nameWithType>，则参数的占位符是`'?'`。 有关参数化的 SQL 查询和命令的详细信息，请参阅[使用参数使用 SqlDataSource 控件](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>属性可以是 SQL 字符串或存储过程的名称，如果数据源支持的存储的过程。  
  
 值<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>属性存储在视图状态。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何将数据插入数据库使用<xref:System.Web.UI.WebControls.SqlDataSource>控件。 第二个代码示例演示如何从 Microsoft SQL Server 中检索数据，请将其显示在<xref:System.Web.UI.WebControls.GridView>控件，并使用<xref:System.Web.UI.WebControls.DetailsView>控件以查看详细信息中所选行的<xref:System.Web.UI.WebControls.GridView>和为窗体以插入新记录。  
  
 下面的代码示例演示如何将数据插入数据库使用<xref:System.Web.UI.WebControls.SqlDataSource>控件。 表中的当前数据显示在<xref:System.Web.UI.WebControls.DropDownList>控件。 您可以通过输入中的值添加新记录<xref:System.Web.UI.WebControls.TextBox>控件，然后单击**插入**按钮。 当**插入**单击按钮时，指定的值插入到数据库和<xref:System.Web.UI.WebControls.DropDownList>进行刷新。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 下面的代码示例演示如何从 SQL Server 中检索数据，请将其显示在<xref:System.Web.UI.WebControls.GridView>控件，并使用<xref:System.Web.UI.WebControls.DetailsView>控件以查看详细信息中所选行的<xref:System.Web.UI.WebControls.GridView>和为窗体以插入新记录。  
  
 最初，数据显示在<xref:System.Web.UI.WebControls.GridView>控制和所选的行的<xref:System.Web.UI.WebControls.GridView>还会显示在<xref:System.Web.UI.WebControls.DetailsView>控件。 <xref:System.Web.UI.WebControls.GridView>并<xref:System.Web.UI.WebControls.DetailsView>控件使用不同的数据源控件; 与之关联的那个<xref:System.Web.UI.WebControls.DetailsView>具有<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>并<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>属性，确保所选的行的<xref:System.Web.UI.WebControls.GridView>是显示。  
  
 如果您单击自动生成**插入**的按钮<xref:System.Web.UI.WebControls.DetailsView>控件，<xref:System.Web.UI.WebControls.DetailsView>显示不同的用户界面，用于插入新记录。 该示例使用存储的过程插入记录，并返回所插入行的主键。 插入记录，如果<xref:System.Web.UI.WebControls.DetailsView>会自动填充<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>集合内的值从绑定的列和调用<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>方法。 <xref:System.Web.UI.WebControls.DetailsView>可以推断出正确的参数从任何<xref:System.Web.UI.WebControls.BoundField>对象以及参数，以便<xref:System.Web.UI.WebControls.TemplateField>对象时使用双向数据绑定语法的 ASP.NET。 在此示例中，添加一个附加参数中<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>事件处理程序来处理返回的存储过程的主键。  
  
 最后，通过插入数据后<xref:System.Web.UI.WebControls.DetailsView>到数据库中，控件<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>事件处理程序调用以处理<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件，插入的行的主键将显示出来，和<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>方法<xref:System.Web.UI.WebControls.GridView>控件显式调用，以刷新的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType InsertCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> 属性中的文本是 SQL 语句还是存储过程的名称。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。 值为 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A>属性存储在视图状态。  
  
   
  
## Examples  
 下面的代码示例演示如何从 Microsoft SQL Server 中检索数据，请将其显示在<xref:System.Web.UI.WebControls.GridView>控件，并使用<xref:System.Web.UI.WebControls.DetailsView>控件以查看详细信息中所选行的<xref:System.Web.UI.WebControls.GridView>和为窗体以插入新记录。  
  
 <xref:System.Web.UI.WebControls.GridView>控件将显示一组数据和<xref:System.Web.UI.WebControls.DetailsView>控件显示的特定行的详细信息。 如果您单击自动生成**插入**的按钮<xref:System.Web.UI.WebControls.DetailsView>控件，<xref:System.Web.UI.WebControls.DetailsView>显示不同的用户界面，用于插入新记录。 该示例使用存储的过程插入记录，并返回所插入行的主键。 在中设置的存储的过程名称<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>属性，通过设置被标识为存储过程<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A>属性设置为<xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure>值。  
  
 最后，通过插入数据后<xref:System.Web.UI.WebControls.DetailsView>到数据库中，控件<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>事件处理程序调用以处理<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件，插入的行的主键将显示出来，和<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>方法<xref:System.Web.UI.WebControls.GridView>控件显式调用，以刷新的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所选值不是 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Inserted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>完成插入操作后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.SqlDataSourceView.Inserted>后插入操作已完成的事件以检查的值输出参数。 输出参数中有<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>与事件相关联的对象。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何从 Microsoft SQL Server 中检索数据并将其显示在<xref:System.Web.UI.WebControls.GridView>控件。 此示例还使用<xref:System.Web.UI.WebControls.DetailsView>控件来显示详细信息中的选定行<xref:System.Web.UI.WebControls.GridView>，以及作为窗体以插入新记录。  
  
 最初，数据显示在<xref:System.Web.UI.WebControls.GridView>控制和所选的行的<xref:System.Web.UI.WebControls.GridView>还会显示在<xref:System.Web.UI.WebControls.DetailsView>。 <xref:System.Web.UI.WebControls.GridView>并<xref:System.Web.UI.WebControls.DetailsView>控件使用不同的数据源控件; 与之关联的那个<xref:System.Web.UI.WebControls.DetailsView>具有<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>并<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>属性，确保所选的行的<xref:System.Web.UI.WebControls.GridView>是显示。  
  
 如果您单击自动生成**插入**的按钮<xref:System.Web.UI.WebControls.DetailsView>控件，<xref:System.Web.UI.WebControls.DetailsView>显示了一个不同的用户界面，用于插入新记录。 该示例使用存储的过程插入记录，并返回所插入行的主键。 插入记录，如果<xref:System.Web.UI.WebControls.DetailsView>会自动填充<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>集合内的值从绑定的列和调用<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>方法。 <xref:System.Web.UI.WebControls.DetailsView>可以推断出正确的参数从任何<xref:System.Web.UI.WebControls.BoundField>对象以及参数，以便<xref:System.Web.UI.WebControls.TemplateField>对象时使用双向数据绑定语法的 ASP.NET。 在此示例中，添加一个附加参数中<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>事件处理程序来处理返回的存储过程的主键。  
  
 最后，通过插入数据后<xref:System.Web.UI.WebControls.DetailsView>到数据库中，控件<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>事件处理程序调用以处理<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件，插入的行的主键将显示出来，和<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>方法<xref:System.Web.UI.WebControls.GridView>控件显式调用，以刷新的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " Usage="member this.Inserting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行插入操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.SqlDataSourceView.Inserting>事件来执行特定于应用程序，以验证参数的值或更改之前的参数值的附加的初始化操作<xref:System.Web.UI.WebControls.SqlDataSource>控件执行插入操作。  
  
 与基础数据源的连接尚未打开，调用事件处理程序委托时。 因此，不能直接通过调用取消数据库操作<xref:System.Data.Common.DbCommand.Cancel%2A>方法<xref:System.Data.Common.DbCommand>对象，它公开由<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>对象。 但是，可以通过设置来取消数据库操作<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>的属性<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>到`true`。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何从 Microsoft SQL Server 中检索数据，请将其显示在<xref:System.Web.UI.WebControls.GridView>控件。 此示例还使用<xref:System.Web.UI.WebControls.DetailsView>控件来显示详细信息中的选定行<xref:System.Web.UI.WebControls.GridView>，以及作为窗体以插入新记录。  
  
 最初，数据显示在<xref:System.Web.UI.WebControls.GridView>控制和所选的行的<xref:System.Web.UI.WebControls.GridView>还会显示在<xref:System.Web.UI.WebControls.DetailsView>控件。 <xref:System.Web.UI.WebControls.GridView>并<xref:System.Web.UI.WebControls.DetailsView>控件使用不同的数据源控件; 与之关联的那个<xref:System.Web.UI.WebControls.DetailsView>具有<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>并<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>属性，确保所选的行的<xref:System.Web.UI.WebControls.GridView>是显示。  
  
 如果您单击自动生成**插入**的按钮<xref:System.Web.UI.WebControls.DetailsView>控件，<xref:System.Web.UI.WebControls.DetailsView>显示不同的用户界面，用于插入新记录。 该示例使用存储的过程插入记录，并返回所插入行的主键。 插入记录，如果<xref:System.Web.UI.WebControls.DetailsView>会自动填充<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>集合内的值从绑定的列和调用<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>方法。 <xref:System.Web.UI.WebControls.DetailsView>可以推断出正确的参数从任何<xref:System.Web.UI.WebControls.BoundField>对象，以及参数，以便<xref:System.Web.UI.WebControls.TemplateField>对象时使用双向数据绑定语法的 ASP.NET。 在此示例中，添加一个附加参数中<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>事件处理程序来处理返回的存储过程的主键。  
  
 最后，通过插入数据后<xref:System.Web.UI.WebControls.DetailsView>到数据库中，控件<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>事件处理程序调用以处理<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件，插入的行的主键将显示出来，和<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>方法<xref:System.Web.UI.WebControls.GridView>控件显式调用，以刷新的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数集合，该集合包含由 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> 属性使用的参数。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> 属性所使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>属性包含的参数化的 SQL 查询<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A>集合包含任何<xref:System.Web.UI.WebControls.Parameter>对应的 SQL 字符串中的参数占位符的对象。  
  
 具体取决于 ADO.NET 提供程序中的参数的顺序<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A>集合可能会很重要。 <xref:System.Data.OleDb?displayProperty=nameWithType>和<xref:System.Data.Odbc?displayProperty=nameWithType>提供程序将根据参数在参数化 SQL 查询中出现的顺序集合中的参数相关联。 <xref:System.Data.SqlClient?displayProperty=nameWithType>提供程序，这是默认的 ADO.NET 提供程序为<xref:System.Web.UI.WebControls.SqlDataSource>控件，将集合中的参数关联的 SQL 查询中的占位符别名的参数名称匹配的方法。 有关参数化的 SQL 查询和命令的详细信息，请参阅[使用参数使用 SqlDataSource 控件](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
   
  
## Examples  
 下面的代码示例演示如何将数据插入数据库使用<xref:System.Web.UI.WebControls.SqlDataSource>控件和一个简单的 Web 窗体页面。 表中的当前数据显示在<xref:System.Web.UI.WebControls.DropDownList>控件。 您可以通过输入中的值添加新记录<xref:System.Web.UI.WebControls.TextBox>控件，然后单击**插入**按钮。 当**插入**单击按钮时，指定的值插入到数据库和<xref:System.Web.UI.WebControls.DropDownList>进行刷新。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
      </Docs>
    </Member>
    <Member MemberName="IsTrackingViewState">
      <MemberSignature Language="C#" Value="protected bool IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsTrackingViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsTrackingViewState { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTrackingViewState : bool" Usage="System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 对象是否保存对其视图状态的更改。</summary>
        <value>如果数据源视图被标记为保存其状态，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected virtual void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="abstract member LoadViewState : obj -&gt; unit&#xA;override this.LoadViewState : obj -&gt; unit" Usage="sqlDataSourceView.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">表示要还原的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 状态的对象。</param>
        <summary>还原数据源视图的以前保存的视图状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法主要供[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]基础结构，不应在代码中直接使用。  但是，控件开发人员可以重写此方法以指定自定义服务器控件还原其视图状态的方式。 有关详细信息，请参阅[ASP.NET 状态管理概述](https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100))。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState%2A>方法将还原的视图状态信息<xref:System.Web.UI.WebControls.SqlDataSourceView>对象从保存的上一个页请求<xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OldValuesParameterFormatString : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个格式字符串，该字符串应用于传递给 <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" /> 或 <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" /> 方法的所有参数的名称。</summary>
        <value>一个表示格式的字符串，该格式字符串应用于传递给 <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" /> 或 <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" /> 方法的所有 <paramref name="oldValues" /> 参数的名称。 默认值为“{0}”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>格式字符串应用于为主键，例如那些由标识`DataKeyNames`属性的数据绑定控件或在删除和更新方案其中<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions.CompareAllValues>值和一个设置的`oldValues`传递到相应的数据方法。 在这种情况下，格式字符串应用于在每个参数名称`oldValues`集合。 有关详情，请参阅<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString?displayProperty=nameWithType>。  
  
 值<xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>属性存储在视图状态。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="OnDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDeleted (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeleted(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeleted (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeleted(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDeleted : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit&#xA;override this.OnDeleted : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit" Usage="sqlDataSourceView.OnDeleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleted" /> 控件完成删除操作后引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写时<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />方法在派生类中，则一定要调用<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />方法的基类以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnDeleting (System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeleting(class System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeleting (e As SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeleting(System::Web::UI::WebControls::SqlDataSourceCommandEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDeleting : System.Web.UI.WebControls.SqlDataSourceCommandEventArgs -&gt; unit&#xA;override this.OnDeleting : System.Web.UI.WebControls.SqlDataSourceCommandEventArgs -&gt; unit" Usage="sqlDataSourceView.OnDeleting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleting" /> 控件尝试删除操作前引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例演示如何处理<xref:System.Web.UI.WebControls.SqlDataSource.Deleting>事件之前，将引发<xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>执行操作。 因为此示例从 Northwind 数据库中，将删除数据<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A>添加处理程序，以尝试进行数据库备份到磁盘之前执行删除操作。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写时<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />方法在派生类中，则一定要调用<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />方法的基类以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnFiltering">
      <MemberSignature Language="C#" Value="protected virtual void OnFiltering (System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFiltering(class System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFiltering (e As SqlDataSourceFilteringEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFiltering(System::Web::UI::WebControls::SqlDataSourceFilteringEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnFiltering : System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs -&gt; unit&#xA;override this.OnFiltering : System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs -&gt; unit" Usage="sqlDataSourceView.OnFiltering e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs" />。</param>
        <summary>在 <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Filtering" /> 控件筛选选择操作结果前引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写时<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)" />方法在派生类中，则一定要调用<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)" />方法的基类以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnInserted">
      <MemberSignature Language="C#" Value="protected virtual void OnInserted (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInserted(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInserted (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInserted(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInserted : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit&#xA;override this.OnInserted : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit" Usage="sqlDataSourceView.OnInserted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserted" /> 控件完成插入操作后引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例演示如何从 Microsoft SQL Server 中检索数据，请将其显示在<xref:System.Web.UI.WebControls.GridView>控件，并使用<xref:System.Web.UI.WebControls.DetailsView>控件以查看详细信息中所选行的<xref:System.Web.UI.WebControls.GridView>和为窗体以插入新记录。  
  
 最初，数据显示在<xref:System.Web.UI.WebControls.GridView>控制和所选的行的<xref:System.Web.UI.WebControls.GridView>还会显示在<xref:System.Web.UI.WebControls.DetailsView>控件。 <xref:System.Web.UI.WebControls.GridView>并<xref:System.Web.UI.WebControls.DetailsView>控件使用不同的数据源控件; 与之关联的那个<xref:System.Web.UI.WebControls.DetailsView>具有<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>并<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>属性，确保所选的行的<xref:System.Web.UI.WebControls.GridView>是显示。  
  
 如果您单击自动生成**插入**的按钮<xref:System.Web.UI.WebControls.DetailsView>控件，<xref:System.Web.UI.WebControls.DetailsView>显示不同的用户界面，用于插入新记录。 该示例使用存储的过程插入记录，并返回所插入行的主键。 插入记录，如果<xref:System.Web.UI.WebControls.DetailsView>会自动填充<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>集合内的值从绑定的列和调用<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>方法。 <xref:System.Web.UI.WebControls.DetailsView>可以推断出正确的参数从任何<xref:System.Web.UI.WebControls.BoundField>对象以及参数，以便<xref:System.Web.UI.WebControls.TemplateField>对象时使用双向数据绑定语法的 ASP.NET。 在此示例中，添加一个附加参数中<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>事件处理程序来处理返回的存储过程的主键。  
  
 最后，通过插入数据后<xref:System.Web.UI.WebControls.DetailsView>到数据库中，控件<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>事件处理程序调用以处理<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件，插入的行的主键将显示出来，和<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>方法<xref:System.Web.UI.WebControls.GridView>控件显式调用，以刷新的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写时<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />方法在派生类中，则一定要调用<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />方法的基类以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnInserting">
      <MemberSignature Language="C#" Value="protected virtual void OnInserting (System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInserting(class System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInserting (e As SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInserting(System::Web::UI::WebControls::SqlDataSourceCommandEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInserting : System.Web.UI.WebControls.SqlDataSourceCommandEventArgs -&gt; unit&#xA;override this.OnInserting : System.Web.UI.WebControls.SqlDataSourceCommandEventArgs -&gt; unit" Usage="sqlDataSourceView.OnInserting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />。</param>
        <summary>在 <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserting" /> 控件尝试插入操作前引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例演示如何从 Microsoft SQL Server 中检索数据，请将其显示在<xref:System.Web.UI.WebControls.GridView>控件，并使用<xref:System.Web.UI.WebControls.DetailsView>控件以查看详细信息中所选行的<xref:System.Web.UI.WebControls.GridView>和为窗体以插入新记录。  
  
 最初，数据显示在<xref:System.Web.UI.WebControls.GridView>控制和所选的行的<xref:System.Web.UI.WebControls.GridView>还会显示在<xref:System.Web.UI.WebControls.DetailsView>控件。 <xref:System.Web.UI.WebControls.GridView>并<xref:System.Web.UI.WebControls.DetailsView>控件使用不同的数据源控件; 与之关联的那个<xref:System.Web.UI.WebControls.DetailsView>具有<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>并<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>属性，确保所选的行的<xref:System.Web.UI.WebControls.GridView>是显示。  
  
 如果您单击自动生成**插入**的按钮<xref:System.Web.UI.WebControls.DetailsView>控件，<xref:System.Web.UI.WebControls.DetailsView>显示不同的用户界面，用于插入新记录。 该示例使用存储的过程插入记录，并返回所插入行的主键。 插入记录，如果<xref:System.Web.UI.WebControls.DetailsView>会自动填充<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>集合内的值从绑定的列和调用<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>方法。 <xref:System.Web.UI.WebControls.DetailsView>可以推断出正确的参数从任何<xref:System.Web.UI.WebControls.BoundField>对象以及参数，以便<xref:System.Web.UI.WebControls.TemplateField>对象时使用双向数据绑定语法的 ASP.NET。 在此示例中，添加一个附加参数中<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>事件处理程序来处理返回的存储过程的主键。  
  
 最后，通过插入数据后<xref:System.Web.UI.WebControls.DetailsView>到数据库中，控件<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>事件处理程序调用以处理<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件，插入的行的主键将显示出来，和<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>方法<xref:System.Web.UI.WebControls.GridView>控件显式调用，以刷新的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写时<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />方法在派生类中，则一定要调用<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />方法的基类以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnSelected">
      <MemberSignature Language="C#" Value="protected virtual void OnSelected (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelected(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelected (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelected(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelected : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit&#xA;override this.OnSelected : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit" Usage="sqlDataSourceView.OnSelected e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selected" /> 控件完成数据检索操作后引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写时<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />方法在派生类中，则一定要调用<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />方法的基类以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnSelecting">
      <MemberSignature Language="C#" Value="protected virtual void OnSelecting (System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelecting(class System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelecting (e As SqlDataSourceSelectingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelecting(System::Web::UI::WebControls::SqlDataSourceSelectingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelecting : System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs -&gt; unit&#xA;override this.OnSelecting : System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs -&gt; unit" Usage="sqlDataSourceView.OnSelecting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs" />。</param>
        <summary>在 <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selecting" /> 控件尝试数据检索操作前引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写时<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />方法在派生类中，则一定要调用<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />方法的基类以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdated (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdated(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUpdated (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUpdated(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUpdated : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit&#xA;override this.OnUpdated : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit" Usage="sqlDataSourceView.OnUpdated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updated" /> 控件完成更新操作后引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例演示如何显示和更新数据从 ODBC 数据库中检索到<xref:System.Web.UI.WebControls.GridView>控件。 已成功更新记录后，<xref:System.Web.UI.WebControls.SqlDataSource.Updated>事件由一个事件处理程序，以执行后续处理步骤发送电子邮件消息通知的位置。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写时<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />方法在派生类中，则一定要调用<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />方法的基类以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdating (System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdating(class System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUpdating (e As SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUpdating(System::Web::UI::WebControls::SqlDataSourceCommandEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUpdating : System.Web.UI.WebControls.SqlDataSourceCommandEventArgs -&gt; unit&#xA;override this.OnUpdating : System.Web.UI.WebControls.SqlDataSourceCommandEventArgs -&gt; unit" Usage="sqlDataSourceView.OnUpdating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />。</param>
        <summary>在 <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updating" /> 控件尝试更新操作前引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例演示如何显示从 Microsoft SQL Server 数据库中检索到的数据<xref:System.Web.UI.WebControls.DropDownList>控制和更新记录使用<xref:System.Web.UI.WebControls.TextBox>控件。 该示例演示如何使用<xref:System.Data.Common.DbTransaction>对象使用时添加事务上下文<xref:System.Web.UI.WebControls.SqlDataSource>控件更新数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写时<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />在派生类中，请务必调用<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />方法的基类以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="ParameterPrefix">
      <MemberSignature Language="C#" Value="protected virtual string ParameterPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ParameterPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::String ^ ParameterPrefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ParameterPrefix : string" Usage="System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用作参数化 SQL 查询中的参数占位符前缀的字符串。</summary>
        <value>“@”字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL 查询和命令可以进行参数化，因为它们包含在运行时绑定到查询的值的占位符。 具体取决于为设置的 ADO.NET 提供程序<xref:System.Web.UI.WebControls.SqlDataSource>控件，它由<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>属性，参数计算通过别名或它们的顺序在<xref:System.Web.UI.WebControls.ParameterCollection>对象。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>未设置或者设置为<xref:System.Data.SqlClient?displayProperty=nameWithType>，参数计算的别名和<xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>属性用于将添加到的参数前缀<xref:System.Web.UI.WebControls.Parameter.Name%2A>每个属性<xref:System.Web.UI.WebControls.Parameter>对象中<xref:System.Web.UI.WebControls.ParameterCollection>期间数据检索或数据操作。 如果<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>属性设置为<xref:System.Data.OleDb?displayProperty=nameWithType>或<xref:System.Data.Odbc?displayProperty=nameWithType>，参数按顺序计算并<xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>和<xref:System.Web.UI.WebControls.Parameter.Name%2A>属性将被忽略。  
  
 如果扩展<xref:System.Web.UI.WebControls.SqlDataSourceView>类，可以重写<xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>属性不是提供一个前缀`"@"`字符串，如果所需。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseUnsupportedCapabilityError">
      <MemberSignature Language="C#" Value="protected internal override void RaiseUnsupportedCapabilityError (System.Web.UI.DataSourceCapabilities capability);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RaiseUnsupportedCapabilityError(valuetype System.Web.UI.DataSourceCapabilities capability) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.RaiseUnsupportedCapabilityError(System.Web.UI.DataSourceCapabilities)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub RaiseUnsupportedCapabilityError (capability As DataSourceCapabilities)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void RaiseUnsupportedCapabilityError(System::Web::UI::DataSourceCapabilities capability);" />
      <MemberSignature Language="F#" Value="override this.RaiseUnsupportedCapabilityError : System.Web.UI.DataSourceCapabilities -&gt; unit" Usage="sqlDataSourceView.RaiseUnsupportedCapabilityError capability" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capability" Type="System.Web.UI.DataSourceCapabilities" />
      </Parameters>
      <Docs>
        <param name="capability">与视图支持的功能进行比较的 <see cref="T:System.Web.UI.DataSourceCapabilities" /> 值之一。</param>
        <summary>对照视图支持的功能比较为 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" /> 操作请求的功能，由 <see cref="M:System.Web.UI.DataSourceSelectArguments.RaiseUnsupportedCapabilitiesError(System.Web.UI.DataSourceView)" /> 方法调用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.RaiseUnsupportedCapabilityError%2A>数据源视图使用方法来检查每个请求的功能，由数据绑定控件，由表示<xref:System.Web.UI.DataSourceSelectArguments>对象传递给<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法，并比较这些功能功能，支持的数据源视图。 由表示的功能<xref:System.Web.UI.DataSourceSelectArguments>对象并不支持的数据源视图，<xref:System.NotSupportedException>引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">数据源没有启用所选 <paramref name="capability" />。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanSort" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanPage" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected virtual object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="abstract member SaveViewState : unit -&gt; obj&#xA;override this.SaveViewState : unit -&gt; obj" Usage="sqlDataSourceView.SaveViewState " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存自页回发到服务器后 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控件的视图状态更改。</summary>
        <returns>包含 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 视图状态更改的对象，如果不存在与对象关联的视图状态，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A>方法主要由控件开发人员使用。  
  
 视图状态是服务器控件的属性的值的累计。 这些值被自动放入<xref:System.Web.UI.Control.ViewState%2A>服务器控件，这是实例属性的<xref:System.Web.UI.StateBag>类。 <xref:System.Web.UI.Control.ViewState%2A>的保存状态的服务器控件生命周期阶段后的服务器控件随后将保留到字符串对象的值。  
  
 保存视图状态后，保存状态的服务器控件生命周期阶段后保持的字符串对象返回到客户端为存储在对应的 HTML 中的变量`Hidden`元素。 如果您创作的自定义服务器控件，您可以通过重写提高效率<xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A>方法并修改`ViewState`服务器控件的属性。 有关详细信息，请参阅[ASP.NET 状态管理概述](https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100))。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (arguments As DataSourceSelectArguments) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select(System::Web::UI::DataSourceSelectArguments ^ arguments);" />
      <MemberSignature Language="F#" Value="override this.Select : System.Web.UI.DataSourceSelectArguments -&gt; System.Collections.IEnumerable" Usage="sqlDataSourceView.Select arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments"><see cref="T:System.Web.UI.DataSourceSelectArguments" />，用于请求对数据执行基本数据检索操作以外的操作。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> SQL 字符串以及 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> 集合中的所有参数从基础数据库中检索数据。</summary>
        <returns>一个数据行的 <see cref="T:System.Collections.IEnumerable" /> 列表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法调用<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A>方法，传递`selectArgs`参数。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A>方法将返回<xref:System.Data.DataView>对象，如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>属性设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>值或其返回<xref:System.Data.IDataReader>对象，如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>属性设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>值。 关闭<xref:System.Data.IDataReader>对象读取数据完成。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">传递给 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" /> 方法的 <paramref name="selectArgs" /> 指定数据源在检索数据时应执行一些附加操作，以便对检索到的数据启用分页或排序，但此数据源控件不支持请求的功能。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public string SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 对象用来从基础数据库检索数据的 SQL 字符串。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 用来检索数据的 SQL 字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前正在使用的 ADO.NET 提供程序，该提供程序由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 属性标识。 如果 SQL 字符串是一个参数化查询或命令，则参数的占位符还取决于所使用的 ADO.NET 提供程序。 例如，如果提供程序<xref:System.Data.SqlClient?displayProperty=nameWithType>，这是默认提供程序<xref:System.Web.UI.WebControls.SqlDataSource>类，则参数的占位符是`'@parameterName'`。 但是，如果提供程序设置为<xref:System.Data.Odbc?displayProperty=nameWithType>或<xref:System.Data.OleDb?displayProperty=nameWithType>，则参数的占位符是`'?'`。 有关参数化的 SQL 查询和命令的详细信息，请参阅[使用参数使用 SqlDataSource 控件](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>属性可以是 SQL 字符串或存储过程的名称，如果数据源支持的存储的过程。  
  
> [!IMPORTANT]
>  它是更安全地使用存储的过程比 SQL 语句中以便<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>属性。  
  
 值<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>属性存储在视图状态。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何设置<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>基本 SQL 查询，以从 Microsoft SQL Server 数据库中检索数据并将其中显示的文本<xref:System.Web.UI.WebControls.DropDownList>控件。 第二个代码示例演示如何设置<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>为要从 SQL Server 数据库检索数据并将其显示在存储过程的名称的文本<xref:System.Web.UI.WebControls.DropDownList>。  
  
 下面的代码示例演示如何设置<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>为基本的 SQL 查询，以从 SQL Server 数据库中检索数据并将其中显示的文本<xref:System.Web.UI.WebControls.DropDownList>控件。 <xref:System.Web.UI.WebControls.Button>并<xref:System.Web.UI.WebControls.TextBox>控件提供简单的界面来更新中的所选用户的地址作为<xref:System.Web.UI.WebControls.DropDownList>。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 下面的代码示例演示如何设置<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>为要从 SQL Server 数据库检索数据并将其显示在存储过程的名称的文本<xref:System.Web.UI.WebControls.DropDownList>控件。 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>属性可以是 SQL 查询或存储过程的名称，如果数据源支持的存储的过程。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType SelectCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> 属性中的文本是 SQL 查询还是存储过程的名称。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。 默认为 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A>属性存储在视图状态。  
  
   
  
## Examples  
 下面的代码示例演示如何设置<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>文本为存储过程的名称和<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A>属性设置为<xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure>值，以从 Microsoft SQL Server 数据库检索数据并将其显示在<xref:System.Web.UI.WebControls.DropDownList>。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所选值不是 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Selected : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数据检索操作完成后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.SqlDataSourceView.Selected>事件以检查的值后数据检索操作完成后的输出参数。 输出参数中有<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>与事件相关联的对象。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As SqlDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler " Usage="member this.Selecting : System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行数据检索操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.SqlDataSourceView.Selecting>事件来执行特定于应用程序，以验证参数的值或更改之前的参数值的附加的初始化操作<xref:System.Web.UI.WebControls.SqlDataSource>控件执行数据检索操作。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Select" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数集合，该集合包含由 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> 属性使用的参数。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> 属性所使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>属性包含的参数化的 SQL 查询<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A>集合包含任何<xref:System.Web.UI.WebControls.Parameter>对应的 SQL 字符串中的参数占位符的对象。  
  
 具体取决于 ADO.NET 提供程序中的参数的顺序<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A>集合可能会很重要。 <xref:System.Data.OleDb?displayProperty=nameWithType>和<xref:System.Data.Odbc?displayProperty=nameWithType>提供程序将根据参数在参数化 SQL 查询中出现的顺序集合中的参数相关联。 <xref:System.Data.SqlClient?displayProperty=nameWithType>提供程序，这是默认的 ADO.NET 提供程序为<xref:System.Web.UI.WebControls.SqlDataSource>控件，将集合中的参数关联的 SQL 查询中的占位符别名的参数名称匹配的方法。 有关参数化的 SQL 查询和命令的详细信息，请参阅[使用参数使用 SqlDataSource 控件](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
   
  
## Examples  
 下面的代码示例演示如何从 Microsoft SQL Server 中 Northwind 数据库中检索数据，通过设置<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>属性设置为 SQL 查询。 参数化 SQL 查询和中的占位符<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>属性匹配到<xref:System.Web.UI.WebControls.ControlParameter>添加到对象<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>集合。 这样一来，<xref:System.Web.UI.WebControls.DropDownList>控件，向其<xref:System.Web.UI.WebControls.ControlParameter>绑定，充当什么的筛选器显示在<xref:System.Web.UI.WebControls.ListBox>控件。  
  
> [!NOTE]
>  因为在 WHERE 子句中，将使用参数<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>属性在此代码示例在功能上等效于同时使用这二者<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>属性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/CS/sql2cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/VB/sql2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SortParameterName : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.SortParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置存储过程参数的名称，在使用存储过程执行数据检索时，该存储过程参数用于对检索到的数据进行排序。</summary>
        <value>在使用存储过程执行数据检索时用于排序检索数据的存储过程参数的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>计算属性仅当 SQL 命令，它是包含<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>属性是存储过程的名称。 在这种情况下，如果<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>属性设置，它包含用于对存储过程的结果进行排序的参数的名称。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>属性设置，则它将追加到前面<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>属性。  
  
 值<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>属性存储在视图状态。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.IsTrackingViewState">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IStateManager.IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsTrackingViewState As Boolean Implements IStateManager.IsTrackingViewState" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Web::UI::IStateManager::IsTrackingViewState { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="P:System.Web.UI.IStateManager.IsTrackingViewState" />。</summary>
        <value>如果数据源视图被标记为保存其状态，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 可以使用它时，才<xref:System.Web.UI.WebControls.SqlDataSourceView>实例转换为<xref:System.Web.UI.IStateManager>接口。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.IStateManager.IsTrackingViewState" />
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.LoadViewState">
      <MemberSignature Language="C#" Value="void IStateManager.LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub LoadViewState (savedState As Object) Implements IStateManager.LoadViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.LoadViewState(System::Object ^ savedState) = System::Web::UI::IStateManager::LoadViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">表示要还原的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 状态的对象。</param>
        <summary>有关此成员的说明，请参见 <see cref="M:System.Web.UI.IStateManager.LoadViewState(System.Object)" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 可以使用它时，才<xref:System.Web.UI.WebControls.SqlDataSourceView>实例转换为<xref:System.Web.UI.IStateManager>接口。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.SaveViewState">
      <MemberSignature Language="C#" Value="object IStateManager.SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Web.UI.IStateManager.SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Function SaveViewState () As Object Implements IStateManager.SaveViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Web.UI.IStateManager.SaveViewState() = System::Web::UI::IStateManager::SaveViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="M:System.Web.UI.IStateManager.SaveViewState" />。</summary>
        <returns>包含 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 视图状态更改的对象，如果不存在与对象关联的视图状态，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 可以使用它时，才<xref:System.Web.UI.WebControls.SqlDataSourceView>实例转换为<xref:System.Web.UI.IStateManager>接口。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.TrackViewState">
      <MemberSignature Language="C#" Value="void IStateManager.TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Sub TrackViewState () Implements IStateManager.TrackViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.TrackViewState() = System::Web::UI::IStateManager::TrackViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="M:System.Web.UI.IStateManager.TrackViewState" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 可以使用它时，才<xref:System.Web.UI.WebControls.SqlDataSourceView>实例转换为<xref:System.Web.UI.IStateManager>接口。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected virtual void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TrackViewState();" />
      <MemberSignature Language="F#" Value="abstract member TrackViewState : unit -&gt; unit&#xA;override this.TrackViewState : unit -&gt; unit" Usage="sqlDataSourceView.TrackViewState " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 对象跟踪其视图状态的更改，以便这些更改可以存储在控件的 <see cref="T:System.Web.UI.StateBag" /> 对象中并且能够在同一页的不同请求间保持。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="sqlDataSourceView.Update (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">与 <see cref="T:System.Collections.IDictionary" /> 属性一起使用以执行更新数据库操作的主键的 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />。 如果不存在与查询关联的关键字，或者如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <param name="values">与 <see cref="T:System.Collections.IDictionary" /> 属性一起使用以执行更新数据库操作的值的 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />。 如果不存在与查询关联的参数，或者如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <param name="oldValues"><see cref="T:System.Collections.IDictionary" />，表示数据库中的原始值。 如果不存在与查询关联的参数，或者如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> SQL 字符串、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" /> 集合中的所有参数，以及指定的 <paramref name="keys" />、<paramref name="values" /> 和 <paramref name="oldValues" /> 集合中的值执行更新操作。</summary>
        <returns>一个值，该值表示基础数据库中被更新的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>方法调用<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate%2A>方法，传递`keys`， `values`，和`oldValues`参数。 有关详情，请参阅<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控件中显示数据<xref:System.Web.UI.WebControls.DropDownList>控制和更新数据时**提交**单击按钮。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>属性设置与参数化的 SQL 语句和两个<xref:System.Web.UI.WebControls.ControlParameter>参数添加到<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>集合。 当**提交**单击按钮时，<xref:System.Web.UI.WebControls.Button.OnClick%2A>事件处理调用<xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>方法显式。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate" /> 属性为 <see langword="false" />。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public string UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 对象用来更新基础数据库中的数据的 SQL 字符串。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 用来更新数据的 SQL 字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前正在使用的 ADO.NET 提供程序，该提供程序由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 属性标识。 如果 SQL 字符串是一个参数化查询或命令，则参数的占位符还取决于所使用的 ADO.NET 提供程序。 例如，如果提供程序<xref:System.Data.SqlClient?displayProperty=nameWithType>，这是默认提供程序<xref:System.Web.UI.WebControls.SqlDataSource>类，则参数的占位符是`'@parameterName'`。 但是，如果提供程序设置为<xref:System.Data.Odbc?displayProperty=nameWithType>或<xref:System.Data.OleDb?displayProperty=nameWithType>，则参数的占位符是`'?'`。 有关参数化的 SQL 查询和命令的详细信息，请参阅[使用参数使用 SqlDataSource 控件](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>属性可以是 SQL 字符串或存储过程的名称，如果数据源支持的存储的过程。  
  
 值<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>属性存储在视图状态。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何设置<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>的属性<xref:System.Web.UI.WebControls.SqlDataSource>在 Microsoft SQL Server 数据库中使用的控件和更新数据<xref:System.Web.UI.WebControls.GridView>控件。 第二个代码示例演示了如何更新数据中使用 ODBC 数据库<xref:System.Web.UI.WebControls.GridView>控件。  
  
 下面的代码示例演示如何设置<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>的属性<xref:System.Web.UI.WebControls.SqlDataSource>在 SQL Server 数据库中使用的控件和更新数据<xref:System.Web.UI.WebControls.GridView>控件。 <xref:System.Web.UI.WebControls.GridView>控件自动填充<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>集合中，推断的参数<xref:System.Web.UI.WebControls.BoundField>对象，并调用<xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>方法时**更新**上可编辑链接<xref:System.Web.UI.WebControls.GridView>控件处于选中状态。 此示例还包括一些后续处理-后更新某个记录时，发送电子邮件消息通知。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/CS/sql7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/VB/sql7vb.aspx#1)]  
  
 下面的代码示例在功能上等同于前面的代码示例，演示了如何更新数据中使用 ODBC 数据库<xref:System.Web.UI.WebControls.GridView>控件。 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>属性设置为适用于 ODBC 的 ADO.NET 提供程序<xref:System.Data.Odbc?displayProperty=nameWithType>，和<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>属性设置为 ODBC 数据源名称 (DSN) 的名称。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType UpdateCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 属性中的文本是 SQL 语句还是存储过程的名称。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。 默认为 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A>属性存储在视图状态。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所选值不是 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Updated : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>完成更新操作后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.SqlDataSourceView.Updated>后更新操作已完成的事件以检查的值输出参数。 输出参数中有<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>与事件相关联的对象。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何显示和更新数据从 ODBC 数据库中检索到<xref:System.Web.UI.WebControls.GridView>控件。 已成功更新记录后，<xref:System.Web.UI.WebControls.SqlDataSource.Updated>事件由一个事件处理程序，以执行后续处理步骤发送电子邮件消息通知的位置。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数集合，该集合包含由 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 属性使用的参数。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 属性所使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>属性包含的参数化的 SQL 查询<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>集合包含任何<xref:System.Web.UI.WebControls.Parameter>SQL 字符串中的参数占位符对应的对象。  
  
 参数名称可能会受到<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>属性; 具体而言，如果名称标识为主键，如密钥的指定，则使用`DataKeyNames`属性，或在删除和更新方案其中<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions.CompareAllValues>值和一组`oldValues`传递到相应的数据方法。 在这种情况下，格式字符串应用于在每个参数名称`oldValues`集合。  
  
 具体取决于 ADO.NET 提供程序中的参数的顺序<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>集合可能会很重要。 <xref:System.Data.OleDb?displayProperty=nameWithType>和<xref:System.Data.Odbc?displayProperty=nameWithType>提供程序将根据参数在参数化 SQL 查询中出现的顺序集合中的参数相关联。 <xref:System.Data.SqlClient?displayProperty=nameWithType>提供程序，这是默认的 ADO.NET 提供程序为<xref:System.Web.UI.WebControls.SqlDataSource>控件，将集合中的参数关联的 SQL 查询中的占位符别名的参数名称匹配的方法。 有关参数化的 SQL 查询和命令的详细信息，请参阅[使用参数使用 SqlDataSource 控件](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控件中显示数据<xref:System.Web.UI.WebControls.DropDownList>控制和更新数据时**提交**单击按钮。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>属性设置与参数化的 SQL 语句和两个<xref:System.Web.UI.WebControls.ControlParameter>参数添加到<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>集合。 当**提交**单击按钮时，<xref:System.Web.UI.WebControls.Button.OnClick%2A>事件处理调用<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>方法显式。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " Usage="member this.Updating : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行更新操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.SqlDataSourceView.Updating>事件来执行特定于应用程序，以验证参数的值或更改之前的参数值的附加的初始化操作<xref:System.Web.UI.WebControls.SqlDataSource>控件执行更新操作。  
  
 与基础数据源的连接尚未打开，调用事件处理程序委托时。 因此，不能直接通过调用取消该操作<xref:System.Data.Common.DbCommand.Cancel%2A>方法<xref:System.Data.Common.DbCommand>对象，它公开由<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>对象。 但是，可以通过设置来取消数据库操作<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>的属性<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>到`true`。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何显示从 Microsoft SQL Server 数据库中检索到的数据<xref:System.Web.UI.WebControls.DropDownList>控制和更新记录使用<xref:System.Web.UI.WebControls.TextBox>控件。 该示例演示如何使用<xref:System.Data.Common.DbTransaction>对象使用时添加事务上下文<xref:System.Web.UI.WebControls.SqlDataSource>控件更新数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
  </Members>
</Type>