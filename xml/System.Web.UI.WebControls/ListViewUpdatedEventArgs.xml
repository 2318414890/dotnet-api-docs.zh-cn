<Type Name="ListViewUpdatedEventArgs" FullName="System.Web.UI.WebControls.ListViewUpdatedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b83b5a8ac98deaa5b4b1e07b297219c2637c8607" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30599081" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ListViewUpdatedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListViewUpdatedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.ListViewUpdatedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ListViewUpdatedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListViewUpdatedEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="E:System.Web.UI.WebControls.ListView.ItemUpdated" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ListView>控件都将引发<xref:System.Web.UI.WebControls.ListView.ItemUpdated>事件时<xref:System.Web.UI.WebControls.ListView.UpdateItem%2A>调用方法，或单击控件中的更新按钮后时，但之后<xref:System.Web.UI.WebControls.ListView>控件更新该项。 (的更新按钮控件是一个按钮其`CommandName`属性设置为"更新"。)这使你能够在每次此事件发生时，例如检查更新操作的结果执行的自定义的例程的事件处理方法。  
  
 A<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs>对象传递给事件处理方法。 此对象使您可以确定更新的项的数目，并以获取可能已经发生的任何异常。 若要确定受更新操作的项的数目，使用<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows%2A>属性。 若要确定是否发生任何异常，请使用<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception%2A>属性。 你可以指示是否处理了异常事件处理方法中通过设置<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled%2A>属性。 你可以通过访问字段的原始值<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.OldValues%2A>属性。 你可以通过访问更新的字段值<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.NewValues%2A>属性。  
  
 默认情况下，<xref:System.Web.UI.WebControls.ListView>项后更新操作将返回到只读模式。 如果你处理更新操作过程中发生的异常，则可以保留<xref:System.Web.UI.WebControls.ListView>处于编辑模式，通过设置项<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode%2A>属性`true`。  
  
 有关 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> 类的实例的初始属性值列表，请参见 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.%23ctor%2A> 构造函数。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs>对象以确定是否在更新操作期间发生了异常。  
  
> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ListView.ItemUpdated#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/CS/ListViewItemUpdatedCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ListView.ItemUpdated#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/VB/ListViewItemUpdatedVB.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.ListView" />
    <altmember cref="E:System.Web.UI.WebControls.ListView.ItemUpdated" />
    <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows" />
    <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception" />
    <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled" />
    <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListViewUpdatedEventArgs (int affectedRows, Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 affectedRows, class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ListViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListViewUpdatedEventArgs(int affectedRows, Exception ^ exception);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="affectedRows" Type="System.Int32" />
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="affectedRows">受更新操作影响的行数。</param>
        <param name="exception">执行更新操作时引发的异常（如果有）。 如果未引发任何异常，则使用 <see langword="null" />。</param>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.ListViewUpdatedEventArgs" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数初始化的新实例<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs>类。  
  
> [!NOTE]
>  在引发事件时，是主要由控件开发人员使用此构造函数。  
  
 下表显示了 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> 类的某个实例的初始属性值。  
  
|Property|初始值|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows%2A>|`affectedRows` 参数的值。|  
|<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception%2A>|<xref:System.Exception?displayProperty=nameWithType>中包含的对象`e`参数。|  
|<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled%2A>|`false`。|  
|<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode%2A>|`false`。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ListView" />
        <altmember cref="E:System.Web.UI.WebControls.ListView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode" />
      </Docs>
    </Member>
    <Member MemberName="AffectedRows">
      <MemberSignature Language="C#" Value="public int AffectedRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AffectedRows" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AffectedRows As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AffectedRows { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取受更新操作影响的行数。</summary>
        <value>受更新操作影响的行数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows%2A>属性以确定数据源返回的更新操作中，受影响的行数。 由于通常只有一项也将更新，则此属性通常包含值为 0 或 1。  
  
 有时在更新操作期间会发生错误，不会引发异常。 在这种情况下，<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows%2A>属性可以用于验证是否已更新项。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows%2A>属性以验证已更新项。 此代码示例摘自更大的示例为提供<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs>类。  
  
 [!code-csharp[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/CS/ListViewItemUpdatedCS.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/VB/ListViewItemUpdatedVB.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ListView" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取更新操作过程中引发的异常（如果有）。</summary>
        <value>更新操作过程中引发的异常（如果有）；如果未引发任何异常，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception%2A>属性以确定异常 （如果有） 更新操作过程中引发。 如果未引发任何异常，此属性返回`null`。  
  
> [!NOTE]
>  如果引发了异常，并且事件处理程序中，设置中处理的异常<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled%2A>属性`true`。 否则为<xref:System.Web.UI.WebControls.ListView>控件重新引发的异常。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception%2A>属性来确定在更新操作期间是否发生了异常。 此代码示例摘自更大的示例为提供<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs>类。  
  
 [!code-csharp[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/CS/ListViewItemUpdatedCS.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/VB/ListViewItemUpdatedVB.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ListView" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled" />
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否在事件期间处理了更新操作过程中引发的异常。</summary>
        <value>
          如果异常已在事件处理程序中得到处理，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果更新操作期间引发异常，则使用<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled%2A>属性以指示是否已处理的事件期间的异常。 如果此属性设置为`true`，将异常认为是进行处理并且不会重新引发由<xref:System.Web.UI.WebControls.ListView>控件。 如果此属性设置为`false`、<xref:System.Web.UI.WebControls.ListView>控件重新引发的异常。 若要确定引发哪个异常，请使用<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled%2A>属性以指示是否处理了该异常在事件处理程序。 此代码示例摘自更大的示例为提供<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs>类。  
  
 [!code-csharp[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/CS/ListViewItemUpdatedCS.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/VB/ListViewItemUpdatedVB.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ListView" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception" />
      </Docs>
    </Member>
    <Member MemberName="KeepInEditMode">
      <MemberSignature Language="C#" Value="public bool KeepInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepInEditMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepInEditMode { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在更新操作之后 <see cref="T:System.Web.UI.WebControls.ListView" /> 控件是否应该继续处于编辑模式。</summary>
        <value>
          如果在更新操作之后该控件应继续处于编辑模式，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，<xref:System.Web.UI.WebControls.ListView>控件后更新操作将返回到只读模式。 设置<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode%2A>属性`true`指定<xref:System.Web.UI.WebControls.ListView>控件应继续处于编辑模式。 这也将保留用户输入的值。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode%2A>属性以保留<xref:System.Web.UI.WebControls.ListView>控件处于编辑模式发生异常时。 此代码示例摘自更大的示例为提供<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs>类。  
  
 [!code-csharp[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/CS/ListViewItemUpdatedCS.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/VB/ListViewItemUpdatedVB.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ListView" />
      </Docs>
    </Member>
    <Member MemberName="NewValues">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary NewValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary NewValues" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.NewValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewValues As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ NewValues { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含已更新项的新值的字典。</summary>
        <value>已更新项的新值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.NewValues%2A>属性来访问更新的项的新字段值。 例如，可以使用这些值来记录的已更新的项目。  
  
 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.NewValues%2A>属性返回的对象实现<xref:System.Collections.Specialized.IOrderedDictionary>接口。 对象包含<xref:System.Collections.DictionaryEntry>表示更新后的项目的字段的对象。  
  
> [!NOTE]
>  作为快捷方式，你可以使用的索引器<xref:System.Collections.Specialized.IOrderedDictionary>直接对象访问该字段值。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ListView" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="E:System.Web.UI.WebControls.ListView.ItemUpdated" />
      </Docs>
    </Member>
    <Member MemberName="OldValues">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary OldValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary OldValues" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.OldValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OldValues As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ OldValues { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个包含已更新项的原始值的字典。</summary>
        <value>已更新项的原始值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.OldValues%2A>属性来访问更新的项的原始字段值。 例如，可以使用这些值来记录的已更新的项目。  
  
 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.OldValues%2A>属性返回的对象实现<xref:System.Collections.Specialized.IOrderedDictionary>接口。 对象包含<xref:System.Collections.DictionaryEntry>表示更新后的项目的字段的对象。  
  
> [!NOTE]
>  作为快捷方式，你可以使用的索引器<xref:System.Collections.Specialized.IOrderedDictionary>直接对象访问该字段值。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ListView" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="E:System.Web.UI.WebControls.ListView.ItemUpdated" />
      </Docs>
    </Member>
  </Members>
</Type>