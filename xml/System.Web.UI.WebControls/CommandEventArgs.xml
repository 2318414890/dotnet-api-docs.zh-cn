<Type Name="CommandEventArgs" FullName="System.Web.UI.WebControls.CommandEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="437953a5b6b6b10be6717d48c189668c2f8b885f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30596181" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CommandEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CommandEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.CommandEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class CommandEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see langword="Command" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Command`引发事件时<xref:System.Web.UI.WebControls.Button>或<xref:System.Web.UI.WebControls.ImageButton>控件被单击。  
  
 <xref:System.Web.UI.WebControls.CommandEventArgs>对象包含有关数据`Command`事件可访问在事件处理程序。 使用中可用的属性<xref:System.Web.UI.WebControls.CommandEventArgs>类，你可以确定执行，如命令的名称`Sort`，除了一个可选参数，如补充命令， `Ascending`。  
  
 有关的实例的初始属性值的列表<xref:System.Web.UI.WebControls.CommandEventArgs>，请参阅<xref:System.Web.UI.WebControls.CommandEventArgs.%23ctor%2A>构造函数。  
  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下面的示例演示如何访问中的属性<xref:System.Web.UI.WebControls.CommandEventArgs>来确定要执行的命令。 此示例指定事件处理程序以声明方式，使用<xref:System.Web.UI.WebControls.Button.OnClick%2A>属性<xref:System.Web.UI.WebControls.Button>控件。  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 下面的代码示例演示如何以编程方式将其添加到中的事件并指定事件处理程序`Page_Load`方法。  
  
 [!code-aspx-csharp[ButtonCommand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommand/CS/buttoncommandcs.aspx#1)]
 [!code-aspx-vb[ButtonCommand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommand/VB/buttoncommandvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.CommandEventHandler" />
    <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
    <altmember cref="E:System.Web.UI.WebControls.ImageButton.Command" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandEventArgs (System.Web.UI.WebControls.CommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.CommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CommandEventArgs.#ctor(System.Web.UI.WebControls.CommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (e As CommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandEventArgs(System::Web::UI::WebControls::CommandEventArgs ^ e);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.CommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.CommandEventArgs" />。</param>
        <summary>用其他的 <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> 对象初始化 <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数来创建和初始化的新实例<xref:System.Web.UI.WebControls.CommandEventArgs>类使用指定<xref:System.Web.UI.WebControls.CommandEventArgs>对象。  
  
 实例时<xref:System.Web.UI.WebControls.CommandEventArgs>创建此构造函数的调用中，通过以下属性将初始化为指定的值。  
  
|Property|初始值|  
|--------------|-------------------|  
|CommandName|`e.CommandName` 参数。|  
|CommandArgument|`e.CommandArgument` 参数。|  
  
   
  
## Examples  
 下面的示例演示如何创建和初始化的新实例<xref:System.Web.UI.WebControls.CommandEventArgs>类使用指定<xref:System.Web.UI.WebControls.CommandEventArgs>对象。  
  
 [!code-csharp[Classic CommandEventArgs.CommandEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CommandEventArgs.CommandEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic CommandEventArgs.CommandEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CommandEventArgs.CommandEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandEventArgs (string commandName, object argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandName, object argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CommandEventArgs.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandName As String, argument As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandEventArgs(System::String ^ commandName, System::Object ^ argument);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandName" Type="System.String" />
        <Parameter Name="argument" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="commandName">命令的名称。</param>
        <param name="argument">包含该命令参数的 <see cref="T:System.Object" />。</param>
        <summary>用指定的命令名和参数初始化 <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数来创建和初始化的新实例<xref:System.Web.UI.WebControls.CommandEventArgs>类使用指定的命令名称和参数。  
  
 实例时<xref:System.Web.UI.WebControls.CommandEventArgs>创建此构造函数的调用中，通过以下属性将初始化为指定的值。  
  
|Property|初始值|  
|--------------|-------------------|  
|CommandName|`commandName` 参数的值。|  
|CommandArgument|`argument` 参数的值。|  
  
   
  
## Examples  
 下面的示例演示如何创建和初始化的新实例<xref:System.Web.UI.WebControls.CommandEventArgs>类使用指定的命令名称和参数。  
  
 [!code-csharp[Classic CommandEventArgs.CommandEventArgs1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CommandEventArgs.CommandEventArgs1 Example/CS/source.cs#1)]
 [!code-vb[Classic CommandEventArgs.CommandEventArgs1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CommandEventArgs.CommandEventArgs1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandArgument">
      <MemberSignature Language="C#" Value="public object CommandArgument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandArgument" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CommandEventArgs.CommandArgument" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandArgument As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandArgument { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取命令的参数。</summary>
        <value>包含该命令参数的 <see cref="T:System.Object" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A>可以包含由程序员设置的任何字符串。 <xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A>属性补充<xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A>属性，它允许你提供的命令的任何其他信息。 例如，你可以设置<xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A>属性`Sort`并设置<xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A>属性`Ascending`以指定的命令按升序进行排序。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A>属性来确定要执行的命令的补充信息。  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Button.CommandArgument" />
        <altmember cref="P:System.Web.UI.WebControls.ImageButton.CommandArgument" />
      </Docs>
    </Member>
    <Member MemberName="CommandName">
      <MemberSignature Language="C#" Value="public string CommandName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CommandEventArgs.CommandName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CommandName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取命令的名称。</summary>
        <value>要执行的命令的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A>属性来确定要执行的命令。 <xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A>属性可以包含由程序员设置的任何字符串。 然后，程序员可以标识在代码中的命令名称，并执行适当的任务。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A>属性以编程方式确定要执行的命令。  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Button.CommandName" />
        <altmember cref="P:System.Web.UI.WebControls.ImageButton.CommandName" />
      </Docs>
    </Member>
  </Members>
</Type>