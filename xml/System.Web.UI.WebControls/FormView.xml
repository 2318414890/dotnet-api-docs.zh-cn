<Type Name="FormView" FullName="System.Web.UI.WebControls.FormView">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b079858ce055429e370514f22fb069c6222943f9" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34311475" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FormView : System.Web.UI.WebControls.CompositeDataBoundControl, System.Web.UI.IDataItemContainer, System.Web.UI.IPostBackEventHandler, System.Web.UI.WebControls.IDataBoundItemControl, System.Web.UI.WebControls.IPostBackContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FormView extends System.Web.UI.WebControls.CompositeDataBoundControl implements class System.Web.UI.IDataItemContainer, class System.Web.UI.INamingContainer, class System.Web.UI.IPostBackEventHandler, class System.Web.UI.WebControls.IDataBoundControl, class System.Web.UI.WebControls.IDataBoundItemControl, class System.Web.UI.WebControls.IPostBackContainer" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FormView" />
  <TypeSignature Language="VB.NET" Value="Public Class FormView&#xA;Inherits CompositeDataBoundControl&#xA;Implements IDataBoundItemControl, IDataItemContainer, IPostBackContainer, IPostBackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormView : System::Web::UI::WebControls::CompositeDataBoundControl, System::Web::UI::IDataItemContainer, System::Web::UI::IPostBackEventHandler, System::Web::UI::WebControls::IDataBoundItemControl, System::Web::UI::WebControls::IPostBackContainer" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.CompositeDataBoundControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IDataItemContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IDataBoundItemControl</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IPostBackContainer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("PageIndexChanging")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.FormViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("SelectedValue")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.DataKeyProperty("DataKey")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>使用用户定义的模板显示数据源中单个记录的值。 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件可用于编辑、删除和插入记录。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本主题内容：  
  
-   [介绍](#introduction)  
  
-   [模板](#templates)  
  
-   [绑定到数据](#binding_to_data)  
  
-   [数据操作](#data_operations)  
  
-   [自定义用户界面](#customizing_the_user_interface)  
  
-   [事件](#events)  
  
-   [辅助功能](#accessibility)  
  
-   [应用 CSS 样式](#applying_styles)  
  
-   [声明性语法](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>介绍  
 <xref:System.Web.UI.WebControls.FormView>控件用于显示来自数据源的单个记录。 它是类似于<xref:System.Web.UI.WebControls.DetailsView>控制，只是它显示用户定义的模板，而不是行字段。 创建你自己的模板为你提供更灵活地控制数据的显示方式。 <xref:System.Web.UI.WebControls.FormView>控件支持以下功能：  
  
-   绑定到数据源控件，如<xref:System.Web.UI.WebControls.SqlDataSource>和<xref:System.Web.UI.WebControls.ObjectDataSource>。  
  
-   内置插入功能。  
  
-   内置更新和删除功能。  
  
-   内置分页功能。  
  
-   以编程方式访问<xref:System.Web.UI.WebControls.FormView>对象模型，以便动态设置属性、 处理事件，依次类推。  
  
-   通过用户定义的模板、 主题和样式的自定义外观。  
  
<a name="templates"></a>   
## <a name="templates"></a>模板  
 有关<xref:System.Web.UI.WebControls.FormView>控件显示内容，您需要为该控件的不同部分创建模板。 大多数模板是可选的;但是，你必须创建用于在其中配置该控件的模式的模板。 例如，<xref:System.Web.UI.WebControls.FormView>支持插入记录的控件必须具有定义的插入项模板。 下表列出可以创建不同的模板。  
  
|模板类型|描述|  
|-------------------|-----------------|  
|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|定义数据的内容时行<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式。 此模板通常包含输入的控件和命令按钮与其用户可以编辑现有记录。|  
|<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>|空数据行显示时定义的内容<xref:System.Web.UI.WebControls.FormView>控件绑定到数据源不包含任何记录。 此模板通常包含内容，以提醒用户数据源不包含任何记录。|  
|<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>|定义页脚行的内容。 通常，此模板包含你想要的页脚行中显示的任何其他内容。 **注意：** 作为替代方法，你可以只需指定要通过设置显示在页脚行文本<xref:System.Web.UI.WebControls.FormView.FooterText%2A>属性。|  
|<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>|定义标头行的内容。 通常，此模板包含你想要显示的标题行中的任何其他内容。 **注意：** 作为替代方法，你可以只需指定要通过设置标题行中显示文本<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>属性。|  
|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|定义数据的内容时行<xref:System.Web.UI.WebControls.FormView>控件是否处于只读模式。 此模板通常包含内容，以显示现有记录的值。|  
|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|定义数据的内容时行<xref:System.Web.UI.WebControls.FormView>控件是否处于插入模式。 此模板通常包含输入的控件和用户可以使用该对话框添加一条新记录的命令按钮。|  
|<xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>|定义当启用分页功能时，显示的页导航行的内容 (时<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>属性设置为`true`)。 此模板通常包含与其用户可以导航到另一条记录的控件。 **注意：** <xref:System.Web.UI.WebControls.FormView>控件有内置的页导航行用户界面 (UI)。 你需要创建页导航模板，仅当你想要创建您自己的自定义页导航行。|  
  
 若要显示的字段值中的项模板，请使用数据绑定表达式。 有关数据绑定表达式的详细信息，请参阅[数据绑定表达式语法](http://msdn.microsoft.com/library/676beb1d-ddfa-4153-bba8-3c86dcb7ceca)。  
  
 编辑项模板和插入项模板中的输入的控件可以绑定到数据源的字段中，使用双向绑定表达式。 这允许<xref:System.Web.UI.WebControls.FormView>控件可以自动提取更新的输入控件的值或插入操作。 双向绑定表达式还允许在编辑项模板以自动显示字段的原始值中的输入的控件。 双向绑定表达式的详细信息，请参阅[绑定到数据库](http://msdn.microsoft.com/library/ab7b2846-975b-4057-a948-45527497c742)。  
  
<a name="binding_to_data"></a>   
## <a name="binding-to-data"></a>绑定到数据  
 <xref:System.Web.UI.WebControls.FormView>控件可以绑定到数据源控件 (如<xref:System.Web.UI.WebControls.SqlDataSource>， <xref:System.Web.UI.WebControls.ObjectDataSource>，或<xref:System.Web.UI.WebControls.AccessDataSource>) 或任何数据源集合可实现<xref:System.Collections.IEnumerable?displayProperty=nameWithType>接口，如<xref:System.Data.DataView?displayProperty=nameWithType>， <xref:System.Collections.ArrayList?displayProperty=nameWithType>， <xref:System.Collections.Generic.List%601?displayProperty=nameWithType>，或其他集合类型。 使用以下方法之一将绑定<xref:System.Web.UI.WebControls.FormView>控件添加到适当的数据源类型：  
  
-   若要将绑定到数据源控件，将设置<xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A>属性<xref:System.Web.UI.WebControls.FormView>控制转移到<xref:System.Web.UI.Control.ID%2A>数据源控件的值。 <xref:System.Web.UI.WebControls.FormView>控件自动绑定到指定的数据源控件，并且可以利用数据源控件的功能，以执行插入、 更新、 删除和分页功能。 这是将绑定到数据的首选的方法。  
  
-   将绑定到数据源实现<xref:System.Collections.IEnumerable?displayProperty=nameWithType>接口，以编程方式设置<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A>属性<xref:System.Web.UI.WebControls.FormView>控件拖到数据源，然后调用<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>方法。 使用此方法时<xref:System.Web.UI.WebControls.FormView>控件不提供内置的插入、 更新、 删除和分页功能。 你需要通过使用相应的事件来提供此功能。  
  
 有关数据绑定的详细信息，请参阅[ASP.NET 数据访问内容映射](http://msdn.microsoft.com/library/f9219396-a0fa-481f-894d-e3d9c67d64f2)。  
  
> [!NOTE]
>  此控件可用来显示用户输入，这可能包含恶意客户端脚本。 检查从客户端可执行的脚本、 SQL 语句或其他代码之前发送在你的应用程序中显示它的任何信息。 只要有可能，强烈建议确保值之前都是 HTML 编码它们会显示在此控件。 ASP.NET 提供的一输入的请求验证功能块脚本和 HTML 在用户输入。 验证服务器控件还提供用于评估用户输入。 有关详细信息，请参阅[验证控件简介](http://msdn.microsoft.com/library/3c0e7514-cff2-4bed-936d-ee3f7b740190)。  
  
<a name="data_operations"></a>   
## <a name="data-operations"></a>数据操作  
 <xref:System.Web.UI.WebControls.FormView>控件提供了许多内置功能，允许用户更新、 删除、 插入和分页控件中的项。 当<xref:System.Web.UI.WebControls.FormView>控件绑定到数据源控件，<xref:System.Web.UI.WebControls.FormView>控件可利用数据源控件的功能并提供自动更新、 删除、 插入和分页功能。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView>控件可以为更新、 删除、 插入和与其他类型的数据源的分页操作提供支持; 但是，必须将相应的事件处理程序提供这些操作的实现。  
  
 因为<xref:System.Web.UI.WebControls.FormView>控件使用模板，它不提供自动生成命令按钮以执行更新、 删除或插入操作的方法。 在适当的模板，必须手动将这些命令按钮。 <xref:System.Web.UI.WebControls.FormView>控件可识别具有某些按钮其`CommandName`属性设置为特定值。 下表列出的命令按钮<xref:System.Web.UI.WebControls.FormView>控件可识别。  
  
|Button|CommandName 值|描述|  
|------------|-----------------------|-----------------|  
|取消|"取消"|使用更新或插入操作来取消操作并以放弃用户输入的值。 <xref:System.Web.UI.WebControls.FormView>随后控制返回到所指定的模式<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>属性。|  
|删除|“Delete”|在删除操作中用于从数据源中删除所显示的记录。 引发<xref:System.Web.UI.WebControls.FormView.ItemDeleting>和<xref:System.Web.UI.WebControls.FormView.ItemDeleted>事件。|  
|Edit|"编辑"|在更新操作中用于使<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式。 中指定的内容<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>属性显示为数据行。|  
|Insert|"插入"|用于在插入操作中尝试使用由用户提供的值的数据源中插入新记录。 引发<xref:System.Web.UI.WebControls.FormView.ItemInserting>和<xref:System.Web.UI.WebControls.FormView.ItemInserted>事件。|  
|新建|"New"|在插入操作中用于使<xref:System.Web.UI.WebControls.FormView>控件置于插入模式。 中指定的内容<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>属性显示为数据行。|  
|页|"页"|在分页操作中用于表示执行分页的页导航行中的按钮。 若要指定的分页操作，设置`CommandArgument`的按钮为"下一步"、"上一步"、"第一个"、"最后一个"，或要导航到页的索引的属性。 引发<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>和<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>事件。 **注意：** 仅中页导航模板通常使用此类型的按钮。|  
|更新|"更新"|用于在更新操作中尝试使用由用户提供的值更新数据源中显示的记录。 引发<xref:System.Web.UI.WebControls.FormView.ItemUpdating>和<xref:System.Web.UI.WebControls.FormView.ItemUpdated>事件。|  
  
 与删除按钮 （从而会立即删除显示的记录） 不同，单击编辑或新建按钮时，<xref:System.Web.UI.WebControls.FormView>控件进入编辑模式或分别插入模式。 在编辑模式，内容包含在<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>属性显示为当前数据项。 通常情况下，编辑项模板被定义以便编辑按钮替换为更新和取消按钮。 输入适合于该字段的数据类型的控件 (如<xref:System.Web.UI.WebControls.TextBox>或<xref:System.Web.UI.WebControls.CheckBox>控件) 通常还显示与用户若要修改的字段的值。 单击更新按钮更新数据源中的记录，而单击取消按钮放弃所有更改。  
  
 同样中, 包含的内容<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>当控件处于在插入模式时，将属性显示的数据项。 插入项模板通常定义，这样新建按钮将替换插入和取消按钮，并且用户以输入新的记录的值显示空的输入的控件。 单击插入按钮时单击取消按钮放弃所有更改无法在数据源中插入记录。  
  
 <xref:System.Web.UI.WebControls.FormView>控件提供分页功能，这样用户就可以导航到其他数据源中的记录。 启用时，在显示页导航行<xref:System.Web.UI.WebControls.FormView>包含的页导航控件的控件。 若要启用分页，设置<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>属性`true`。 可以通过设置中包含的对象的属性来自定义的页导航行<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>和<xref:System.Web.UI.WebControls.FormView.PagerSettings%2A>属性。 而不是使用内置的页导航行 UI，你可以通过创建自己的 UI<xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>属性。  
  
<a name="customizing_the_user_interface"></a>   
## <a name="customizing-the-user-interface"></a>自定义用户界面  
 你可以自定义的外观<xref:System.Web.UI.WebControls.FormView>通过设置控件的不同部分的样式属性的控件。 下表列出不同的样式属性。  
  
|样式属性|描述|  
|--------------------|-----------------|  
|<xref:System.Web.UI.WebControls.FormView.EditRowStyle%2A>|时行数据的样式设置<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式。|  
|<xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A>|中显示的空数据行的样式设置<xref:System.Web.UI.WebControls.FormView>控制当数据源不包含任何记录。|  
|<xref:System.Web.UI.WebControls.FormView.FooterStyle%2A>|页脚行的样式设置<xref:System.Web.UI.WebControls.FormView>控件。|  
|<xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A>|标题行的样式设置<xref:System.Web.UI.WebControls.FormView>控件。|  
|<xref:System.Web.UI.WebControls.FormView.InsertRowStyle%2A>|时行数据的样式设置<xref:System.Web.UI.WebControls.FormView>控件是否处于插入模式。|  
|<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>|中显示的页导航行的样式设置<xref:System.Web.UI.WebControls.FormView>控制当启用分页功能。|  
|<xref:System.Web.UI.WebControls.FormView.RowStyle%2A>|时行数据的样式设置<xref:System.Web.UI.WebControls.FormView>控件是否处于只读模式。|  
  
<a name="events"></a>   
## <a name="events"></a>事件  
 <xref:System.Web.UI.WebControls.FormView>控件提供可以编程的多个事件。 这允许你每次事件发生时运行的自定义的例程。 下表列出了支持<xref:System.Web.UI.WebControls.FormView>控件。  
  
|事件|描述|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.FormView.ItemCommand>|在单击 <xref:System.Web.UI.WebControls.FormView> 控件中的某个按钮时发生。 此事件通常用于在控件中单击一个按钮时执行的任务。|  
|<xref:System.Web.UI.WebControls.FormView.ItemCreated>|在所有发生<xref:System.Web.UI.WebControls.FormViewRow>创建对象的<xref:System.Web.UI.WebControls.FormView>控件。 此事件通常用于显示之前修改的记录的值。|  
|<xref:System.Web.UI.WebControls.FormView.ItemDeleted>|时发生的删除按钮 (带有按钮其`CommandName`属性设置为"Delete") 单击后，之后<xref:System.Web.UI.WebControls.FormView>控件从数据源中删除记录。 此事件通常用于检查删除操作的结果。|  
|<xref:System.Web.UI.WebControls.FormView.ItemDeleting>|单击删除按钮，但之前时发生<xref:System.Web.UI.WebControls.FormView>控件从数据源中删除记录。 此事件通常用于取消删除操作。|  
|<xref:System.Web.UI.WebControls.FormView.ItemInserted>|时发生的插入按钮 (带有按钮其`CommandName`属性设置为"Insert") 单击后，之后<xref:System.Web.UI.WebControls.FormView>控件插入记录。 此事件通常用于检查插入操作的结果。|  
|<xref:System.Web.UI.WebControls.FormView.ItemInserting>|单击插入按钮，但之前时发生<xref:System.Web.UI.WebControls.FormView>控件插入记录。 此事件通常用于取消插入操作。|  
|<xref:System.Web.UI.WebControls.FormView.ItemUpdated>|时发生的更新按钮 (带有按钮其`CommandName`属性设置为"更新") 单击后，之后<xref:System.Web.UI.WebControls.FormView>控件更新行。 此事件通常用于检查更新操作的结果。|  
|<xref:System.Web.UI.WebControls.FormView.ItemUpdating>|单击更新按钮，但之前时发生<xref:System.Web.UI.WebControls.FormView>控件更新记录。 此事件通常用于取消更新操作。|  
|<xref:System.Web.UI.WebControls.FormView.ModeChanged>|之后，将会<xref:System.Web.UI.WebControls.FormView>控件更改模式 （到编辑、 插入或只读模式下）。 此事件通常用于执行某项任务时<xref:System.Web.UI.WebControls.FormView>控件更改模式。|  
|<xref:System.Web.UI.WebControls.FormView.ModeChanging>|之前发生<xref:System.Web.UI.WebControls.FormView>控件更改模式 （到编辑、 插入或只读模式下）。 此事件通常用于取消模式更改。|  
|<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>|在单击某一页导航按钮时，但在 <xref:System.Web.UI.WebControls.FormView> 控件处理分页操作之后发生。 当你需要在用户定位到另一条记录控件中之后执行的任务时，通常使用此事件。|  
|<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>|在单击某一页导航按钮时，但在 <xref:System.Web.UI.WebControls.FormView> 控件处理分页操作之前发生。 此事件通常用于取消的分页操作。|  
  
<a name="accessibility"></a>   
## <a name="accessibility"></a>可访问性  
 有关如何配置此控件，以使其生成符合辅助功能标准的标记的信息，请参阅[Visual Studio 和 ASP.NET 中的辅助功能](http://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13)和[ASP.NET 控件和可访问性](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
<a name="applying_styles"></a>   
## <a name="applying-css-styles"></a>应用 CSS 样式  
 <xref:System.Web.UI.WebControls.FormView>控制可用于在标记中指定 CSS 样式规则。 如果你使用模板的外观进行自定义<xref:System.Web.UI.WebControls.FormView>控件，你可以在模板中标记中指定 CSS 样式。 在这种情况下，没有额外的外部表是必需的。 你可以防止通过设置呈现表<xref:System.Web.UI.WebControls.FormView.RenderOuterTable%2A>属性`false`。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>声明性语法  
  
```  
<asp:FormView  
    AccessKey="string"  
    AllowPaging="True|False"  
    BackColor="color name|#dddddd"  
    BackImageUrl="uri"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    Caption="string"  
    CaptionAlign="NotSet|Top|Bottom|Left|Right"  
    CellPadding="integer"  
    CellSpacing="integer"  
    CssClass="string"  
    DataKeyNames="string"  
    DataMember="string"  
    DataSource="string"  
    DataSourceID="string"  
    DefaultMode="ReadOnly|Edit|Insert"  
    EmptyDataText="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    FooterText="string"  
    ForeColor="color name|#dddddd"  
    GridLines="None|Horizontal|Vertical|Both"  
    HeaderText="string"  
    Height="size"  
    HorizontalAlign="NotSet|Left|Center|Right|Justify"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDataBound="DataBound event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnItemCommand="ItemCommand event handler"  
    OnItemCreated="ItemCreated event handler"  
    OnItemDeleted="ItemDeleted event handler"  
    OnItemDeleting="ItemDeleting event handler"  
    OnItemInserted="ItemInserted event handler"  
    OnItemInserting="ItemInserting event handler"  
    OnItemUpdated="ItemUpdated event handler"  
    OnItemUpdating="ItemUpdating event handler"  
    OnLoad="Load event handler"  
    OnModeChanged="ModeChanged event handler"  
    OnModeChanging="ModeChanging event handler"  
    OnPageIndexChanged="PageIndexChanged event handler"  
    OnPageIndexChanging="PageIndexChanging event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    PageIndex="integer"  
    PagerSettings-FirstPageImageUrl="uri"  
    PagerSettings-FirstPageText="string"  
    PagerSettings-LastPageImageUrl="uri"  
    PagerSettings-LastPageText="string"  
    PagerSettings-Mode="NextPrevious|Numeric|NextPreviousFirstLast|  
        NumericFirstLast"  
    PagerSettings-NextPageImageUrl="uri"  
    PagerSettings-NextPageText="string"  
    PagerSettings-PageButtonCount="integer"  
    PagerSettings-Position="Bottom|Top|TopAndBottom"  
    PagerSettings-PreviousPageImageUrl="uri"  
    PagerSettings-PreviousPageText="string"  
    PagerSettings-Visible="True|False"  
    RenderTable="True|False"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    ToolTip="string"  
    Visible="True|False"  
    Width="size"  
>  
        <EditItemTemplate>  
            <!-- child controls -->  
        </EditItemTemplate>  
        <EditRowStyle />  
        <EmptyDataRowStyle />  
        <EmptyDataTemplate>  
            <!-- child controls -->  
        </EmptyDataTemplate>  
        <FooterStyle />  
        <FooterTemplate>  
            <!-- child controls -->  
        </FooterTemplate>  
        <HeaderStyle />  
        <HeaderTemplate>  
            <!-- child controls -->  
        </HeaderTemplate>  
        <InsertItemTemplate>  
            <!-- child controls -->  
        </InsertItemTemplate>  
        <InsertRowStyle />  
        <ItemTemplate>  
            <!-- child controls -->  
        </ItemTemplate>  
        <PagerSettings  
            FirstPageImageUrl="uri"  
            FirstPageText="string"  
            LastPageImageUrl="uri"  
            LastPageText="string"  
            Mode="NextPrevious|Numeric|NextPreviousFirstLast|  
                NumericFirstLast"  
            NextPageImageUrl="uri"  
            NextPageText="string"  
            OnPropertyChanged="PropertyChanged event handler"  
            PageButtonCount="integer"  
            Position="Bottom|Top|TopAndBottom"  
            PreviousPageImageUrl="uri"  
            PreviousPageText="string"  
            Visible="True|False"  
        />  
        <PagerStyle />  
        <PagerTemplate>  
            <!-- child controls -->  
        </PagerTemplate>  
        <RowStyle />  
</asp:FormView>  
```  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView>控件来显示中的值<xref:System.Web.UI.WebControls.SqlDataSource>控件。  
  
 [!code-aspx-csharp[FormViewSimple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewSimple/CS/formviewsimplecs.aspx#1)]
 [!code-aspx-vb[FormViewSimple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewSimple/VB/formviewsimplevb.aspx#1)]  
  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView>控件以编辑现有记录。  
  
> [!IMPORTANT]
>  在此示例中的控件具有一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[FormView#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormView/CS/formvieweditcs.aspx#1)]
 [!code-aspx-vb[FormView#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormView/VB/formvieweditvb.aspx#1)]  
  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView>控件插入新记录。  
  
> [!IMPORTANT]
>  在此示例中的控件具有一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[FormViewInsertItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertItemTemplate/CS/formviewinsertitemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewInsertItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertItemTemplate/VB/formviewinsertitemtemplatevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
    <altmember cref="T:System.Web.UI.WebControls.GridView" />
    <altmember cref="T:System.Web.UI.WebControls.FormViewRow" />
    <altmember cref="T:System.Web.UI.WebControls.FormViewMode" />
    <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
    <altmember cref="T:System.Web.UI.WebControls.SqlDataSource" />
    <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.AllowPaging" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.CurrentMode" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.DefaultMode" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemCreated" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemCommand" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserted" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserting" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanged" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanging" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormView();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.FormView" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数初始化的新实例<xref:System.Web.UI.WebControls.FormView>类。 动态地添加<xref:System.Web.UI.WebControls.FormView>控制到页上，创建一个新<xref:System.Web.UI.WebControls.FormView>对象、 设置其属性，并将其添加到<xref:System.Web.UI.Control.Controls%2A?displayProperty=nameWithType>集合的容器控件，如<xref:System.Web.UI.WebControls.PlaceHolder>。  
  
   
  
## Examples  
 下面的示例演示如何动态添加<xref:System.Web.UI.WebControls.FormView>到页上的控件。  
  
 [!code-aspx-csharp[FormViewCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCtor/CS/formviewctorcs.aspx#1)]
 [!code-aspx-vb[FormViewCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCtor/VB/formviewctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="T:System.Web.UI.WebControls.PlaceHolder" />
      </Docs>
    </Member>
    <Member MemberName="AllowPaging">
      <MemberSignature Language="C#" Value="public virtual bool AllowPaging { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPaging" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.AllowPaging" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowPaging As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowPaging { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否启用分页功能。</summary>
        <value>如果启用分页功能，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>控件有内置的分页功能，允许用户导航到数据源中另一条记录。 可与任何支持的数据源对象使用分页功能<xref:System.Collections.ICollection?displayProperty=nameWithType>接口或支持分页功能的数据源。  
  
 若要启用分页功能，请设置<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>属性`true`。 你可以使用来确定在基础数据源中的项的总数目<xref:System.Web.UI.WebControls.FormView.PageCount%2A>属性。 若要确定当前显示的项的索引，请使用<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>属性。  
  
 启用分页后，调用的页导航行的其他行自动显示在<xref:System.Web.UI.WebControls.FormView>控件。 页导航行包含的页导航控件，并且可以显示在顶部、 底部，或同时的顶部和底部的控件。 页导航行均有四个内置的页导航显示模式。 下表描述了四个模式。  
  
|模式|描述|  
|----------|-----------------|  
|`PagerButton.NextPrevious`|一组分页控件包含以前和下一步按钮。|  
|`PagerButton.NextPreviousFirstLast`|一组的分页控件组成以前，接下来，第一个和最后一个按钮。|  
|`PagerButton.Numeric`|一组由用于直接访问页的带编号的链接按钮组成的分页控件。 这是默认模式。|  
|`PagerButton.NumericFirstLast`|一组编号和第一个和最后一个链接按钮组成的分页控件。|  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView>时数据源包含少于两条记录后，控件将自动隐藏的页导航行。  
  
 你可以通过使用来控制的设置 （如页导航显示模式，在时间和页导航控件的文本标签显示的页链接数） 的页导航行<xref:System.Web.UI.WebControls.FormView.PagerSettings%2A>属性。 若要控制 （包括其背景色和字体颜色） 的页导航行的外观，使用<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>属性。 <xref:System.Web.UI.WebControls.FormView>控件还允许你定义的页导航行的自定义模板。 有关创建自定义页导航行模板的详细信息，请参阅<xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>。  
  
 <xref:System.Web.UI.WebControls.FormView>控件提供可用于在发生分页时执行自定义操作的多个事件。 下表列出了可用的事件。  
  
|事件|描述|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>|在单击某一页导航按钮时，但在 <xref:System.Web.UI.WebControls.FormView> 控件处理分页操作之后发生。 当你需要在用户定位到另一条记录控件中之后执行的任务时，通常使用此事件。|  
|<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>|在单击某一页导航按钮时，但在 <xref:System.Web.UI.WebControls.FormView> 控件处理分页操作之前发生。 此事件通常用于取消的分页操作。|  
  
> [!NOTE]
>  当您更改时，不会引发这些事件<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>属性以编程方式。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>属性来启用中的分页功能<xref:System.Web.UI.WebControls.FormView>控件。  
  
 [!code-aspx-csharp[FormViewAllowPaging#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewAllowPaging/CS/formviewallowpagingcs.aspx#1)]
 [!code-aspx-vb[FormViewAllowPaging#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewAllowPaging/VB/formviewallowpagingvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="BackImageUrl">
      <MemberSignature Language="C#" Value="public virtual string BackImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BackImageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.BackImageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BackImageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BackImageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的背景中显示的图像的 URL。</summary>
        <value>要在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的背景中显示的图像的 URL。 默认值为空字符串 ("")，表示尚未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.BackImageUrl%2A>属性指定的背景中显示的图像 URL<xref:System.Web.UI.WebControls.FormView>控件。  
  
> [!NOTE]
>  如果指定的映像小于<xref:System.Web.UI.WebControls.FormView>控件，该图像平铺来填充的背景。 如果图像大于控件，裁剪图像。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.BackImageUrl%2A>属性背景中显示的自定义映像<xref:System.Web.UI.WebControls.FormView>控件。  
  
 [!code-aspx-csharp[FormViewBackImageUrl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewBackImageUrl/CS/formviewbackimageurlcs.aspx#1)]
 [!code-aspx-vb[FormViewBackImageUrl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewBackImageUrl/VB/formviewbackimageurlvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellPadding" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellSpacing" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.GridLines" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HorizontalAlign" />
      </Docs>
    </Member>
    <Member MemberName="BottomPagerRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow BottomPagerRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FormViewRow BottomPagerRow" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BottomPagerRow As FormViewRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::FormViewRow ^ BottomPagerRow { System::Web::UI::WebControls::FormViewRow ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 对象，该对象表示在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件底部显示的页导航行。</summary>
        <value>一个 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 对象，表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的底部页导航行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 启用分页后 (时<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>属性设置为`true`)，一个称为的页导航行附加行会自动显示在<xref:System.Web.UI.WebControls.FormView>控件。 页导航行包含允许用户导航到其他记录，并且可以显示在顶部、 底部，或同时的顶部和底部的控件的控件。 使用<xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A>属性以编程方式访问<xref:System.Web.UI.WebControls.FormViewRow>对象，表示中的底部页导航行<xref:System.Web.UI.WebControls.FormView>控件。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A>属性是之后才可用<xref:System.Web.UI.WebControls.FormView>控件创建中的底部页导航行<xref:System.Web.UI.WebControls.FormView.ItemCreated>事件。  
  
 当你需要以编程方式操作底部页导航行，例如在添加自定义内容时，通常使用此属性。 对任何修改<xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A>属性必须执行后<xref:System.Web.UI.WebControls.FormViewRow>表示底部页导航行的对象已创建; 否则为<xref:System.Web.UI.WebControls.FormView>控件将覆盖任何更改。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A>属性来访问的底部显示的页导航行<xref:System.Web.UI.WebControls.FormView>控件。 包括其他内容，然后将更新的页导航行。  
  
 [!code-aspx-csharp[FormViewPagerTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPagerTemplate/CS/formviewpagertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewPagerTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPagerTemplate/VB/formviewpagertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.AllowPaging" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemCreated" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public virtual string Caption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.Caption" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Caption As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Caption { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的 HTML 标题元素中呈现的文本。 提供此属性的目的是使辅助技术设备的用户更易于访问控件。</summary>
        <value>一个字符串，表示要在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的 HTML 标题元素中呈现的文本。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.Caption%2A>属性来指定要呈现在一个 HTML 标题元素中的文本<xref:System.Web.UI.WebControls.FormView>控件。 你指定的文本提供了辅助技术设备可以用于以使控件更易于访问的表的说明。  
  
 其他辅助支持<xref:System.Web.UI.WebControls.FormView>控件由<xref:System.Web.UI.WebControls.FormView.CaptionAlign%2A>属性。 使用<xref:System.Web.UI.WebControls.FormView.CaptionAlign%2A>属性来指定 HTML 标题元素中的对齐方式<xref:System.Web.UI.WebControls.FormView>控件。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.Caption%2A>属性指定的文本中呈现的 HTML 标题元素<xref:System.Web.UI.WebControls.FormView>控件。  
  
 [!code-aspx-csharp[FormViewCaption#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCaption/CS/formviewcaptioncs.aspx#1)]
 [!code-aspx-vb[FormViewCaption#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCaption/VB/formviewcaptionvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.CaptionAlign" />
      </Docs>
    </Member>
    <Member MemberName="CaptionAlign">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableCaptionAlign CaptionAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.TableCaptionAlign CaptionAlign" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.CaptionAlign" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CaptionAlign As TableCaptionAlign" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::TableCaptionAlign CaptionAlign { System::Web::UI::WebControls::TableCaptionAlign get(); void set(System::Web::UI::WebControls::TableCaptionAlign value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableCaptionAlign</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的 HTML 标题元素的水平或垂直位置。 提供此属性的目的是使辅助技术设备的用户更易于访问控件。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.TableCaptionAlign" /> 值之一。 默认值为 <see langword="TableCaptionAlign.NotSet" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.CaptionAlign%2A>属性来指定 HTML caption 元素中的水平或垂直位置<xref:System.Web.UI.WebControls.FormView>控件。 提供此属性的目的是使辅助技术设备的用户更易于访问控件。  
  
 此属性使用其中一个设置<xref:System.Web.UI.WebControls.TableCaptionAlign>枚举值。 下表列出可能的值。  
  
|“值”|描述|  
|-----------|-----------------|  
|`TableCaptionAlign.Bottom`|标题元素和表的底部对齐。|  
|`TableCaptionAlign.Left`|标题元素和表的左边对齐。|  
|`TableCaptionAlign.NotSet`|未设置标题元素的对齐方式。|  
|`TableCaptionAlign.Right`|标题元素和表的右边对齐。|  
|`TableCaptionAlign.Top`|标题元素和表的顶部对齐。|  
  
> [!NOTE]
>  当此属性设置为`TableCaptionAlign.NotSet`，则使用的浏览器的默认值。  
  
 其他辅助支持<xref:System.Web.UI.WebControls.FormView>控件由<xref:System.Web.UI.WebControls.FormView.Caption%2A>属性。 使用<xref:System.Web.UI.WebControls.FormView.Caption%2A>属性来指定要呈现在一个 HTML 标题元素中的文本<xref:System.Web.UI.WebControls.FormView>控件。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.CaptionAlign%2A>属性指定的 HTML 标题中的元素<xref:System.Web.UI.WebControls.FormView>应控件左侧呈现控件。  
  
 [!code-aspx-csharp[FormViewCaption#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCaption/CS/formviewcaptioncs.aspx#1)]
 [!code-aspx-vb[FormViewCaption#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCaption/VB/formviewcaptionvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的值不是 <see cref="T:System.Web.UI.WebControls.TableCaptionAlign" /> 枚举值之一。</exception>
        <altmember cref="T:System.Web.UI.WebControls.TableCaptionAlign" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.Caption" />
      </Docs>
    </Member>
    <Member MemberName="CellPadding">
      <MemberSignature Language="C#" Value="public virtual int CellPadding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CellPadding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.CellPadding" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CellPadding As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CellPadding { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置单元格的内容和单元格的边框之间的空间量。</summary>
        <value>单元格的内容和单元格的边框之间的空间量（以像素为单位）。 默认值为 -1，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.CellPadding%2A>属性控制单元格的内容和单元格的边框之间的间距。 指定的填充量添加到单元格的所有四个边。  
  
 同一列中的所有单元格<xref:System.Web.UI.WebControls.FormView>控件具有相同的宽度。 填充量应用于宽的单元格和列中的所有其他单元格调整为该单元格宽度。 同样，在同一行中的所有单元格具有高度相同。 填充量应用于行中最高的单元格和行中的所有其他单元格调整为该单元格高度。 不能指定单个单元格的大小。  
  
 若要调整单元格之间的间距，使用<xref:System.Web.UI.WebControls.FormView.CellSpacing%2A>属性。  
  
> [!NOTE]
>  如果未设置此属性，使用的浏览器的默认值。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.CellPadding%2A>属性指定的单元格的内容和单元格的边框之间的间距大小。  
  
 [!code-aspx-csharp[FormViewCellPadding#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCellPadding/CS/formviewcellpaddingcs.aspx#1)]
 [!code-aspx-vb[FormViewCellPadding#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCellPadding/VB/formviewcellpaddingvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.BackImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellSpacing" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.GridLines" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HorizontalAlign" />
      </Docs>
    </Member>
    <Member MemberName="CellSpacing">
      <MemberSignature Language="C#" Value="public virtual int CellSpacing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CellSpacing" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.CellSpacing" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CellSpacing As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CellSpacing { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置单元格间的空间量。</summary>
        <value>单元格之间的空间量（以像素为单位）。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.CellSpacing%2A>属性控制中的相邻单元格之间的间距<xref:System.Web.UI.WebControls.FormView>控件。 在垂直方向和水平应用此间距。 该单元格间距是为整个控件统一。 不能指定行或列之间的单个单元格间距。  
  
> [!NOTE]
>  如果将此属性设置为一个值大于 0，然后设置<xref:System.Web.UI.WebControls.FormView.GridLines%2A>属性到一个值，显示单元格边框，间隔显示相邻的单元格边框之间。 在此情况下，<xref:System.Web.UI.WebControls.FormView.CellSpacing%2A>属性控制的差异大小。  
  
 若要调整单元格的内容和单元格的边框之间的间距，使用<xref:System.Web.UI.WebControls.FormView.CellPadding%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.CellSpacing%2A>属性指定的相邻的单元格之间的间距大小。  
  
 [!code-aspx-csharp[FormViewCellPadding#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCellPadding/CS/formviewcellpaddingcs.aspx#1)]
 [!code-aspx-vb[FormViewCellPadding#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCellPadding/VB/formviewcellpaddingvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.BackImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellPadding" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.GridLines" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HorizontalAlign" />
      </Docs>
    </Member>
    <Member MemberName="ChangeMode">
      <MemberSignature Language="C#" Value="public void ChangeMode (System.Web.UI.WebControls.FormViewMode newMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ChangeMode(valuetype System.Web.UI.WebControls.FormViewMode newMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.ChangeMode(System.Web.UI.WebControls.FormViewMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeMode (newMode As FormViewMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeMode(System::Web::UI::WebControls::FormViewMode newMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newMode" Type="System.Web.UI.WebControls.FormViewMode" />
      </Parameters>
      <Docs>
        <param name="newMode">
          <see cref="T:System.Web.UI.WebControls.FormViewMode" /> 枚举值之一。</param>
        <summary>将 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件切换到指定的数据输入模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.ChangeMode%2A>方法以编程方式切换<xref:System.Web.UI.WebControls.FormView>之间编辑、 insert 和只读模式的控件。 此方法还会更新<xref:System.Web.UI.WebControls.FormView.CurrentMode%2A>使用指定的模式的属性。 下表列出了不同的模式值。  
  
|模式|描述|  
|----------|-----------------|  
|`FormViewMode.Edit`|<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式，这样用户就可以更新的记录的值。|  
|`FormViewMode.Insert`|<xref:System.Web.UI.WebControls.FormView>控件是在插入模式下，这样用户就可以将一条新记录添加到数据源。|  
|`FormView.ReadOnly`|<xref:System.Web.UI.WebControls.FormView>控件是否处于只读模式，这是正常的显示模式。|  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView.ModeChanged>和<xref:System.Web.UI.WebControls.FormView.ModeChanging>时调用此方法，将不会引发事件。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.ChangeMode%2A>方法以返回<xref:System.Web.UI.WebControls.FormView>控件添加到只读模式下，每当用户导航到另一条记录。  
  
 [!code-aspx-csharp[FormViewChangeMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewChangeMode/CS/formviewchangemodecs.aspx#1)]
 [!code-aspx-vb[FormViewChangeMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewChangeMode/VB/formviewchangemodevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewMode" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CurrentMode" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanging" />
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected override int CreateChildControls (System.Collections.IEnumerable dataSource, bool dataBinding);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 CreateChildControls(class System.Collections.IEnumerable dataSource, bool dataBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.CreateChildControls(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateChildControls (dataSource As IEnumerable, dataBinding As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int CreateChildControls(System::Collections::IEnumerable ^ dataSource, bool dataBinding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Collections.IEnumerable" />
        <Parameter Name="dataBinding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataSource">一个 <see cref="T:System.Collections.IEnumerable" />，表示用于创建控件层次结构的数据源。</param>
        <param name="dataBinding">
          <see langword="true" /> 指示从数据源直接创建控件层次结构；<see langword="false" /> 指示从视图状态创建控件层次结构。</param>
        <summary>用指定数据源创建用于呈现 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的控件层次结构。</summary>
        <returns>从数据源创建的项的数目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.CreateChildControls%28System.Collections.IEnumerable%2CSystem.Boolean%29>方法是由调用一个帮助器方法<xref:System.Web.UI.WebControls.FormView>控件创建的控件层次结构<xref:System.Web.UI.WebControls.FormView>控件。 当`dataBinding`参数是`true`，创建控件层次结构之前执行数据绑定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <see cref="T:System.Web.UI.DataSourceView" /> 控件绑定到的 <see cref="T:System.Web.UI.IDataSource" /> 的 <see cref="T:System.Web.UI.WebControls.FormView" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides">
          <para>在扩展<see cref="T:System.Web.UI.WebControls.FormView" />类，你可以重写此方法以创建你自己的控件层次结构。</para>
        </block>
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="M:System.Web.UI.Control.CreateChildControls" />
      </Docs>
    </Member>
    <Member MemberName="CreateControlStyle">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.Style CreateControlStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.Style CreateControlStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.CreateControlStyle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlStyle () As Style" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::Style ^ CreateControlStyle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的默认表样式对象。</summary>
        <returns>一个 <see cref="T:System.Web.UI.WebControls.Style" />，包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的默认表样式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.CreateControlStyle%2A>方法是由调用一个帮助器方法<xref:System.Web.UI.WebControls.FormView>控件来创建其默认表样式对象。 除了设置的默认样式<xref:System.Web.UI.WebControls.TableStyle>对象时，此方法还将设置<xref:System.Web.UI.WebControls.FormView.CellPadding%2A>属性设为 0。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在扩展<see cref="T:System.Web.UI.WebControls.FormView" />类，你可以重写此方法以创建你自己的默认样式。</para>
        </block>
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="T:System.Web.UI.WebControls.TableStyle" />
      </Docs>
    </Member>
    <Member MemberName="CreateDataSourceSelectArguments">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceSelectArguments CreateDataSourceSelectArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceSelectArguments CreateDataSourceSelectArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.CreateDataSourceSelectArguments" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDataSourceSelectArguments () As DataSourceSelectArguments" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceSelectArguments ^ CreateDataSourceSelectArguments();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceSelectArguments</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Web.UI.DataSourceSelectArguments" /> 对象，该对象包含传递到数据源以进行处理的参数。</summary>
        <returns>一个 <see cref="T:System.Web.UI.DataSourceSelectArguments" />，包含传递到数据源的参数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.CreateDataSourceSelectArguments%2A>方法是由调用一个帮助器方法<xref:System.Web.UI.WebControls.FormView>控件创建<xref:System.Web.UI.DataSourceSelectArguments>对象，其中包含自变量传递到数据源。 在此实现中，<xref:System.Web.UI.DataSourceSelectArguments>对象包含分页操作的自变量。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在扩展<see cref="T:System.Web.UI.WebControls.FormView" />类，你可以重写此方法以指定你自己的值传递给数据源。</para>
        </block>
        <altmember cref="T:System.Web.UI.DataSourceSelectArguments" />
        <altmember cref="M:System.Web.UI.WebControls.DataBoundControl.CreateDataSourceSelectArguments" />
      </Docs>
    </Member>
    <Member MemberName="CreateRow">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.FormViewRow CreateRow (int itemIndex, System.Web.UI.WebControls.DataControlRowType rowType, System.Web.UI.WebControls.DataControlRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.FormViewRow CreateRow(int32 itemIndex, valuetype System.Web.UI.WebControls.DataControlRowType rowType, valuetype System.Web.UI.WebControls.DataControlRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.CreateRow(System.Int32,System.Web.UI.WebControls.DataControlRowType,System.Web.UI.WebControls.DataControlRowState)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateRow (itemIndex As Integer, rowType As DataControlRowType, rowState As DataControlRowState) As FormViewRow" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::FormViewRow ^ CreateRow(int itemIndex, System::Web::UI::WebControls::DataControlRowType rowType, System::Web::UI::WebControls::DataControlRowState rowState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIndex" Type="System.Int32" />
        <Parameter Name="rowType" Type="System.Web.UI.WebControls.DataControlRowType" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
      </Parameters>
      <Docs>
        <param name="itemIndex">要显示的数据项的从零开始的索引。</param>
        <param name="rowType">
          <see cref="T:System.Web.UI.WebControls.DataControlRowType" /> 枚举值之一。</param>
        <param name="rowState">
          <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> 枚举值的按位组合。</param>
        <summary>使用指定项索引、行类型和行状态创建 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 对象。</summary>
        <returns>一个具有指定项索引、行类型和行状态的 <see cref="T:System.Web.UI.WebControls.FormViewRow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.CreateRow%2A>方法是由调用一个帮助器方法<xref:System.Web.UI.WebControls.FormView>控件创建<xref:System.Web.UI.WebControls.FormViewRow>对象用于表示在控件内的行。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在扩展<see cref="T:System.Web.UI.WebControls.FormView" />类，你可以重写此方法以返回<see cref="T:System.Web.UI.WebControls.FormViewRow" />使用自定义设置的对象。</para>
        </block>
        <altmember cref="T:System.Web.UI.WebControls.FormViewRow" />
        <altmember cref="T:System.Web.UI.WebControls.DataControlRowType" />
        <altmember cref="T:System.Web.UI.WebControls.DataControlRowState" />
      </Docs>
    </Member>
    <Member MemberName="CreateTable">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.Table CreateTable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.Table CreateTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.CreateTable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateTable () As Table" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::Table ^ CreateTable();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Table</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件创建包含表。</summary>
        <returns>一个 <see cref="T:System.Web.UI.WebControls.Table" />，它表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的包含表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.CreateTable%2A>方法是由调用一个帮助器方法<xref:System.Web.UI.WebControls.FormView>控件以创建充当控件容器的表。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.Table" />
      </Docs>
    </Member>
    <Member MemberName="CurrentMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.FormViewMode CurrentMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.FormViewMode CurrentMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.CurrentMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentMode As FormViewMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::FormViewMode CurrentMode { System::Web::UI::WebControls::FormViewMode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的当前数据输入模式。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.FormViewMode" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.CurrentMode%2A>属性来确定是否<xref:System.Web.UI.WebControls.FormView>控件处于编辑、 插入或只读模式。 下表列出了不同的模式值。  
  
|模式|描述|  
|----------|-----------------|  
|`FormViewMode.Edit`|<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式，这样用户就可以更新的记录的值。|  
|`FormViewMode.Insert`|<xref:System.Web.UI.WebControls.FormView>控件是在插入模式下，这样用户就可以将一条新记录添加到数据源。|  
|`FormView.ReadOnly`|<xref:System.Web.UI.WebControls.FormView>控件是否处于只读模式，这是正常的显示模式。|  
  
 通常会自动设置此值<xref:System.Web.UI.WebControls.FormView>控制时单击新建、 更新、 插入、 删除或取消命令按钮。 当<xref:System.Web.UI.WebControls.FormView>控件更改的操作的响应中的模式，则下表中的事件引发。 这允许你创建的自定义事件处理程序在事件发生时执行的适当的例程。  
  
|事件|描述|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.FormView.ModeChanged>|发生时<xref:System.Web.UI.WebControls.FormView>控件更改模式，但在模式更改之后。 此事件通常用于执行任务，每当<xref:System.Web.UI.WebControls.FormView>控件更改模式。|  
|<xref:System.Web.UI.WebControls.FormView.ModeChanging>|发生时<xref:System.Web.UI.WebControls.FormView>控件更改模式，但之前的模式下更改。 此事件通常用于取消模式更改。|  
  
 **请注意**你更改模式时以编程方式使用，不会引发这些事件<xref:System.Web.UI.WebControls.FormView.ChangeMode%2A>方法。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.CurrentMode%2A>属性来确定是否<xref:System.Web.UI.WebControls.FormView>控件处于编辑、 插入或只读模式。 如果用户尝试导航到另一个记录段<xref:System.Web.UI.WebControls.FormView>控件处于编辑的详细信息，将取消该分页操作。  
  
 [!code-aspx-csharp[FormViewCurrentMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCurrentMode/CS/formviewcurrentmodecs.aspx#1)]
 [!code-aspx-vb[FormViewCurrentMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCurrentMode/VB/formviewcurrentmodevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewMode" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DefaultMode" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.ChangeMode(System.Web.UI.WebControls.FormViewMode)" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanging" />
      </Docs>
    </Member>
    <Member MemberName="DataBind">
      <MemberSignature Language="C#" Value="public override sealed void DataBind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DataBind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.DataBind" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Sub DataBind ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void DataBind();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将数据源绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.DataBind>方法将数据绑定到数据源从<xref:System.Web.UI.WebControls.FormView>控件。 此方法会解析所有活动模板中的控件的数据绑定表达式。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseDataBoundControl.DataBind" />
      </Docs>
    </Member>
    <Member MemberName="DataItem">
      <MemberSignature Language="C#" Value="public virtual object DataItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataItem" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DataItem" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DataItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ DataItem { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IDataItemContainer.DataItem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的数据项。</summary>
        <value>一个 <see cref="T:System.Object" />，表示绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的数据项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.DataItem%2A>属性来访问数据项绑定到<xref:System.Web.UI.WebControls.FormView>控件。 数据项目通常用于直接访问当前记录的字段值。 一种<xref:System.Object>返回此属性而异的数据源。 例如，当<xref:System.Web.UI.WebControls.SqlDataSource>控件绑定到<xref:System.Web.UI.WebControls.FormView>控件，<xref:System.Data.DataRowView>返回对象。  
  
> [!NOTE]
>  仅在数据绑定发生后，此属性才可用。 数据绑定发生前，此属性返回`null`。 此属性也并不适用时<xref:System.Web.UI.WebControls.FormView>控件处于插入模式，并返回`null`。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.DataItem%2A>属性来确定数据项中的字段的值。  
  
 [!code-aspx-csharp[FormViewCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCtor/CS/formviewctorcs.aspx#1)]
 [!code-aspx-vb[FormViewCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCtor/VB/formviewctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="Overload:System.Web.UI.DataBinder.Eval" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataItemCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataItemIndex" />
      </Docs>
    </Member>
    <Member MemberName="DataItemCount">
      <MemberSignature Language="C#" Value="public int DataItemCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DataItemCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DataItemCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataItemCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DataItemCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取数据源中的数据项的数目。</summary>
        <value>数据源中的数据项的数目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.DataItemCount%2A>属性来确定数据源中包含的数据项目数。 此属性包含与相同的值<xref:System.Web.UI.WebControls.FormView.PageCount%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataItem" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataItemIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
      </Docs>
    </Member>
    <Member MemberName="DataItemIndex">
      <MemberSignature Language="C#" Value="public virtual int DataItemIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DataItemIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DataItemIndex" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DataItemIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int DataItemIndex { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IDataItemContainer.DataItemIndex</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取从数据源绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的数据项的索引。</summary>
        <value>从数据源绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的数据项的索引。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.DataItemIndex%2A>属性来确定数据项的索引绑定到<xref:System.Web.UI.WebControls.FormView>从数据源的控件。 此属性包含与相同的值<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>属性。  
  
> [!NOTE]
>  此属性不适用<xref:System.Web.UI.WebControls.FormView>控件是否处于插入模式。 在插入模式下，该控件时<xref:System.Web.UI.WebControls.FormView.DataItemIndex%2A>属性将返回-1。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataItem" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataItemCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
      </Docs>
    </Member>
    <Member MemberName="DataKey">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataKey DataKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKey DataKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DataKey" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DataKey As DataKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::DataKey ^ DataKey { System::Web::UI::WebControls::DataKey ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundItemControl.DataKey</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Web.UI.WebControls.DataKey" /> 对象，该对象表示所显示的记录的主键。</summary>
        <value>一个 <see cref="T:System.Web.UI.WebControls.DataKey" /> 对象，表示所显示的记录的主键。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>设置属性，<xref:System.Web.UI.WebControls.FormView>控件自动创建<xref:System.Web.UI.WebControls.DataKey>对象，其中包含的字段或字段中列出的键/值对<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>当前记录的属性。 使用<xref:System.Web.UI.WebControls.FormView.DataKey%2A>要获取此属性<xref:System.Web.UI.WebControls.DataKey>对象。 此属性通常用于获取键和其对应的值中指定的字段<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>属性。  
  
> [!NOTE]
>  快捷方式，你还可以使用<xref:System.Web.UI.WebControls.FormView.SelectedValue%2A>属性来确定第一个键字段中列出的值<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.DataKey%2A>属性来确定键字段的值。  
  
 [!code-aspx-csharp[FormViewDataKey#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewDataKey/CS/formviewdatakeycs.aspx#1)]
 [!code-aspx-vb[FormViewDataKey#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewDataKey/VB/formviewdatakeyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.DataKey" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.SelectedValue" />
      </Docs>
    </Member>
    <Member MemberName="DataKeyNames">
      <MemberSignature Language="C#" Value="public virtual string[] DataKeyNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] DataKeyNames" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DataKeyNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DataKeyNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::String ^&gt; ^ DataKeyNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundControl.DataKeyNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.StringArrayConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个数组，该数组包含数据源的键字段的名称。</summary>
        <value>一个数组，包含数据源的键字段的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>属性来指定逗号分隔的表示数据源的主键值的字段名称列表。 当<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>设置属性，<xref:System.Web.UI.WebControls.FormView>控件自动创建<xref:System.Web.UI.WebControls.DataKey>对象，其中包含的字段或字段中列出的键/值对<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>当前记录的属性。 <xref:System.Web.UI.WebControls.DataKey>对象然后存储在<xref:System.Web.UI.WebControls.FormView.DataKey%2A>属性。  
  
> [!NOTE]
>  必须设置<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>内置更新、 删除和插入的功能属性<xref:System.Web.UI.WebControls.FormView>控制工作。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>属性指定数据源的键字段绑定到<xref:System.Web.UI.WebControls.FormView>控件。  
  
 [!code-aspx-csharp[FormViewEditItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEditItemTemplate/CS/formviewedititemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEditItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEditItemTemplate/VB/formviewedititemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.DataKey" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataKey" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.SelectedValue" />
      </Docs>
    </Member>
    <Member MemberName="DefaultMode">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewMode DefaultMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.FormViewMode DefaultMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DefaultMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DefaultMode As FormViewMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::FormViewMode DefaultMode { System::Web::UI::WebControls::FormViewMode get(); void set(System::Web::UI::WebControls::FormViewMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置数据输入模式，<see cref="T:System.Web.UI.WebControls.FormView" /> 控件在更新、插入或取消操作后返回到该模式。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.FormViewMode" /> 值之一。 默认值为 <see langword="FormViewMode.ReadOnly" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>属性指定是否<xref:System.Web.UI.WebControls.FormView>控件返回到编辑、 插入或只读模式更新后，执行插入、 或取消操作。 默认情况下，<xref:System.Web.UI.WebControls.FormView>控件返回到只读模式; 但是，你可以保留<xref:System.Web.UI.WebControls.FormView>在编辑中的控制，或者通过将此属性设置为适当的值插入模式。 下表列出了不同的模式值。  
  
|模式|描述|  
|----------|-----------------|  
|`FormViewMode.Edit`|<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式，这样用户就可以更新的记录的值。|  
|`FormViewMode.Insert`|<xref:System.Web.UI.WebControls.FormView>控件是在插入模式下，这样用户就可以将一条新记录添加到数据源。|  
|`FormViewMode.ReadOnly`|<xref:System.Web.UI.WebControls.FormView>控件是否处于只读模式，这是正常的显示模式。|  
  
 此属性通常是时使用<xref:System.Web.UI.WebControls.FormView>控件具有单一用途，如仅要插入或编辑记录。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>属性以保留<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式后更新操作。  
  
 [!code-aspx-csharp[FormViewDefaultMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewDefaultMode/CS/formviewdefaultmodecs.aspx#1)]
 [!code-aspx-vb[FormViewDefaultMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewDefaultMode/VB/formviewdefaultmodevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的值不是 <see cref="T:System.Web.UI.WebControls.FormViewMode" /> 枚举值之一。</exception>
        <altmember cref="T:System.Web.UI.WebControls.FormViewMode" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CurrentMode" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.ChangeMode(System.Web.UI.WebControls.FormViewMode)" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanging" />
      </Docs>
    </Member>
    <Member MemberName="DeleteItem">
      <MemberSignature Language="C#" Value="public virtual void DeleteItem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteItem() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.DeleteItem" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DeleteItem ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DeleteItem();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从数据源中删除 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的当前记录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.DeleteItem%2A>方法，用于以编程方式删除中的当前记录<xref:System.Web.UI.WebControls.FormView>从数据源的控件。 此方法通常用时您需要删除当前记录从外部<xref:System.Web.UI.WebControls.FormView>控制，例如页上的其他控件。 调用此方法也会引发<xref:System.Web.UI.WebControls.FormView.ItemDeleted>和<xref:System.Web.UI.WebControls.FormView.ItemDeleting>事件。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.DeleteItem%2A>方法，用于以编程方式删除中的当前记录<xref:System.Web.UI.WebControls.FormView>从数据源的控件。  
  
 [!code-aspx-csharp[FormViewDeleteItem#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewDeleteItem/CS/formviewdeleteitemcs.aspx#1)]
 [!code-aspx-vb[FormViewDeleteItem#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewDeleteItem/VB/formviewdeleteitemvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.InsertItem(System.Boolean)" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.UpdateItem(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteMethod">
      <MemberSignature Language="C#" Value="public virtual string DeleteMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DeleteMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DeleteMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DeleteMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件执行删除操作时调用的页面上的方法的名称。</summary>
        <value>当控件执行删除操作时，该页中被调用的方法的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 Web 窗体中使用模型绑定教程系列，请参阅[模型绑定和 Web 窗体](/aspnet/web-forms/overview/presenting-and-managing-data/model-binding/retrieving-data)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate EditItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate EditItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EditItemTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ EditItemTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置编辑模式中项的自定义内容。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于编辑模式时数据行的自定义内容。 默认值为 null，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>控件呈现控件的当前模式所基于的数据行的不同模板 (指定的<xref:System.Web.UI.WebControls.FormView.CurrentMode%2A>属性)。 下表显示每种模式使用哪个模板。  
  
|模式|呈现的模板|  
|----------|-----------------------|  
|Edit|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|  
|Insert|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|  
|只读|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|  
  
 使用<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>属性来定义你自己的用户界面 (UI) 的数据行时<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式。 编辑项模板通常包含要更新现有记录，以及更新的记录，并用于取消更新操作的命令按钮的值的用户的输入的控件。  
  
 若要指定自定义模板、 首先`<EditItemTemplate>`开始和结束标记之间的标记<xref:System.Web.UI.WebControls.FormView>控件。 然后可以列出在开始和结束之间模板的内容`<EditItemTemplate>`标记。 通过使用双向绑定表达式，可以将字段与输入控件相关联。 这允许<xref:System.Web.UI.WebControls.FormView>控件可以自动在处于编辑模式关联的输入控件中显示原始的字段值。 当更新某个记录时，<xref:System.Web.UI.WebControls.FormView>控件从关联的输入控件中自动提取更新的字段值。 双向绑定表达式的详细信息，请参阅[绑定到数据库](http://msdn.microsoft.com/library/ab7b2846-975b-4057-a948-45527497c742)。 若要创建执行内置的取消和更新操作的命令按钮，请将命令按钮控件添加到模板的模板其`CommandName`下表中列出的属性设置为值之一。  
  
|命令按钮类型|CommandName 值|  
|-------------------------|-----------------------|  
|取消|"取消"|  
|更新|"更新"|  
  
 你可以通过使用来控制的项模板的外观<xref:System.Web.UI.WebControls.FormView.EditRowStyle%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何在编辑模式中定义数据行的自定义模板。  
  
 [!code-aspx-csharp[FormViewEditItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEditItemTemplate/CS/formviewedititemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEditItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEditItemTemplate/VB/formviewedititemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" />
      </Docs>
    </Member>
    <Member MemberName="EditRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle EditRowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle EditRowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EditRowStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ EditRowStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，使用该对象可以设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于编辑模式时数据行的外观。</summary>
        <value>一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 的引用，该对象表示在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于编辑模式时数据行的样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.EditRowStyle%2A>属性来控制数据的外观时行<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式。 当<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式时，数据行显示由指定的用户定义的内容<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>属性。 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.TableItemStyle>对象返回。 可以使用以下方法之一，以声明方式设置属性：  
  
-   将属性置于开始标记中<xref:System.Web.UI.WebControls.FormView>窗体中的控制`Property-Subproperty`，其中`Subproperty`是的一个属性<xref:System.Web.UI.WebControls.TableItemStyle>对象 (例如， `EditRowStyle-ForeColor`)。  
  
-   嵌套`<EditRowStyle>`元素开始标记和结束标记之间<xref:System.Web.UI.WebControls.FormView>控件。  
  
 属性也可以设置以编程方式在窗体中`Property.Subproperty`(例如， `EditRowStyle.ForeColor`)。 常用设置通常包括自定义的背景色、 前景颜色和字体属性。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.EditRowStyle%2A>属性指定数据的自定义样式时行<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式。  
  
 [!code-aspx-csharp[FormViewEditItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEditItemTemplate/CS/formviewedititemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEditItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEditItemTemplate/VB/formviewedititemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
      </Docs>
    </Member>
    <Member MemberName="EmptyDataRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle EmptyDataRowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle EmptyDataRowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EmptyDataRowStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ EmptyDataRowStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，使用该对象可以设置在绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的数据源不包含任何记录时所显示的空数据行的外观。</summary>
        <value>一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 的引用，使用该对象可以设置空数据行的外观。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A>属性来控制中的空数据行的外观<xref:System.Web.UI.WebControls.FormView>控件。 绑定到控件的数据源不包含任何记录，则会显示空数据行。 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.TableItemStyle>对象返回。 可以使用以下方法之一，以声明方式设置属性：  
  
-   将属性置于开始标记中<xref:System.Web.UI.WebControls.FormView>窗体中的控制`Property-Subproperty`，其中`Subproperty`是的一个属性<xref:System.Web.UI.WebControls.TableItemStyle>对象 (例如， `EmptyDataRowStyle-ForeColor`)。  
  
-   嵌套`<EmptyDataRowStyle>`元素开始标记和结束标记之间<xref:System.Web.UI.WebControls.FormView>控件。  
  
 属性也可以设置以编程方式在窗体中`Property.Subproperty`(例如， `EmptyDataRowStyle.ForeColor`)。 常用设置通常包括自定义的背景色、 前景颜色和字体属性。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A>属性为空的数据行显示时指定自定义样式<xref:System.Web.UI.WebControls.FormView>控件绑定到数据源不包含任何记录。  
  
 [!code-aspx-csharp[FormViewEmptyDataText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEmptyDataText/CS/formviewemptydatatextcs.aspx#1)]
 [!code-aspx-vb[FormViewEmptyDataText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEmptyDataText/VB/formviewemptydatatextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
      </Docs>
    </Member>
    <Member MemberName="EmptyDataTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate EmptyDataTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate EmptyDataTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EmptyDataTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ EmptyDataTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件绑定到不包含任何记录的数据源时所呈现的空数据行的用户定义内容。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，包含空数据行的自定义内容。 默认值为 <see langword="null" />，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 空数据行显示在<xref:System.Web.UI.WebControls.FormView>控制当绑定到控件的数据源不包含任何记录。 你可以通过定义为空的数据行自己自定义用户界面 (UI)<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>属性。 若要指定自定义模板为空的数据行，第一次将`<EmptyDataTemplate>`开始和结束标记之间的标记<xref:System.Web.UI.WebControls.FormView>控件。 然后可以列出在开始和结束之间模板的内容`<EmptyDataTemplate>`标记。 若要控制空数据行的样式，使用<xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A>属性。 或者，你可以使用内置用户界面为空的数据行通过设置<xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A>而不是此属性的属性。  
  
> [!NOTE]
>  如果这两个<xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A>和<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>设置属性，<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>属性优先。  
  
   
  
## Examples  
 下面的示例演示如何定义自定义模板，用于显示的空数据行时<xref:System.Web.UI.WebControls.FormView>控件绑定到数据源不包含任何记录。  
  
 [!code-aspx-csharp[FormViewEmptyDataTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEmptyDataTemplate/CS/formviewemptydatatemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEmptyDataTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEmptyDataTemplate/VB/formviewemptydatatemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
      </Docs>
    </Member>
    <Member MemberName="EmptyDataText">
      <MemberSignature Language="C#" Value="public virtual string EmptyDataText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmptyDataText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EmptyDataText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EmptyDataText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EmptyDataText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件绑定到不包含任何记录的数据源时所呈现的空数据行中显示的文本。</summary>
        <value>要在空数据行中显示的文本。 默认值为空字符串 ("")，表示尚未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 空数据行显示在<xref:System.Web.UI.WebControls.FormView>控制当绑定到控件的数据源不包含任何记录。 使用<xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A>属性来指定要在空的数据行中显示的文本。 若要控制空数据行的样式，使用<xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A>属性。 或者，可以通过设置定义为空的数据行自己自定义用户界面 (UI)<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>而不是此属性的属性。  
  
> [!NOTE]
>  如果这两个<xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A>和<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>设置属性，<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>属性优先。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A>属性来指定要在空的数据行中显示的文本。  
  
 [!code-aspx-csharp[FormViewEmptyDataText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEmptyDataText/CS/formviewemptydatatextcs.aspx#1)]
 [!code-aspx-vb[FormViewEmptyDataText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEmptyDataText/VB/formviewemptydatatextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderText" />
      </Docs>
    </Member>
    <Member MemberName="EnableModelValidation">
      <MemberSignature Language="C#" Value="public virtual bool EnableModelValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableModelValidation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EnableModelValidation" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableModelValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableModelValidation { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示验证程序控件是否会处理在插入或更新操作过程中出现的异常。</summary>
        <value>如果验证程序控件将处理在插入或更新操作过程中出现的异常，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureDataBound">
      <MemberSignature Language="C#" Value="protected override void EnsureDataBound ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void EnsureDataBound() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.EnsureDataBound" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub EnsureDataBound ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void EnsureDataBound();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>请确保 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件在适当时绑定到数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.EnsureDataBound%2A>方法是使用一个帮助器方法<xref:System.Web.UI.WebControls.FormView>类，以确保<xref:System.Web.UI.WebControls.FormView>控件绑定到数据在适当的时候。 <xref:System.Web.UI.WebControls.FormView.EnsureDataBound%2A>方法通常称为期间<xref:System.Web.UI.WebControls.BaseDataBoundControl.OnPreRender%2A>方法以将控件绑定到数据源时数据绑定控件尚未绑定，但需要数据绑定。 此版本的方法已被重写，以防止发生数据绑定时<xref:System.Web.UI.WebControls.FormView>控件是否处于插入模式。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseDataBoundControl.EnsureDataBound" />
      </Docs>
    </Member>
    <Member MemberName="ExtractRowValues">
      <MemberSignature Language="C#" Value="protected virtual void ExtractRowValues (System.Collections.Specialized.IOrderedDictionary fieldValues, bool includeKeys);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ExtractRowValues(class System.Collections.Specialized.IOrderedDictionary fieldValues, bool includeKeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.ExtractRowValues(System.Collections.Specialized.IOrderedDictionary,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ExtractRowValues (fieldValues As IOrderedDictionary, includeKeys As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ExtractRowValues(System::Collections::Specialized::IOrderedDictionary ^ fieldValues, bool includeKeys);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldValues" Type="System.Collections.Specialized.IOrderedDictionary" />
        <Parameter Name="includeKeys" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldValues">一个 <see cref="T:System.Collections.Specialized.IOrderedDictionary" />，用于存储当前数据项的字段值。</param>
        <param name="includeKeys">如果包含键字段，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>检索在数据行内声明的每个字段的值，并将这些值存储在指定的 <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 对象中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.ExtractRowValues%2A>方法是由调用一个帮助器方法<xref:System.Web.UI.WebControls.FormView>要检索的数据行中声明每个字段的值控件。 由于数据行显示了基于当前模式的其他模板，则此方法检索对应于当前的模式的模板中声明的字段值。 下表显示可用的模式和相应的模板。  
  
|模式|模板|  
|----------|--------------|  
|Insert|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|  
|Edit|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|  
|只读|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|  
  
 你可以指定提取的值使用是否包含键字段`includeKeys`参数。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在扩展<see cref="T:System.Web.UI.WebControls.FormView" />类，你可以重写此方法以创建你自己的例程来检索字段值。</para>
        </block>
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="M:System.Web.UI.IBindableTemplate.ExtractValues(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="FooterRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow FooterRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FormViewRow FooterRow" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.FooterRow" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FooterRow As FormViewRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::FormViewRow ^ FooterRow { System::Web::UI::WebControls::FormViewRow ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 控件中的脚注行的 <see cref="T:System.Web.UI.WebControls.FormView" /> 对象。</summary>
        <value>一个 <see cref="T:System.Web.UI.WebControls.FormViewRow" />，表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的脚注行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在底部显示页脚行<xref:System.Web.UI.WebControls.FormView>控制<xref:System.Web.UI.WebControls.FormView.FooterText%2A>或<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>属性设置。 使用<xref:System.Web.UI.WebControls.FormView.FooterRow%2A>属性以编程方式访问<xref:System.Web.UI.WebControls.FormViewRow>表示的页脚行的对象。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView.FooterRow%2A>属性是之后才可用<xref:System.Web.UI.WebControls.FormView>控件创建中的页脚行<xref:System.Web.UI.WebControls.FormView.ItemCreated>事件。  
  
 当你需要以编程方式操作页脚行中的，例如在添加自定义内容时，通常使用此属性。 对任何修改<xref:System.Web.UI.WebControls.FormView.FooterRow%2A>属性必须执行后<xref:System.Web.UI.WebControls.FormView>控件已经被呈现; 否则为<xref:System.Web.UI.WebControls.FormView>控件将覆盖任何更改。  
  
 若要控制页脚行的样式，使用<xref:System.Web.UI.WebControls.FormView.FooterStyle%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.FooterRow%2A>属性以编程方式修改期间的页脚行的属性<xref:System.Web.UI.WebControls.FormView.ItemCreated>事件。  
  
 [!code-aspx-csharp[FormViewFooterTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewFooterTemplate/CS/formviewfootertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewFooterTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewFooterTemplate/VB/formviewfootertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
      </Docs>
    </Member>
    <Member MemberName="FooterStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle FooterStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle FooterStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.FooterStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FooterStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ FooterStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，使用该对象可以设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的脚注行的外观。</summary>
        <value>一个对表示 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 控件中脚注行的样式的 <see cref="T:System.Web.UI.WebControls.FormView" /> 的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在底部显示页脚行<xref:System.Web.UI.WebControls.FormView>控制<xref:System.Web.UI.WebControls.FormView.FooterText%2A>或<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>属性设置。 使用<xref:System.Web.UI.WebControls.FormView.FooterStyle%2A>属性来控制中的页脚行的外观<xref:System.Web.UI.WebControls.FormView>控件。 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.TableItemStyle>对象返回。 可以使用以下方法之一，以声明方式设置属性：  
  
-   将属性置于开始标记中<xref:System.Web.UI.WebControls.FormView>窗体中的控制`Property-Subproperty`，其中`Subproperty`是的一个属性<xref:System.Web.UI.WebControls.TableItemStyle>对象 (例如， `FooterStyle-ForeColor`)。  
  
-   嵌套`<FooterStyle>`元素开始标记和结束标记之间<xref:System.Web.UI.WebControls.FormView>控件。  
  
 属性也可以设置以编程方式在窗体中`Property.Subproperty`(例如， `FooterStyle.ForeColor`)。 常用设置通常包括自定义的背景色、 前景颜色和字体属性。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.FooterStyle%2A>属性来指定页脚行的自定义样式。  
  
 [!code-aspx-csharp[FormViewFooterText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewFooterText/CS/formviewfootertextcs.aspx#1)]
 [!code-aspx-vb[FormViewFooterText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewFooterText/VB/formviewfootertextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
      </Docs>
    </Member>
    <Member MemberName="FooterTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate FooterTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate FooterTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property FooterTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ FooterTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的脚注行的用户定义内容。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，包含脚注行的自定义内容。 默认值为 <see langword="null" />，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在底部显示页脚行<xref:System.Web.UI.WebControls.FormView>控制<xref:System.Web.UI.WebControls.FormView.FooterText%2A>或<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>属性设置。 你也可以通过使用页脚行定义你自己的自定义用户界面 (UI)<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>属性。 若要指定自定义模板的页脚行，第一次将`<FooterTemplate>`开始和结束标记之间的标记<xref:System.Web.UI.WebControls.FormView>控件。 然后可以列出在开始和结束之间模板的内容`<FooterTemplate>`标记。 若要控制页脚行的样式，使用<xref:System.Web.UI.WebControls.FormView.FooterStyle%2A>属性。 或者，你可以只是显示文本的页脚行中通过设置<xref:System.Web.UI.WebControls.FormView.FooterText%2A>而不是此属性的属性。  
  
> [!NOTE]
>  如果这两个<xref:System.Web.UI.WebControls.FormView.FooterText%2A>和<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>设置属性，<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>属性优先。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>属性来定义自定义模板呈现页脚行。  
  
 [!code-aspx-csharp[FormViewFooterTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewFooterTemplate/CS/formviewfootertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewFooterTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewFooterTemplate/VB/formviewfootertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
      </Docs>
    </Member>
    <Member MemberName="FooterText">
      <MemberSignature Language="C#" Value="public virtual string FooterText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FooterText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.FooterText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property FooterText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FooterText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的脚注行中显示的文本。</summary>
        <value>脚注行中将显示的文本。 默认值为空字符串 ("")，表示尚未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在底部显示页脚行<xref:System.Web.UI.WebControls.FormView>控制<xref:System.Web.UI.WebControls.FormView.FooterText%2A>或<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>属性设置。 使用<xref:System.Web.UI.WebControls.FormView.FooterText%2A>属性来指定要显示在页脚行中的文本。 若要控制页脚行的样式，使用<xref:System.Web.UI.WebControls.FormView.FooterStyle%2A>属性。 或者，你可以定义自己的自定义用户界面 (UI) 的页脚行通过设置<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>而不是此属性的属性。  
  
> [!NOTE]
>  如果这两个<xref:System.Web.UI.WebControls.FormView.FooterText%2A>和<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>设置属性，<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>属性优先。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.FooterText%2A>属性来指定要显示在页脚行中的文本。  
  
 [!code-aspx-csharp[FormViewFooterText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewFooterText/CS/formviewfootertextcs.aspx#1)]
 [!code-aspx-vb[FormViewFooterText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewFooterText/VB/formviewfootertextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderText" />
      </Docs>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.GridLines GridLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.GridLines GridLines" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.GridLines" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property GridLines As GridLines" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::GridLines GridLines { System::Web::UI::WebControls::GridLines get(); void set(System::Web::UI::WebControls::GridLines value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridLines</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的网格线样式。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.GridLines" /> 值之一。 默认值为 <see langword="GridLines.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.GridLines%2A>属性指定的网格线样式<xref:System.Web.UI.WebControls.FormView>控件。 下表列出可用的样式。  
  
|样式|描述|  
|-----------|-----------------|  
|`GridLines.None`|显示没有网格线。|  
|`GridLines.Horizontal`|显示水平网格线。|  
|`GridLines.Vertical`|显示垂直网格线。|  
|`GridLines.Both`|显示水平和垂直网格。|  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.GridLines%2A>属性显示垂直和水平网格。  
  
 [!code-aspx-csharp[FormViewCellPadding#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCellPadding/CS/formviewcellpaddingcs.aspx#1)]
 [!code-aspx-vb[FormViewCellPadding#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCellPadding/VB/formviewcellpaddingvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.GridLines" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BackImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellPadding" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellSpacing" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HorizontalAlign" />
      </Docs>
    </Member>
    <Member MemberName="HeaderRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow HeaderRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FormViewRow HeaderRow" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.HeaderRow" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HeaderRow As FormViewRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::FormViewRow ^ HeaderRow { System::Web::UI::WebControls::FormViewRow ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 控件中的标题行的 <see cref="T:System.Web.UI.WebControls.FormView" /> 对象。</summary>
        <value>一个 <see cref="T:System.Web.UI.WebControls.FormViewRow" />，表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的标题行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在顶部显示标题行<xref:System.Web.UI.WebControls.FormView>控制<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>或<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>属性设置。 使用<xref:System.Web.UI.WebControls.FormView.HeaderRow%2A>属性以编程方式访问<xref:System.Web.UI.WebControls.FormViewRow>表示标头行的对象。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView.HeaderRow%2A>属性是之后才可用<xref:System.Web.UI.WebControls.FormView>控件创建中的标题行<xref:System.Web.UI.WebControls.FormView.ItemCreated>事件。  
  
 当你需要以编程方式操作标头行，例如，添加自定义的内容时，通常使用此属性。 对任何修改<xref:System.Web.UI.WebControls.FormView.HeaderRow%2A>属性必须执行后<xref:System.Web.UI.WebControls.FormView>控件已经被呈现; 否则为<xref:System.Web.UI.WebControls.FormView>控件将覆盖任何更改。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.HeaderRow%2A>属性以编程方式修改的属性标题行在<xref:System.Web.UI.WebControls.FormView.ItemCreated>事件。  
  
 [!code-aspx-csharp[FormViewHeaderTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewHeaderTemplate/CS/formviewheadertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewHeaderTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewHeaderTemplate/VB/formviewheadertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
      </Docs>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle HeaderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle HeaderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HeaderStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ HeaderStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，使用该对象可以设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的标题行的外观。</summary>
        <value>一个对表示 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 控件中脚注行的样式的 <see cref="T:System.Web.UI.WebControls.FormView" /> 的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在顶部显示标题行<xref:System.Web.UI.WebControls.FormView>控制<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>或<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>属性设置。 使用<xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A>属性来控制中的标题行的外观<xref:System.Web.UI.WebControls.FormView>控件。 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.TableItemStyle>对象返回。 可以使用以下方法之一，以声明方式设置属性：  
  
-   将属性置于开始标记中<xref:System.Web.UI.WebControls.FormView>窗体中的控制`Property-Subproperty`，其中`Subproperty`是的一个属性<xref:System.Web.UI.WebControls.TableItemStyle>对象 (例如， `HeaderStyle-ForeColor`)。  
  
-   嵌套`<HeaderStyle>`元素开始标记和结束标记之间<xref:System.Web.UI.WebControls.FormView>控件。  
  
 属性也可以设置以编程方式在窗体中`Property.Subproperty`(例如， `HeaderStyle.ForeColor`)。 常用设置通常包括自定义的背景色、 前景颜色和字体属性。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A>属性指定的标头行的自定义样式。  
  
 [!code-aspx-csharp[FormViewHeaderText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewHeaderText/CS/formviewheadertextcs.aspx#1)]
 [!code-aspx-vb[FormViewHeaderText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewHeaderText/VB/formviewheadertextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate HeaderTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate HeaderTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HeaderTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ HeaderTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的标题行的用户定义内容。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，包含标题行的自定义内容。 默认值为 <see langword="null" />，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在顶部显示标题行<xref:System.Web.UI.WebControls.FormView>控制<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>或<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>属性设置。 可以通过使用的标头行中定义你自己的自定义用户界面 (UI)<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>属性。 若要指定自定义模板的标头行，第一次将`<HeaderTemplate>`开始和结束标记之间的标记<xref:System.Web.UI.WebControls.FormView>控件。 然后可以列出在开始和结束之间模板的内容`<HeaderTemplate>`标记。 若要控制标头行的样式，使用<xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A>属性。 或者，你可以只是显示文本标题行中通过设置<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>而不是此属性的属性。  
  
> [!NOTE]
>  如果这两个<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>和<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>设置属性，<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>属性优先。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>属性来定义自定义模板来呈现为标题行。  
  
 [!code-aspx-csharp[FormViewHeaderTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewHeaderTemplate/CS/formviewheadertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewHeaderTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewHeaderTemplate/VB/formviewheadertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
      </Docs>
    </Member>
    <Member MemberName="HeaderText">
      <MemberSignature Language="C#" Value="public virtual string HeaderText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.HeaderText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HeaderText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HeaderText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的标题行中显示的文本。</summary>
        <value>标题行中将显示的文本。 默认值为空字符串 ("")，表示尚未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在顶部显示标题行<xref:System.Web.UI.WebControls.FormView>控制<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>或<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>属性设置。 使用<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>属性来指定要显示的标题行中的文本。 若要控制标头行的样式，使用<xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A>属性。 或者，你可以定义自己的自定义用户界面 (UI) 的标头行通过设置<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>而不是此属性的属性。  
  
> [!NOTE]
>  如果这两个<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>和<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>设置属性，<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>属性优先。  
  
 此属性的值设置时，可以自动保存到的资源文件通过使用设计器工具。 有关详细信息，请参阅<xref:System.ComponentModel.LocalizableAttribute>和[全球化和本地化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>属性来指定要显示的标题行中的文本。  
  
 [!code-aspx-csharp[FormViewHeaderText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewHeaderText/CS/formviewheadertextcs.aspx#1)]
 [!code-aspx-vb[FormViewHeaderText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewHeaderText/VB/formviewheadertextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterText" />
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlign">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.HorizontalAlign HorizontalAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.HorizontalAlign HorizontalAlign" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.HorizontalAlign" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HorizontalAlign As HorizontalAlign" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::HorizontalAlign HorizontalAlign { System::Web::UI::WebControls::HorizontalAlign get(); void set(System::Web::UI::WebControls::HorizontalAlign value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Layout")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.HorizontalAlign</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件在页面上的水平对齐方式。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.HorizontalAlign" /> 值之一。 默认值为 <see langword="HorizontalAlign.NotSet" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.HorizontalAlign%2A>属性指定的水平对齐方式<xref:System.Web.UI.WebControls.FormView>页内的控件。 下表列出了不同的水平对齐样式。  
  
|HorizontalAlign 值|描述|  
|---------------------------|-----------------|  
|`HorizontalAlign.NotSet`|水平对齐方式<xref:System.Web.UI.WebControls.FormView>尚未设置控制。|  
|`HorizontalAlign.Left`|<xref:System.Web.UI.WebControls.FormView>控件是左对齐页面上。|  
|`HorizontalAlign.Center`|<xref:System.Web.UI.WebControls.FormView>控件居中的页上。|  
|`HorizontalAlign.Right`|<xref:System.Web.UI.WebControls.FormView>控件是右对齐的页上的对齐。|  
|`HorizontalAlign.Justify`|<xref:System.Web.UI.WebControls.FormView>控件对齐页面的左侧和右侧边距。|  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.HorizontalAlign%2A>属性来指定<xref:System.Web.UI.WebControls.FormView>控件应在页面上居中。  
  
 [!code-aspx-csharp[FormViewHorizontalAlign#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewHorizontalAlign/CS/formviewhorizontalaligncs.aspx#1)]
 [!code-aspx-vb[FormViewHorizontalAlign#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewHorizontalAlign/VB/formviewhorizontalalignvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.HorizontalAlign" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BackImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellPadding" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellSpacing" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.GridLines" />
      </Docs>
    </Member>
    <Member MemberName="InitializePager">
      <MemberSignature Language="C#" Value="protected virtual void InitializePager (System.Web.UI.WebControls.FormViewRow row, System.Web.UI.WebControls.PagedDataSource pagedDataSource);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializePager(class System.Web.UI.WebControls.FormViewRow row, class System.Web.UI.WebControls.PagedDataSource pagedDataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.InitializePager(System.Web.UI.WebControls.FormViewRow,System.Web.UI.WebControls.PagedDataSource)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializePager(System::Web::UI::WebControls::FormViewRow ^ row, System::Web::UI::WebControls::PagedDataSource ^ pagedDataSource);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Web.UI.WebControls.FormViewRow" />
        <Parameter Name="pagedDataSource" Type="System.Web.UI.WebControls.PagedDataSource" />
      </Parameters>
      <Docs>
        <param name="row">包含当前页导航行的 <see cref="T:System.Web.UI.WebControls.FormViewRow" />。</param>
        <param name="pagedDataSource">包含当前页的数据的 <see cref="T:System.Web.UI.WebControls.PagedDataSource" />。</param>
        <summary>为 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件创建页导航行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.InitializePager%2A>方法是由调用一个帮助器方法<xref:System.Web.UI.WebControls.FormView>控件创建的页导航行。 它将创建<xref:System.Web.UI.WebControls.TableCell>对象，其中包含使用的属性导航控件<xref:System.Web.UI.WebControls.PagedDataSource>对象中包含`pagedDataSource`参数。 然后将单元格添加到指定的行的`row`参数。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在扩展<see cref="T:System.Web.UI.WebControls.FormView" />类，你可以重写此方法以创建你自己的页导航行。</para>
        </block>
        <altmember cref="T:System.Web.UI.WebControls.FormViewRow" />
        <altmember cref="T:System.Web.UI.WebControls.PagedDataSource" />
        <altmember cref="T:System.Web.UI.WebControls.TableCell" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.AllowPaging" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.InitializeRow(System.Web.UI.WebControls.FormViewRow)" />
      </Docs>
    </Member>
    <Member MemberName="InitializeRow">
      <MemberSignature Language="C#" Value="protected virtual void InitializeRow (System.Web.UI.WebControls.FormViewRow row);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeRow(class System.Web.UI.WebControls.FormViewRow row) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.InitializeRow(System.Web.UI.WebControls.FormViewRow)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeRow (row As FormViewRow)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeRow(System::Web::UI::WebControls::FormViewRow ^ row);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Web.UI.WebControls.FormViewRow" />
      </Parameters>
      <Docs>
        <param name="row">要初始化的 <see cref="T:System.Web.UI.WebControls.FormViewRow" />。</param>
        <summary>初始化指定的 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.InitializeRow%2A>方法是由调用一个帮助器方法<xref:System.Web.UI.WebControls.FormView>控件来初始化指定<xref:System.Web.UI.WebControls.FormViewRow>对象。 <xref:System.Web.UI.WebControls.FormViewRow>对象初始化的行类型和指定的行状态其<xref:System.Web.UI.WebControls.FormViewRow.RowType%2A>和<xref:System.Web.UI.WebControls.FormViewRow.RowState%2A>属性，分别。 然后将合适的内容添加到<xref:System.Web.UI.WebControls.FormViewRow>对象。 下表描述了如何初始化每个行类型。  
  
|行类型|描述|  
|--------------|-----------------|  
|数据行|内容<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>， <xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>，或<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>属性添加到<xref:System.Web.UI.WebControls.FormViewRow>对象，具体取决于值<xref:System.Web.UI.WebControls.FormViewRow.RowState%2A>属性。|  
|空数据行|值<xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A>属性或的内容<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>属性添加到<xref:System.Web.UI.WebControls.FormViewRow>对象，具体取决于设置属性。 如果设置这两个属性，<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>属性优先。|  
|页脚行|值<xref:System.Web.UI.WebControls.FormView.FooterText%2A>属性或的内容<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>属性添加到<xref:System.Web.UI.WebControls.FormViewRow>对象，具体取决于设置属性。 如果设置这两个属性，<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>属性优先。|  
|标头行|值<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>属性或的内容<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>属性添加到<xref:System.Web.UI.WebControls.FormViewRow>对象，具体取决于设置属性。 如果设置这两个属性，<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>属性优先。|  
  
> [!NOTE]
>  此方法不会初始化的页导航行。 若要创建的页导航行，使用<xref:System.Web.UI.WebControls.FormView.InitializePager%2A>方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在扩展<see cref="T:System.Web.UI.WebControls.FormView" />类，你可以重写此方法以创建您自己自定义的行。</para>
        </block>
        <altmember cref="T:System.Web.UI.WebControls.FormViewRow" />
        <altmember cref="T:System.Web.UI.WebControls.DataControlRowState" />
        <altmember cref="T:System.Web.UI.WebControls.DataControlRowType" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.InitializePager(System.Web.UI.WebControls.FormViewRow,System.Web.UI.WebControls.PagedDataSource)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="public virtual void InsertItem (bool causesValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertItem(bool causesValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.InsertItem(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub InsertItem (causesValidation As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void InsertItem(bool causesValidation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="causesValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="causesValidation">
          <see langword="true" /> 表示调用该方法时执行页验证；否则为 <see langword="false" />。</param>
        <summary>将当前记录插入到数据源中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Web.UI.WebControls.FormView>控件位于在插入模式中，使用<xref:System.Web.UI.WebControls.FormView.InsertItem%2A>方法以编程方式在数据源中插入当前记录。 此方法通常用时需要插入当前记录从外部<xref:System.Web.UI.WebControls.FormView>控制，例如页上的其他控件。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView>调用; 否则为此方法时，控件必须在插入模式下<xref:System.Web.HttpException>引发。  
  
 若要指定是否在插入操作之前执行页验证，使用`causesValidation`参数。 调用此方法也会引发<xref:System.Web.UI.WebControls.FormView.ItemInserted>和<xref:System.Web.UI.WebControls.FormView.ItemInserting>事件。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.InsertItem%2A>方法以编程方式插入中的当前记录<xref:System.Web.UI.WebControls.FormView>数据源中的控件。  
  
 [!code-aspx-csharp[FormViewInsertItem#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertItem/CS/formviewinsertitemcs.aspx#1)]
 [!code-aspx-vb[FormViewInsertItem#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertItem/VB/formviewinsertitemvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">当 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件不处于插入模式时，调用此方法。  - 或 -  与 <see cref="T:System.Web.UI.DataSourceView" /> 控件相关联的 <see cref="T:System.Web.UI.WebControls.FormView" /> 对象为 null。</exception>
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserted" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserting" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.DeleteItem" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.UpdateItem(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate InsertItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate InsertItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property InsertItemTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ InsertItemTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置插入模式中项的自定义内容。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，包含数据行在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于插入模式时的自定义内容。 默认值为 null，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>控件呈现控件的当前模式所基于的数据行的不同模板 (指定的<xref:System.Web.UI.WebControls.FormView.CurrentMode%2A>属性)。 下表显示每种模式使用哪个模板。  
  
|模式|呈现的模板|  
|----------|-----------------------|  
|Edit|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|  
|Insert|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|  
|只读|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|  
  
 使用<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>属性来定义你自己的用户界面 (UI) 的数据行时<xref:System.Web.UI.WebControls.FormView>控件是否处于插入模式。 插入项模板通常包含要为新记录中，输入值，以及命令按钮用于插入记录，并用于取消插入操作的用户的输入的控件。  
  
 若要指定自定义模板、 首先`<InsertItemTemplate>`开始和结束标记之间的标记<xref:System.Web.UI.WebControls.FormView>控件。 然后可以列出在开始和结束之间模板的内容`<InsertItemTemplate>`标记。 通过使用双向绑定表达式，可以将字段与输入控件相关联。 当插入一条记录时，<xref:System.Web.UI.WebControls.FormView>控件自动从关联的输入控件中提取的字段值。 双向绑定表达式的详细信息，请参阅[绑定到数据库](http://msdn.microsoft.com/library/ab7b2846-975b-4057-a948-45527497c742)。 若要创建用于执行内置的取消和插入操作的命令按钮，请将命令按钮控件添加到模板的模板其`CommandName`下表中列出的属性设置为值之一。  
  
|命令按钮类型|CommandName 值|  
|-------------------------|-----------------------|  
|取消|"取消"|  
|Insert|"插入"|  
  
 你可以通过使用来控制的项模板的外观<xref:System.Web.UI.WebControls.FormView.InsertRowStyle%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何在插入模式中定义数据行的自定义模板。  
  
 [!code-aspx-csharp[FormViewInsertItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertItemTemplate/CS/formviewinsertitemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewInsertItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertItemTemplate/VB/formviewinsertitemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserted" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserting" />
      </Docs>
    </Member>
    <Member MemberName="InsertMethod">
      <MemberSignature Language="C#" Value="public virtual string InsertMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.InsertMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property InsertMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ InsertMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件执行插入操作时调用的页面上的方法的名称。</summary>
        <value>当控件执行插入操作时该页的被调用的方法的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 Web 窗体中使用模型绑定教程系列，请参阅[模型绑定和 Web 窗体](/aspnet/web-forms/overview/presenting-and-managing-data/model-binding/retrieving-data)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle InsertRowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle InsertRowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertRowStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ InsertRowStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，使用该对象可以设置在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于插入模式时该控件中的数据行的外观。</summary>
        <value>一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 的引用，该对象表示在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于插入模式时该控件中的数据行的样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.InsertRowStyle%2A>属性来控制数据的外观时行<xref:System.Web.UI.WebControls.FormView>控件是否处于插入模式。 当<xref:System.Web.UI.WebControls.FormView>控件是在插入模式下时，数据行显示由指定的用户定义的内容<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>属性。 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.TableItemStyle>对象返回。  
  
 可以使用以下方法之一，以声明方式设置属性：  
  
-   将属性置于开始标记中<xref:System.Web.UI.WebControls.FormView>窗体中的控制`Property-Subproperty`，其中`Subproperty`是的一个属性<xref:System.Web.UI.WebControls.TableItemStyle>对象 (例如， `InsertRowStyle-ForeColor`)。  
  
-   嵌套`<InsertRowStyle>`元素开始标记和结束标记之间<xref:System.Web.UI.WebControls.FormView>控件。  
  
 属性也可以设置以编程方式在窗体中`Property.Subproperty`(例如， `InsertRowStyle.ForeColor`)。 常用设置通常包括自定义的背景色、 前景颜色和字体属性。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.InsertRowStyle%2A>属性指定数据的自定义样式时行<xref:System.Web.UI.WebControls.FormView>控件是否处于插入模式。  
  
 [!code-aspx-csharp[FormViewInsertItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertItemTemplate/CS/formviewinsertitemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewInsertItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertItemTemplate/VB/formviewinsertitemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
      </Docs>
    </Member>
    <Member MemberName="IsBindableType">
      <MemberSignature Language="C#" Value="public virtual bool IsBindableType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsBindableType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.IsBindableType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsBindableType(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">表示要检查的数据类型的 <see cref="T:System.Type" />。</param>
        <summary>确定指定的数据类型是否可以绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的字段。</summary>
        <returns>如果指定的数据类型可以绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的字段，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.IsBindableType%2A>方法是由调用一个帮助器方法<xref:System.Web.UI.WebControls.FormView>控件以确定指定的数据类型是否可以绑定到控件中的字段。 <xref:System.Web.UI.WebControls.FormView>控件支持以下数据类型：  
  
-   所有基元数据类型，如<xref:System.Boolean>， <xref:System.Byte>， <xref:System.Int32>，依次类推。  
  
-   <xref:System.DateTime>  
  
-   <xref:System.Decimal>  
  
-   <xref:System.Guid>  
  
-   <xref:System.String>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在扩展<see cref="T:System.Web.UI.WebControls.FormView" />类，你可以重写此方法以添加或限制可以在中使用的数据类型<see cref="T:System.Web.UI.WebControls.FormView" />控件。</para>
        </block>
        <altmember cref="P:System.Type.IsPrimitive" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.Decimal" />
        <altmember cref="T:System.Guid" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ItemCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewCommandEventHandler ItemCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewCommandEventHandler ItemCommand" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemCommand" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemCommand As FormViewCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewCommandEventHandler ^ ItemCommand;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的某个按钮时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.ItemCommand>中的按钮时引发事件<xref:System.Web.UI.WebControls.FormView>控件被单击。 这使您可以提供每次此事件发生时执行的自定义的例程的事件处理方法。  
  
 中的按钮<xref:System.Web.UI.WebControls.FormView>控件也可以调用某些控件的内置功能。 若要执行这些操作之一，设置`CommandName`为下表中的值之一的按钮的属性。  
  
|CommandName 值|描述|  
|-----------------------|-----------------|  
|"取消"|取消编辑或插入操作，并返回<xref:System.Web.UI.WebControls.FormView>控件添加到所指定的模式<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>属性。 引发<xref:System.Web.UI.WebControls.FormView.ModeChanged>和<xref:System.Web.UI.WebControls.FormView.ModeChanging>事件。|  
|“Delete”|删除当前记录。 引发<xref:System.Web.UI.WebControls.FormView.ItemDeleted>和<xref:System.Web.UI.WebControls.FormView.ItemDeleting>事件。|  
|"编辑"|放入<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式。 引发<xref:System.Web.UI.WebControls.FormView.ModeChanged>和<xref:System.Web.UI.WebControls.FormView.ModeChanging>事件。|  
|"插入"|将当前记录插入到数据源中。 引发<xref:System.Web.UI.WebControls.FormView.ItemInserted>和<xref:System.Web.UI.WebControls.FormView.ItemInserting>事件。|  
|"New"|放入<xref:System.Web.UI.WebControls.FormView>控件置于插入模式。 引发<xref:System.Web.UI.WebControls.FormView.ModeChanged>和<xref:System.Web.UI.WebControls.FormView.ModeChanging>事件。|  
|"页"|执行分页操作。 设置`CommandArgument`的按钮为"First"，"最后"、"下一步"、"上一步"或执行页编号，以指定的分页操作类型的属性。 引发<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>和<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>事件。|  
|"更新"|更新数据源中的当前记录。 引发<xref:System.Web.UI.WebControls.FormView.ItemUpdated>和<xref:System.Web.UI.WebControls.FormView.ItemUpdating>事件。|  
  
 尽管<xref:System.Web.UI.WebControls.FormView.ItemCommand>单击上表中列出的按钮时将引发事件，则我们建议你使用该操作的表中列出的事件。  
  
 A<xref:System.Web.UI.WebControls.FormViewCommandEventArgs>对象传递给事件处理方法，可用于确定命令名称和被单击按钮的命令参数。 若要确定的命令名称和命令参数，请使用<xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A>和<xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A>属性，分别。 你也可以访问通过引发事件的控件<xref:System.Web.UI.WebControls.DetailsViewCommandEventArgs.CommandSource%2A>属性。  
  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.ItemCommand>要处理中的按钮单击事件<xref:System.Web.UI.WebControls.FormView>控件。 当用户单击添加按钮时，将当前所显示的项添加到<xref:System.Web.UI.WebControls.ListBox>控件。  
  
 [!code-aspx-csharp[FormViewItemCommandEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewItemCommandEventArgs/CS/formviewcommandeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewItemCommandEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewItemCommandEventArgs/VB/formviewcommandeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewCommandEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewCommandEventHandler" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.CommandEventArgs.CommandName" />
        <altmember cref="P:System.Web.UI.WebControls.CommandEventArgs.CommandArgument" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemCreated">
      <MemberSignature Language="C#" Value="public event EventHandler ItemCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ItemCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemCreated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ItemCreated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中创建了所有行后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.ItemCreated>中创建的所有行之后，将引发事件<xref:System.Web.UI.WebControls.FormView>控件。 首次呈现控件，或者当用户导航到另一条记录，就可能出现此问题。 此事件可用于提供执行自定义的例程，例如正在添加或修改行的内容，每次此事件发生时的事件处理方法。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView.ItemCreated>事件之前发生<xref:System.Web.UI.WebControls.FormView>控件绑定到数据。 若要修改的字段绑定的值，使用<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBound>事件。  
  
 你可以访问中的页眉、 页脚和页导航行<xref:System.Web.UI.WebControls.FormView>控件通过使用<xref:System.Web.UI.WebControls.FormView.HeaderRow%2A>， <xref:System.Web.UI.WebControls.FormView.FooterRow%2A>， <xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A>，或<xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A>属性，分别。 若要访问的数据行，使用<xref:System.Web.UI.WebControls.FormView.Row%2A>属性。  
  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.ItemCreated>事件更新的文本<xref:System.Web.UI.WebControls.Label>页导航行中包含的控件。  
  
 [!code-aspx-csharp[FormViewItemCreated#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewItemCreated/CS/formviewitemcreatedcs.aspx#1)]
 [!code-aspx-vb[FormViewItemCreated#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewItemCreated/VB/formviewitemcreatedvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.EventArgs" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.Row" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemDeleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewDeletedEventHandler ItemDeleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewDeletedEventHandler ItemDeleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemDeleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemDeleted As FormViewDeletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewDeletedEventHandler ^ ItemDeleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewDeletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的“删除”按钮时，但在删除操作之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>控件都将引发<xref:System.Web.UI.WebControls.FormView.ItemDeleted>事件的删除按钮时 (带按钮其`CommandName`属性设置为"Delete") 在控件内单击时，但之后<xref:System.Web.UI.WebControls.FormView>控件中删除记录。 这使您可以提供执行自定义的例程，例如检查删除操作的结果，每次此事件发生时的事件处理方法。  
  
 A<xref:System.Web.UI.WebControls.FormViewDeletedEventArgs>对象传递给事件处理方法，可用于确定受影响的记录和任何可能发生的异常数。 若要确定删除操作所影响的记录数，请使用<xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.AffectedRows%2A>属性。 使用<xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.Exception%2A>属性以确定是否发生任何异常。 您还可以指示是否处理了该异常的事件处理方法中通过设置<xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.ExceptionHandled%2A>属性。 如果你想要访问的键字段和非键字段的已删除的记录的名称/值对，使用<xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.Keys%2A>和<xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.Values%2A>属性，分别。  
  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.ItemDeleted>事件，以确定是否在删除操作期间发生了异常。  
  
 [!code-aspx-csharp[FormViewDeletedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewDeletedEventArgs/CS/formviewdeletedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewDeletedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewDeletedEventArgs/VB/formviewdeletedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewDeletedEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewDeletedEventHandler" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeletedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeletedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeletedEventArgs.ExceptionHandled" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeletedEventArgs.Keys" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeletedEventArgs.Values" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemDeleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewDeleteEventHandler ItemDeleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewDeleteEventHandler ItemDeleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemDeleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemDeleting As FormViewDeleteEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewDeleteEventHandler ^ ItemDeleting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewDeleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的“删除”按钮时，但在删除操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>控件都将引发<xref:System.Web.UI.WebControls.FormView.ItemDeleting>事件的删除按钮时 (带按钮其`CommandName`属性设置为"Delete") 在控件内单击时，之前<xref:System.Web.UI.WebControls.FormView>控件中删除记录。 这样，你可以提供执行自定义的例程，如在每次此事件发生时删除它之前, 验证记录一个事件处理方法。  
  
 A<xref:System.Web.UI.WebControls.FormViewDeleteEventArgs>对象传递给事件处理方法，以便您可以确定要删除的记录的索引，还可以指示是否应取消删除操作。 若要确定记录的索引，请使用<xref:System.Web.UI.WebControls.FormViewDeleteEventArgs.RowIndex%2A>属性。 若要取消删除操作，请设置<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性`true`。 你还可以通过使用访问键字段和非键字段<xref:System.Web.UI.WebControls.FormViewDeleteEventArgs.Keys%2A>和<xref:System.Web.UI.WebControls.FormViewDeleteEventArgs.Values%2A>属性，分别。  
  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.ItemDeleting>事件取消删除操作。  
  
 [!code-aspx-csharp[FormViewDeleteEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewDeleteEventArgs/CS/formviewdeleteeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewDeleteEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewDeleteEventArgs/VB/formviewdeleteeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewDeleteEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewDeleteEventHandler" />
        <altmember cref="P:System.ComponentModel.CancelEventArgs.Cancel" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeleteEventArgs.RowIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeleteEventArgs.Keys" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeleteEventArgs.Values" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemInserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewInsertedEventHandler ItemInserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewInsertedEventHandler ItemInserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemInserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemInserted As FormViewInsertedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewInsertedEventHandler ^ ItemInserted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewInsertedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的“插入”按钮时，但在插入操作之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>控件都将引发<xref:System.Web.UI.WebControls.FormView.ItemInserted>事件时的插入按钮 (带有按钮其`CommandName`属性设置为"插入") 在控件内单击时，但之后<xref:System.Web.UI.WebControls.FormView>控件插入记录。 这使您可以提供执行自定义的例程，例如检查插入操作的结果，每次此事件发生时的事件处理方法。  
  
 A<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs>对象传递给事件处理方法，可用于确定受影响的记录和任何可能发生的异常数。 若要确定受 insert 操作的记录数，请使用<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows%2A>属性。 使用<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception%2A>属性以确定是否发生任何异常。 您还可以指示是否处理了该异常的事件处理方法中通过设置<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled%2A>属性。 如果你需要访问插入的记录的值，请使用<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.Values%2A>属性。  
  
 默认情况下，<xref:System.Web.UI.WebControls.FormView>控件返回到所指定的模式<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>后插入操作的属性。 若要保留<xref:System.Web.UI.WebControls.FormView>控件在插入模式下，设置<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode%2A>属性`true`。  
  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.ItemInserted>事件，以确定是否在插入操作期间发生了异常。  
  
 [!code-aspx-csharp[FormViewInsertedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertedEventArgs/CS/formviewinsertedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewInsertedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertedEventArgs/VB/formviewinsertedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertedEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertedEventHandler" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewInsertedEventArgs.Values" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemInserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewInsertEventHandler ItemInserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewInsertEventHandler ItemInserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemInserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemInserting As FormViewInsertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewInsertEventHandler ^ ItemInserting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewInsertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的“插入”按钮时，但在插入操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>控件都将引发<xref:System.Web.UI.WebControls.FormView.ItemInserting>事件时的插入按钮 (带有按钮其`CommandName`属性设置为"Insert") 在控件内单击时，之前<xref:System.Web.UI.WebControls.FormView>控件插入记录。 这使您可以提供执行自定义的例程，如 HTML 编码的记录的值在每次此事件发生时数据源中插入之前的事件处理方法。  
  
 A<xref:System.Web.UI.WebControls.FormViewInsertEventArgs>对象传递给事件处理方法，可用于确定发送到的可选命令参数的值<xref:System.Web.UI.WebControls.FormView>控件，还可以指示应取消插入操作。 命令参数值对应于`CommandArgument`属性的插入按钮。 当`CommandArgument`设置属性的插入按钮，则使用<xref:System.Web.UI.WebControls.FormViewInsertEventArgs.CommandArgument%2A>属性来确定命令自变量的值。 若要取消插入操作，请设置<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性`true`。 您还可以读取或修改新的记录的字段值使用<xref:System.Web.UI.WebControls.FormViewInsertEventArgs.Values%2A>属性。  
  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.ItemInserting>事件取消插入操作。  
  
 [!code-aspx-csharp[FormViewInsertEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertEventArgs/CS/formviewinserteventargscs.aspx#1)]
 [!code-aspx-vb[FormViewInsertEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertEventArgs/VB/formviewinserteventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertEventHandler" />
        <altmember cref="P:System.ComponentModel.CancelEventArgs.Cancel" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewInsertEventArgs.CommandArgument" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewInsertEventArgs.Values" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ItemTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ ItemTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于只读模式时该控件中的数据行的自定义内容。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于只读模式时数据行的自定义内容。 默认值为 null，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>控件呈现控件的当前模式所基于的数据行的不同模板 (指定的<xref:System.Web.UI.WebControls.FormView.CurrentMode%2A>属性)。 下表显示每种模式使用哪个模板。  
  
|模式|呈现的模板|  
|----------|-----------------------|  
|Edit|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|  
|Insert|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|  
|只读|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|  
  
 使用<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>属性来定义你自己的用户界面 (UI) 的数据行时<xref:System.Web.UI.WebControls.FormView>控件是否处于只读模式。 项模板通常包含控件显示的字段值的记录，以及命令按钮可以编辑、 插入和删除记录。  
  
 若要指定自定义模板、 首先`<ItemTemplate>`开始和结束标记之间的标记<xref:System.Web.UI.WebControls.FormView>控件。 然后可以列出在开始和结束之间模板的内容`<ItemTemplate>`标记。 若要显示的字段值的数据源绑定到控件，请使用数据绑定表达式。 有关数据绑定表达式的详细信息，请参阅[数据绑定表达式语法](http://msdn.microsoft.com/library/676beb1d-ddfa-4153-bba8-3c86dcb7ceca)。 若要创建执行内置删除、 编辑和新的记录操作的命令按钮，请将命令按钮控件添加到模板的模板其`CommandName`下表中列出的属性设置为值之一。  
  
|命令按钮类型|CommandName 值|  
|-------------------------|-----------------------|  
|删除|“Delete”|  
|Edit|"编辑"|  
|新建|"New"|  
  
 你可以通过使用来控制的项模板的外观<xref:System.Web.UI.WebControls.FormView.RowStyle%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何在只读模式中定义数据行的自定义模板。  
  
 [!code-aspx-csharp[FormViewEditItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEditItemTemplate/CS/formviewedititemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEditItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEditItemTemplate/VB/formviewedititemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
      </Docs>
    </Member>
    <Member MemberName="ItemUpdated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewUpdatedEventHandler ItemUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewUpdatedEventHandler ItemUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemUpdated As FormViewUpdatedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewUpdatedEventHandler ^ ItemUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewUpdatedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的“更新”按钮时，但在更新操作之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>控件都将引发<xref:System.Web.UI.WebControls.FormView.ItemUpdated>事件时的更新按钮 (带有按钮其`CommandName`属性设置为"更新") 在控件内单击时，之后<xref:System.Web.UI.WebControls.FormView>控件更新记录。 这使您可以提供执行自定义的例程，例如检查更新操作的结果，每次此事件发生时的事件处理方法。  
  
 A<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs>对象传递给事件处理方法，可用于确定受影响的记录和任何可能发生的异常数。 若要确定更新操作所影响的记录数，请使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>属性。 使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>属性以确定是否发生任何异常。 您还可以指示是否处理了该异常的事件处理方法中通过设置<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>属性。 如果你需要访问已更新记录的键字段值，请使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>属性。 可以使用访问原始和更新的非键字段值<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A>和<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>属性，分别。  
  
 默认情况下，<xref:System.Web.UI.WebControls.FormView>控件返回到所指定的模式<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>后更新操作的属性。 若要保留<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式，设置<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>属性`true`。  
  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.ItemUpdated>事件，以确定是否在更新操作期间发生了异常。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemUpdating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewUpdateEventHandler ItemUpdating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewUpdateEventHandler ItemUpdating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemUpdating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemUpdating As FormViewUpdateEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewUpdateEventHandler ^ ItemUpdating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewUpdateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的“更新”按钮时，但在更新操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>控件都将引发<xref:System.Web.UI.WebControls.FormView.ItemUpdating>事件时的更新按钮 (带有按钮其`CommandName`属性设置为"更新") 在控件内单击时，之前<xref:System.Web.UI.WebControls.FormView>控件更新记录。 这使您可以提供执行自定义的例程，如 HTML 编码的记录的值在更新该数据源中，每次此事件发生时的事件处理方法。  
  
 A<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs>对象传递给事件处理方法，可用于确定发送到的可选命令参数的值<xref:System.Web.UI.WebControls.FormView>控件，还可以指示应取消更新操作。 命令参数值对应于`CommandArgument`属性的更新按钮。 当`CommandArgument`设置属性的更新按钮，则使用<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument%2A>属性来确定命令自变量的值。 若要取消更新操作，请设置<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性`true`。 您还可以读取或修改通过使用由用户输入的新值<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>和<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>属性。 <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A>属性包含的键字段，而<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>属性包含非键字段。 如果你需要访问非键字段的原始值，请使用<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A>属性。  
  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.ItemUpdating>事件取消更新操作。  
  
 [!code-aspx-csharp[FormViewUpdateEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdateEventArgs/CS/formviewupdateeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdateEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdateEventArgs/VB/formviewupdateeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdateEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdateEventHandler" />
        <altmember cref="P:System.ComponentModel.CancelEventArgs.Cancel" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected internal override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.LoadControlState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub LoadControlState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void LoadControlState(System::Object ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">一个 <see cref="T:System.Object" />，表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的状态。</param>
        <summary>加载需要保持的 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件属性的状态（即使在 <see cref="P:System.Web.UI.Control.EnableViewState" /> 属性设置为 <see langword="false" /> 时）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.LoadControlState%2A>方法用于加载的状态<xref:System.Web.UI.WebControls.FormView>保持不变，所需的控件属性，即使<xref:System.Web.UI.Control.EnableViewState%2A>属性设置为`false`。  
  
> [!NOTE]
>  此方法主要由控件开发人员扩展时使用<xref:System.Web.UI.WebControls.FormView>控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="P:System.Web.UI.Control.EnableViewState" />
        <altmember cref="M:System.Web.UI.Control.LoadControlState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">一个 <see cref="T:System.Object" />，表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的状态。</param>
        <summary>加载以前保存的 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的视图状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.LoadViewState%2A>方法用于加载以前保存的视图状态的<xref:System.Web.UI.WebControls.FormView>控件。  
  
> [!NOTE]
>  此方法主要由控件开发人员扩展时使用<xref:System.Web.UI.WebControls.FormView>控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.Web.UI.Control.LoadViewState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ModeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ModeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件在编辑、插入和只读模式间切换时，但在模式更改之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.ModeChanged>引发事件时<xref:System.Web.UI.WebControls.FormView>控件尝试进行切换之间编辑、 insert 和只读模式，但在实际更改模式。 此选项，可以提供一个事件处理方法，执行自定义的例程，如同步<xref:System.Web.UI.WebControls.FormView>与另一个控件，每次此事件发生时的控件。  
  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.ModeChanged>事件的标题行中显示的当前模式<xref:System.Web.UI.WebControls.FormView>控件。  
  
 [!code-aspx-csharp[FormViewModeChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewModeChanged/CS/formviewmodechangedcs.aspx#1)]
 [!code-aspx-vb[FormViewModeChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewModeChanged/VB/formviewmodechangedvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.EventArgs" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ModeChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewModeEventHandler ModeChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewModeEventHandler ModeChanging" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ModeChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ModeChanging As FormViewModeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewModeEventHandler ^ ModeChanging;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件在编辑、插入和只读模式间切换时，但在模式更改之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.ModeChanging>引发事件时<xref:System.Web.UI.WebControls.FormView>控件尝试进行切换之间编辑、 insert 和只读模式，但在实际更改模式之前。 此选项，可以提供一个事件处理方法，执行自定义的例程，例如配置<xref:System.Web.UI.WebControls.FormView>控制为特定模式或取消模式更改中，每次此事件发生时。  
  
 A<xref:System.Web.UI.WebControls.FormViewModeEventArgs>对象传递给事件处理方法，可用于确定向其模式<xref:System.Web.UI.WebControls.FormView>控件要切换，以确定是否<xref:System.Web.UI.WebControls.FormView.ModeChanging>事件被引发因为用户取消编辑操作，或可以指示应取消插入操作。 若要确定新的模式，请使用<xref:System.Web.UI.WebControls.FormViewModeEventArgs.NewMode%2A>属性。 你还可以使用<xref:System.Web.UI.WebControls.FormViewModeEventArgs.NewMode%2A>属性通过将其设置为其中一个切换到备用模式<xref:System.Web.UI.WebControls.FormViewMode>枚举值。 使用<xref:System.Web.UI.WebControls.FormViewModeEventArgs.CancelingEdit%2A>属性来确定用户是否取消编辑操作。 若要取消的插入操作，将设置<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性`true`。  
  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.ModeChanging>事件以隐藏页导航行时<xref:System.Web.UI.WebControls.FormView>控件转换到编辑模式。  
  
 [!code-aspx-csharp[FormViewModeEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewModeEventArgs/CS/formviewmodeeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewModeEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewModeEventArgs/VB/formviewmodeeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewModeEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewModeEventHandler" />
        <altmember cref="P:System.ComponentModel.CancelEventArgs.Cancel" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewModeEventArgs.CancelingEdit" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewModeEventArgs.NewMode" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ModifiedOuterTableStylePropertyName">
      <MemberSignature Language="C#" Value="protected internal virtual string ModifiedOuterTableStylePropertyName ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string ModifiedOuterTableStylePropertyName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.ModifiedOuterTableStylePropertyName" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ModifiedOuterTableStylePropertyName () As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ ModifiedOuterTableStylePropertyName();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定与 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件关联的表特定 CSS 样式规则是否设置为其默认值。</summary>
        <returns>与 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件关联的默认 CSS 样式规则。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为其默认值设置特定于表的 CSS 样式规则，应使用<xref:System.Web.UI.WebControls.FormView.BackImageUrl%2A>， <xref:System.Web.UI.WebControls.FormView.CellPadding%2A>， <xref:System.Web.UI.WebControls.FormView.CellSpacing%2A>， <xref:System.Web.UI.WebControls.FormView.GridLines%2A>，<xref:System.Web.UI.WebControls.FormView.HorizontalAlign%2A>和<xref:System.Web.UI.WebControls.Style.Font%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBubbleEvent">
      <MemberSignature Language="C#" Value="protected override bool OnBubbleEvent (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnBubbleEvent(object source, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnBubbleEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnBubbleEvent (source As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnBubbleEvent(System::Object ^ source, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">事件源。</param>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>处理在控件层次结构中向上传递的事件。</summary>
        <returns>若要指示事件应在控件层次结构中进一步向上传递，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Control.OnBubbleEvent%2A?displayProperty=nameWithType>控件使用方法来根据需要处理控件层次结构中向上传递的事件<xref:System.Web.UI.Control.RaiseBubbleEvent%2A>方法。 它确定是否通过检查的属性处理的事件<xref:System.EventArgs>对象中包含`e`参数。 当需要处理的事件时，该方法将执行相应的措施。 其他事件是忽略，并且控制层次结构中向上传递。 此方法指示是否将事件进一步通过其返回值控件层次结构中向上传递。  
  
 <xref:System.Web.UI.WebControls.FormView>控件重写此方法以执行相应的措施，单击某一控件可识别的按钮时的基实现。 下表列出的命令按钮<xref:System.Web.UI.WebControls.FormView>控件可识别。  
  
|Button|CommandName 值|描述|  
|------------|-----------------------|-----------------|  
|取消|"取消"|使用更新或插入操作来取消操作并以放弃用户输入的值。 <xref:System.Web.UI.WebControls.FormView>随后控制返回到所指定的模式<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>属性。|  
|删除|“Delete”|在删除操作中用于从数据源中删除所显示的记录。 引发<xref:System.Web.UI.WebControls.FormView.ItemDeleting>和<xref:System.Web.UI.WebControls.FormView.ItemDeleted>事件。|  
|Edit|"编辑"|在更新操作中用于使<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式。 中指定的内容<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>属性显示为数据行。|  
|Insert|"插入"|用于在插入操作中尝试使用由用户提供的值在数据源中插入新记录。 引发<xref:System.Web.UI.WebControls.FormView.ItemInserting>和<xref:System.Web.UI.WebControls.FormView.ItemInserted>事件。|  
|新建|"New"|在插入操作中用于使<xref:System.Web.UI.WebControls.FormView>控件置于插入模式。 中指定的内容<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>属性显示为数据行。|  
|页|"页"|在分页操作中用于表示执行分页的页导航行中的按钮。 若要指定的分页操作，设置`CommandArgument`的按钮为"下一步"、"上一步"、"第一个"、"最后一个"，或要导航到页的索引的属性。 引发<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>和<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>事件。 **注意：** 仅中页导航模板通常使用此类型的按钮。|  
|更新|"更新"|用于在更新操作中尝试使用由用户提供的值更新数据源中显示的记录。 引发<xref:System.Web.UI.WebControls.FormView.ItemUpdating>和<xref:System.Web.UI.WebControls.FormView.ItemUpdated>事件。|  
  
 此版本的方法返回`true`时处理这些按钮之一。 有关事件上传方法的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在扩展<see cref="T:System.Web.UI.WebControls.FormView" />类，你可以重写此方法以处理您自己的事件。请确保要返回的值用于指示是否应进一步控制层次结构中向上传递的事件。</para>
        </block>
        <altmember cref="M:System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.Control.Init" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnInit%2A>方法由调用<xref:System.Web.UI.WebControls.FormView>控件以引发<xref:System.Web.UI.Control.Init>事件。 它通常由控件开发人员在扩展<xref:System.Web.UI.WebControls.FormView>类。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.FormView.OnInit%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.FormView.OnInit(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.FormView.OnInit(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Web.UI.Control.Init" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCommand (System.Web.UI.WebControls.FormViewCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCommand(class System.Web.UI.WebControls.FormViewCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemCommand (e As FormViewCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemCommand(System::Web::UI::WebControls::FormViewCommandEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewCommandEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemCommand" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemCommand%2A>方法由调用<xref:System.Web.UI.WebControls.FormView>控件以引发<xref:System.Web.UI.WebControls.FormView.ItemCommand>事件。 它通常由控件开发人员在扩展<xref:System.Web.UI.WebControls.FormView>类。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemCommand%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemCommand" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewCommandEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemCreated" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemCreated%2A>方法由调用<xref:System.Web.UI.WebControls.FormView>控件以引发<xref:System.Web.UI.WebControls.FormView.ItemCreated>事件。 它通常由控件开发人员在扩展<xref:System.Web.UI.WebControls.FormView>类。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemCreated%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemCreated" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDeleted (System.Web.UI.WebControls.FormViewDeletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDeleted(class System.Web.UI.WebControls.FormViewDeletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemDeleted (e As FormViewDeletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemDeleted(System::Web::UI::WebControls::FormViewDeletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewDeletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewDeletedEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemDeleted%2A>方法由调用<xref:System.Web.UI.WebControls.FormView>控件以引发<xref:System.Web.UI.WebControls.FormView.ItemDeleted>事件。 它通常由控件开发人员在扩展<xref:System.Web.UI.WebControls.FormView>类。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemDeleted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewDeletedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDeleting (System.Web.UI.WebControls.FormViewDeleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDeleting(class System.Web.UI.WebControls.FormViewDeleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemDeleting (e As FormViewDeleteEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemDeleting(System::Web::UI::WebControls::FormViewDeleteEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewDeleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewDeleteEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemDeleting%2A>方法由调用<xref:System.Web.UI.WebControls.FormView>控件以引发<xref:System.Web.UI.WebControls.FormView.ItemDeleting>事件。 它通常由控件开发人员在扩展<xref:System.Web.UI.WebControls.FormView>类。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemDeleting%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">此方法在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件未绑定到数据源控件、用户未取消删除操作以及事件处理程序没有为事件注册时调用。</exception>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewDeleteEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemInserted">
      <MemberSignature Language="C#" Value="protected virtual void OnItemInserted (System.Web.UI.WebControls.FormViewInsertedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemInserted(class System.Web.UI.WebControls.FormViewInsertedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemInserted (e As FormViewInsertedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemInserted(System::Web::UI::WebControls::FormViewInsertedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewInsertedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewInsertedEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemInserted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemInserted%2A>方法由调用<xref:System.Web.UI.WebControls.FormView>控件以引发<xref:System.Web.UI.WebControls.FormView.ItemInserted>事件。 它通常由控件开发人员在扩展<xref:System.Web.UI.WebControls.FormView>类。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemInserted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserted" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemInserting">
      <MemberSignature Language="C#" Value="protected virtual void OnItemInserting (System.Web.UI.WebControls.FormViewInsertEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemInserting(class System.Web.UI.WebControls.FormViewInsertEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemInserting (e As FormViewInsertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemInserting(System::Web::UI::WebControls::FormViewInsertEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewInsertEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewInsertEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemInserting" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemInserting%2A>方法由调用<xref:System.Web.UI.WebControls.FormView>控件以引发<xref:System.Web.UI.WebControls.FormView.ItemInserting>事件。 它通常由控件开发人员在扩展<xref:System.Web.UI.WebControls.FormView>类。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemInserting%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">此方法在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件未绑定到数据源控件、用户未取消插入操作以及事件处理程序没有为事件注册时调用。</exception>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserting" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnItemUpdated (System.Web.UI.WebControls.FormViewUpdatedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemUpdated(class System.Web.UI.WebControls.FormViewUpdatedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemUpdated (e As FormViewUpdatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemUpdated(System::Web::UI::WebControls::FormViewUpdatedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemUpdated%2A>方法由调用<xref:System.Web.UI.WebControls.FormView>控件以引发<xref:System.Web.UI.WebControls.FormView.ItemUpdated>事件。 它通常由控件开发人员在扩展<xref:System.Web.UI.WebControls.FormView>类。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemUpdated%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnItemUpdating (System.Web.UI.WebControls.FormViewUpdateEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemUpdating(class System.Web.UI.WebControls.FormViewUpdateEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemUpdating (e As FormViewUpdateEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemUpdating(System::Web::UI::WebControls::FormViewUpdateEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewUpdateEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewUpdateEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemUpdating%2A>方法由调用<xref:System.Web.UI.WebControls.FormView>控件以引发<xref:System.Web.UI.WebControls.FormView.ItemUpdating>事件。 它通常由控件开发人员在扩展<xref:System.Web.UI.WebControls.FormView>类。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemUpdating%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">此方法在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件未绑定到数据源控件、用户未取消更新操作以及事件处理程序没有为事件注册时调用。</exception>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdateEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnModeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnModeChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ModeChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnModeChanged%2A>方法由调用<xref:System.Web.UI.WebControls.FormView>控件以引发<xref:System.Web.UI.WebControls.FormView.ModeChanged>事件。 它通常由控件开发人员在扩展<xref:System.Web.UI.WebControls.FormView>类。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.FormView.OnModeChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanged" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnModeChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnModeChanging (System.Web.UI.WebControls.FormViewModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnModeChanging(class System.Web.UI.WebControls.FormViewModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnModeChanging (e As FormViewModeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnModeChanging(System::Web::UI::WebControls::FormViewModeEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewModeEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnModeChanging%2A>方法由调用<xref:System.Web.UI.WebControls.FormView>控件以引发<xref:System.Web.UI.WebControls.FormView.ModeChanging>事件。 它通常由控件开发人员在扩展<xref:System.Web.UI.WebControls.FormView>类。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.FormView.OnModeChanging%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">此方法在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件未绑定到数据源控件、未取消模式更改以及事件处理程序没有为事件注册时调用。</exception>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanging" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewModeEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnPageIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPageIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPageIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPageIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPageIndexChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnPageIndexChanged%2A>方法由调用<xref:System.Web.UI.WebControls.FormView>控件以引发<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>事件。 它通常由控件开发人员在扩展<xref:System.Web.UI.WebControls.FormView>类。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.FormView.OnPageIndexChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnPageIndexChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPageIndexChanging (System.Web.UI.WebControls.FormViewPageEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPageIndexChanging(class System.Web.UI.WebControls.FormViewPageEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPageIndexChanging (e As FormViewPageEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPageIndexChanging(System::Web::UI::WebControls::FormViewPageEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewPageEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewPageEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnPageIndexChanging%2A>方法由调用<xref:System.Web.UI.WebControls.FormView>控件以引发<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>事件。 它通常由控件开发人员在扩展<xref:System.Web.UI.WebControls.FormView>类。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.FormView.OnPageIndexChanging%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">此方法在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件未绑定到数据源控件、未取消分页操作以及事件处理程序没有为事件注册时调用。</exception>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewPageEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="PageCount">
      <MemberSignature Language="C#" Value="public virtual int PageCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.PageCount" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PageCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int PageCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取显示数据源中的所有记录所需要的总页数。</summary>
        <value>基础数据源中的项数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当启用分页功能 (时<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>属性设置为`true`)，使用<xref:System.Web.UI.WebControls.FormView.PageCount%2A>属性来确定的基础数据源中的记录总数。  
  
> [!NOTE]
>  因为<xref:System.Web.UI.WebControls.FormView>控件显示一次只有一条记录时，此值对应于数据源中显示的每个记录所需的页的总数。 数据绑定发生后，此值不准确之前。  
  
 若要确定当前记录从基础数据源的索引，请使用<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.PageCount%2A>属性来确定在控件中显示的记录的总数。  
  
 [!code-aspx-csharp[FormViewPagerTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPagerTemplate/CS/formviewpagertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewPagerTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPagerTemplate/VB/formviewpagertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="PageIndex">
      <MemberSignature Language="C#" Value="public virtual int PageIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.PageIndex" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PageIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int PageIndex { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置所显示的页的索引。</summary>
        <value>正从基础数据源显示在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的数据项的从零开始的索引。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当启用分页功能 (时<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>属性设置为`true`)，使用<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>属性来确定当前显示的记录的索引。 你还可以使用此属性以编程方式更改所显示的记录。  
  
> [!NOTE]
>  启用分页功能后，你还可以使用此属性来确定显示，则记录的页号但是，请注意，此属性是从零开始。  
  
 若要确定数据源中的项的总数目，使用<xref:System.Web.UI.WebControls.FormView.PageCount%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>属性来确定所显示的记录的页索引。  
  
 [!code-aspx-csharp[FormViewPagerTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPagerTemplate/CS/formviewpagertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewPagerTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPagerTemplate/VB/formviewpagertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所选值小于 -1。</exception>
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="PageIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PageIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PageIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PageIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PageIndexChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Web.UI.WebControls.FormView.PageIndex" /> 属性的值在分页操作后更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>控件都将引发<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>事件时的页导航按钮 (带有按钮其`CommandName`属性设置为"Page") 在控件内单击时，但之后<xref:System.Web.UI.WebControls.FormView>控件处理的分页操作。 这使您可以提供每次此事件发生时执行的自定义的例程的事件处理方法。  
  
> [!NOTE]
>  以编程方式设置时，将不会引发此事件<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>属性。  
  
 页导航按钮通常位于的页导航行<xref:System.Web.UI.WebControls.FormView>控件。 此事件通常用于同步<xref:System.Web.UI.WebControls.FormView>控件替换为<xref:System.Web.UI.WebControls.GridView>控件或设置的行为<xref:System.Web.UI.WebControls.FormView>分页操作完成后的控件。  
  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>事件，将返回<xref:System.Web.UI.WebControls.FormView>到只读模式下，当用户导航到另一条记录。  
  
 [!code-aspx-csharp[FormViewPageIndexChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPageIndexChanged/CS/formviewpageindexchangedcs.aspx#1)]
 [!code-aspx-vb[FormViewPageIndexChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPageIndexChanged/VB/formviewpageindexchangedvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.EventArgs" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="PageIndexChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewPageEventHandler PageIndexChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewPageEventHandler PageIndexChanging" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PageIndexChanging As FormViewPageEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewPageEventHandler ^ PageIndexChanging;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewPageEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Web.UI.WebControls.FormView.PageIndex" /> 属性的值在分页操作前更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>控件都将引发<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>事件时的页导航按钮 (带有按钮其`CommandName`属性设置为"Page") 在控件内单击时，之前<xref:System.Web.UI.WebControls.FormView>控件处理的分页操作。 这使您可以提供执行自定义的例程，每次此事件发生时取消的分页操作，如事件处理方法。  
  
> [!NOTE]
>  以编程方式设置时，将不会引发此事件<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>属性。  
  
 页导航按钮通常位于的页导航行<xref:System.Web.UI.WebControls.FormView>控件。  
  
 A<xref:System.Web.UI.WebControls.FormViewPageEventArgs>对象传递给事件处理方法，以便您可以确定用户选择的页的索引，还可以指示是否应取消的分页操作。 若要确定用户选择的页的索引，请使用<xref:System.Web.UI.WebControls.FormViewPageEventArgs.NewPageIndex%2A>属性。 若要取消的分页操作，<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性<xref:System.Web.UI.WebControls.FormViewPageEventArgs>对象传递给`true`。  
  
 有关处理事件的详细信息，请参阅[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>事件取消分页操作。  
  
> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[FormViewPageEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPageEventArgs/CS/formviewmodeeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewPageEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPageEventArgs/VB/formviewmodeeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewPageEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewPageEventHandler" />
        <altmember cref="P:System.ComponentModel.CancelEventArgs.Cancel" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewPageEventArgs.NewPageIndex" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="PagerSettings">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.PagerSettings PagerSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.PagerSettings PagerSettings" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.PagerSettings" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PagerSettings As PagerSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::PagerSettings ^ PagerSettings { System::Web::UI::WebControls::PagerSettings ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.PagerSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.PagerSettings" /> 对象的引用，使用该对象可以设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的页导航按钮的属性。</summary>
        <value>一个对 <see cref="T:System.Web.UI.WebControls.PagerSettings" /> 的引用，使用该对象可以设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的页导航按钮的属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.PagerSettings%2A>属性控制的设置中的页导航行<xref:System.Web.UI.WebControls.FormView>控件。 启用分页功能时，将显示的页导航行 (时<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>属性设置为`true`)，并包含允许用户导航到控件中的不同记录的控件。 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.PagerSettings>对象返回。 可以在窗体以声明方式设置了属性`Property-Subproperty`，其中`Subproperty`是的一个属性<xref:System.Web.UI.WebControls.PagerSettings>对象 (例如， `PagerSettings-Mode`)。 属性也可以设置以编程方式在窗体中`Property.Subproperty`(例如， `PagerSettings.Mode`)。 常用设置通常包括的页导航行显示模式和自定义文本或导航控件的图像。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.PagerSettings%2A>属性指定的页导航行的属性。  
  
 [!code-aspx-csharp[FormViewAllowPaging#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewAllowPaging/CS/formviewallowpagingcs.aspx#1)]
 [!code-aspx-vb[FormViewAllowPaging#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewAllowPaging/VB/formviewallowpagingvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="PagerStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle PagerStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle PagerStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.PagerStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagerStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ PagerStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，使用该对象可以设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的页导航行的外观。</summary>
        <value>一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 的引用，该对象表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中页导航行的样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>属性来控制中的页导航行的外观<xref:System.Web.UI.WebControls.FormView>控件。 启用分页功能时，将显示的页导航行 (时<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>属性设置为`true`)，并包含允许用户导航到不同的页面控件中的控件。 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.TableItemStyle>对象返回。 可以使用以下方法之一，以声明方式设置属性：  
  
-   将属性置于开始标记中<xref:System.Web.UI.WebControls.FormView>窗体中的控制`Property-Subproperty`，其中`Subproperty`是的一个属性<xref:System.Web.UI.WebControls.TableItemStyle>对象 (例如， `PagerStyle-ForeColor`)。  
  
-   嵌套`<PagerRowStyle>`元素开始标记和结束标记之间<xref:System.Web.UI.WebControls.FormView>控件。  
  
 属性也可以设置以编程方式在窗体中`Property.Subproperty`(例如， `PagerStyle.ForeColor`)。 常用设置通常包括自定义的背景色、 前景颜色和字体属性。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>属性指定的页导航行的样式设置。  
  
 [!code-aspx-csharp[FormViewAllowPaging#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewAllowPaging/CS/formviewallowpagingcs.aspx#1)]
 [!code-aspx-vb[FormViewAllowPaging#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewAllowPaging/VB/formviewallowpagingvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="PagerTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate PagerTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate PagerTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PagerTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ PagerTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中页导航行的自定义内容。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，包含页导航行的自定义内容。 默认值为 null，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 页导航行显示在<xref:System.Web.UI.WebControls.FormView>控制当启用分页功能 (时<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>属性设置为 true)。 页导航行包含允许用户导航到不同的页面控件中的控件。 而不是使用内置的页导航行用户界面 (UI)，你可以定义自己的 UI，通过使用<xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>属性。  
  
> [!NOTE]
>  当<xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>属性设置它重写内置页导航行 UI。  
  
 若要指定自定义模板的页导航行，第一次将`<PagerTemplate>`开始和结束标记之间的标记<xref:System.Web.UI.WebControls.FormView>控件。 然后可以列出在开始和结束之间模板的内容`<PagerTemplate>`标记。 若要控制的页导航行的外观，使用<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>属性。  
  
 通常情况下，将按钮控件添加到页导航模板来执行分页操作。 <xref:System.Web.UI.WebControls.FormView>控件将执行的分页操作使用的按钮控件时其`CommandName`单击属性设置为"Page"。 按钮的`CommandArgument`属性确定要执行的分页操作的类型。 下表列出了支持的命令参数值<xref:System.Web.UI.WebControls.FormView>控件。  
  
|CommandArgument 值|描述|  
|---------------------------|-----------------|  
|"下一步"|导航至下一页。|  
|"上一步"|导航到以前的页面。|  
|"First"|导航至第一页。|  
|"最后一个"|导航至最后一页。|  
|整数值|导航到指定的页码。|  
  
   
  
## Examples  
 下面的示例演示如何定义自定义页导航模板。  
  
 [!code-aspx-csharp[FormViewPagerTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPagerTemplate/CS/formviewpagertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewPagerTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPagerTemplate/VB/formviewpagertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="PerformDataBinding">
      <MemberSignature Language="C#" Value="protected internal override void PerformDataBinding (System.Collections.IEnumerable data);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void PerformDataBinding(class System.Collections.IEnumerable data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.PerformDataBinding(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub PerformDataBinding (data As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void PerformDataBinding(System::Collections::IEnumerable ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="data">表示数据源的 <see cref="T:System.Collections.IEnumerable" />。</param>
        <summary>将指定数据源绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.PerformDataBinding%2A>方法是由调用一个帮助器方法<xref:System.Web.UI.WebControls.FormView>控件绑定到控件的指定的数据源。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>因为<see cref="M:System.Web.UI.WebControls.BaseDataBoundControl.DataBind" />方法密封的如果你需要执行的任何其他任务，绑定数据时，应重写此方法。</para>
        </block>
        <altmember cref="T:System.Collections.IEnumerable" />
      </Docs>
    </Member>
    <Member MemberName="PrepareControlHierarchy">
      <MemberSignature Language="C#" Value="protected internal virtual void PrepareControlHierarchy ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void PrepareControlHierarchy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.PrepareControlHierarchy" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub PrepareControlHierarchy ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void PrepareControlHierarchy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的控件层次结构。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.PrepareControlHierarchy%2A>方法是由调用一个帮助器方法<xref:System.Web.UI.WebControls.FormView>控件设置控制层次结构中<xref:System.Web.UI.WebControls.FormView>控制之前呈现控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostBackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostBackEvent(System::String ^ eventArgument);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">为引发的一个或多个事件创建 <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> 时所使用的事件参数。</param>
        <summary>当 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件回发到服务器时引发此控件的合适的事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 页面调用<xref:System.Web.UI.WebControls.FormView.RaisePostBackEvent%2A>方法回发事件发生时将引发相应事件<xref:System.Web.UI.WebControls.FormView>控件。 加载和更改通知都完成时之后, 但尚未预呈现发生之前，此调用是在页的生命周期中。 实现此方法创建<xref:System.Web.UI.WebControls.CommandEventArgs>引发的事件的对象。  
  
> [!NOTE]
>  此方法主要由控件开发人员来扩展<xref:System.Web.UI.WebControls.FormView>控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.CommandEventArgs" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="M:System.Web.UI.Page.RaisePostBackEvent(System.Web.UI.IPostBackEventHandler,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">一个 <see cref="T:System.Web.UI.HtmlTextWriter" />，其中包含要在客户端上呈现内容的输出流。</param>
        <summary>在客户端上显示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.Render%2A>方法用于呈现客户端的浏览器使用指定的服务器控件内容<xref:System.Web.UI.HtmlTextWriter>对象。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderOuterTable">
      <MemberSignature Language="C#" Value="public virtual bool RenderOuterTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderOuterTable" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.RenderOuterTable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RenderOuterTable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RenderOuterTable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IRenderOuterTableControl.RenderOuterTable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示控件是否将呈现的 HTML 包含在 <see langword="table" /> 元素中，以便应用内联样式。</summary>
        <value>如果控件将呈现的 HTML 包含在 <see langword="true" /> 元素中，则为 <see langword="table" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为了使内联样式属性，如<xref:System.Web.UI.WebControls.WebControl.ForeColor%2A>适用于所有控件呈现的 HTML，ASP.NET 将中呈现的 HTML`table`元素。 如果不希望外部`table`元素呈现，将此属性设置为`false`。 在这种情况下，如果你尝试设置应用于整个控件的样式属性的内联，则引发异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Row">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow Row { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FormViewRow Row" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.Row" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Row As FormViewRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::FormViewRow ^ Row { System::Web::UI::WebControls::FormViewRow ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 控件中的数据行的 <see cref="T:System.Web.UI.WebControls.FormView" /> 对象。</summary>
        <value>表示 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 控件中的数据行的 <see cref="T:System.Web.UI.WebControls.FormView" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.Row%2A>属性以编程方式访问<xref:System.Web.UI.WebControls.FormViewRow>表示的数据行的对象。 数据行包含在基于为当前模式呈现的模板的不同内容 (通过指定<xref:System.Web.UI.WebControls.FormView.CurrentMode%2A>属性)。 你只能访问当前模式的模板的内容。 下表显示每种模式使用哪个模板。  
  
|模式|呈现的模板|  
|----------|-----------------------|  
|Edit|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|  
|Insert|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|  
|只读|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView.Row%2A>属性是之后才可用<xref:System.Web.UI.WebControls.FormView>控件创建中的数据行<xref:System.Web.UI.WebControls.FormView.ItemCreated>事件。  
  
 当你需要以编程方式操作数据行，例如在添加自定义内容时，通常使用此属性。 对任何修改<xref:System.Web.UI.WebControls.FormView.Row%2A>属性必须执行后<xref:System.Web.UI.WebControls.FormView>控件已经被数据绑定; 否则为<xref:System.Web.UI.WebControls.FormView>控件将覆盖任何更改。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.Row%2A>属性来访问期间的数据行的属性<xref:System.Web.UI.WebControls.FormView.ItemCreated>事件。  
  
 [!code-aspx-csharp[FormViewRow#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewRow/CS/formviewrowcs.aspx#1)]
 [!code-aspx-vb[FormViewRow#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewRow/VB/formviewrowvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewRow" />
      </Docs>
    </Member>
    <Member MemberName="RowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle RowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle RowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.RowStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RowStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ RowStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，使用该对象可以设置在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于只读模式时该控件中的数据行的外观。</summary>
        <value>一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 的引用，该对象表示在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于只读模式时该控件中的数据行的样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.FormView.RowStyle%2A>属性来控制数据的外观时行<xref:System.Web.UI.WebControls.FormView>控件是否处于只读 （显示） 模式。 当<xref:System.Web.UI.WebControls.FormView>控件是否处于只读模式时，数据行显示由指定的用户定义的内容<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>属性。 此属性是只读的;但是，可以设置的属性<xref:System.Web.UI.WebControls.TableItemStyle>对象返回。 可以使用以下方法之一，以声明方式设置属性：  
  
-   将属性置于开始标记中<xref:System.Web.UI.WebControls.FormView>窗体中的控制`Property-Subproperty`，其中`Subproperty`是的一个属性<xref:System.Web.UI.WebControls.TableItemStyle>对象 (例如， `RowStyle-ForeColor`)。  
  
-   嵌套`<RowStyle>`元素开始标记和结束标记之间<xref:System.Web.UI.WebControls.FormView>控件。  
  
 属性也可以设置以编程方式在窗体中`Property.Subproperty`(例如， `RowStyle.ForeColor`)。 常用设置通常包括自定义的背景色、 前景颜色和字体属性。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.RowStyle%2A>属性指定数据的自定义样式时行<xref:System.Web.UI.WebControls.FormView>控件是否处于只读模式。  
  
 [!code-aspx-csharp[FormViewEditItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEditItemTemplate/CS/formviewedititemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEditItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEditItemTemplate/VB/formviewedititemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected internal override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.SaveControlState" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function SaveControlState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Object ^ SaveControlState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存需要保持的 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件属性的状态（即使在 <see cref="P:System.Web.UI.Control.EnableViewState" /> 属性设置为 <see langword="false" /> 时）。</summary>
        <returns>返回服务器控件的当前视图状态。 如果没有与该控件关联的视图状态，则此方法返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于保存的状态<xref:System.Web.UI.WebControls.FormView>保持不变，所需的控件属性，即使<xref:System.Web.UI.Control.EnableViewState%2A?displayProperty=nameWithType>属性设置为`false`。  
  
> [!NOTE]
>  此方法主要由控件开发人员来扩展<xref:System.Web.UI.WebControls.FormView>控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.EnableViewState" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的当前视图状态。</summary>
        <returns>它包含已保存的 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的状态的 <see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.SaveViewState%2A>方法是由调用一个帮助器方法<xref:System.Web.UI.WebControls.FormView>控件保存的控件状态。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedValue">
      <MemberSignature Language="C#" Value="public object SelectedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.SelectedValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SelectedValue { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的当前记录的数据键值。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的当前记录的数据键值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>设置属性，<xref:System.Web.UI.WebControls.FormView>控件自动创建<xref:System.Web.UI.WebControls.DataKey>对象，其中包含的字段或字段中列出的键/值对<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>当前记录的属性。 <xref:System.Web.UI.WebControls.DataKey>对象表示的主键字段或当前记录的字段，并存储在<xref:System.Web.UI.WebControls.FormView.DataKey%2A>属性。 而不是使用<xref:System.Web.UI.WebControls.FormView.DataKey%2A>属性来访问数据的密钥值，你可以使用<xref:System.Web.UI.WebControls.FormView.SelectedValue%2A>作为快捷方式的属性。  
  
> [!NOTE]
>  当<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>属性列出多个字段，则此属性返回列出的第一个字段的值。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.SelectedValue%2A>属性来确定键字段的值。  
  
 [!code-aspx-csharp[FormViewSelectedValue#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewSelectedValue/CS/formviewselectedvaluecs.aspx#1)]
 [!code-aspx-vb[FormViewSelectedValue#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewSelectedValue/VB/formviewselectedvaluevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.DataKey" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataKey" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" />
      </Docs>
    </Member>
    <Member MemberName="SetPageIndex">
      <MemberSignature Language="C#" Value="public void SetPageIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPageIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.SetPageIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPageIndex (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPageIndex(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要设置的索引。</param>
        <summary>设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中当前显示页面的索引。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataItemContainer.DataItemIndex">
      <MemberSignature Language="C#" Value="int System.Web.UI.IDataItemContainer.DataItemIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Web.UI.IDataItemContainer.DataItemIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DataItemIndex" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DataItemIndex As Integer Implements IDataItemContainer.DataItemIndex" />
      <MemberSignature Language="C++ CLI" Value="property int System.Web.UI.IDataItemContainer.DataItemIndex { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IDataItemContainer.DataItemIndex</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有关此成员的说明，请参阅 <see cref="P:System.Web.UI.IDataItemContainer.DataItemIndex" />。</summary>
        <value>一个表示显示索引的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例强制转换为 <xref:System.Web.UI.IDataItemContainer> 接口时使用。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataItemContainer" />
        <altmember cref="P:System.Web.UI.IDataItemContainer.DataItemIndex" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataItemContainer.DisplayIndex">
      <MemberSignature Language="C#" Value="int System.Web.UI.IDataItemContainer.DisplayIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Web.UI.IDataItemContainer.DisplayIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DisplayIndex" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DisplayIndex As Integer Implements IDataItemContainer.DisplayIndex" />
      <MemberSignature Language="C++ CLI" Value="property int System.Web.UI.IDataItemContainer.DisplayIndex { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IDataItemContainer.DisplayIndex</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有关此成员的说明，请参阅 <see cref="P:System.Web.UI.IDataItemContainer.DisplayIndex" />。</summary>
        <value>始终返回 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例强制转换为 <xref:System.Web.UI.IDataItemContainer> 接口时使用。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataItemContainer" />
        <altmember cref="P:System.Web.UI.IDataItemContainer.DisplayIndex" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostBackEvent (eventArgument As String) Implements IPostBackEventHandler.RaisePostBackEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System::String ^ eventArgument) = System::Web::UI::IPostBackEventHandler::RaisePostBackEvent;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">该事件的参数。</param>
        <summary>当 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件回发到服务器时引发此控件的事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 页面调用<xref:System.Web.UI.WebControls.FormView.System%23Web%23UI%23IPostBackEventHandler%23RaisePostBackEvent%2A>回发事件发生时的方法。 加载和更改通知都完成时之后, 但在呈现页之前，此调用是在页的生命周期中。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataKeyNames">
      <MemberSignature Language="C#" Value="string[] System.Web.UI.WebControls.IDataBoundControl.DataKeyNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] System.Web.UI.WebControls.IDataBoundControl.DataKeyNames" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataKeyNames" />
      <MemberSignature Language="VB.NET" Value=" Property DataKeyNames As String() Implements IDataBoundControl.DataKeyNames" />
      <MemberSignature Language="C++ CLI" Value="property cli::array &lt;System::String ^&gt; ^ System.Web.UI.WebControls.IDataBoundControl.DataKeyNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundControl.DataKeyNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个数组，该数组包含显示在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的项的主键字段的名称。</summary>
        <value>一个数组，其中包含显示在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的项的主键字段的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例强制转换为 <xref:System.Web.UI.WebControls.IDataBoundControl> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataMember">
      <MemberSignature Language="C#" Value="string System.Web.UI.WebControls.IDataBoundControl.DataMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.UI.WebControls.IDataBoundControl.DataMember" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataMember" />
      <MemberSignature Language="VB.NET" Value=" Property DataMember As String Implements IDataBoundControl.DataMember" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System.Web.UI.WebControls.IDataBoundControl.DataMember { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundControl.DataMember</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当数据源包含多个数据项列表时，获取或设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件绑定到的数据项列表的名称。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.FormView" /> 控件绑定到的数据项列表的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例强制转换为 <xref:System.Web.UI.WebControls.IDataBoundControl> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataSource">
      <MemberSignature Language="C#" Value="object System.Web.UI.WebControls.IDataBoundControl.DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Web.UI.WebControls.IDataBoundControl.DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSource" />
      <MemberSignature Language="VB.NET" Value=" Property DataSource As Object Implements IDataBoundControl.DataSource" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Web.UI.WebControls.IDataBoundControl.DataSource { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundControl.DataSource</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件所检索到的数据列表的对象。</summary>
        <value>包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件所检索到的数据列表的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例强制转换为 <xref:System.Web.UI.WebControls.IDataBoundControl> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataSourceID">
      <MemberSignature Language="C#" Value="string System.Web.UI.WebControls.IDataBoundControl.DataSourceID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.UI.WebControls.IDataBoundControl.DataSourceID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceID" />
      <MemberSignature Language="VB.NET" Value=" Property DataSourceID As String Implements IDataBoundControl.DataSourceID" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System.Web.UI.WebControls.IDataBoundControl.DataSourceID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundControl.DataSourceID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置数据源控件的 ID，该数据源控件包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件所检索到的数据项列表。</summary>
        <value>数据源控件的 ID，该数据源控件包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件所检索到的数据项列表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例强制转换为 <xref:System.Web.UI.WebControls.IDataBoundControl> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataSourceObject">
      <MemberSignature Language="C#" Value="System.Web.UI.IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceObject" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DataSourceObject As IDataSource Implements IDataBoundControl.DataSourceObject" />
      <MemberSignature Language="C++ CLI" Value="property System::Web::UI::IDataSource ^ System.Web.UI.WebControls.IDataBoundControl.DataSourceObject { System::Web::UI::IDataSource ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundControl.DataSourceObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IDataSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取数据源对象，该数据源对象包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件所检索到的数据项列表。</summary>
        <value>数据源对象的，该数据源对象包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件所检索到的数据项列表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例强制转换为 <xref:System.Web.UI.WebControls.IDataBoundControl> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundItemControl.DataKey">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.DataKey System.Web.UI.WebControls.IDataBoundItemControl.DataKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKey System.Web.UI.WebControls.IDataBoundItemControl.DataKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#DataKey" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DataKey As DataKey Implements IDataBoundItemControl.DataKey" />
      <MemberSignature Language="C++ CLI" Value="property System::Web::UI::WebControls::DataKey ^ System.Web.UI.WebControls.IDataBoundItemControl.DataKey { System::Web::UI::WebControls::DataKey ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundItemControl.DataKey</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对象，该对象表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中行的数据键值。</summary>
        <value>表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中行的数据键值的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例强制转换为 <xref:System.Web.UI.WebControls.IDataBoundControl> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundItemControl.Mode">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.Mode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#Mode" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Mode As DataBoundControlMode Implements IDataBoundItemControl.Mode" />
      <MemberSignature Language="C++ CLI" Value="property System::Web::UI::WebControls::DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.Mode { System::Web::UI::WebControls::DataBoundControlMode get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundItemControl.Mode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataBoundControlMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的当前模式。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的当前模式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例强制转换为 <xref:System.Web.UI.WebControls.IDataBoundControl> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions">
      <MemberSignature Language="C#" Value="System.Web.UI.PostBackOptions IPostBackContainer.GetPostBackOptions (System.Web.UI.WebControls.IButtonControl buttonControl);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.PostBackOptions System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(class System.Web.UI.WebControls.IButtonControl buttonControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IPostBackContainer#GetPostBackOptions(System.Web.UI.WebControls.IButtonControl)" />
      <MemberSignature Language="VB.NET" Value="Function GetPostBackOptions (buttonControl As IButtonControl) As PostBackOptions Implements IPostBackContainer.GetPostBackOptions" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Web::UI::PostBackOptions ^ System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(System::Web::UI::WebControls::IButtonControl ^ buttonControl) = System::Web::UI::WebControls::IPostBackContainer::GetPostBackOptions;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(System.Web.UI.WebControls.IButtonControl)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.PostBackOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buttonControl" Type="System.Web.UI.WebControls.IButtonControl" />
      </Parameters>
      <Docs>
        <param name="buttonControl">将页回发给服务器的按钮控件。</param>
        <summary>确定 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的回发事件选项。</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的回发事件选项。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.System%23Web%23UI%23WebControls%23IPostBackContainer%23GetPostBackOptions%2A>方法是由调用一个帮助器方法<xref:System.Web.UI.WebControls.FormView>控件创建<xref:System.Web.UI.PostBackOptions>包含控件的回发事件选项的对象。 <xref:System.Web.UI.PostBackOptions>对象通常用作参数<xref:System.Web.UI.Page.GetPostBackEventReference%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buttonControl" /> 参数中包含的对象为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="buttonControl" /> 的 <see cref="P:System.Web.UI.WebControls.IButtonControl.CausesValidation" /> 属性为 <see langword="true" />。</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.TagKey" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property TagKey As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Web::UI::HtmlTextWriterTag TagKey { System::Web::UI::HtmlTextWriterTag get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 值。</summary>
        <value>始终返回 <see langword="HtmlTextWriterTag.Table" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.TagKey%2A>属性允许要写入的相应 HTML 标记的输出流<xref:System.Web.UI.WebControls.FormView>控件。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>你可以重写此属性指定的<see cref="T:System.Web.UI.HtmlTextWriterTag" />要使用为您派生的控件的值。</para>
        </block>
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.TagKey" />
      </Docs>
    </Member>
    <Member MemberName="TopPagerRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow TopPagerRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FormViewRow TopPagerRow" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TopPagerRow As FormViewRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::FormViewRow ^ TopPagerRow { System::Web::UI::WebControls::FormViewRow ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示在 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 控件顶部显示的页导航行的 <see cref="T:System.Web.UI.WebControls.FormView" /> 对象。</summary>
        <value>一个 <see cref="T:System.Web.UI.WebControls.FormViewRow" />，表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的顶部页导航行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 启用分页后 (时<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>属性设置为`true`)，一个称为的页导航行附加行会自动显示在<xref:System.Web.UI.WebControls.FormView>控件。 页导航行包含允许用户导航到其他记录，并且可以显示在顶部、 底部，或同时的顶部和底部的控件的控件。 使用<xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A>属性以编程方式访问<xref:System.Web.UI.WebControls.FormViewRow>对象，表示中的顶部页导航行<xref:System.Web.UI.WebControls.FormView>控件。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A>属性是之后才可用<xref:System.Web.UI.WebControls.FormView>控件创建中的顶部页导航行<xref:System.Web.UI.WebControls.FormView.ItemCreated>事件。  
  
 当你需要以编程方式操作顶部页导航行，例如在添加自定义内容时，通常使用此属性。 对任何修改<xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A>属性必须执行后<xref:System.Web.UI.WebControls.FormView>控件已经被绑定到数据; 否则为<xref:System.Web.UI.WebControls.FormView>控件将覆盖任何更改。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A>属性来访问在顶部显示的页导航行<xref:System.Web.UI.WebControls.FormView>控件。 包括其他内容，然后将更新的页导航行。  
  
 [!code-aspx-csharp[FormViewTopPagerRow#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewTopPagerRow/CS/formviewtoppagerrowcs.aspx#1)]
 [!code-aspx-vb[FormViewTopPagerRow#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewTopPagerRow/VB/formviewtoppagerrowvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.AllowPaging" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemCreated" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>标记开始跟踪并将视图状态更改保存到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的起始点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重写此方法以将标记控件的视图状态的一部分开始对控件的跟踪并保存更改的起始点。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="P:System.Web.UI.Control.ViewState" />
      </Docs>
    </Member>
    <Member MemberName="UpdateItem">
      <MemberSignature Language="C#" Value="public virtual void UpdateItem (bool causesValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateItem(bool causesValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.UpdateItem(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UpdateItem (causesValidation As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void UpdateItem(bool causesValidation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="causesValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="causesValidation">如果调用此方法时执行页验证，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>更新数据源中的当前记录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Web.UI.WebControls.FormView>控件处于编辑模式，请使用<xref:System.Web.UI.WebControls.FormView.UpdateItem%2A>方法来以编程方式更新数据源中的当前记录。 此方法通常用时你需要更新的当前记录从外部<xref:System.Web.UI.WebControls.FormView>控制，例如页上的其他控件。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView>调用; 否则为此方法时，控件必须处于编辑模式<xref:System.Web.HttpException>引发。  
  
 若要指定是否在执行更新操作之前执行页验证，使用`causesValidation`参数。 调用此方法也会引发<xref:System.Web.UI.WebControls.FormView.ItemUpdated>和<xref:System.Web.UI.WebControls.FormView.ItemUpdating>事件。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.FormView.UpdateItem%2A>方法来以编程方式更新中的当前记录<xref:System.Web.UI.WebControls.FormView>数据源中的控件。  
  
 [!code-aspx-csharp[FormViewUpdateItem#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdateItem/CS/formviewupdateitemcs.aspx#1)]
 [!code-aspx-vb[FormViewUpdateItem#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdateItem/VB/formviewupdateitemvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">此方法在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件不处于编辑模式时调用。  - 或 -  与 <see cref="T:System.Web.UI.DataSourceView" /> 控件相关联的 <see cref="T:System.Web.UI.WebControls.FormView" /> 对象为 null。</exception>
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.DeleteItem" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.InsertItem(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="UpdateMethod">
      <MemberSignature Language="C#" Value="public virtual string UpdateMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.UpdateMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UpdateMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件执行更新操作时调用的页面上的方法的名称。</summary>
        <value>当控件执行更新操作时，该页中被调用的方法的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 Web 窗体中使用模型绑定教程系列，请参阅[模型绑定和 Web 窗体](/aspnet/web-forms/overview/presenting-and-managing-data/model-binding/retrieving-data)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>