<Type Name="BoundField" FullName="System.Web.UI.WebControls.BoundField">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6600e0e338ddf9daf33481b18422138d1c2ad0bf" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30600271" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BoundField : System.Web.UI.WebControls.DataControlField" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BoundField extends System.Web.UI.WebControls.DataControlField" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.BoundField" />
  <TypeSignature Language="VB.NET" Value="Public Class BoundField&#xA;Inherits DataControlField" />
  <TypeSignature Language="C++ CLI" Value="public ref class BoundField : System::Web::UI::WebControls::DataControlField" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.DataControlField</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示数据绑定控件中以文本形式显示的字段。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BoundField>类由数据绑定控件 (如<xref:System.Web.UI.WebControls.GridView>和<xref:System.Web.UI.WebControls.DetailsView>) 将显示为文本字段的值。 <xref:System.Web.UI.WebControls.BoundField>根据使用它的数据绑定控件以不同方式显示对象。 例如，<xref:System.Web.UI.WebControls.GridView>控制显示<xref:System.Web.UI.WebControls.BoundField>对象为一列，而<xref:System.Web.UI.WebControls.DetailsView>控件将其显示为一行。  
  
 若要指定要在中显示的字段<xref:System.Web.UI.WebControls.BoundField>对象，设置<xref:System.Web.UI.WebControls.BoundField.DataField%2A>属性字段的名称。 在字段的值可以是 HTML 编码显示通过设置之前<xref:System.Web.UI.WebControls.BoundField.HtmlEncode%2A>属性`true`。 你可以通过设置应用于字段的值的自定义的格式设置字符串<xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A>属性。 当<xref:System.Web.UI.WebControls.BoundField.HtmlEncode%2A>属性是`true`，自定义格式字符串中使用的字段的编码的字符串值。 默认情况下，格式设置字符串被应用于字段值中，仅当数据绑定控件处于只读模式。 若要将格式设置字符串应用于值显示数据绑定控件处于编辑模式时，将设置<xref:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode%2A>属性`true`。 如果字段的值为 null，则可以通过设置显示的自定义标题<xref:System.Web.UI.WebControls.BoundField.NullDisplayText%2A>属性。 <xref:System.Web.UI.WebControls.BoundField>对象可以还自动将转换为空字符串 ("") 通过设置字段值为 null 值<xref:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull%2A>属性`true`。  
  
 可以隐藏<xref:System.Web.UI.WebControls.BoundField>通过设置数据绑定控件中的对象<xref:System.Web.UI.WebControls.DataControlField.Visible%2A>属性`false`。 若要防止在编辑模式中被修改的字段的值，设置<xref:System.Web.UI.WebControls.BoundField.ReadOnly%2A>属性`true`。 在将记录插入该支持数据绑定控件 (如<xref:System.Web.UI.WebControls.DetailsView>控件)，可以隐藏<xref:System.Web.UI.WebControls.BoundField>对象通过设置<xref:System.Web.UI.WebControls.DataControlField.InsertVisible%2A>属性`false`。 通常这是当你想要隐藏在插入模式下自动生成的键字段。  
  
 你可以自定义的标头和表尾部分<xref:System.Web.UI.WebControls.BoundField>对象。 若要在页眉或页脚部分中显示标题，将设置<xref:System.Web.UI.WebControls.DataControlField.HeaderText%2A>或<xref:System.Web.UI.WebControls.DataControlField.FooterText%2A>属性，分别。 而不是在标头部分中显示文本，你可以通过设置内显示图像<xref:System.Web.UI.WebControls.DataControlField.HeaderImageUrl%2A>属性。 可以在中隐藏的标头部分<xref:System.Web.UI.WebControls.BoundField>对象通过设置<xref:System.Web.UI.WebControls.DataControlField.ShowHeader%2A>属性`false`。  
  
> [!NOTE]
>  某些数据绑定控件 (如<xref:System.Web.UI.WebControls.GridView>控件) 可显示或隐藏控件的整个标头部分。 这些数据绑定控件不支持<xref:System.Web.UI.WebControls.DataControlField.ShowHeader%2A>单个绑定字段的属性。 若要显示或隐藏的数据绑定控件的整个标头部分 （如果可用），请使用控件的`ShowHeader`属性。  
  
 您还可以自定义的外观<xref:System.Web.UI.WebControls.BoundField>通过设置字段的不同部分的样式属性的对象 （如字体颜色、 背景色等）。 下表列出不同的样式属性。  
  
|样式属性|描述|  
|--------------------|-----------------|  
|<xref:System.Web.UI.WebControls.DataControlField.ControlStyle%2A>|子 Web 服务器控件的样式设置<xref:System.Web.UI.WebControls.BoundField>对象。|  
|<xref:System.Web.UI.WebControls.DataControlField.FooterStyle%2A>|页脚部分的样式设置<xref:System.Web.UI.WebControls.BoundField>对象。|  
|<xref:System.Web.UI.WebControls.DataControlField.HeaderStyle%2A>|标头部分的样式设置<xref:System.Web.UI.WebControls.BoundField>对象。|  
|<xref:System.Web.UI.WebControls.DataControlField.ItemStyle%2A>|中的数据项的样式设置<xref:System.Web.UI.WebControls.BoundField>对象。|  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.BoundField>对象中的字段的值显示<xref:System.Web.UI.WebControls.GridView>控件。  
  
 [!code-aspx-csharp[BoundField#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BoundField/CS/boundfieldcs.aspx#1)]
 [!code-aspx-vb[BoundField#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BoundField/VB/boundfieldvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.GridView" />
    <altmember cref="P:System.Web.UI.WebControls.GridView.Columns" />
    <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
    <altmember cref="P:System.Web.UI.WebControls.DetailsView.Fields" />
    <altmember cref="T:System.Web.UI.WebControls.ButtonField" />
    <altmember cref="T:System.Web.UI.WebControls.CheckBoxField" />
    <altmember cref="T:System.Web.UI.WebControls.CommandField" />
    <altmember cref="T:System.Web.UI.WebControls.DataControlField" />
    <altmember cref="T:System.Web.UI.WebControls.HyperLinkField" />
    <altmember cref="T:System.Web.UI.WebControls.TemplateField" />
    <altmember cref="P:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode" />
    <altmember cref="P:System.Web.UI.WebControls.BoundField.DataField" />
    <altmember cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />
    <altmember cref="P:System.Web.UI.WebControls.DataControlField.InsertVisible" />
    <altmember cref="P:System.Web.UI.WebControls.BoundField.NullDisplayText" />
    <altmember cref="P:System.Web.UI.WebControls.BoundField.ReadOnly" />
    <altmember cref="P:System.Web.UI.WebControls.CheckBoxField.Text" />
    <altmember cref="P:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull" />
    <altmember cref="P:System.Web.UI.WebControls.DataControlField.Visible" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BoundField ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BoundField();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.BoundField" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数初始化的新实例<xref:System.Web.UI.WebControls.BoundField>类。 此构造函数通常用时将字段添加到的动态创建的数据绑定控件。  
  
 动态地添加<xref:System.Web.UI.WebControls.BoundField>对象转换为数据绑定控件，创建一个新<xref:System.Web.UI.WebControls.BoundField>对象、 设置其属性，并将其添加到数据绑定控件的字段集合。 例如，如果你使用<xref:System.Web.UI.WebControls.GridView>控件中，添加<xref:System.Web.UI.WebControls.BoundField>对象传递给<xref:System.Web.UI.WebControls.GridView.Columns%2A>集合。  
  
> [!NOTE]
>  尽管动态可以将字段添加到数据绑定控件，但强烈建议该字段是静态声明，然后显示或隐藏，根据需要。 静态声明所有你字段会减小父数据绑定控件的视图状态的大小。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此构造函数中动态添加<xref:System.Web.UI.WebControls.BoundField>对象传递给<xref:System.Web.UI.WebControls.GridView>控件。  
  
 [!code-aspx-csharp[BoundFieldCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BoundFieldCtor/CS/boundfieldctorcs.aspx#1)]
 [!code-aspx-vb[BoundFieldCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BoundFieldCtor/VB/boundfieldctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.GridView" />
        <altmember cref="P:System.Web.UI.WebControls.GridView.Columns" />
      </Docs>
    </Member>
    <Member MemberName="ApplyFormatInEditMode">
      <MemberSignature Language="C#" Value="public virtual bool ApplyFormatInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApplyFormatInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ApplyFormatInEditMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ApplyFormatInEditMode { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示包含 <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" /> 对象的数据绑定控件处于编辑模式时，<see cref="T:System.Web.UI.WebControls.BoundField" /> 属性指定的格式化字符串是否应用到字段值。</summary>
        <value>
          若要在编辑模式中将格式化字符串应用到字段值，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据绑定控件 (如<xref:System.Web.UI.WebControls.DetailsView>， <xref:System.Web.UI.WebControls.FormView>，和<xref:System.Web.UI.WebControls.GridView>) 具有不同的显示模式，允许用户读取、 编辑或插入记录。 默认情况下，通过将指定的格式设置字符串<xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A>仅在数据绑定控件是否处于只读模式时，将属性应用于字段值。 若要将格式设置字符串应用于值显示数据绑定控件处于编辑模式时，将设置<xref:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode%2A>属性`true`。  
  
> [!NOTE]
>  A<xref:System.Web.UI.WebControls.BoundField>对象不会自动删除格式设置的数据源中更新字段时。 如果您不希望的格式存储的值的一部分，你将需要删除格式设置以编程方式。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode%2A>属性来应用格式设置字符串时的字段值以<xref:System.Web.UI.WebControls.GridView>控件处于编辑模式。 然后以编程方式删除格式设置的之前在数据源中更新的值。  
  
 [!code-aspx-csharp[BoundFieldApplyFormatInEditMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/boundfieldapplyformatineditmode/CS/boundfieldapplyformatineditmodecs.aspx#1)]
 [!code-aspx-vb[BoundFieldApplyFormatInEditMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/boundfieldapplyformatineditmode/VB/boundfieldapplyformatineditmodevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />
        <altmember cref="E:System.Web.UI.WebControls.GridView.RowUpdating" />
        <altmember cref="E:System.Web.UI.WebControls.DetailsView.ItemUpdating" />
      </Docs>
    </Member>
    <Member MemberName="ConvertEmptyStringToNull">
      <MemberSignature Language="C#" Value="public virtual bool ConvertEmptyStringToNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertEmptyStringToNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ConvertEmptyStringToNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ConvertEmptyStringToNull { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在数据源中更新数据字段时是否将空字符串值 ("") 自动转换为 null 值。</summary>
        <value>
          若要将空字符串值自动转换为 null 值，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有时用户可能为字段值更新或插入记录时输入空字符串。 使用<xref:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull%2A>属性指定是否为空字符串值自动转换为 null 时数据源中更新数据字段。  
  
> [!NOTE]
>  默认情况下，<xref:System.Web.UI.WebControls.BoundField>对象可显示 null 值为空字符串。 若要显示不同的值，设置<xref:System.Web.UI.WebControls.BoundField.NullDisplayText%2A>属性。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull%2A>属性指定一个空字符串 ("") 字段值应自动转换为 null。  
  
 [!code-aspx-csharp[BoundFieldConvertEmptyStringToNull#1](~/samples/snippets/csharp/VS_Snippets_WebNet/boundfieldconvertemptystringtonull/CS/boundfieldconvertemptystingtonullcs.aspx#1)]
 [!code-aspx-vb[BoundFieldConvertEmptyStringToNull#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/boundfieldconvertemptystringtonull/VB/boundfieldconvertemptystingtonullvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataField" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.NullDisplayText" />
      </Docs>
    </Member>
    <Member MemberName="CopyProperties">
      <MemberSignature Language="C#" Value="protected override void CopyProperties (System.Web.UI.WebControls.DataControlField newField);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CopyProperties(class System.Web.UI.WebControls.DataControlField newField) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.CopyProperties(System.Web.UI.WebControls.DataControlField)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CopyProperties (newField As DataControlField)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CopyProperties(System::Web::UI::WebControls::DataControlField ^ newField);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newField" Type="System.Web.UI.WebControls.DataControlField" />
      </Parameters>
      <Docs>
        <param name="newField">当前 <see cref="T:System.Web.UI.WebControls.DataControlField" /> 的属性将复制到的 <see cref="T:System.Web.UI.WebControls.BoundField" />。</param>
        <summary>将当前 <see cref="T:System.Web.UI.WebControls.BoundField" /> 对象的属性复制到指定的 <see cref="T:System.Web.UI.WebControls.DataControlField" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BoundField.CopyProperties%2A>方法是使用一个帮助器方法<xref:System.Web.UI.WebControls.DataControlField.CloneField%2A?displayProperty=nameWithType>方法复制当前的属性<xref:System.Web.UI.WebControls.BoundField>对象传递给<xref:System.Web.UI.WebControls.DataControlField>方法创建的对象。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.CloneField" />
        <altmember cref="M:System.Web.UI.WebControls.BoundField.CreateField" />
      </Docs>
    </Member>
    <Member MemberName="CreateField">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.DataControlField CreateField ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.DataControlField CreateField() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.CreateField" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateField () As DataControlField" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::DataControlField ^ CreateField();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataControlField</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建一个空的 <see cref="T:System.Web.UI.WebControls.BoundField" /> 对象。</summary>
        <returns>一个空 <see cref="T:System.Web.UI.WebControls.BoundField" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BoundField.CreateField%2A>方法是使用一个帮助器方法<xref:System.Web.UI.WebControls.DataControlField.CloneField%2A?displayProperty=nameWithType>方法来创建一个空<xref:System.Web.UI.WebControls.BoundField>要复制当前的属性对象<xref:System.Web.UI.WebControls.BoundField>对象。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.CloneField" />
        <altmember cref="M:System.Web.UI.WebControls.BoundField.CopyProperties(System.Web.UI.WebControls.DataControlField)" />
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public virtual string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要绑定到 <see cref="T:System.Web.UI.WebControls.BoundField" /> 对象的数据字段的名称。</summary>
        <value>要绑定到 <see cref="T:System.Web.UI.WebControls.BoundField" /> 的数据字段的名称。 默认值为空字符串 ("")，表示尚未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.BoundField.DataField%2A>属性来指定要绑定到的数据字段的名称<xref:System.Web.UI.WebControls.BoundField>对象。 指定字段的值显示在<xref:System.Web.UI.WebControls.BoundField>以文本形式的对象。 （可选） 可以通过设置来格式化显示的文本<xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A>属性。  
  
> [!NOTE]
>  如果字段的值为 null，空字符串 ("") 默认情况下为该值显示。 若要指定备用的标题，请设置<xref:System.Web.UI.WebControls.BoundField.NullDisplayText%2A>属性。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.BoundField.DataField%2A>属性来指定要在中显示的字段<xref:System.Web.UI.WebControls.BoundField>字段列<xref:System.Web.UI.WebControls.GridView>控件。  
  
 [!code-aspx-csharp[BoundField#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BoundField/CS/boundfieldcs.aspx#1)]
 [!code-aspx-vb[BoundField#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BoundField/VB/boundfieldvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.NullDisplayText" />
      </Docs>
    </Member>
    <Member MemberName="DataFormatString">
      <MemberSignature Language="C#" Value="public virtual string DataFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.DataFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DataFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置字符串，该字符串指定字段值的显示格式。</summary>
        <value>指定字段值的显示格式的格式化字符串。 默认值为空字符串 ("")，表示尚无特殊格式设置应用于该字段值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A>属性指定的值中显示的自定义显示格式<xref:System.Web.UI.WebControls.BoundField>对象。 如果<xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A>未设置属性、 字段的值显示没有任何特殊格式设置。  
  
> [!NOTE]
>  在之前的版本 ASP.NET 3.5，你必须设置<xref:System.Web.UI.WebControls.BoundField.HtmlEncode%2A>属性`false`若要设置格式的字段设置非字符串数据类型。 否则，字段值通过转换为字符串之前存储在格式字符串的默认转换方法<xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A>应用属性。  
  
 默认情况下，格式设置字符串应用于该字段值仅当包含数据绑定控件时，才<xref:System.Web.UI.WebControls.BoundField>对象处于只读模式。 若要应用于处于编辑模式的字段值的格式设置字符串，设置<xref:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode%2A>属性`true`。  
  
 格式设置字符串可以是任意文本字符串，并且通常包含字段的值的占位符。 例如，在格式设置字符串`Item Value: {0}`，在中显示字符串时，字段的值替换 {0} 占位符<xref:System.Web.UI.WebControls.BoundField>对象。 格式设置字符串的其余部分将显示为文字文本。  
  
 如果格式设置的字符串未包含占位符，仅格式设置字符串本身包含在最终显示文本 （不包含数据源的字段的值）。 如果占位符，如前面的示例中所示括在大括号中 0 （零） 的字段值是通过默认方法转换为字符串。 你可以向零追加一个字符串，指定应如何格式化的字段值。 例如，将占位符`{0:C}`数值字段指定应将的字段的值转换为货币格式。  
  
 格式设置应用通过使用<xref:System.String.Format%2A>方法。 后面的左大括号的数字是该方法使用的语法的一部分，并指示占位符应使用的一系列值中的哪一个。 由于每个单元中只有一个字段值，后面的左大括号的数字只能设置为 0。  
  
 下表列出了数值字段的标准格式字符。 这些格式字符不区分大小写，除`X`，它在指定的情况下会显示十六进制字符。 若要指定多少有效位数或小数位数想要显示，可以将大量追加到大多数格式字符。  
  
> [!NOTE]
>  在大多数情况下，格式设置取决于服务器的区域性设置。 为区域性设置的示例包括`en-US`。  
  
|格式字符|描述|示例|  
|----------------------|-----------------|-------------|  
|`C` 或 `c`|以货币格式显示数字值。 你可以指定小数的位数。|格式：`{0:C}`<br /><br /> 123.456 -> $123.46<br /><br /> 格式：`{0:C3}`<br /><br /> 123.456  -> $123.456|  
|`D` 或 `d`|以十进制格式显示整数值。 你可以指定的位数。 （尽管类型称为"小数"，数字的格式为整数。）|格式：`{0:D}`<br /><br /> 1234 -> 1234<br /><br /> 格式：`{0:D6}`<br /><br /> 1234  -> 001234|  
|`E` 或 `e`|以科学记数 （指数） 格式显示数值。 你可以指定小数的位数。|格式：`{0:E}`<br /><br /> 1052.0329112756 -> 1.052033E+003<br /><br /> 格式：`{0:E2}`<br /><br /> -1052.0329112756 -> -1.05e+003|  
|`F` 或 `f`|采用固定格式显示数字值。 你可以指定小数的位数。|格式：`{0:F}`<br /><br /> 1234.567 -> 1234.57<br /><br /> 格式：`{0:F3}`<br /><br /> 1234.567 -> 1234.567|  
|`G` 或 `g`|以常规格式 （最紧凑的定点或科学记数法） 显示数值。 你可以指定小数位数。|格式：`{0:G}`<br /><br /> -123.456 -> -123.456<br /><br /> 格式：`{0:G2}`<br /><br /> -123.456 -> -120|  
|`N` 或 `n`|以 （包括组分隔符和负号可选） 的数字格式显示数字值。 你可以指定小数的位数。|格式：`{0:N}`<br /><br /> 1234.567 -> 1,234.57<br /><br /> 格式：`{0:N4}`<br /><br /> 1234.567 -> 1,234.5670|  
|`P` 或 `p`|以百分比格式显示数字值。 你可以指定小数的位数。|格式：`{0:P}`<br /><br /> 1 -> 100.00%<br /><br /> 格式：`{0:P1}`<br /><br /> .5 -> 50.0%|  
|`R` 或 `r`|显示<xref:System.Single>， <xref:System.Double>，或`BigInteger`往返格式中的值。|格式：`{0:R}`<br /><br /> 123456789.12345678 -> 123456789.12345678|  
|`X` 或 `x`|以十六进制格式显示整数值。 你可以指定的位数。|格式：`{0:X}`<br /><br /> 255 -> FF<br /><br /> 格式：`{0:x4}`<br /><br /> 255  -> 00ff|  
  
 有关详细信息和显示设置为其他区域性值的格式的示例，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。 你还可以创建自定义数字格式字符串。 有关更多信息，请参见[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
 下表列出了格式字符<xref:System.DateTime>字段。 这些格式规范大部分导致不同的输出，具体取决于的区域性设置。 这些示例适用于<xref:System.DateTime>值 6/15/2009年 1:45:30 PM 的区域性设置`en-US`。  
  
|格式字符|描述|示例|  
|----------------------|-----------------|-------------|  
|`d`|短日期模式。|格式：`{0:d}`<br /><br /> 6/15/2009 1:45:30 PM -> 6/15/2009|  
|`D`|长日期模式。|格式：`{0:D}`<br /><br /> 2009 年 6 月 15 日下午 1:45:30-> 2009 年 6 月 15 日，星期一|  
|`f`|完整日期/时间模式（短时间）。|格式：`{0:f}`<br /><br /> 2009 年 6 月 15 日下午 1:45:30-> 2009 年 6 月 15 日，星期一下午 1:45|  
|`F`|完整日期/时间模式（长时间）。|格式：`{0:F}`<br /><br /> 2009 年 6 月 15 日下午 1:45:30-> 2009 年 6 月 15 日，星期一下午 1:45:30|  
|`g`|常规日期/时间模式（短时间）。|格式：`{0:g}`<br /><br /> 6/15/2009年 1:45:30 PM-&GT; 6/15/2009年 1:45 PM|  
|`G`|常规日期/时间模式（长时间）。|格式：`{0:G}`<br /><br /> 6/15/2009年 1:45:30 PM-&GT; 6/15/2009年 1:45:30 PM|  
|`M` 或 `m`|月/日模式。|格式：`{0:M}`<br /><br /> 6/15/2009年 1:45:30 PM-> 6 月 15 日|  
|`O` 或 `o`|往返日期/时间模式。|格式：`{0:o}`<br /><br /> 6/15/2009 1:45:30 PM -> 2009-06-15T13:45:30.0900000|  
|`R` 或 `r`|RFC1123 模式 (有关信息，请参阅<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A?displayProperty=nameWithType>)。|格式：`{0:R}`<br /><br /> 6/15/2009 1:45:30 PM -> Mon, 15 Jun 2009 20:45:30 GMT|  
|`s`|可排序日期/时间模式。|格式：`{0:s}`<br /><br /> 6/15/2009 1:45:30 PM -> 2009-06-15T13:45:30|  
|`t`|短时间模式。|格式：`{0:t}`<br /><br /> 2009 年 6 月 15 日下午 1:45:30-&GT; 1:45 PM|  
|`T`|长时间模式。|格式：`{0:T}`<br /><br /> 2009 年 6 月 15 日下午 1:45:30-&GT; 1:45:30 PM|  
|`u`|通用可排序日期/时间模式。|格式：`{0:u}`<br /><br /> 6/15/2009 1:45:30 PM -> 2009-06-15 20:45:30Z|  
|`U`|通用完整日期/时间模式。|格式：`{0:U}`<br /><br /> 2009 年 6 月 15 日下午 1:45:30-> 2009 年 6 月 15 日，星期一下午 8:45:30|  
|`Y` 或 `y`|年月模式。|格式：`{0:Y}`<br /><br /> 2009 年 6 月 15 日下午 1:45:30-> 2009 年 6 月，|  
  
 有关详细信息和显示设置为其他区域性值的格式的示例，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)。 你还可以创建自定义日期和时间格式字符串。 有关详细信息，请参阅[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
   
  
## Examples  
 Visual Studio Web 站点项目与源代码是可用本主题可以附带：[下载](http://go.microsoft.com/fwlink/?LinkId=191889)。  
  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A>属性来指定字段的值的自定义显示格式。  
  
  
  
 下面的示例演示一个行生成此示例的输出。  
  
|ProductID|name|ProductNumber|ListPrice|字体粗细|ModifiedDate|  
|---------------|----------|-------------------|---------------|------------|------------------|  
|`000680`|`HL Road Frame - Black, 58`|`#FR-R92B-58`|`$1,431.50`|`1016.040`|`3/11/2004`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataField" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode" />
      </Docs>
    </Member>
    <Member MemberName="ExtractValuesFromCell">
      <MemberSignature Language="C#" Value="public override void ExtractValuesFromCell (System.Collections.Specialized.IOrderedDictionary dictionary, System.Web.UI.WebControls.DataControlFieldCell cell, System.Web.UI.WebControls.DataControlRowState rowState, bool includeReadOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ExtractValuesFromCell(class System.Collections.Specialized.IOrderedDictionary dictionary, class System.Web.UI.WebControls.DataControlFieldCell cell, valuetype System.Web.UI.WebControls.DataControlRowState rowState, bool includeReadOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.ExtractValuesFromCell(System.Collections.Specialized.IOrderedDictionary,System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ExtractValuesFromCell (dictionary As IOrderedDictionary, cell As DataControlFieldCell, rowState As DataControlRowState, includeReadOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ExtractValuesFromCell(System::Collections::Specialized::IOrderedDictionary ^ dictionary, System::Web::UI::WebControls::DataControlFieldCell ^ cell, System::Web::UI::WebControls::DataControlRowState rowState, bool includeReadOnly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Specialized.IOrderedDictionary" />
        <Parameter Name="cell" Type="System.Web.UI.WebControls.DataControlFieldCell" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
        <Parameter Name="includeReadOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dictionary">用于存储指定单元格的值的 <see cref="T:System.Collections.IDictionary" />。</param>
        <param name="cell">包含要检索的值的 <see cref="T:System.Web.UI.WebControls.TableCell" />。</param>
        <param name="rowState">
          <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> 值之一。</param>
        <param name="includeReadOnly">
          若要包括只读字段的值，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>使用指定的 <see cref="T:System.Collections.IDictionary" /> 对象中的值填充指定的 <see cref="T:System.Web.UI.WebControls.TableCell" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BoundField.ExtractValuesFromCell%2A>方法提供一种简便方式检索从指定的字段的值作为<xref:System.Web.UI.WebControls.TableCell>对象在<xref:System.Web.UI.WebControls.BoundField>对象。  
  
> [!NOTE]
>  此方法主要由控件开发人员使用。  
  
 该方法没有返回值。 相反，通过引用返回的字段值<xref:System.Collections.IDictionary?displayProperty=nameWithType>对象传入的`dictionary`参数。 调用该方法后，循环访问<xref:System.Collections.IDictionary?displayProperty=nameWithType>对象来访问的字段值。  
  
> [!NOTE]
>  如果<xref:System.Web.UI.WebControls.TableCell>对象包含只读字段值，则必须传递`true`为`includeReadOnly`参数以包含这些值。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Web.UI.WebControls.TableCell" />
      </Docs>
    </Member>
    <Member MemberName="FormatDataValue">
      <MemberSignature Language="C#" Value="protected virtual string FormatDataValue (object dataValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string FormatDataValue(object dataValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.FormatDataValue(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function FormatDataValue (dataValue As Object, encode As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ FormatDataValue(System::Object ^ dataValue, bool encode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataValue" Type="System.Object" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataValue">要格式化的字段值。</param>
        <param name="encode">
          若对该值进行编码，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
        <summary>设定 <see cref="T:System.Web.UI.WebControls.BoundField" /> 对象内的单元格中的指定字段值。</summary>
        <returns>已转换为 <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" /> 所指定格式的字段值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BoundField.FormatDataValue%2A>方法是用于转换到指定的格式的字段值的帮助器方法<xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A>属性。 如果字段值为 null 的值<xref:System.Web.UI.WebControls.BoundField.NullDisplayText%2A>返回属性。  
  
> [!NOTE]
>  此方法主要由控件开发人员使用。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在扩展<see cref="T:System.Web.UI.WebControls.BoundField" />类，你可以重写此方法以执行自定义格式设置例程。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetDesignTimeValue">
      <MemberSignature Language="C#" Value="protected virtual object GetDesignTimeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetDesignTimeValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.GetDesignTimeValue" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetDesignTimeValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ GetDesignTimeValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在设计器中呈现 <see cref="T:System.Web.UI.WebControls.BoundField" /> 对象时，检索用作字段值的值。</summary>
        <returns>要在设计器中作为字段值显示的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BoundField.GetDesignTimeValue%2A>方法是一个帮助器方法，用于确定要在呈现时为字段显示的值<xref:System.Web.UI.WebControls.BoundField>在设计器中的对象。 如果在设计时，无法从数据源检索的真实数据，此方法返回的值是改为显示。  
  
> [!NOTE]
>  此方法主要由控件开发人员使用。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在扩展<see cref="T:System.Web.UI.WebControls.BoundField" />类，你可以重写此方法以返回不同值以显示设计器中为该字段。</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.BoundField.GetValue(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="protected virtual object GetValue (System.Web.UI.Control controlContainer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetValue(class System.Web.UI.Control controlContainer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.GetValue(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetValue (controlContainer As Control) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ GetValue(System::Web::UI::Control ^ controlContainer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlContainer" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="controlContainer">字段值的容器。</param>
        <summary>检索绑定到 <see cref="T:System.Web.UI.WebControls.BoundField" /> 对象的字段值。</summary>
        <returns>绑定到 <see cref="T:System.Web.UI.WebControls.BoundField" /> 的字段值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BoundField.GetValue%2A>方法是一个帮助器方法，用于确定字段的值。 如果<xref:System.Web.UI.WebControls.BoundField>从对象显示在设计器中，并且不能在设计时确定字段值，返回的值<xref:System.Web.UI.WebControls.BoundField.GetDesignTimeValue%2A>方法返回而不是实际的字段值。  
  
> [!NOTE]
>  此方法主要由控件开发人员使用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">由 <paramref name="controlContainer" /> 参数指定的容器为 <see langword="null" />。  
  
 \- 或 -  
  
 <paramref name="controlContainer" /> 参数指定的容器没有数据项。  
  
 \- 或 -  
  
 找不到该数据字段。</exception>
        <block subset="none" type="overrides">
          <para>在扩展<see cref="T:System.Web.UI.WebControls.BoundField" />类，你可以重写该方法以提供自定义的例程，以确定字段的值。</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.BoundField.GetDesignTimeValue" />
      </Docs>
    </Member>
    <Member MemberName="HeaderText">
      <MemberSignature Language="C#" Value="public override string HeaderText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.HeaderText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property HeaderText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HeaderText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置显示在数据控件标头中的文本。</summary>
        <value>显示在数据控件标头中的文本。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.BoundField.HeaderText%2A>属性用来标识一个数据控件中的字段的友好名称。 应用程序中的最常见<xref:System.Web.UI.WebControls.BoundField.HeaderText%2A>属性旨在提供有意义的列名中的数据绑定字段到<xref:System.Web.UI.WebControls.GridView>或<xref:System.Web.UI.WebControls.DetailsView>控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataField" />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public virtual bool HtmlEncode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HtmlEncode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.HtmlEncode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HtmlEncode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HtmlEncode { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在 <see cref="T:System.Web.UI.WebControls.BoundField" /> 对象中显示字段值之前，是否对这些字段值进行 HTML 编码。</summary>
        <value>
          如果在 <see cref="T:System.Web.UI.WebControls.BoundField" /> 对象中显示字段值之前，对这些字段值进行 HTML 编码，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.BoundField.HtmlEncode%2A>属性来指定字段值是否经过 HTML 编码，为其各自的字符串表示形式中显示<xref:System.Web.UI.WebControls.BoundField>对象。 例如，如果此属性是`true`的字符串值"\<脚本 >"将呈现为"&lt;脚本&gt;"。 如果此属性为`false`，将呈现字符串不变。  
  
> [!NOTE]
>  HTML 编码的字段值有助于防止跨站点脚本攻击，恶意内容显示。 只要有可能，应启用此属性。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.BoundField.HtmlEncode%2A>属性以防止字段值中所显示之前进行 HTML 编码<xref:System.Web.UI.WebControls.BoundField>对象。  
  
 [!code-aspx-csharp[BoundFieldHtmlEncode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BoundFieldHtmlEncode/CS/BoundFieldHtmlEncodecs.aspx#1)]
 [!code-aspx-vb[BoundFieldHtmlEncode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BoundFieldHtmlEncode/VB/BoundFieldHtmlEncodevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.HttpServerUtility.HtmlEncode" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.SupportsHtmlEncode" />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncodeFormatString">
      <MemberSignature Language="C#" Value="public virtual bool HtmlEncodeFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HtmlEncodeFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.HtmlEncodeFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HtmlEncodeFormatString As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HtmlEncodeFormatString { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示通过将 <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" /> 属性应用于 <see cref="T:System.Web.UI.WebControls.BoundField" /> 值而创建的文本在显示时是否应经过 HTML 编码。</summary>
        <value>
          如果文本应经过 HTML 编码，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 编码的值可帮助防止跨站点脚本攻击，恶意内容显示。 HTML 编码也是有用时你想要在浏览器中，例如显示字符串中显示 HTML 代码"\<br / >"而不是插入一个分行符 (`<br/>`元素) 的页中。  
  
> [!NOTE]
>  此属性是 ASP.NET 3.5 中的新增功能。 此属性设置为`false`还原的默认行为<xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A>之前版本中的 ASP.NET 3.5 中的属性。 有关更多信息，请参见 <xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A> 属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.HtmlEncode" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override bool Initialize (bool enableSorting, System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Initialize(bool enableSorting, class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.Initialize(System.Boolean,System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Initialize(bool enableSorting, System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enableSorting" Type="System.Boolean" />
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="enableSorting">
          如果支持排序，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="control">拥有 <see cref="T:System.Web.UI.WebControls.BoundField" /> 的数据控件。</param>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.BoundField" /> 对象。</summary>
        <returns>
          在所有情况下均为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BoundField.Initialize%2A>方法调用由数据控件与其<xref:System.Web.UI.WebControls.BoundField>对象所关联以执行基本的对象初始化的字段，该字段添加到行集合之前的实例。 数据控件，如<xref:System.Web.UI.WebControls.DetailsView>和<xref:System.Web.UI.WebControls.GridView>调用<xref:System.Web.UI.WebControls.DataControlField.Initialize%2A>方法在其`CreateChildControls`方法类似于其他方法之前`CreateRow`调用来使用数据创建特定行。  
  
 调用此方法在编写自定义数据绑定时控制使用<xref:System.Web.UI.WebControls.TableCell>对象执行基本初始化<xref:System.Web.UI.WebControls.BoundField>对象。 实现此方法，如果你<xref:System.Web.UI.WebControls.BoundField>-派生的类型要求任何对象初始化之前它将填充<xref:System.Web.UI.WebControls.TableCell>对象与数据或控件的<xref:System.Web.UI.WebControls.BoundField.InitializeCell%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableCell" />
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.Initialize(System.Boolean,System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.WebControls.BoundField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)" />
        <altmember cref="M:System.Web.UI.WebControls.BoundField.InitializeDataCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState)" />
      </Docs>
    </Member>
    <Member MemberName="InitializeCell">
      <MemberSignature Language="C#" Value="public override void InitializeCell (System.Web.UI.WebControls.DataControlFieldCell cell, System.Web.UI.WebControls.DataControlCellType cellType, System.Web.UI.WebControls.DataControlRowState rowState, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void InitializeCell(class System.Web.UI.WebControls.DataControlFieldCell cell, valuetype System.Web.UI.WebControls.DataControlCellType cellType, valuetype System.Web.UI.WebControls.DataControlRowState rowState, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub InitializeCell (cell As DataControlFieldCell, cellType As DataControlCellType, rowState As DataControlRowState, rowIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void InitializeCell(System::Web::UI::WebControls::DataControlFieldCell ^ cell, System::Web::UI::WebControls::DataControlCellType cellType, System::Web::UI::WebControls::DataControlRowState rowState, int rowIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="System.Web.UI.WebControls.DataControlFieldCell" />
        <Parameter Name="cellType" Type="System.Web.UI.WebControls.DataControlCellType" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cell">要初始化的 <see cref="T:System.Web.UI.WebControls.TableCell" />。</param>
        <param name="cellType">
          <see cref="T:System.Web.UI.WebControls.DataControlCellType" /> 值之一。</param>
        <param name="rowState">
          <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> 值之一。</param>
        <param name="rowIndex">行的索引（索引从零开始）。</param>
        <summary>将指定的 <see cref="T:System.Web.UI.WebControls.TableCell" /> 对象初始化为指定的行状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BoundField.InitializeCell%2A>方法由实现<xref:System.Web.UI.WebControls.BoundField>-派生类型中添加文本和控件添加到<xref:System.Web.UI.WebControls.TableCell>的一个数据控件，使用表来显示用户界面 (UI) 对象。 这些数据控件创建完整的表结构的行时控件的`CreateChildControls`调用方法。 <xref:System.Web.UI.WebControls.BoundField.InitializeCell%2A>方法由调用`InitializeRow`数据方法控件如<xref:System.Web.UI.WebControls.DetailsView>和<xref:System.Web.UI.WebControls.GridView>。  
  
 调用此方法在编写自定义数据绑定时控制使用<xref:System.Web.UI.WebControls.TableCell>对象来初始化与数据或控件的表结构的单元格。 实现此方法，在编写时<xref:System.Web.UI.WebControls.BoundField>-派生类。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BoundField.Initialize(System.Boolean,System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.WebControls.BoundField.InitializeDataCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState)" />
      </Docs>
    </Member>
    <Member MemberName="InitializeDataCell">
      <MemberSignature Language="C#" Value="protected virtual void InitializeDataCell (System.Web.UI.WebControls.DataControlFieldCell cell, System.Web.UI.WebControls.DataControlRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeDataCell(class System.Web.UI.WebControls.DataControlFieldCell cell, valuetype System.Web.UI.WebControls.DataControlRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.InitializeDataCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeDataCell (cell As DataControlFieldCell, rowState As DataControlRowState)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeDataCell(System::Web::UI::WebControls::DataControlFieldCell ^ cell, System::Web::UI::WebControls::DataControlRowState rowState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="System.Web.UI.WebControls.DataControlFieldCell" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
      </Parameters>
      <Docs>
        <param name="cell">要初始化的 <see cref="T:System.Web.UI.WebControls.TableCell" />。</param>
        <param name="rowState">
          <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> 值之一。</param>
        <summary>将指定的 <see cref="T:System.Web.UI.WebControls.TableCell" /> 对象初始化为指定的行状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BoundField.InitializeDataCell%2A>方法是一个帮助器方法，用于初始化中的单元格<xref:System.Web.UI.WebControls.BoundField>对象。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在扩展<see cref="T:System.Web.UI.WebControls.BoundField" />类，你可以重写此方法以执行自定义初始化例程。</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.BoundField.Initialize(System.Boolean,System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.WebControls.BoundField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">表示要还原的控件状态。</param>
        <summary>还原以前为此字段存储的视图状态信息。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NullDisplayText">
      <MemberSignature Language="C#" Value="public virtual string NullDisplayText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NullDisplayText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.NullDisplayText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NullDisplayText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NullDisplayText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当字段值为 null 时为字段显示的标题。</summary>
        <value>字段值为 null 时为字段显示的标题。 默认值为空字符串 ("")，表示尚未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有时字段的值存储为 null 的数据源中。 你可以指定要用于通过设置具有 null 值的字段显示的自定义标题<xref:System.Web.UI.WebControls.BoundField.NullDisplayText%2A>属性。 如果未设置此属性，null 字段值显示为空字符串 ("")。 记录时更新或插入在数据绑定控件中，如果用户输入的值指定的字段在数据绑定控件中，此属性 （而不是一个空字符串） 值的数据源中自动转换为 null。  
  
> [!NOTE]
>  若要为 null 值转换为空字符串字段值，设置<xref:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull%2A>属性`true`。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.BoundField.NullDisplayText%2A>属性来指定要显示为空字段值的自定义标题。  
  
 [!code-aspx-csharp[BoundFieldNullDisplayText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BoundFieldNullDisplayText/CS/boundfieldnulldisplaytextcs.aspx#1)]
 [!code-aspx-vb[BoundFieldNullDisplayText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BoundFieldNullDisplayText/VB/boundfieldnulldisplaytextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataField" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull" />
      </Docs>
    </Member>
    <Member MemberName="OnDataBindField">
      <MemberSignature Language="C#" Value="protected virtual void OnDataBindField (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataBindField(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.OnDataBindField(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDataBindField (sender As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDataBindField(System::Object ^ sender, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">事件源。</param>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>将字段值绑定到 <see cref="T:System.Web.UI.WebControls.BoundField" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.CheckBoxField.OnDataBindField%2A>方法是一个帮助器方法，用于将数据源中的字段的值绑定到在相应的单元格<xref:System.Web.UI.WebControls.BoundField>对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">字段值绑定到的控件不是 <see cref="T:System.Web.UI.WebControls.TextBox" /> 或 <see cref="T:System.Web.UI.WebControls.TableCell" />。</exception>
        <block subset="none" type="overrides">
          <para>在扩展<see cref="T:System.Web.UI.WebControls.BoundField" />类，你可以重写此方法以执行自定义绑定例程。</para>
        </block>
        <altmember cref="T:System.EventArgs" />
        <altmember cref="T:System.Web.HttpException" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否可以在编辑模式中修改字段的值。</summary>
        <value>
          若要防止字段的值在编辑模式中被修改，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.BoundField.ReadOnly%2A>属性可避免中显示的值<xref:System.Web.UI.WebControls.BoundField>从正在修改的对象。 编辑模式的数据绑定控件时，字段是只读的显示为纯文本，且不包含任何编辑控件。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.BoundField.ReadOnly%2A>属性仅适用于编辑模式。 若要防止字段显示在插入模式，请使用<xref:System.Web.UI.WebControls.DataControlField.InsertVisible%2A>属性。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.BoundField.ReadOnly%2A>属性可避免键字段中显示的值<xref:System.Web.UI.WebControls.BoundField>从在编辑模式中被修改的对象。  
  
 [!code-aspx-csharp[BoundField#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BoundField/CS/boundfieldcs.aspx#1)]
 [!code-aspx-vb[BoundField#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BoundField/VB/boundfieldvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.DetailsView.AutoGenerateEditButton" />
        <altmember cref="P:System.Web.UI.WebControls.GridView.AutoGenerateEditButton" />
      </Docs>
    </Member>
    <Member MemberName="SupportsHtmlEncode">
      <MemberSignature Language="C#" Value="protected virtual bool SupportsHtmlEncode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsHtmlEncode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.SupportsHtmlEncode" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property SupportsHtmlEncode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool SupportsHtmlEncode { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Web.UI.WebControls.BoundField" /> 对象是否支持 HTML 编码。</summary>
        <value>始终返回 <see langword="true" />，以指示 <see cref="T:System.Web.UI.WebControls.BoundField" /> 支持 HTML 编码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BoundField.SupportsHtmlEncode%2A>属性是由帮助器属性<xref:System.Web.UI.WebControls.BoundField>类和派生的类，以确定类是否支持 HTML 编码。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>从派生时<see cref="T:System.Web.UI.WebControls.BoundField" />类，你可以重写此属性以指示类是否支持 HTML 编码。</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.HtmlEncode" />
        <altmember cref="Overload:System.Web.HttpServerUtility.HtmlEncode" />
      </Docs>
    </Member>
    <Member MemberName="ThisExpression">
      <MemberSignature Language="C#" Value="public static readonly string ThisExpression;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string ThisExpression" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.BoundField.ThisExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ThisExpression As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ ThisExpression;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示“this”表达式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此字段，则指示<xref:System.Web.UI.WebControls.BoundField>对象应绑定数据源本身，而不是数据源的字段。 在此情况下，该对象的`ToString`值将显示在字段中。  
  
 主要由控件开发人员使用此字段。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ValidateRequestMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ValidateRequestMode ValidateRequestMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ValidateRequestMode ValidateRequestMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.ValidateRequestMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateRequestMode As ValidateRequestMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ValidateRequestMode ValidateRequestMode { System::Web::UI::ValidateRequestMode get(); void set(System::Web::UI::ValidateRequestMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ValidateRequestMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置确定控件是否验证客户端输入的值。</summary>
        <value>确定控制器是否验证客户输入的值。 默认值为 <see cref="F:System.Web.UI.ValidateRequestMode.Inherit" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateSupportsCallback">
      <MemberSignature Language="C#" Value="public override void ValidateSupportsCallback ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ValidateSupportsCallback() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.ValidateSupportsCallback" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ValidateSupportsCallback ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ValidateSupportsCallback();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定包含在 <see cref="T:System.Web.UI.WebControls.BoundField" /> 对象中的控件是否支持回调。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BoundField.ValidateSupportsCallback%2A>方法是用于确定控件是否包含在一个帮助器方法<xref:System.Web.UI.WebControls.BoundField>对象支持回调。 此方法已作为空方法 （不包含任何代码的方法） 以指示支持回调实现。  
  
> [!NOTE]
>  此方法主要由控件开发人员使用。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生自的类<see cref="T:System.Web.UI.WebControls.BoundField" />类可以重写此方法，以指示是否通过字段支持回调所包含的控件。 若要指示支持回调，实现此方法作为空方法不会引发异常;否则，抛出异常与描述为什么不支持回调的有用消息。</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.ValidateSupportsCallback" />
      </Docs>
    </Member>
  </Members>
</Type>