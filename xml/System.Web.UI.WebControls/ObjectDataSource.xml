<Type Name="ObjectDataSource" FullName="System.Web.UI.WebControls.ObjectDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="df4d6ed9bb42e90109053c0901178ec37b3d6e71" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53230203" /></Metadata><TypeSignature Language="C#" Value="public class ObjectDataSource : System.Web.UI.DataSourceControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectDataSource extends System.Web.UI.DataSourceControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.ObjectDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectDataSource&#xA;Inherits DataSourceControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectDataSource : System::Web::UI::DataSourceControl" />
  <TypeSignature Language="F#" Value="type ObjectDataSource = class&#xA;    inherit DataSourceControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultProperty("TypeName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.ObjectDataSource))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示为多层 Web 应用程序体系结构中的数据绑定控件提供数据的业务对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本主题内容：  
  
-   [介绍](#introduction)  
  
-   [目的](#purpose)  
  
-   [检索数据](#retrieving_data)  
  
-   [执行数据操作](#performing_data_operations)  
  
-   [筛选数据](#filtering_data)  
  
-   [缓存](#caching)  
  
-   [功能](#features)  
  
-   [数据视图](#data_view)  
  
-   [使用 LINQ to SQL](#using_linq_to_sql)  
  
-   [声明性语法](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>介绍  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件的工作方式与你创建的类。 创建方法用于检索和更新数据，并提供对这些方法的名称<xref:System.Web.UI.WebControls.ObjectDataSource>标记中的控件。 在呈现或回发处理期间<xref:System.Web.UI.WebControls.ObjectDataSource>调用具有指定的方法。  
  
 任何可视化呈现<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 因此，<xref:System.Web.UI.WebControls.ObjectDataSource>不支持视觉特征，如<xref:System.Web.UI.DataSourceControl.EnableTheming%2A>或<xref:System.Web.UI.DataSourceControl.SkinID%2A>属性。  
  
<a name="purpose"></a>   
## <a name="purpose"></a>目标  
 非常常见的应用程序设计做法是从业务逻辑分离表示层并封装业务对象中的业务逻辑。 这些业务对象形成表示层和数据层，从而在三层应用程序体系结构之间的不同层。 <xref:System.Web.UI.WebControls.ObjectDataSource>控件使开发人员能够使用 ASP.NET 数据源控件，同时保留其三层应用程序体系结构。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件使用反射来创建业务对象的实例，若要对其检索，调用方法更新、 插入和删除数据。 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性标识的类名称的<xref:System.Web.UI.WebControls.ObjectDataSource>配合。 <xref:System.Web.UI.WebControls.ObjectDataSource>控件创建和销毁每个方法调用类的实例; 它不保存该对象在内存中的 Web 请求生存期内。 如果您使用的业务对象需要多个资源，或在其他方面成本高昂，来创建和销毁，这是一个严重的考虑因素。 使用的高开销对象可能不是最佳设计选择，但可以通过使用控制对象的生命周期<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。  
  
> [!NOTE]
>  由标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性可以是实例方法或`static`(`Shared`在 Visual Basic 中) 的方法。 如果方法是`static`(`Shared`在 Visual Basic 中)，未创建业务对象的实例，并<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>不会引发事件。  
  
<a name="retrieving_data"></a>   
## <a name="retrieving-data"></a>检索数据  
 若要从业务对象中检索数据，设置<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性设置为检索数据的方法的名称。 如果该方法不返回<xref:System.Collections.IEnumerable>或<xref:System.Data.DataSet>对象，该对象包装由运行时中<xref:System.Collections.IEnumerable>集合。 如果方法签名具有参数，您可以添加<xref:System.Web.UI.WebControls.Parameter>对象添加到<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合，然后将其绑定到想要传递给由指定的方法的值和<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。 为了使<xref:System.Web.UI.WebControls.ObjectDataSource>控件使用的参数，参数必须与匹配的名称和方法签名中的参数的类型。 有关详细信息，请参阅[ObjectDataSource 控件与使用参数](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件中检索数据时<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>调用方法。 此方法提供以编程方式访问由指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。 通过指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性将自动调用绑定到控件<xref:System.Web.UI.WebControls.ObjectDataSource>时其`DataBind`调用方法。 如果您设置`DataSourceID`数据绑定控件的属性，该控件自动将绑定到数据从数据源，根据需要。 设置`DataSourceID`属性是绑定的建议的方法<xref:System.Web.UI.WebControls.ObjectDataSource>数据绑定控件的控件。 或者，可以设置`DataSource`属性，但您必须显式调用`DataBind`数据绑定控件的方法。 您可以调用<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>以编程方式在任何时间检索数据的方法。  
  
 有关将数据绑定控件绑定到数据源控件的详细信息，请参阅[数据源控件绑定到数据使用](https://msdn.microsoft.com/library/e41adfff-8fb8-449e-9cd1-9bd49788c5f7)。  
  
<a name="performing_data_operations"></a>   
## <a name="performing-data-operations"></a>执行数据操作  
 具体取决于业务的功能对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件一起使用，则可以执行数据操作，例如更新、 插入和删除操作。 若要执行这些数据操作，设置适当的方法名称和你想要执行的操作关联的任何参数。 例如，对于更新操作，设置<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性的名称的业务对象方法执行更新，并添加任何所需的参数<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。 如果<xref:System.Web.UI.WebControls.ObjectDataSource>数据绑定控件与关联控件时，由数据绑定控件添加参数。 在这种情况下，您需要确保该方法的参数名称匹配的数据绑定控件中的字段名称。 执行更新时<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>由代码显式或通过数据绑定控件自动调用方法。 对于遵循相同的常规模式<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作。 业务对象被认为这些类型的数据操作一条记录执行一次，而不是批处理。  
  
<a name="filtering_data"></a>   
## <a name="filtering-data"></a>筛选数据  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件可以通过检索的数据进行筛选<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>，则为该数据返回为属性<xref:System.Data.DataSet>或<xref:System.Data.DataTable>对象。 可以设置<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性设置为使用一种格式的筛选表达式字符串语法并将值绑定到参数中指定的表达式中<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合。  
  
<a name="caching"></a>   
## <a name="caching"></a>缓存  
 尽管<xref:System.Web.UI.WebControls.ObjectDataSource>不会保留该实例的多个请求间的业务对象，它可以缓存的调用通过标识的方法的结果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。 数据缓存，因为在后续调用时<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法返回缓存的数据，而不是创建业务对象并调用其<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>使用反射。 缓存可避免创建对象和 Web 服务器上调用代价内存是其数据方法。 <xref:System.Web.UI.WebControls.ObjectDataSource>会自动调整缓存数据时<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>属性设置为`true`，和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>属性设置为在缓存中存储数据之前放弃缓存的秒数。 此外可以指定<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>属性和可选<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>属性。 <xref:System.Web.UI.WebControls.ObjectDataSource>控制允许您缓存所有类型的数据，但不是应都缓存保留资源或不能共享多个请求提供服务的状态的对象 (例如，一种开放<xref:System.Data.SqlClient.SqlDataReader>对象)，因为该对象的同一实例将用于多个请求提供服务。  
  
<a name="features"></a>   
## <a name="features"></a>功能  
 下表介绍的功能<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
|功能|要求|  
|----------------|------------------|  
|选择|设置<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性的名称的业务对象方法选择数据，并包含任何必需的参数中<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合以编程方式或通过使用数据绑定控件。|  
|排序|设置<xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>属性中的参数的名称为<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>带有排序条件的方法。|  
|筛选|设置<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性的筛选表达式，还可以选择添加到任何参数<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>要筛选的数据集合时<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>调用方法。 指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性必须返回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>。|  
|分页|如果支持数据源分页<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>方法包含要检索的记录的最大数和要检索的第一个记录的索引的参数。 这些参数的名称必须以设置<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>属性，分别。 数据绑定控件可能能够执行分页本身，即使<xref:System.Web.UI.WebControls.ObjectDataSource>控件不支持直接在指定的方法中的分页<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。 若要能够执行此操作的数据绑定控件的要求是由指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性返回一个对象，实现<xref:System.Collections.ICollection>接口。|  
|Updating|设置<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性的名称的业务对象方法，用于更新数据，并包含任何必需的参数中<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。|  
|正在删除|设置<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性的名称的业务对象方法或函数删除数据，并包含任何必需的参数中<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合。|  
|插入|设置<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>属性的名称的业务对象方法或函数用于在插入数据，并包含任何必需的参数中<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合。|  
|缓存|设置<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>属性设置为`true`，并<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>根据缓存数据所需的缓存行为的属性。|  
  
> [!NOTE]
>  当你使用<xref:System.Web.UI.WebControls.ObjectDataSource>类来更新或插入数据，在客户端输入的字符串数据自动进行转换从客户端区域性格式为 server 区域性格式。 例如，客户端区域性可能会指定 DD/MM/YYYY 为日期格式，并且在服务器上的日期格式可能 MM/DD/YYYY。 在这种情况下，将在输入 2009 年 10 月 5 日<xref:System.Web.UI.WebControls.TextBox>控制为 2009 年 5 月 10 日，但会被解释为 2009 年 5 月 10 日。 2009 年 10 月 15 日 15/10/2009，如下所示输入，并将拒绝为无效日期。  
  
<a name="data_view"></a>   
## <a name="data-view"></a>数据视图  
 与所有数据源控件一样，<xref:System.Web.UI.WebControls.ObjectDataSource>控件所关联的数据源视图类。 虽然<xref:System.Web.UI.WebControls.ObjectDataSource>控件是页面开发人员用来处理数据，接口<xref:System.Web.UI.WebControls.ObjectDataSourceView>类是数据绑定控件使用的接口。 此外，<xref:System.Web.UI.WebControls.ObjectDataSourceView>类描述数据源控件的功能，并执行实际工作。 <xref:System.Web.UI.WebControls.ObjectDataSource>控件仅有一个关联<xref:System.Web.UI.WebControls.ObjectDataSourceView>，并且始终名为`DefaultView`。 虽然<xref:System.Web.UI.WebControls.ObjectDataSourceView>公开对象<xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A>方法，其属性和方法的许多包装，并将其直接通过公开<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 在后台，<xref:System.Web.UI.WebControls.ObjectDataSourceView>对象执行所有数据操作，包括检索、 插入、 更新、 删除、 筛选和对数据进行排序。 有关详情，请参阅<xref:System.Web.UI.WebControls.ObjectDataSourceView>。  
  
<a name="using_linq_to_sql"></a>   
## <a name="using-linq-to-sql"></a>使用 LINQ to SQL  
 可以使用<xref:System.Web.UI.WebControls.ObjectDataSource>使用 LINQ to SQL 类的控件。 若要执行此操作，请设置<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性设置为数据上下文类的名称。 此外设置<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>执行相应操作中的数据上下文类的方法的方法。 必须创建的事件处理程序<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>才能取消对数据上下文类的释放的事件。 此步骤是必需因为 LINQ to SQL 支持延迟的执行，而<xref:System.Web.UI.WebControls.ObjectDataSource>控件尝试选择操作之后释放数据上下文。 有关如何创建 LINQ to SQL 类的详细信息，请参阅[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。 有关如何取消对数据上下文类的释放的示例，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。  
  
## <a name="using-the-entity-framework"></a>使用实体框架  
 此外可以使用<xref:System.Web.UI.WebControls.ObjectDataSource>使用实体框架的控件。 有关详细信息，请参阅[使用实体框架和 ObjectDataSource 控件](https://go.microsoft.com/fwlink/?LinkId=209117)。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>声明性语法  
  
```  
<asp:ObjectDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    ConflictDetection="OverwriteChanges|CompareAllValues"  
    ConvertNullToDBNull="True|False"  
    DataObjectTypeName="string"  
    DeleteMethod="string"  
    EnableCaching="True|False"  
    EnablePaging="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    FilterExpression="string"  
    ID="string"  
    InsertMethod="string"  
    MaximumRowsParameterName="string"  
    OldValuesParameterFormatString="string"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnFiltering="Filtering event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnObjectCreated="ObjectCreated event handler"  
    OnObjectCreating="ObjectCreating event handler"  
    OnObjectDisposing="ObjectDisposing event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    runat="server"  
    SelectCountMethod="string"  
    SelectMethod="string"  
    SkinID="string"  
    SortParameterName="string"  
    SqlCacheDependency="string"  
    StartRowIndexParameterName="string"  
    TypeName="string"  
    UpdateMethod="string"  
    Visible="True|False"  
>  
        <DeleteParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </DeleteParameters>  
        <FilterParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </FilterParameters>  
        <InsertParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </InsertParameters>  
        <SelectParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </SelectParameters>  
        <UpdateParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </UpdateParameters>  
</asp:ObjectDataSource>  
```  
  
   
  
## Examples  
 包含源代码的 Visual Studio Web 站点项目是可随附于本主题：[下载](https://code.msdn.microsoft.com/Project/Download/FileDownload.aspx?ProjectName=aspnetmsdnexamples&DownloadId=14838)。  
  
 本部分介绍<xref:System.Web.UI.WebControls.ObjectDataSource>中的标记中一个.aspx 页面，它显示适用于的业务对象。 该示例是.aspx 页。 它包含<xref:System.Web.UI.WebControls.GridView>绑定到控件<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 <xref:System.Web.UI.WebControls.ObjectDataSource>控件标记指定的业务对象的名称和要调用以检索数据的业务对象方法的名称。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 下面的示例演示的业务对象<xref:System.Web.UI.WebControls.ObjectDataSource>.aspx 页中的控件使用。 (许多其他<xref:System.Web.UI.WebControls.ObjectDataSource>代码示例还使用此业务对象。)此示例由以下两个基本类组成：  
  
-   `EmployeeLogic`类是业务逻辑类<xref:System.Web.UI.WebControls.ObjectDataSource>使用。  
  
-   `NorthwindEmployee`类定义返回的数据对象`GetAllEmployees`方法的`EmployeeLogic`类。  
  
 附加`NorthwindDataException`类提供便利。  
  
 这组示例类适用于在 Northwind Trader 数据库，这是适用于 Microsoft SQL Server 和 Microsoft Access。 有关完整的工作示例，必须编译，并使用这些类与所提供的.aspx 页面示例。 有关如何安装 Northwind Trader 数据库的信息，请参阅[如何：安装示例数据库](https://msdn.microsoft.com/library/ed1291f6-604c-4972-ae22-0345c6dea12e)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.IDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
    <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
    <related type="Article" href="https://msdn.microsoft.com/library/a806fa2c-fe6a-405f-869c-74e804a642ea">演练：数据绑定到自定义业务对象</related>
    <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
    <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
    <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 类的新实例。</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource (string typeName, string selectMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, string selectMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String, selectMethod As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSource(System::String ^ typeName, System::String ^ selectMethod);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.ObjectDataSource : string * string -&gt; System.Web.UI.WebControls.ObjectDataSource" Usage="new System.Web.UI.WebControls.ObjectDataSource (typeName, selectMethod)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="selectMethod" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName"><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 使用的类的名称。</param>
        <param name="selectMethod"><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 为检索数据而调用的方法或函数的名称。</param>
        <summary>使用指定的类型名和数据检索方法名初始化 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值`typeName`参数可以是位于 Bin 或 App_Code 目录中的代码的部分限定的类型或在全局程序集缓存中注册的代码的完全限定的类型名称。 如果使用全局程序集缓存，则必须添加到适当的引用`assemblies`Machine.config 或 Web.config 配置文件的部分。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置以秒为单位的一段时间，数据源控件就在这段时间内缓存 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 属性检索到的数据。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 将 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 属性调用的结果缓存的秒数。 默认值为 0。 该值不能为负数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件支持的数据缓存。 缓存数据，而调用<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法检索的数据缓存中而不是从业务对象<xref:System.Web.UI.WebControls.ObjectDataSource>配合。 缓存过期时，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法业务对象中检索数据，并再次将缓存数据。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件将自动缓存数据时<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>属性设置为`true`和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>属性设置为值大于 0，指示在缓存中存储数据的缓存项之前的秒数将被放弃。 值为 0 表示无限期的缓存。  
  
 持续时间的组合来管理缓存和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>设置。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>属性设置为<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>值，<xref:System.Web.UI.WebControls.ObjectDataSource>缓存上首次调用数据<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法并使其在内存中保持为最多由指定的时间量<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>属性。 如果需要内存，可能会持续时间之前释放数据。 在下一步调用然后刷新缓存<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>属性设置为<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>值，数据源控件缓存数据到在首次调用<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法，但将其保存到每个后续调用上的缓存的时间范围重置<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 缓存过期后，如果没有任何活动的时间，它等于<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>属性自上次调用以来<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何<xref:System.Web.UI.WebControls.ObjectDataSource>对象支持缓存。 第二个代码示例演示如何实现返回的包装器方法<xref:System.Data.DataSet>对象，以允许缓存<xref:System.Web.UI.WebControls.ObjectDataSource>对象。  
  
 下面的代码示例演示如何<xref:System.Web.UI.WebControls.ObjectDataSource>控件支持缓存。 若要启用缓存，必须实现用于检索数据，通过标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性，以返回数据作为<xref:System.Data.DataSet>对象。 在此示例中，<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>属性设置为`true`，并<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>设置属性。 <xref:System.Web.UI.WebControls.ObjectDataSource>将返回的数据缓存<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>30 秒的属性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]  
  
 下面的代码示例演示如何实现返回的包装器方法<xref:System.Data.DataSet>对象，以允许缓存<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 在基实现中的`EmployeeLogic`类，`GetAllEmployees`方法将返回<xref:System.Collections.ArrayList>对象。 而不是重构完全要使用的对象<xref:System.Web.UI.WebControls.ObjectDataSource>包装器方法在 Web 窗体页中，名为`GetAllEmployeesAsDataSet`返回的一组添加`NorthwindEmployee`数据作为<xref:System.Data.DataSet>。  
  
 此代码示例是为提供一个更大示例的一部分<xref:System.Web.UI.WebControls.ObjectDataSource>类。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置缓存的到期行为，该行为与持续时间组合在一起可以描述数据源控件所用缓存的行为。</summary>
        <value><see cref="T:System.Web.UI.DataSourceCacheExpiry" /> 值之一。 默认值为 <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件支持的数据缓存。 缓存数据，而调用<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法检索的数据缓存中而不是从业务对象<xref:System.Web.UI.WebControls.ObjectDataSource>配合。 缓存过期时，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法业务对象中检索数据，并再次将缓存数据。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件将自动缓存数据时<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>属性设置为`true`和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>属性设置为值大于 0，指示在缓存中存储数据的缓存项之前的秒数将被放弃。 值为 0 指示无限期缓存期限。  
  
 持续时间的组合来管理缓存和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>设置。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>属性设置为<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>值，<xref:System.Web.UI.WebControls.ObjectDataSource>缓存上首次调用数据<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法并使其在内存中保持为最多由指定的时间量<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>属性。 如果需要内存，可能会持续时间之前释放数据。 在下一步调用然后刷新缓存<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>属性设置为<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>值，数据源控件缓存数据到在首次调用<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法，但将其保存到每个后续调用的缓存的时间范围重置<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 缓存过期后，如果没有任何活动的时间，它等于<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>属性自上次调用以来<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何<xref:System.Web.UI.WebControls.ObjectDataSource>对象支持筛选和缓存。 第二个代码示例演示如何实现返回的包装器方法<xref:System.Data.DataSet>对象，以允许的缓存和筛选<xref:System.Web.UI.WebControls.ObjectDataSource>对象。  
  
 下面的代码示例演示如何<xref:System.Web.UI.WebControls.ObjectDataSource>控件支持筛选和缓存。 若要启用筛选和缓存，必须实现用于检索数据，通过标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性，以返回数据作为<xref:System.Data.DataSet>对象。 在此示例中，缓存启用，因为`EmployeeLogic`数据作为对象返回<xref:System.Data.DataSet>，则<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>属性设置为`true`，并<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>设置属性。 <xref:System.Web.UI.WebControls.ObjectDataSource>将返回的数据缓存<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>30 秒的属性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]  
  
 下面的代码示例演示如何实现返回的包装器方法<xref:System.Data.DataSet>对象，以允许的缓存和筛选<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 在基实现中的`EmployeeLogic`类，`GetAllEmployees`方法将返回<xref:System.Collections.ArrayList>。 而不是重构完全要使用的对象<xref:System.Web.UI.WebControls.ObjectDataSource>包装器方法在 Web 窗体页中，名为`GetAllEmployeesAsDataSet`返回的一组添加`NorthwindEmployee`数据作为<xref:System.Data.DataSet>。 此代码示例是为提供一个更大示例的一部分<xref:System.Web.UI.WebControls.ObjectDataSource>类。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个用户定义的键依赖项，该键依赖项链接到数据源控件创建的所有数据缓存对象。</summary>
        <value>一个键，它标识所有由 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 创建的缓存对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>属性可以设置为任何任意字符串值。  
  
 当键到期时，所有缓存对象都显式到期。 这使您可以使创建的缓存项失效<xref:System.Web.UI.WebControls.ObjectDataSource>以编程方式从您自己的页面代码。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件支持的数据缓存。 缓存数据，而调用<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法检索的数据缓存中而不是从业务对象<xref:System.Web.UI.WebControls.ObjectDataSource>配合。 缓存过期时，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法业务对象中检索数据，并再次将缓存数据。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件将自动缓存数据时<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>属性设置为`true`和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>属性设置为值大于 0，指示在缓存中存储数据的缓存项之前的秒数将被放弃。 值为 0 表示无限期的缓存。  
  
 可以设置<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>要创建的所有高速缓存条目之间建立依赖关系属性<xref:System.Web.UI.WebControls.ObjectDataSource>控件和密钥。 通过使键可以在任何时间以编程方式终止所有缓存条目。 通过使用过期密钥<xref:System.Web.Caching.Cache.Remove%2A?displayProperty=nameWithType>方法，将当前<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>值作为参数。  
  
 为每个组合创建唯一缓存项<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>属性。 多个<xref:System.Web.UI.WebControls.ObjectDataSource>控件可以使用相同的缓存条目在方案中使用相同的类型、 方法和参数的数据的加载位置。  
  
   
  
## Examples  
 以下三个示例显示 Web 页面、 代码隐藏页类和从 Northwind 数据库中的员工表中检索记录的数据访问类。  
  
 第一个示例演示包含两个网页<xref:System.Web.UI.WebControls.ObjectDataSource>控件，<xref:System.Web.UI.WebControls.DropDownList>控件，和一个<xref:System.Web.UI.WebControls.DetailsView>控件。 第一个<xref:System.Web.UI.WebControls.ObjectDataSource>控件和<xref:System.Web.UI.WebControls.DropDownList>控件用于检索和显示数据库中的雇员姓名。 第二个<xref:System.Web.UI.WebControls.ObjectDataSource>控件和<xref:System.Web.UI.WebControls.DetailsView>控件用于检索和显示用户所选的员工记录。  
  
 为启用缓存<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 因此，每条记录检索从数据库仅一次。 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>属性设置为"EmployeeDetails"，但任何字符串值可作为键。 Web 页面还包括<xref:System.Web.UI.WebControls.Button>用户可以单击过期的缓存的数据的控件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]  
  
 第二个示例显示了一个处理程序<xref:System.Web.UI.Control.Load>事件和处理程序<xref:System.Web.UI.WebControls.Button.Click>事件的<xref:System.Web.UI.WebControls.Button>控件。 <xref:System.Web.UI.Control.Load>事件处理程序使用密钥设置为创建的缓存项<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>值。 <xref:System.Web.UI.WebControls.Button.Click>事件处理程序中移除其键等于的缓存项<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>值。 当移除缓存项时，依赖于该密钥的所有缓存的数据已过期。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]  
  
 第三个示例显示了与 Northwind 数据库进行交互的数据访问类。 类使用 LINQ 来查询员工表。 该示例需要 LINQ to SQL 类表示 Northwind 数据库和雇员表。 有关更多信息，请参见[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberSignature Language="F#" Value="member this.ConflictDetection : System.Web.UI.ConflictOptions with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值确定是仅将新值传递给 <see langword="Update" /> 方法，还是将旧值和新值都传递给 <see langword="Update" /> 方法。</summary>
        <value><see cref="T:System.Web.UI.ConflictOptions" /> 值之一。 默认值为 <see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性确定是否将旧的和新值的参数应用于指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性。 有关示例，该方法是否由指定<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性返回<xref:System.Data.DataTable>控件的列`Name`和`Number`，和<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions.OverwriteChanges>字段，用于创建参数`Name`并`Number`为`Update`方法。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions.CompareAllValues>值，用于创建参数`Name`， `Number`， `original_Name`，并`original_Number`。 (取决于原始值的参数的确切名称<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>属性。)<xref:System.Web.UI.WebControls.ObjectDataSource>然后确定方法是否在指定<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性具有相匹配的参数。  
  
 并发控制是一种数据存储区使用的控件如何读取和在多个客户端访问和操作同一数据存储区中更改数据的技术。 例如，一个客户端读取数据并呈现给用户，而另一个客户端读取相同的数据并呈现给其他用户。 如果两个用户更新的数据，并将其提交到数据存储，则可能会出现了意外的结果，因为这两个客户端可能会提供不同的值相同的数据。 这被视为冲突。 通过设置<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions.CompareAllValues>值，`Update`方法然后可以比较旧和新值传递到原始的数据源，以检测冲突并在必要时处理它们。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertNullToDBNull">
      <MemberSignature Language="C#" Value="public bool ConvertNullToDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertNullToDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull" />
      <MemberSignature Language="VB.NET" Value="Public Property ConvertNullToDBNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertNullToDBNull { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ConvertNullToDBNull : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示传递给更新、插入或删除操作的 <see cref="T:System.Web.UI.WebControls.Parameter" /> 值是否由 <see cref="F:System.DBNull.Value" /> 控件自动从 <see langword="null" /> 转换为 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 值。</summary>
        <value>如果传递给 <see cref="T:System.Web.UI.WebControls.Parameter" /> 控件的 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象中的任何 <see langword="true" /> 值自动转换为 <see cref="F:System.DBNull.Value" /> 值，则为 <see langword="null" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不转换`null`到<xref:System.DBNull.Value>值会在运行时导致错误。 使用<xref:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull%2A>属性以指示是否<xref:System.Web.UI.WebControls.Parameter>传递给更新、 插入或删除操作的值自动转换从`null`到<xref:System.DBNull.Value>值<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DBNull.Value" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="DataObjectTypeName">
      <MemberSignature Language="C#" Value="public string DataObjectTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataObjectTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property DataObjectTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataObjectTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataObjectTypeName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置某个类的名称，<see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件将该类用于更新、插入或删除数据操作中的参数，而不是从数据绑定控件传递个别的值。</summary>
        <value>部分或完全限定类名，用于标识可由 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用作 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />、<see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 或 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 操作的参数的对象类型。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 而不是指定多个参数传递给<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法，您可以创建多个数据字段值聚合的一个对象。 此对象传递给方法，而不是几个参数。  
  
 默认行为<xref:System.Web.UI.WebControls.ObjectDataSource>绑定到数据绑定控件的控件是数据绑定控件创建<xref:System.Web.UI.WebControls.Parameter>数据源中每个参数的对象。 如果业务对象具有许多字段，生成的方法还具有许多字段。 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性可以指定具有每个数据字段的属性的类型。 然后，而不是将多个参数传递给方法，在运行时创建一个对象，并设置其所有属性。 这一个对象添加到方法调用的参数集合。  
  
 通过指定的类型<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性必须具有默认构造函数没有参数，因此<xref:System.Web.UI.WebControls.ObjectDataSource>控件可以创建类型的实例。 此类型还必须具有可设置的属性，允许<xref:System.Web.UI.WebControls.ObjectDataSource>控件以使用从数据绑定控件传递的值填充该对象。 属性名<xref:System.Web.UI.WebControls.ObjectDataSource>控件需要与数据绑定控件传递的值的参数名称完全匹配。  
  
 当<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性设置和<xref:System.Web.UI.WebControls.ObjectDataSource>控件是与数据绑定控件，由指定的方法相关联<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性必须每个具有一个中指定的类型参数<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions.OverwriteChanges>值，通过指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性必须有一个参数中指定的类型的<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions.CompareAllValues>值，通过指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性必须具有两个参数中指定的类型的<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性。 第一个参数包含的原始值;第二个参数包含新值。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>关联<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
   
  
## Examples  
 部分包含两个代码示例。 第一个代码示例演示如何实现一个将所有参数值都合并到一个对象，类型使用<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性。 第二个代码示例演示使用中的第一个代码示例使用两个类的网页。  
  
 下面的代码示例演示如何实现一个将所有参数值都合并到一个对象，类型使用<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性。 Select 方法的`AggregateData`类返回<xref:System.Data.DataTable>对象包含两个名为的列`Name`和`Number`。 同样，`NewData`类定义两个读/写属性，`Name`和`Number`。 `Insert`方法`AggregateData`类采用一个参数类型的`NewData`。 `TypeName`的属性<xref:System.Web.UI.WebControls.ObjectDataSource>设置为`AggregateData`并且<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性设置为`NewData`。  
  
 [!code-csharp[ObjectDataSourceDataObjectTypeName#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateData.cs#2)]
 [!code-vb[ObjectDataSourceDataObjectTypeName#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateData.vb#2)]  
  
 下面的代码示例显示了使用在前面的代码示例使用两个类的网页。  
  
 [!code-aspx-csharp[ObjectDataSourceDataObjectTypeName#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateDataPageCS.aspx#1)]
 [!code-aspx-vb[ObjectDataSourceDataObjectTypeName#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateDataPageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
        <related type="Article" href="https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4">ObjectDataSource 控件中使用参数</related>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete();" />
      <MemberSignature Language="F#" Value="member this.Delete : unit -&gt; int" Usage="objectDataSource.Delete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过用 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> 集合中的所有参数调用由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" /> 属性标识的方法，执行删除操作。</summary>
        <returns>如果在 <see cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows" /> 事件中设置了 <see cref="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" /> 的 <see cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" /> 属性，则为表示从基础数据存储中删除的行数的值，否则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 之前<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>执行操作，则<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A>方法调用以引发<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件。 您可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件，检查参数的值，并执行任何预处理之前<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>操作。 若要执行删除操作，<xref:System.Web.UI.WebControls.ObjectDataSourceView>对象使用反射来创建由标识的对象的实例<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性。 然后，它调用由标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性，使用任何关联<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>属性。 如果删除参数来自关联的数据绑定控件，根据创建的参数名称<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>属性。 之后<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>操作完成后，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A>方法调用以引发<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>事件。 您可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>事件，以检查任何返回值、 输出参数和异常，并执行所有后期处理步骤。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法会委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
## <a name="data-bound-controls"></a>数据绑定控件  
 当<xref:System.Web.UI.WebControls.ObjectDataSource>控件关联的数据绑定控件，如<xref:System.Web.UI.WebControls.GridView>控件，不需要调用<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法从页面代码。 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>改为直接通过数据绑定控件调用方法。  
  
 有关参数合并、 对象生存期和方法解析的详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Deleted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>事件来检查返回值或输出参数的值或确定后是否引发了异常<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>操作已完成。 返回值、 输出参数和异常处理属性中有<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>与事件相关联的对象。  
  
 可以使用<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>对象返回已从删除的行数<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法。 若要执行此操作，设置<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>属性。 如果从指定的方法返回的已删除的行数<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性的值是从可用<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A>属性的<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>对象。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>对象是否与业务对象和一个<xref:System.Web.UI.WebControls.GridView>控件中删除数据。 第二个代码示例所示`EmployeeLogic`第一个代码示例中使用的类。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>控件与业务对象和一个<xref:System.Web.UI.WebControls.GridView>控件中删除数据。 最初，<xref:System.Web.UI.WebControls.GridView>控件显示的所有员工，使用指定的方法的一组<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性来检索从数据`EmployeeLogic`对象。 因为<xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>属性设置为`true`，则<xref:System.Web.UI.WebControls.GridView>控件自动显示**删除**按钮。  
  
 如果单击**删除**按钮，删除操作使用由指定的方法执行<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性和中指定任何参数<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合。 在此代码示例中，还执行一些预处理和后处理步骤。 `NorthwindEmployeeDeleting`委托调用以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件之前执行此操作并`NorthwindEmployeeDeleted`委托调用以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>后在操作完成执行异常处理的事件。 在此代码示例中，如果`NorthwindDataException`是抛出，它由处理`NorthwindEmployeeDeleted`方法。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 下面的代码示例演示`EmployeeLogic`前面的代码示例中使用的类。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteMethod">
      <MemberSignature Language="C#" Value="public string DeleteMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件调用以删除数据的方法或函数的名称。</summary>
        <value>一个字符串，表示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用于删除数据的方法或函数的名称。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 假定业务对象，而不是批处理中删除一条数据记录。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 请确保为配置的参数名称<xref:System.Web.UI.WebControls.ObjectDataSource>控件中<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合选择的方法返回的列名称匹配。  
  
## <a name="object-lifetime"></a>对象生存期  
 通过标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性可以是实例方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果它是实例方法，创建和销毁每次业务对象<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>调用属性。 可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>并<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件以使用业务对象之前<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>调用属性。 你还可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>后引发的事件<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>调用属性。 如果业务对象实现<xref:System.IDisposable>接口，<xref:System.IDisposable.Dispose%2A>销毁该对象前调用方法。 该方法是否`static`(`Shared`在 Visual Basic 中) 方法，永远不会创建业务对象，并不能处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。  
  
## <a name="parameter-merging"></a>合并的参数  
 参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>从三个源的集合：  
  
-   从在运行时的数据绑定控件。  
  
-   从`DeleteParameters`元素，以声明方式。  
  
-   从`Deleting`方法，以声明方式。  
  
 首先，通过数据绑定控件生成的任何参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合。 例如，如果<xref:System.Web.UI.WebControls.ObjectDataSource>控件绑定到<xref:System.Web.UI.WebControls.GridView>具有列控件`Name`并`Number`，参数`Name`和`Number`添加到集合。 取决于参数的确切名称<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>属性。 这些参数的数据类型是`string`。 下一步、 中列出的参数`DeleteParameters`添加元素。 如果中的参数`DeleteParameters`具有相同名称作为参数中已找到的元素<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>修改集合，现有的参数以匹配的参数中指定的`DeleteParameters`元素。 通常情况下，这用于修改的参数中的数据类型。 最后，您可以以编程方式添加和删除中的参数<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件之前发生<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>运行方法。 对参数进行合并后，解析方法。 下一节中讨论方法解析。  
  
## <a name="method-resolution"></a>方法解析  
 当<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>调用方法时，从数据绑定控件中以声明方式创建的参数的数据字段`DeleteParameters`元素和参数中的新增<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>所有合并事件处理程序。 （有关详细信息，请参阅上一节）。<xref:System.Web.UI.WebControls.ObjectDataSource>对象然后尝试查找要调用的方法。 首先，它会查找一个或多个方法中指定的名称与<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性。 如果不找到任何匹配项，则<xref:System.InvalidOperationException>引发异常。 如果找到匹配项，则会查找匹配的参数名。 例如，假设由指定的类型<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性具有两个方法名为`DeleteARecord`。 一个`DeleteARecord`具有一个形参`ID`，和其他`DeleteARecord`具有两个参数`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合具有名为只有一个参数`ID`，则`DeleteARecord`方法替换只是`ID`调用参数。 参数的类型不会签入解析方法。 参数的顺序不重要。  
  
 如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>设置属性，以不同方式解析方法。 <xref:System.Web.UI.WebControls.ObjectDataSource>方法中指定的名称查找<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>中指定属性，它采用一个参数的类型的<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性。 在这种情况下，参数的名称并不重要。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>对象是否与业务对象和一个<xref:System.Web.UI.WebControls.GridView>控件中删除数据。 第二个代码示例所示`EmployeeLogic`第一个代码示例中使用的类。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>控件与业务对象和一个<xref:System.Web.UI.WebControls.GridView>控件中删除数据。 最初，<xref:System.Web.UI.WebControls.GridView>控件显示的所有员工，使用指定的方法的一组<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性来检索从数据`EmployeeLogic`对象。 因为<xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>属性设置为`true`，则<xref:System.Web.UI.WebControls.GridView>控件自动显示**删除**按钮。  
  
 如果单击**删除**按钮，删除操作使用由指定的方法执行<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性和中指定任何参数<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合。 在此代码示例中，还执行一些预处理和后处理步骤。 `NorthwindEmployeeDeleting`委托调用以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件之前执行此操作，并`NorthwindEmployeeDeleted`委托调用以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>后在操作完成执行异常处理的事件。 在此示例中，如果`NorthwindDataException`是抛出，它由处理`NorthwindDataException`委托。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 下面的代码示例演示`EmployeeLogic`前面的代码示例中使用的类。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数集合，该集合包含由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> 方法使用的参数。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，包含由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> 方法使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名称和类型中包含的参数<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合的名称和中的参数的类型必须匹配<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>方法签名。 受影响的参数名称<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>属性和区分大小写。 集合中的参数取决于数据绑定控件、 以声明方式，指定的参数并以编程方式添加的参数的数据。 详细信息，请参阅"参数合并"中<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>并[使用的参数与 ObjectDataSource 控件](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>属性检索<xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A>所包含的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 有关参数合并、 对象生存期和方法解析的详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>对象是否与业务对象和一个<xref:System.Web.UI.WebControls.GridView>控件中删除数据。 第二个代码示例所示`EmployeeLogic`第一个代码示例中使用的类。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSource>与业务对象的控件和一个<xref:System.Web.UI.WebControls.GridView>控件中删除数据。 最初，<xref:System.Web.UI.WebControls.GridView>控件显示的所有员工，使用指定的方法的一组<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性来检索从数据`EmployeeLogic`对象。 因为<xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>属性设置为`true`，则<xref:System.Web.UI.WebControls.GridView>控件自动显示**删除**按钮。  
  
 如果单击**删除**按钮，<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件调用含有两个参数。 一个参数`EmpID`，来自<xref:System.Web.UI.WebControls.DataGrid>控件，并基于<xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A>属性。 其他参数来自声明性<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>属性。 `EmployeeLogic`类重载`DeleteEmployee`方法。 一个重载采用`NorthwindEmployee`参数，而另一种采用<xref:System.Int32>参数名为`anID`。 在中<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件中的条目<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>属性会进行调整，以包括名为只有一个参数`anID`中的值`original_EmpID`。 当事件处理程序存在，匹配`DeleteEmployee`调用方法。  
  
 下面的代码示例显示了显示的网页<xref:System.Web.UI.WebControls.DataGrid>控件和句柄<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_11#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/objds11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_11#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/objds11vb.aspx#1)]  
  
 下面的代码示例演示`EmployeeLogic`前面的代码示例中使用的类。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_11#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/northwindemployee11.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/northwindemployee11.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Deleting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件来执行特定于应用程序，以验证参数的值或更改之前的参数值的其他初始化<xref:System.Web.UI.WebControls.ObjectDataSource>控件执行删除操作。 参数都可用作<xref:System.Collections.IDictionary>访问的集合<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>属性，它公开由<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>对象。  
  
 可以通过设置取消删除操作<xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>到`true`。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>对象是否与业务对象和一个<xref:System.Web.UI.WebControls.GridView>控件中删除数据。 第二个代码示例所示`EmployeeLogic`第一个代码示例中使用的类。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>控件与业务对象和一个<xref:System.Web.UI.WebControls.GridView>控件中删除数据。 最初，<xref:System.Web.UI.WebControls.GridView>控件显示的所有员工，使用指定的方法的一组<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性来检索从数据`EmployeeLogic`对象。 因为<xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>属性设置为`true`，则<xref:System.Web.UI.WebControls.GridView>控件自动显示**删除**按钮。  
  
 如果单击**删除**按钮，删除操作使用由指定的方法执行<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性和中指定任何参数<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合。 在此代码示例中，还执行一些预处理和后处理步骤。 `NorthwindEmployeeDeleting`委托调用以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件之前执行此操作，并`NorthwindEmployeeDeleted`委托调用以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>后在操作完成执行异常处理的事件。 在此代码示例中，如果`NorthwindDataException`是抛出，它由处理`NorthwindEmployeeDeleted`方法。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 下面的代码示例演示`EmployeeLogic`前面的代码示例中使用的类。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件是否启用数据缓存。</summary>
        <value>如果为数据源控件启用数据缓存，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件支持的数据缓存。 缓存数据，而调用<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法从缓存中检索数据而不是<xref:System.Web.UI.WebControls.ObjectDataSource>创建业务对象的实例并调用其数据的方法。 缓存过期时，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法业务对象中检索数据，并再次将缓存数据。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件将自动缓存数据时<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>属性设置为`true`和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>属性设置为值大于 0，指示在缓存中存储数据的缓存项之前的秒数将被放弃。 值为 0 表示无限期的缓存。  
  
   
  
## Examples  
 以下三个示例显示 Web 页面、 代码隐藏页类和从 Northwind 数据库中的员工表中检索记录的数据访问类。  
  
 第一个示例演示包含两个网页<xref:System.Web.UI.WebControls.ObjectDataSource>控件，<xref:System.Web.UI.WebControls.DropDownList>控件，和一个<xref:System.Web.UI.WebControls.DetailsView>控件。 第一个<xref:System.Web.UI.WebControls.ObjectDataSource>控件和<xref:System.Web.UI.WebControls.DropDownList>控件用于检索和显示数据库中的雇员姓名。 第二个<xref:System.Web.UI.WebControls.ObjectDataSource>控件和<xref:System.Web.UI.WebControls.DetailsView>控件用于检索和显示用户所选的员工记录。  
  
 为启用缓存<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 因此，每条记录检索从数据库仅一次。 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>属性设置为"EmployeeDetails"，但任何字符串值可作为键。 Web 页面还包括<xref:System.Web.UI.WebControls.Button>用户可以单击过期的缓存的数据的控件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]  
  
 第二个示例显示了一个处理程序<xref:System.Web.UI.Control.Load>事件和处理程序<xref:System.Web.UI.WebControls.Button.Click>事件的<xref:System.Web.UI.WebControls.Button>控件。 <xref:System.Web.UI.Control.Load>事件处理程序使用密钥设置为创建的缓存项<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>值。 <xref:System.Web.UI.WebControls.Button.Click>事件处理程序中移除其键等于的缓存项<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>值。 当移除缓存项时，依赖于该密钥的所有缓存的数据已过期。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]  
  
 第三个示例显示了与 Northwind 数据库进行交互的数据访问类。 类使用 LINQ 来查询员工表。 该示例需要 LINQ to SQL 类表示 Northwind 数据库和雇员表。 有关更多信息，请参见[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">当由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" /> 属性指定的方法返回 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 时，会将 <see cref="T:System.Data.Common.DbDataReader" /> 属性设置为 <see langword="true" />。</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="EnablePaging">
      <MemberSignature Language="C#" Value="public bool EnablePaging { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePaging" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePaging As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePaging { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnablePaging : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示数据源控件是否支持对它检索的数据集进行分页。</summary>
        <value>如果数据源控件通过它检索的数据支持分页，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过分页<xref:System.Web.UI.WebControls.ObjectDataSource>控制处理通过设置<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性的<xref:System.Web.UI.WebControls.ObjectDataSource>和 select 方法定义中使用适当的参数的业务对象。 当<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>属性设置为`true`，则<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合包括请求的第一行和请求的行数的两个附加参数。 这两个参数的名称定义的<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>属性。 `Select`方法应返回请求的指定索引处开始的行数。 由于数据可能不按页大小均匀划分，最后一页可能会包含更少的行。 因此，请求的行数是实际返回的行的最大数目。  
  
 数据绑定控件关联的数据绑定控件上启用了分页，当调用`Select`方法的起始索引和所需的行数。 此外，如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性设置，数据绑定控件呈现的页导航控件之前调用的方法。 例如，如果<xref:System.Web.UI.WebControls.GridView>控件的页大小为 5，并由指定的方法与启用了分页<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性将返回 20，只有 4 页将显示页导航中。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>属性的<xref:System.Web.UI.WebControls.ObjectDataSourceView>对象。  
  
   
  
## Examples  
 以下三个示例显示 Web 页面、 代码隐藏页类，并使用户能够选择多少条记录显示在页中的数据访问类。  
  
 网页包含<xref:System.Web.UI.WebControls.ObjectDataSource>控件<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>属性设置为`true`。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性设置为在查询中返回的记录总数的方法的名称。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>属性和<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>属性设置为选择的方法中使用的参数的名称。 此页还包含<xref:System.Web.UI.WebControls.DropDownList>控件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 第二个示例显示了一个处理程序<xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType>事件的<xref:System.Web.UI.WebControls.DropDownList>控件。 中的处理程序集的代码<xref:System.Web.UI.WebControls.GridView.PageSize%2A>属性设置为用户的选择。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 第三个示例显示了从客户表中检索数据的数据访问类。 它包括一个名为方法`GetSubsetOfEmployees`，该值将赋给<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性的<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 该示例还包含一个名为方法`GetEmployeeCount`，该值将赋给<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性的<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 类使用 LINQ 来查询客户表。 该示例需要 LINQ to SQL 类表示 Northwind 数据库和 Customers 表。 有关更多信息，请参见[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterExpression : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当调用由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 属性指定的方法时应用的筛选表达式。</summary>
        <value>一个字符串，表示在使用由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 属性标识的方法或函数检索数据时应用的筛选表达式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件支持筛选数据时，才<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法将返回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>对象。  
  
 有关使用的语法<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性是一个格式字符串样式表达式。 筛选器表达式语法是相同的语法是接受的<xref:System.Data.DataColumn.Expression%2A>属性。 如果您将参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合，您还可以包含格式字符串占位符。 例如，包括`"{0}"`中要替换的参数值的表达式。 根据中的参数的索引替换占位符<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合。  
  
 可以包括在参数<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性。 如果参数的类型是字符串或字符类型，将参数括在单引号内。 如果参数的数值类型，则不需要引号。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合中包含的参数，其计算结果中找到占位符<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
> [!NOTE]
>  应验证从客户端接收任何筛选器参数值。 在运行时只需将参数值替换为筛选器表达式，并将其应用于<xref:System.Data.DataSet>或<xref:System.Data.DataTable>返回的对象<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 如果使用的<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性作为一种安全措施可限制返回，筛选发生之前，必须验证参数值的项的数目。  
  
   
  
## Examples  
 下面的代码示例演示如何显示使用的已筛选的数据<xref:System.Web.UI.WebControls.ObjectDataSource>中间层业务对象中检索数据的控件和一个<xref:System.Web.UI.WebControls.GridView>控件来显示结果。 <xref:System.Web.UI.WebControls.ObjectDataSource>控件可以筛选数据，仅当用于检索数据的方法检索其作为<xref:System.Data.DataSet>或<xref:System.Data.DataTable>对象。 出于此原因，<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性标识的数据检索为业务对象方法<xref:System.Data.DataSet>。  
  
 代码示例组成<xref:System.Web.UI.WebControls.TextBox>控件，<xref:System.Web.UI.WebControls.GridView>控件，<xref:System.Web.UI.WebControls.ObjectDataSource>控件，和一个**提交**按钮。 默认情况下，<xref:System.Web.UI.WebControls.TextBox>填入一个 Northwind Traders 员工的名称。 <xref:System.Web.UI.WebControls.GridView>显示有关中的名称由雇员的信息<xref:System.Web.UI.WebControls.TextBox>。 若要检索有关另一个雇员的数据，请输入中的雇员的全名<xref:System.Web.UI.WebControls.TextBox>，然后单击**提交**按钮。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性指定一个表达式，用于筛选的数据由指定的方法来检索<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。 它使用到中包含的参数进行求值的参数占位符<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合。 在此示例中，参数占位符受单引号会因为参数类型是字符串类型，可能会包含空格。 如果参数的类型为数值或日期类型，则不需要引号。  
  
> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 下面的代码示例提供了前面的代码示例使用中间层业务对象的一个示例。 代码示例包含两个基本类：  
  
-   `EmployeeLogic`类，该类是封装业务逻辑的类。  
  
-   `NorthwindEmployee`类，该类是一个包含仅加载和保存的数据层的数据所需的基本功能的模型类。  
  
 为简单起见，`EmployeeLogic`类创建一组静态的数据，而不是从数据层中检索数据。 也很有帮助的此示例中，因为此示例依赖于您提供的 Northwind Traders 员工来演示筛选的完整名称。 有关完整的工作示例，必须编译，并使用提供的 Web 窗体代码示例使用这些类。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">设置了 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 属性，但 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 方法没有返回 <see cref="T:System.Data.DataSet" /> 或 <see cref="T:System.Data.DataTable" />。</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As ObjectDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberSignature Language="F#" Value="member this.Filtering : System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler " Usage="member this.Filtering : System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行筛选操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.ObjectDataSource.Filtering>事件来验证对值执行操作筛选器参数之前<xref:System.Web.UI.WebControls.ObjectDataSource>控件执行筛选器操作。 可以通过设置取消所选的操作<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs>到`true`。 仅当引发该事件<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性设置。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Filtering?displayProperty=nameWithType>事件委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=nameWithType>的事件<xref:System.Web.UI.WebControls.ObjectDataSourceView>关联<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
> [!IMPORTANT]
>  应验证从客户端接收任何筛选器参数值。 在运行时只需将参数值替换为筛选器表达式，并将其应用于<xref:System.Data.DataSet>或<xref:System.Data.DataTable>返回的对象<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 如果使用的<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性作为一种安全措施可限制返回，筛选发生之前，必须验证参数值的项的数目。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 字符串中的任何参数占位符关联的参数的集合。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含与在 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 属性中找到的任何参数占位符相关联的一组参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件支持筛选数据时，才<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法将返回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>对象。  
  
 有关使用的语法<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>是一个格式字符串样式表达式。 筛选器表达式语法是相同的语法是接受的<xref:System.Data.DataColumn.Expression%2A>属性。 如果您将参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合，您还可以包含格式字符串占位符。 例如，包括`"{0}"`中要替换的参数值的表达式。 根据中的参数的索引替换占位符<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合。  
  
 可以包括在参数<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性。 如果参数是字符串或字符类型，将参数括在单引号内。 如果参数的数值类型，则不需要引号。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>属性检索<xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A>所包含的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何显示使用的已筛选的数据<xref:System.Web.UI.WebControls.ObjectDataSource>中间层业务对象中检索数据的对象和一个<xref:System.Web.UI.WebControls.GridView>控件来显示结果。 第二个代码示例提供了第一个代码示例中使用中间层业务对象的一个示例。  
  
 下面的代码示例演示如何显示使用的已筛选的数据<xref:System.Web.UI.WebControls.ObjectDataSource>中间层业务对象中检索数据的控件和一个<xref:System.Web.UI.WebControls.GridView>控件来显示结果。 <xref:System.Web.UI.WebControls.ObjectDataSource>控件可以筛选数据，仅当用于检索数据的方法检索其作为<xref:System.Data.DataSet>或<xref:System.Data.DataTable>对象。 出于此原因，<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性标识的数据检索为业务对象方法<xref:System.Data.DataSet>。  
  
 代码示例组成<xref:System.Web.UI.WebControls.TextBox>控件，<xref:System.Web.UI.WebControls.GridView>控件，<xref:System.Web.UI.WebControls.ObjectDataSource>控件，和一个**提交**按钮。 默认情况下，<xref:System.Web.UI.WebControls.TextBox>填入一个 Northwind Traders 员工的名称。 <xref:System.Web.UI.WebControls.GridView>显示有关中的名称由雇员的信息<xref:System.Web.UI.WebControls.TextBox>。 若要检索有关另一个雇员的数据在<xref:System.Web.UI.WebControls.TextBox>，输入该员工的完整名称，然后单击**提交**按钮。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性指定一个表达式，用于筛选将检索的数据<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。 它使用到中包含的参数进行求值的参数占位符<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合。 在此示例中，参数占位符受单引号会因为参数类型是字符串类型，可能会包含空格。 如果参数的类型为数值或日期类型，则不需要引号。 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合中包含一个参数<xref:System.Web.UI.WebControls.FormParameter>绑定到的对象<xref:System.Web.UI.WebControls.TextBox>控件。  
  
> [!IMPORTANT]
>  应验证从客户端接收任何筛选器参数值。 在运行时只需将参数值替换为筛选器表达式，并将其应用于<xref:System.Data.DataView>返回的对象<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 如果使用的<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性作为一种安全措施可限制返回，筛选发生之前，必须验证参数值的项的数目。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 下面的代码示例提供了前面的代码示例使用中间层业务对象的一个示例。 代码示例包含两个基本类：  
  
-   `EmployeeLogic`类，该类是封装业务逻辑的类。  
  
-   `NorthwindEmployee`类，该类是一个包含仅加载和保存的数据层的数据所需的基本功能的模型类。  
  
 为简单起见，`EmployeeLogic`类创建一组静态的数据，而不是从数据层中检索数据。 也很有帮助的此示例中，因为此示例依赖于您提供的 Northwind Traders 员工来演示筛选的完整名称。 有关完整的工作示例，必须编译，并使用提供的 Web 窗体代码示例使用这些类。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">您设置了 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 属性，但 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 方法没有返回 <see cref="T:System.Data.DataSet" /> 或 <see cref="T:System.Data.DataTable" />。</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="objectDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">要检索的视图的名称。 由于 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 只支持一个视图，因此 <paramref name="viewName" /> 被忽略。</param>
        <summary>检索与数据源控件关联的命名数据源视图。</summary>
        <returns>与 <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> 关联的名为 <see langword="DefaultView" /> 的 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件支持只有一个数据源视图。 与所有数据源视图对象一样<xref:System.Web.UI.WebControls.ObjectDataSourceView>关联的数据源控件定义它的功能、 执行所有工作，才可从基础数据存储中检索数据并都执行操作，如排序，插入、 删除和更新。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A>方法旨在由数据绑定控件，调用不是由页面代码。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定的 <paramref name="viewName" /> 为 <see langword="null" /> 或 <see langword="DefaultView" /> 以外的值。</exception>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="objectDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>检索名称的集合，这些名称表示与 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象关联的视图对象的列表。</summary>
        <returns>包含视图名称的 <see cref="T:System.Collections.ICollection" />，这些视图与 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 关联。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件只支持一个视图，名为`DefaultView`，其基础数据。 <xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A>方法返回一个视图同名的单个元素集合。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A>方法旨在由数据绑定控件，调用不是由页面代码。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert();" />
      <MemberSignature Language="F#" Value="member this.Insert : unit -&gt; int" Usage="objectDataSource.Insert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过调用由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" /> 属性标识的方法和 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" /> 集合中的所有参数，执行插入操作。</summary>
        <returns>一个表示插入到基础数据存储中的行数的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 之前<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>执行操作，则<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A>方法调用以引发<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件。 您可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件，检查参数的值，并执行任何预处理之前<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作。 若要执行插入操作，<xref:System.Web.UI.WebControls.ObjectDataSourceView>对象使用反射来创建由标识的对象的实例<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性。 然后，它调用由标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>属性，使用任何关联<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>属性。 之后<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作完成后，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A>方法调用以引发<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>事件。 您可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>事件，以检查任何返回值、 输出参数和异常，并执行所有后期处理步骤。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>方法会委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>关联<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 有关参数合并、 对象生存期和方法解析的详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>。  
  
## <a name="data-bound-controls"></a>数据绑定控件  
 当<xref:System.Web.UI.WebControls.ObjectDataSource>对象与之关联的数据绑定控件，如<xref:System.Web.UI.WebControls.GridView>控件，不需要调用<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>方法从页面代码。 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>改为直接通过数据绑定控件调用方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/a806fa2c-fe6a-405f-869c-74e804a642ea">演练：数据绑定到自定义业务对象</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Inserted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" /> 操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>事件来检查返回值或输出参数的值或确定后是否引发了异常<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作已完成。 返回值、 输出参数和异常处理属性中有<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>与事件相关联的对象。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Inserting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" /> 操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件来执行特定于应用程序，以验证参数的值或更改之前的参数值的其他初始化<xref:System.Web.UI.WebControls.ObjectDataSource>控件执行插入操作。 参数都可用作<xref:System.Collections.IDictionary>访问的集合<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>属性，它公开由<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>对象。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>对象是否与业务对象和一个<xref:System.Web.UI.WebControls.DetailsView>控件插入数据。 第二个代码示例提供了第一个代码示例中使用中间层业务对象的一个示例。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>控件与业务对象和一个<xref:System.Web.UI.WebControls.DetailsView>控件插入数据。 最初，<xref:System.Web.UI.WebControls.DetailsView>显示一个新`NorthwindEmployee`记录，以及自动生成**插入**按钮。 数据输入到的字段后<xref:System.Web.UI.WebControls.DetailsView>控件中，单击**插入**按钮。 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>属性标识哪一种方法执行插入操作。  
  
 在此示例中，`UpdateEmployeeInfo`方法用于执行 insert; 但是，它需要`NorthwindEmployee`参数以插入数据。 出于此原因，集合的字符串<xref:System.Web.UI.WebControls.DetailsView>控件传递自动是不够的。 `NorthwindEmployeeInserting`委托<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler>处理对象<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件并使你能够操作前的输入的参数<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作继续进行。 因为`UpdateEmployeeInfo`方法要求`NorthwindEmployee`对象作为参数，一个使用字符串的集合创建，添加到<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>使用参数名称的集合 (`ne`) 该方法。 作为数据源使用的类型和方法都不专门用于使用现有的中间层对象时，可能会执行类似这样的步骤<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 当<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>执行操作时，由标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>调用属性。 如果`Insert`对象的方法有包含参数，一个方法签名<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合中必须包含具有匹配的方法签名参数的名称的参数<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>方法成功完成。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]  
  
 下面的代码示例提供了前面的代码示例使用中间层业务对象的一个示例。 代码示例包含两个基本类：  
  
-   `EmployeeLogic`类，该类是一个无状态类封装业务逻辑。  
  
-   `NorthwindEmployee`类，该类是一个包含仅加载和保存的数据层的数据所需的基本功能的模型类。  
  
 附加`NorthwindDataException`类提供便利。 有关完整的工作示例，必须编译，并使用这些类。 `UpdateEmployeeInfo`方法未完全实现，因此你会将数据插入 Northwind Trader 数据库时使用此示例试验。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="InsertMethod">
      <MemberSignature Language="C#" Value="public string InsertMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件调用以插入数据的方法或函数的名称。</summary>
        <value>一个字符串，表示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用于插入数据的方法或函数的名称。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 假定业务对象，而不是批处理中插入一条数据记录。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>对象。  
  
## <a name="object-lifetime"></a>对象生存期  
 通过标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>属性可以是实例方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果它是实例方法，业务对象创建和销毁指定的方法的每次<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>调用属性。 可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>并<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件以使用业务对象之前<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>调用属性。 你还可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>由指定的方法后，将引发的事件<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>调用属性。 如果业务对象实现<xref:System.IDisposable>接口，<xref:System.IDisposable.Dispose%2A>销毁该对象前调用方法。 该方法是否`static`(`Shared`在 Visual Basic 中)，则永远不会在创建业务对象并不能处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。  
  
## <a name="parameter-merging"></a>合并的参数  
 参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>从三个源的集合：  
  
-   从在运行时的数据绑定控件。  
  
-   从`InsertParameters`元素，以声明方式。  
  
-   从`Inserting`方法，以编程方式。  
  
 首先，通过数据绑定控件生成的任何参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合。 例如，如果<xref:System.Web.UI.WebControls.ObjectDataSource>控件绑定到<xref:System.Web.UI.WebControls.GridView>具有各列的控件`Name`并`Number`，为参数`Name`和`Number`添加到集合。 这些参数的数据类型是`string`。 下一步、 中列出的参数`InsertParameters`添加元素。 如果中的参数`InsertParameters`具有相同名称作为参数中已找到的元素<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>修改集合，现有的参数以匹配的参数中指定的`InsertParameters`元素。 通常情况下，这用于修改的参数中的数据类型。 最后，您可以以编程方式添加和删除中的参数<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件之前发生<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>运行方法。 对参数进行合并后，解析方法。 下一节中讨论方法解析。  
  
> [!IMPORTANT]
>  应验证从客户端接收任何参数值。 运行时只需用到的参数值替换<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>属性。  
  
## <a name="method-resolution"></a>方法解析  
 当<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>调用方法时，从数据绑定控件中以声明方式创建的参数的数据字段`InsertParameters`元素和参数中的新增<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>所有合并事件处理程序。 （有关详细信息，请参阅上一节）。<xref:System.Web.UI.WebControls.ObjectDataSource>对象然后尝试查找要调用的方法。 首先，它会查找一个或多个方法中指定的名称与<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>属性。 如果不找到任何匹配项，则<xref:System.InvalidOperationException>引发异常。 如果找到匹配项，则会查找匹配的参数名。 例如，假设由指定的类型<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性具有两个方法名为`InsertARecord`。 一个`InsertARecord`具有一个形参`ID`，和其他`InsertARecord`具有两个参数`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合具有名为只有一个参数`ID`，则`InsertARecord`方法替换只是`ID`调用参数。 参数的类型不会签入解析方法。 参数的顺序不重要。  
  
 如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>设置属性，以不同方式解析方法。 <xref:System.Web.UI.WebControls.ObjectDataSource>方法中指定的名称查找<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>中指定属性，它采用一个参数的类型的<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性。 在这种情况下，参数的名称并不重要。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>对象是否与业务对象和一个<xref:System.Web.UI.WebControls.DetailsView>控件插入数据。 第二个代码示例提供了第一个代码示例中使用中间层业务对象的一个示例。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>控件与业务对象和一个<xref:System.Web.UI.WebControls.DetailsView>控件插入数据。 最初，<xref:System.Web.UI.WebControls.DetailsView>显示一个新`NorthwindEmployee`记录，以及自动生成**插入**按钮。 数据输入到的字段后<xref:System.Web.UI.WebControls.DetailsView>控件中，单击**插入**按钮。 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>属性标识哪一种方法执行插入操作。  
  
 在此示例中，`UpdateEmployeeInfo`方法用于执行 insert; 但是，它需要`NorthwindEmployee`参数以插入数据。 出于此原因，集合的字符串<xref:System.Web.UI.WebControls.DetailsView>控件传递自动是不够的。 `NorthwindEmployeeInserting`委托<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler>处理对象<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件并使你能够操作前的输入的参数<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作继续进行。 因为`UpdateEmployeeInfo`方法要求`NorthwindEmployee`对象作为参数，一个使用字符串的集合创建，添加到<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>使用参数名称的集合 (`ne`) 该方法。 作为数据源使用的类型和方法都不专门用于使用现有的中间层对象时，可能会执行类似这样的步骤<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 当<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>执行操作时，由标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>调用属性。 如果`Insert`对象的方法有包含参数，一个方法签名<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合中必须包含具有匹配的方法签名参数的名称的参数<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>方法成功完成。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]  
  
 下面的代码示例提供了前面的代码示例使用中间层业务对象的一个示例。 代码示例包含两个基本类：  
  
-   `EmployeeLogic`类，该类是一个无状态类封装业务逻辑。  
  
-   `NorthwindEmployee`类，该类是一个包含仅加载和保存的数据层的数据所需的基本功能的模型类。  
  
 附加`NorthwindDataException`类提供便利。 有关完整的工作示例，必须编译，并使用这些类。 `UpdateEmployeeInfo`方法未完全实现，因此你会将数据插入 Northwind Trader 数据库时使用此示例试验。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数集合，该集合包含由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" /> 属性使用的参数。</summary>
        <value>包含由 <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> 属性标识的方法所使用的参数的 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名称和类型中包含的参数<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合的名称和中的参数类型必须匹配<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>属性签名。 参数名称是区分大小写。 使用提供的参数，如数据绑定控件时<xref:System.Web.UI.WebControls.GridView>并<xref:System.Web.UI.WebControls.DetailsView>控件，<xref:System.Web.UI.WebControls.ObjectDataSource>控件自动合并具有的参数的集合中显式指定任何参数提供的数据绑定控件。 这是重要的因为数据绑定控件始终提供作为其参数<xref:System.String>类型，并且，如果方法签名包含数字或日期类型，您必须显式包含中的参数<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>与正确的类型的集合。 否则为<xref:System.Web.UI.WebControls.ObjectDataSource>控件尝试根据集合中的参数定义的类型参数强制转换。 有关详细信息，请参阅[ObjectDataSource 控件与使用参数](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>属性检索<xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A>所包含的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>关联<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 有关参数合并、 对象生存期和方法解析的详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>对象是否与业务对象和一个<xref:System.Web.UI.WebControls.DetailsView>控件插入数据。 第二个代码示例提供的示例实现`Insert`第一个代码示例中使用的方法。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>控件与业务对象和一个<xref:System.Web.UI.WebControls.DetailsView>控件插入数据。 最初，<xref:System.Web.UI.WebControls.DetailsView>文本框中，您可以在其中输入新的数据将显示`NorthwindEmployee`记录，以及自动生成**插入**按钮。 数据输入到的字段后<xref:System.Web.UI.WebControls.DetailsView>控件中，单击**插入**按钮。 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>属性标识哪一种方法执行插入操作。  
  
 如果单击**插入**按钮，该操作使用由指定的方法执行<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>属性和中指定任何参数<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合。 在此代码示例中，一个参数中指定<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合对应于监督程序的 id。 这是因为即使 ID 显示在<xref:System.Web.UI.WebControls.GridView.Rows%2A>集合<xref:System.Web.UI.WebControls.DetailsView>控制作为<xref:System.Web.UI.WebControls.BoundField>对象，它将作为字符串传递<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 通过将其添加显式设<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>具有集合<xref:System.Web.UI.WebControls.Parameter.Type%2A>属性设置为<xref:System.TypeCode.Int32>值，它将传递正确<xref:System.Web.UI.WebControls.ObjectDataSource>作为方法<xref:System.Int32>，而不是一个字符串。  
  
 当<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>执行操作时，由标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>调用属性。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>对象的方法有包含参数，一个方法签名<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合中必须包含具有匹配的方法签名参数的名称的参数<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>方法成功完成。  
  
> [!IMPORTANT]
>  应验证从客户端接收任何参数值。 运行时只需用到的参数值替换<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>属性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/objds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/objds8vb.aspx#1)]  
  
 下面的代码示例提供的示例实现`Insert`前面的代码示例使用的方法。 `InsertNewEmployeeWrapper`方法添加到`EmployeeLogic`中提供的中间层对象<xref:System.Web.UI.WebControls.ObjectDataSource>类概述以使对象可以更轻松地使用<xref:System.Web.UI.WebControls.ObjectDataSource>中 Web 方案中，而无需大量改写的实际控件业务逻辑。  
  
 若要运行该示例，必须具有`NorthwindEmployee`中提供的类<xref:System.Web.UI.WebControls.ObjectDataSource>类概述。 此示例说明了如何连接<xref:System.Web.UI.WebControls.ObjectDataSource>对使用参数提供新的数据库记录中获取数据的业务对象方法。 该示例不会不将记录添加到数据库，因为`Save`方法的`NorthwindEmployee`类不包括代码以更新数据库。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_8#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/northwindemployee8.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/northwindemployee8.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="objectDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">包含控件的已保存视图状态值的对象。</param>
        <summary>加载以前保存的 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件的视图状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法主要由.NET Framework 基础结构并不应在代码中直接使用。 但是，控件开发人员可以重写此方法以指定自定义服务器控件还原其视图状态的方式。 有关详细信息，请参阅[ASP.NET 状态管理概述](https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100))。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.LoadViewState%2A>方法用于加载以前保存的视图状态的<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" />扩展时，使用方法主要由控件开发人员<see cref="T:System.Web.UI.WebControls.ObjectDataSource" />控件。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="MaximumRowsParameterName">
      <MemberSignature Language="C#" Value="public string MaximumRowsParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MaximumRowsParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumRowsParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MaximumRowsParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumRowsParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("maximumRows")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置业务对象数据检索方法参数的名称，该参数用于指示要检索的数据源分页支持的记录数。</summary>
        <value>用于指示要检索的记录数的 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 参数名。 默认值是<c>"值"</c>。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>属性用于支持数据源分页。 有关如何通过支持分页<xref:System.Web.UI.WebControls.ObjectDataSource>控件，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
   
  
## Examples  
 以下三个示例显示 Web 页面、 代码隐藏页类，并使用户能够选择多少条记录显示在页中的数据访问类。  
  
 网页包含<xref:System.Web.UI.WebControls.ObjectDataSource>控件<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>属性设置为`true`。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性设置为在查询中返回的记录总数的方法的名称。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>属性和<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>属性设置为选择的方法中使用的参数的名称。 此页还包含<xref:System.Web.UI.WebControls.DropDownList>控件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 第二个示例显示了一个处理程序<xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType>事件的<xref:System.Web.UI.WebControls.DropDownList>控件。 中的处理程序集的代码<xref:System.Web.UI.WebControls.GridView.PageSize%2A>属性设置为用户的选择。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 第三个示例显示了从客户表中检索数据的数据访问类。 它包括一个名为方法`GetSubsetOfEmployees`，该值将赋给<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性的<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 该示例还包含一个名为方法`GetEmployeeCount`，该值将赋给<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性的<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 类使用 LINQ 来查询客户表。 该示例需要 LINQ to SQL 类表示 Northwind 数据库和 Customers 表。 有关更多信息，请参见[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectCreated As ObjectDataSourceObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceObjectEventHandler ^ ObjectCreated;" />
      <MemberSignature Language="F#" Value="member this.ObjectCreated : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " Usage="member this.ObjectCreated : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在创建由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> 属性标识的对象之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>事件可在业务对象上调用其他方法设置属性，或执行其他特定于之前的业务对象的初始化<xref:System.Web.UI.WebControls.ObjectDataSource>对象调用业务对象数据的方法来执行数据操作. 访问对对象的引用<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>属性，它公开由<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>对象。  
  
 标识执行数据操作的方法是否`static`(`Shared`在 Visual Basic 中)，则<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>永远不会引发事件。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectCreating As ObjectDataSourceObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceObjectEventHandler ^ ObjectCreating;" />
      <MemberSignature Language="F#" Value="member this.ObjectCreating : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " Usage="member this.ObjectCreating : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在创建由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> 属性标识的对象之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 标识执行数据操作的方法是否`static`(`Shared`在 Visual Basic 中)，则<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>永远不会引发事件。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件将自动调用的业务对象来创建它使用反射的一个实例的默认构造函数。 处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件来显式调用另一个构造函数，并将结果传递给对象的实例设置<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>关联的属性<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>对象。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>对象是否与业务对象和一个<xref:System.Web.UI.WebControls.GridView>控件来显示信息。 第二个代码示例提供了第一个代码示例中使用的中间层业务对象。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>控件与业务对象和一个<xref:System.Web.UI.WebControls.GridView>控件来显示信息。 你可能会使用网页执行的每个数据操作 （从时间或资源） 创建成本非常高的业务对象。 若要使用的高开销对象的一种方法可能是一次，创建它的一个实例并缓存而不是创建和销毁它为每个数据操作的后续操作。  
  
> [!NOTE]
>  在生产应用程序，多个请求可能最终会同时使用同一个实例。 因此，该对象必须实现以线程安全的方式。  
  
 此代码示例演示了此模式。 您可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件首先，检查对象的缓存，并仅创建对象的实例，如果尚未缓存。 然后，处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件来缓存供将来使用，而不是销毁它的业务对象。 在此代码示例中，<xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=nameWithType>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs>对象设置为`true`定向<xref:System.Web.UI.WebControls.ObjectDataSource>不要调用<xref:System.IDisposable.Dispose%2A>对象上的方法。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]  
  
 下面的代码示例提供了前面的代码示例使用示例中间层业务对象。 通过定义的基本业务对象的代码示例包含`EmployeeLogic`类，该类是一个有状态的类封装业务逻辑。 有关完整的工作示例，必须编译此代码作为库，并使用这些类的 ASP.NET 页 （.aspx 文件） 中。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnObjectCreating(System.Web.UI.WebControls.ObjectDataSourceEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="ObjectDisposing">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectDisposing As ObjectDataSourceDisposingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceDisposingEventHandler ^ ObjectDisposing;" />
      <MemberSignature Language="F#" Value="member this.ObjectDisposing : System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler " Usage="member this.ObjectDisposing : System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在丢弃由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> 属性标识的对象之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>丢弃的业务对象的实例之前始终引发事件。 如果业务对象实现<xref:System.IDisposable>接口，<xref:System.IDisposable.Dispose%2A>方法将引发此事件之后调用。  
  
 处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件，以在对象上调用其他方法设置属性，或执行清理该对象被销毁前的特定于该对象。 访问对对象的引用<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>属性，它公开由<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>对象。  
  
 当你使用<xref:System.Web.UI.WebControls.ObjectDataSource>控件使用 LINQ to SQL 类，必须取消的处理程序中的数据上下文类的释放<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。 此步骤是必需因为 LINQ to SQL 支持延迟的执行，而<xref:System.Web.UI.WebControls.ObjectDataSource>控件尝试选择操作之后释放数据上下文。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>对象是否与业务对象和一个<xref:System.Web.UI.WebControls.GridView>控件来显示信息。 第二个代码示例提供了第一个代码示例中使用的中间层业务对象。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>控件与业务对象和一个<xref:System.Web.UI.WebControls.GridView>控件来显示信息。 你可能会使用网页执行的每个数据操作 （从时间或资源） 创建成本非常高的业务对象。 若要使用的高开销对象的一种方法可能是一次，创建它的一个实例并缓存而不是创建和销毁它为每个数据操作的后续操作。 此示例演示了此模式。 您可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件首先，检查对象的缓存，并只能创建实例，如果尚未缓存。 然后，处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件来缓存供将来使用，而不是销毁它的业务对象。 在此代码示例中，<xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=nameWithType>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs>对象设置为`true`定向<xref:System.Web.UI.WebControls.ObjectDataSource>不要调用<xref:System.IDisposable.Dispose%2A>对象上的方法。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]  
  
 下面的代码示例提供了前面的代码示例使用示例中间层业务对象。 通过定义的基本业务对象的代码示例包含`EmployeeLogic`类，该类是一个有状态的类封装业务逻辑。 有关完整的工作示例，必须编译此代码作为库，并使用这些类的 ASP.NET 页 （.aspx 文件） 中。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]  
  
 下面的示例演示如何处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件时使用<xref:System.Web.UI.WebControls.ObjectDataSource>使用 LINQ to SQL 类的控件。  
  
```vb  
Public Sub ExampleObjectDisposing(ByVal sender As Object, _   
        ByVal e As ObjectDataSourceDisposingEventArgs)  
    e.Cancel = True  
End Sub  
```  
  
```csharp  
public void ExampleObjectDisposing(object sender,   
        ObjectDataSourceDisposingEventArgs e)  
{  
    e.Cancel = true;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OldValuesParameterFormatString : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个格式字符串，该字符串应用于传递给 <see langword="Delete" /> 或 <see langword="Update" /> 方法的原始值的参数名称。</summary>
        <value>一个表示格式字符串的字符串，它应用于传递给 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 或 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 方法的任何 <paramref name="oldValues" /> 或键参数的名称。 默认值是<c>"{0}"</c>，这意味着参数名称是字段名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>属性应用于为主键，如那些使用标识`DataKeyNames`属性的数据绑定控件，或在删除和更新方案其中<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions.CompareAllValues>值和原始值的集合传递到相应的数据方法。  
  
 以下是两个常见方案中，可能会更改<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>属性：  
  
-   您可能想要更改的属性中更新旧的和新值之间进行区分。 当<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions.CompareAllValues>值，参数对于原始的和新值添加到<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。 没有格式设置字符串，将为每个数据字段创建具有相同名称的两个参数。 通过更改原始值参数的名称，您可以比较到原始的数据源，以检测冲突并比较键值的数据。  
  
-   某些可视化设计器实现原始值和密钥的特定命名的方案。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="objectDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>将 <see cref="E:System.Web.UI.Page.LoadComplete" /> 事件处理程序添加到包含 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件的页。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.OnInit%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写时<see cref="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" />方法在派生类中，则一定要调用<see cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />方法的基类以便注册的委托接收事件。</para></block>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <altmember cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="ParsingCulture">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParsingCulture ParsingCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ParsingCulture ParsingCulture" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ParsingCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ParsingCulture As ParsingCulture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParsingCulture ParsingCulture { System::Web::UI::WebControls::ParsingCulture get(); void set(System::Web::UI::WebControls::ParsingCulture value); };" />
      <MemberSignature Language="F#" Value="member this.ParsingCulture : System.Web.UI.WebControls.ParsingCulture with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ParsingCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParsingCulture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当将字符串值转换为实际属性类型来构造由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" /> 指示的对象类型时，获取或设置表示哪些区域性信息被用了的值。</summary>
        <value>区域性信息。 默认值为 <see cref="F:System.Web.UI.WebControls.ParsingCulture.Invariant" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="objectDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件的状态。</summary>
        <returns>返回服务器控件的当前视图状态；如果没有与此控件关联的视图状态，则返回 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Function Select () As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; System.Collections.IEnumerable" Usage="objectDataSource.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过用 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 集合中的参数调用由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" /> 属性标识的方法，从基础数据存储中检索数据。</summary>
        <returns>一个数据行的 <see cref="T:System.Collections.IEnumerable" /> 列表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定的方法可能会有任何方法签名，但它必须返回或派生自的以下表中所列的类型之一<xref:System.Web.UI.WebControls.ObjectDataSource>控件才能成功调用。  
  
|返回类型|操作|  
|-----------------|------------|  
|<xref:System.Collections.IEnumerable>|<xref:System.Collections.IEnumerable>返回的<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Data.DataTable>|一个<xref:System.Data.DataView>通过创建<xref:System.Data.DataTable>并返回<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Data.DataView>|<xref:System.Data.DataView>返回的<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Data.DataSet>|第一个<xref:System.Data.DataTable>的<xref:System.Data.DataSet>提取和一个<xref:System.Data.DataView>是由创建和返回<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Object>|该对象包装在一个元素<xref:System.Collections.IEnumerable>集合，并返回由<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
  
 通过标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性可以是实例方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果它是实例方法，业务对象创建和销毁由指定的方法的每次<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>只不过使用同一个实例调用指定的方法调用属性<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性和由指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性。 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法将返回<xref:System.Collections.IEnumerable>接口。 但是，若要启用缓存和筛选方案，则返回值必须是<xref:System.Data.DataSet>对象。 虽然<xref:System.Data.DataSet>类未实现<xref:System.Collections.IEnumerable>接口，<xref:System.Web.UI.WebControls.ObjectDataSource>控件中自动提取默认<xref:System.Data.DataView>控制，它可以实现<xref:System.Collections.IEnumerable>。  
  
 之前<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>执行操作，则<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A>方法调用以引发<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件。 您可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件，检查参数的值，并执行任何预处理之前<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>操作。 若要执行数据检索操作，<xref:System.Web.UI.WebControls.ObjectDataSourceView>对象使用反射来创建由标识的对象的实例<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性。 然后，它调用由标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性，使用任何关联<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>属性。 之后<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>操作完成后，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A>方法调用以引发<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>事件。 您可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>事件，以检查任何返回值、 输出参数和异常，并执行所有后期处理步骤。  
  
 如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性返回<xref:System.Data.DataSet>， <xref:System.Data.DataTable>，或<xref:System.Data.DataView>对象并启用了缓存，<xref:System.Web.UI.WebControls.ObjectDataSource>将从其中检索数据并将数据保存到过程缓存<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>操作。 创建缓存，放弃或刷新基于指定的组合的缓存行为<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>属性。  
  
 如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性返回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>对象，和一个<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>指定属性、 使用任何提供计算<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>属性和生成的筛选器应用于过程中的数据列表<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>操作。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法会委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>关联<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 有关参数合并、 对象生存期和方法解析的详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。  
  
## <a name="data-bound-controls"></a>数据绑定控件  
 当<xref:System.Web.UI.WebControls.ObjectDataSource>控件关联的数据绑定控件，如<xref:System.Web.UI.WebControls.GridView>控件，不需要调用<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法从页面代码。 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>改为直接通过数据绑定控件调用方法。  
  
   
  
## Examples  
 有关代码示例，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSource>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCountMethod">
      <MemberSignature Language="C#" Value="public string SelectCountMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCountMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCountMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCountMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCountMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件调用以检索行数的方法或函数的名称。</summary>
        <value>表示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用于检索行数的方法或函数的名称的字符串。 此方法必须返回一个整数 (<see cref="T:System.Int32" />)。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性标识的业务对象方法用于检索的总行数，以支持数据源分页。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>仅当计算属性<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>属性设置为`true`。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 有关如何通过支持分页<xref:System.Web.UI.WebControls.ObjectDataSource>控件，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。  
  
   
  
## Examples  
 以下三个示例显示 Web 页面、 代码隐藏页类，并使用户能够选择多少条记录显示在页中的数据访问类。  
  
 网页包含<xref:System.Web.UI.WebControls.ObjectDataSource>控件<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>属性设置为`true`。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性设置为在查询中返回的记录总数的方法的名称。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>属性和<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>属性设置为选择的方法中使用的参数的名称。 此页还包含<xref:System.Web.UI.WebControls.DropDownList>控件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 第二个示例显示了一个处理程序<xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType>事件的<xref:System.Web.UI.WebControls.DropDownList>控件。 中的处理程序集的代码<xref:System.Web.UI.WebControls.GridView.PageSize%2A>属性设置为用户的选择。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 第三个示例显示了从客户表中检索数据的数据访问类。 它包括一个名为方法`GetSubsetOfEmployees`，该值将赋给<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性的<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 该示例还包含一个名为方法`GetEmployeeCount`，该值将赋给<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性的<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 类使用 LINQ 来查询客户表。 该示例需要 LINQ to SQL 类表示 Northwind 数据库和 Customers 表。 有关更多信息，请参见[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanRetrieveTotalRowCount" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Selected : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>事件来检查返回值或输出参数的值或确定后是否引发了异常<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>操作已完成。 返回值、 输出参数和异常处理属性中有<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>与事件相关联的对象。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 以下三个示例显示 Web 页面、 代码隐藏页类，并使用户能够检索和更新 Northwind 数据库中的员工表中的记录的数据访问类。  
  
 第一个示例演示包含两个网页<xref:System.Web.UI.WebControls.ObjectDataSource>控件，<xref:System.Web.UI.WebControls.DropDownList>控件，和一个<xref:System.Web.UI.WebControls.DetailsView>控件。 第一个<xref:System.Web.UI.WebControls.ObjectDataSource>控件和<xref:System.Web.UI.WebControls.DropDownList>控件用于检索和显示数据库中的雇员姓名。 第二个<xref:System.Web.UI.WebControls.ObjectDataSource>控件和<xref:System.Web.UI.WebControls.DetailsView>控件用于检索、 显示和修改用户所选员工记录中的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 第二个示例显示了处理程序<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>和<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected>事件处理程序序列化对象，其中包含员工表中检索到的数据。 序列化的对象存储在视图状态。 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件处理程序反序列化包含正在更新数据记录的原始数据的视图状态中的对象。 包含原始数据的对象作为参数传递给 Update 方法。 原始数据必须传递到数据库，以便可以使用它来检查数据是否已由另一个进程修改。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 第三个示例显示了与 Northwind 数据库进行交互的数据访问类。 类使用 LINQ 来查询和更新雇员表。 该示例需要 LINQ to SQL 类表示 Northwind 数据库和雇员表。 有关更多信息，请参见[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As ObjectDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler " Usage="member this.Selecting : System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件来执行特定于应用程序，以验证参数的值或更改之前的参数值的其他初始化<xref:System.Web.UI.WebControls.ObjectDataSource>控件执行数据检索操作。 参数都可用作<xref:System.Collections.IDictionary>访问的集合<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>属性，它公开由<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>对象。  
  
 可以触发此事件两次以调用一次<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法中，如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性设置。 <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A>属性的<xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs>对象用于确定是否调用了选择检索数据或检索计数。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="SelectMethod">
      <MemberSignature Language="C#" Value="public string SelectMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件调用以检索数据的方法或函数的名称。</summary>
        <value>一个字符串，表示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用于检索数据的方法或函数的名称。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定的方法可以具有任意方法签名，但它必须返回以下表中所示的类型之一<xref:System.Web.UI.WebControls.ObjectDataSource>控件才能成功调用。  
  
|返回类型|操作|  
|-----------------|------------|  
|<xref:System.Collections.IEnumerable>|<xref:System.Collections.IEnumerable>返回的<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Data.DataTable>|一个<xref:System.Data.DataView>使用创建<xref:System.Data.DataTable>并返回<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Data.DataView>|一个<xref:System.Data.DataView>返回的<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Data.DataSet>|第一个<xref:System.Data.DataTable>的<xref:System.Data.DataSet>提取时，和一个<xref:System.Data.DataView>是由创建和返回<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Object>|该对象包装在一个元素<xref:System.Collections.IEnumerable>集合，并返回由<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 当你使用<xref:System.Web.UI.WebControls.ObjectDataSource>类，以删除或更新数据时，请确保为配置的参数名称<xref:System.Web.UI.WebControls.ObjectDataSource>控制<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合或<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合选择的方法返回的列名称匹配.  
  
## <a name="object-lifetime"></a>对象生存期  
 通过标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性可以是实例方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果它是实例方法，业务对象创建和销毁由指定的方法的每次<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>调用属性。 可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>并<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件以使用指定的方法之前的业务对象<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>调用属性。 你还可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>由指定的方法后，将引发的事件<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>调用属性。 如果业务对象实现<xref:System.IDisposable>接口，<xref:System.IDisposable.Dispose%2A>销毁该对象前调用方法。 该方法是否`static`(`Shared`在 Visual Basic 中)，则永远不会在创建业务对象并不能处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。  
  
## <a name="parameter-merging"></a>合并的参数  
 参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>从这些源的集合：  
  
-   以声明方式从`SelectParameters`元素。  
  
-   以编程方式从`Selecting`方法。  
  
 首先，在列出的参数`SelectParameters`添加元素。 其次，参数将以编程方式添加和删除中<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件之前发生<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>运行方法。 对参数进行合并后，解析方法。 下一节中讨论方法解析。  
  
> [!IMPORTANT]
>  应验证从客户端接收任何参数值。 运行时只需用到的参数值替换<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。  
  
## <a name="method-resolution"></a>方法解析  
 当<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>调用方法时，从数据绑定控件中以声明方式创建的参数的数据字段`SelectParameters`元素和参数中的新增<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>所有合并事件处理程序。 （有关详细信息，请参阅上一节）。<xref:System.Web.UI.WebControls.ObjectDataSource>控制然后尝试查找要调用的方法。 首先，它会查找一个或多个方法中指定的名称与<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。 如果不找到任何匹配项，则<xref:System.InvalidOperationException>引发异常。 如果找到匹配项，则会查找匹配的参数名。 例如，假设由指定的类型<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性具有两个方法名为`SelectARecord`。 一个`SelectARecord`具有一个形参`ID`，和其他`SelectARecord`具有两个参数`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合具有名为只有一个参数`ID`，则`SelectARecord`方法替换只是`ID`调用参数。 参数的类型不会签入解析方法。 参数的顺序不重要。  
  
 如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>设置属性，以不同方式解析方法。 <xref:System.Web.UI.WebControls.ObjectDataSource>方法中指定的名称查找<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>中指定属性，它采用一个参数的类型的<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性。 在这种情况下，参数的名称并不重要。  
  
   
  
## Examples  
 下面的代码示例演示了如何<xref:System.Web.UI.WebControls.GridView>控件可以显示数据使用<xref:System.Web.UI.WebControls.ObjectDataSource>Web 窗体页上的控件。 <xref:System.Web.UI.WebControls.ObjectDataSource>标识的部分或完全限定的类名称及其<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性和方法调用以检索与数据其<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。 在运行时，创建对象并使用反射调用该方法。 <xref:System.Web.UI.WebControls.GridView>控件枚举<xref:System.Collections.IEnumerable>指定的方法返回的集合<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性，并显示数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数的集合，这些参数由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 属性指定的方法使用。</summary>
        <value>参数的集合，这些参数由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 属性指定的方法使用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>属性获取<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 您将参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>以声明方式使用集合`SelectParameters`元素或以编程方式中的处理程序<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件。 中列出的参数在运行时，`SelectParameters`首先元素添加到集合。 然后添加或删除的处理程序集合中的参数<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>前引发<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>运行方法。  
  
 之前<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>运行方法时，名称和类型中包含的参数<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合的由指定的方法签名必须匹配<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。 例如，如果名为的选择方法`GetEmployeesByStateAndAge`采用`string`和一个整数作为参数，<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合必须包含两个参数。 第一个参数必须解析为一个字符串，并且第二个参数必须解析为一个整数。 可以在标记中指定这两个参数`SelectParameters`元素。 或者，它们可以是可以在中添加<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>可以在标记中添加事件处理程序或一个参数，并且可以以编程方式添加另一个。  
  
 有关详细信息，请参阅[ObjectDataSource 控件与使用参数](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)和<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod>属性。  
  
> [!IMPORTANT]
>  中的代码<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件处理程序或由指定的方法中<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性，请确保验证从客户端收到的任何参数值。  
  
   
  
## Examples  
 下面的代码示例演示如何检索单个数据记录使用<xref:System.Web.UI.WebControls.ObjectDataSource>控件并将其显示在<xref:System.Web.UI.WebControls.DetailsView>控件。 <xref:System.Web.UI.WebControls.ObjectDataSource>控件中检索特定员工记录通过调用`GetEmployee`方法的`EmployeeLogic`类。 `GetEmployee`方法需要员工 ID 参数。 <xref:System.Web.UI.WebControls.ObjectDataSource>控件使用`QueryStringParameter`中创建的标记元素<xref:System.Web.UI.WebControls.QueryStringParameter>对象，将从 URL 检索指定的查询字符串参数的值并将其传递给`GetEmployee`方法。  
  
 其他参数类可用于从其他源，如控件属性、 窗体字段、 cookie、 ASP.NET 配置文件数据或会话状态中检索值。 此外可以使用标记中定义为了将硬编码值传递给 select 方法的参数对象。 有关可用的参数类的详细信息，请参阅[使用参数筛选的数据源控件与](https://msdn.microsoft.com/library/88622d04-2989-484e-93fe-594cd98dcf5f(v=vs.100))。  
  
 若要运行此示例中，您需要：  
  
-   具有一个名为的连接字符串的网站`NorthwindConnection`： 连接到 Northwind Trader 数据库。 有关详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource>类概述。  
  
-   `EmployeeLogic`所示的代码示例之一的类<xref:System.Web.UI.WebControls.ObjectDataSource>类概述。 类文件必须位于 App_Code 文件夹中。  
  
-   可以作为一个.aspx 页面运行示例代码。 如果请求不含查询字符串参数的页面，显示一条错误消息。 如果请求如使用查询字符串的页面`?empid=1`.aspx 文件的名称，您将看到的详细信息所请求的员工。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/CS/objds3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/VB/objds3vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SortParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SortParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置业务对象的名称，<see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 参数使用此业务对象指定数据源排序支持的排序表达式。</summary>
        <value>方法参数的名称，此方法参数用于指示哪个参数用于排序数据。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>属性用于支持数据源进行排序。 当<xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>上设置属性<xref:System.Web.UI.DataSourceSelectArguments>对象，并传递给<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法，<xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>值标识的参数名称<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>业务对象方法对数据进行排序依据。  
  
 如果<xref:System.Web.UI.WebControls.ObjectDataSource>与数据绑定控件，传递给窗体的以逗号分隔的字段值后跟此参数的值相关联`"ASC"`或`"DESC"`。 例如上, 是按升序排序的值`Name`将为`"Name ASC"`。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何实现支持排序的类型。 第二个代码示例演示如何实现的排序表达式。  
  
 下面的代码示例演示如何实现支持排序的类型。 `SelectMethod`的`SortingData`类采用一个参数， `sortExpression`。 传递给字符串`SelectMethod`用于<xref:System.Data.DataView.Sort%2A>的属性<xref:System.Data.DataView>返回的对象`SelectMethod`。  
  
 [!code-csharp[ObjectDataSourceSorting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingData.cs#1)]
 [!code-vb[ObjectDataSourceSorting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingData.vb#1)]  
  
 下面的代码示例演示如何实现的排序表达式。 Web 页面中的代码创建的实例<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性设置为`SortingData`并<xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>属性设置为`sortExpression`。 <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A>的属性<xref:System.Web.UI.WebControls.GridView>控件设置为`true`。 当用户单击**排序**按钮、 字段名称，`Name`或`Number`，传递给`SelectMethod`排序参数中。  
  
 [!code-aspx-csharp[ObjectDataSourceSorting#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingDataExample.aspx#2)]
 [!code-aspx-vb[ObjectDataSourceSorting#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingDataExampleVB.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanSort" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="SqlCacheDependency">
      <MemberSignature Language="C#" Value="public virtual string SqlCacheDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SqlCacheDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SqlCacheDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SqlCacheDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SqlCacheDependency : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个用分号分隔的字符串，指示用于 Microsoft SQL Server 缓存依赖项的数据库和表。</summary>
        <value>一个字符串，指示用于 SQL Server 缓存依赖项的数据库和表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控件支持可选的过期策略，基于<xref:System.Web.Caching.SqlCacheDependency>（数据库服务器必须配置该服务） 的数据缓存的对象。  
  
 SQL Server 支持两种机制缓存失效： 轮询和通知。 每种机制有不同的语法为<xref:System.Web.Caching.SqlCacheDependency>对象。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>仅支持轮询。 <xref:System.Web.Caching.SqlCacheDependency>字符串用来创建<xref:System.Data.SqlClient.SqlDependency>对象传递给<xref:System.Data.Common.DbCommand>构造函数之前<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>执行方法。 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>字符串标识数据库和表根据相同的格式由`@ Page`指令，其中字符串的第一个部分是 SQL Server 数据库的连接字符串后, 跟一个冒号分隔符，以及最后的名称数据库表的 (例如， `"connectionstring1:table1"`)。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>属性依赖于多个表中，连接字符串和表名称对由分号分隔 (例如， `"connectionstring1:table1";connectionstring2:table2"`)。  
  
 若要支持通知，必须编写的缓存逻辑的实现中您<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性和处理的构造<xref:System.Web.Caching.SqlCacheDependency>在代码中的对象。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何创建 SQL Server 缓存依赖项并设置<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>属性的<xref:System.Web.UI.WebControls.ObjectDataSource>对象。 第二个代码示例演示如何实现返回的包装器方法<xref:System.Data.DataSet>对象，以允许的缓存和筛选<xref:System.Web.UI.WebControls.ObjectDataSource>对象。  
  
 下面的代码示例演示如何创建 SQL Server 缓存依赖项并设置<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>属性的<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 在此示例中，每隔 120 秒轮询数据库。 如果在 Northwind Traders 雇员数据期间的表发生更改的时间，由缓存的任何数据<xref:System.Web.UI.WebControls.ObjectDataSource>控件并显示由<xref:System.Web.UI.WebControls.GridView>控件已过期，新的数据集检索页在下一个请求。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/CS/objds7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/VB/objds7vb.aspx#1)]  
  
 下面的代码示例演示如何实现返回的包装器方法<xref:System.Data.DataSet>对象，以允许的缓存和筛选<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 在基实现中的`EmployeeLogic`类，`GetAllEmployees`方法将返回<xref:System.Collections.ArrayList>对象。 而不是重构完全要使用的对象<xref:System.Web.UI.WebControls.ObjectDataSource>包装器方法在 Web 窗体页中，名为`GetAllEmployeesAsDataSet`返回的一组添加`NorthwindEmployee`数据作为<xref:System.Data.DataSet>。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="StartRowIndexParameterName">
      <MemberSignature Language="C#" Value="public string StartRowIndexParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StartRowIndexParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property StartRowIndexParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StartRowIndexParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StartRowIndexParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("startRowIndex")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置数据检索方法参数的名称，该参数用于指示为数据源分页支持检索的第一条记录的标识符的值。</summary>
        <value>业务对象方法参数的名称，该参数用于指示要检索的第一条记录。 该参数必须返回整数值。 默认值是<c>"startRowIndex"</c>。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>属性用于支持数据源分页。 有关如何通过支持分页<xref:System.Web.UI.WebControls.ObjectDataSource>控件，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
   
  
## Examples  
 以下三个示例显示 Web 页面、 代码隐藏页类，并使用户能够选择多少条记录显示在页中的数据访问类。  
  
 网页包含<xref:System.Web.UI.WebControls.ObjectDataSource>控件<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>属性设置为`true`。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性设置为在查询中返回的记录总数的方法的名称。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>属性和<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>属性设置为选择的方法中使用的参数的名称。 此页还包含<xref:System.Web.UI.WebControls.DropDownList>控件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 第二个示例显示了一个处理程序<xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType>事件的<xref:System.Web.UI.WebControls.DropDownList>控件。 中的处理程序集的代码<xref:System.Web.UI.WebControls.GridView.PageSize%2A>属性设置为用户的选择。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 第三个示例显示了从客户表中检索数据的数据访问类。 它包括一个名为方法`GetSubsetOfEmployees`，该值将赋给<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性的<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 该示例还包含一个名为方法`GetEmployeeCount`，该值将赋给<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性的<xref:System.Web.UI.WebControls.ObjectDataSource>控件。 类使用 LINQ 来查询客户表。 该示例需要 LINQ to SQL 类表示 Northwind 数据库和 Customers 表。 有关更多信息，请参见[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="objectDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>跟踪 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件的视图状态更改，以便将这些更改存储到 <see cref="T:System.Web.UI.StateBag" /> 对象中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.TrackViewState%2A>重写方法将标记作为对象的视图状态的一部分开始对控件的跟踪并保存更改的起始点。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象表示的类的名称。</summary>
        <value>标识 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 表示的对象类型的部分或完全限定类名。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为创建的对象实例<xref:System.Web.UI.WebControls.ObjectDataSource>控件绑定到，控件将使用反射来加载由类型名称标识在运行时的类型。 因此，值<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性可以是位于 Bin 或 App_Code 目录中的代码部分限定的类型或在全局程序集缓存中注册的代码的完全限定的类型名称。 如果使用全局程序集缓存，则必须添加到适当的引用`assemblies`Machine.config 或 Web.config 文件部分。  
  
 该类型必须具有默认构造函数，除非处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件自行创建它的一个实例。 每次调用创建的类型的实例<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法，如果在类型上的方法是成员方法。 如果方法是不创建实例`static`(`Shared`在 Visual Basic 中)。 如果该类型实现<xref:System.IDisposable>接口，<xref:System.IDisposable.Dispose%2A>销毁该对象前调用方法。  
  
   
  
## Examples  
 下面的代码示例演示了如何<xref:System.Web.UI.WebControls.GridView>控件可以显示数据，通过使用<xref:System.Web.UI.WebControls.ObjectDataSource>Web 窗体页上的控件。 <xref:System.Web.UI.WebControls.ObjectDataSource>标识的部分或完全限定的类名称及其<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性和方法调用以检索与数据其<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。 在运行时，创建对象并使用反射调用该方法。 <xref:System.Web.UI.WebControls.GridView>控件枚举<xref:System.Collections.IEnumerable>返回的集合<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性，并显示数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 下面的示例显示了类<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性值是指。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      <MemberSignature Language="VB.NET" Value="Public Function Update () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update();" />
      <MemberSignature Language="F#" Value="member this.Update : unit -&gt; int" Usage="objectDataSource.Update " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过调用 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> 属性标识的方法和 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" /> 集合中的所有参数，执行更新操作。</summary>
        <returns>一个值，表示基础数据存储中更新的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 假定业务对象，而不是批处理中更新数据一条记录。  
  
 之前<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>执行操作，则<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A>方法调用以引发<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件。 您可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件，检查参数的值，并执行任何预处理之前<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>操作。 若要执行更新操作，<xref:System.Web.UI.WebControls.ObjectDataSourceView>对象使用反射来创建由标识的对象的实例<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性。 然后，它调用由标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性，使用任何关联<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>属性。 之后<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>操作完成后，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A>方法调用以引发<xref:System.Web.UI.WebControls.ObjectDataSource.Updated>事件。 您可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Updated>事件，以检查任何返回值、 输出参数和异常，并执行所有后期处理步骤。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>方法会委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>关联<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 有关参数合并、 对象生存期和方法解析的详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>。  
  
> [!IMPORTANT]
>  应验证从客户端接收任何参数值。 运行时只需用到的参数值替换<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性。  
  
## <a name="data-bound-controls"></a>数据绑定控件  
 当<xref:System.Web.UI.WebControls.ObjectDataSource>控件关联的数据绑定控件，如<xref:System.Web.UI.WebControls.GridView>控件，不需要调用<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>方法从页面代码。 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>改为直接通过数据绑定控件调用方法。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用<xref:System.Web.UI.WebControls.DropDownList>控件，<xref:System.Web.UI.WebControls.TextBox>控件和多个<xref:System.Web.UI.WebControls.ObjectDataSource>要更新的数据对象。 第二个代码示例所示`EmployeeLogic`第一个代码示例中使用的类。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.DropDownList>控件，<xref:System.Web.UI.WebControls.TextBox>控件和多个<xref:System.Web.UI.WebControls.ObjectDataSource>控件更新数据。 <xref:System.Web.UI.WebControls.DropDownList>显示 Northwind 员工名称时<xref:System.Web.UI.WebControls.TextBox>控件用于输入和更新地址信息。 因为<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合中包含<xref:System.Web.UI.WebControls.ControlParameter>绑定到的所选值的对象<xref:System.Web.UI.WebControls.DropDownList>，引发的按钮<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>选择某个员工后才启用的操作。  
  
> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]  
  
 下面的代码示例演示`EmployeeLogic`前面的代码示例中使用的类。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Updated : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.ObjectDataSource.Updated>事件来检查返回值或输出参数的值或确定后是否引发了异常<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>操作已完成。 返回值、 输出参数和异常处理属性中有<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>与事件相关联的对象。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateMethod">
      <MemberSignature Language="C#" Value="public string UpdateMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件调用以更新数据的方法或函数的名称。</summary>
        <value>表示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用于更新数据的方法或函数的名称的字符串。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制假定由标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性，而不是批处理中的方式执行更新。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A>的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 请确保为配置的参数名称<xref:System.Web.UI.WebControls.ObjectDataSource>控件中<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合选择的方法返回的列名称匹配。  
  
## <a name="object-lifetime"></a>对象生存期  
 通过标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性可以是实例方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果它是实例方法，业务对象创建和销毁由指定的方法的每次<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>调用属性。 可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>并<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件以使用指定的方法之前的业务对象<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>调用属性。 你还可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>由指定的方法后，将引发的事件<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>调用属性。 如果业务对象实现<xref:System.IDisposable>接口，<xref:System.IDisposable.Dispose%2A>销毁该对象前调用方法。 该方法是否`static`(`Shared`在 Visual Basic 中)，则永远不会在创建业务对象并不能处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。  
  
## <a name="parameter-merging"></a>合并的参数  
 参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>从三个源的集合：  
  
-   从在运行时的数据绑定控件。  
  
-   从`UpdateParameters`元素，以声明方式。  
  
-   从<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件处理程序，以编程方式。  
  
 首先，通过数据绑定控件生成的任何参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。 例如，如果<xref:System.Web.UI.WebControls.ObjectDataSource>控件绑定到<xref:System.Web.UI.WebControls.GridView>具有各列的控件`Name`并`Number`，为参数`Name`和`Number`添加到集合。 取决于参数的确切名称<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>属性。 这些参数的数据类型是`string`。 下一步、 中列出的参数`UpdateParameters`添加元素。 如果中的参数`UpdateParameters`具有相同名称作为参数中已找到的元素<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>修改集合，现有的参数以匹配的参数中指定的`UpdateParameters`元素。 通常情况下，这用于修改的参数中的数据类型。 最后，您可以以编程方式添加和删除中的参数<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件之前发生<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>运行方法。 对参数进行合并后，解析方法。 下一节中讨论方法解析。  
  
> [!IMPORTANT]
>  应验证从客户端接收任何参数值。 运行时只需用到的参数值替换<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性。  
  
## <a name="method-resolution"></a>方法解析  
 当<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>调用方法时，从数据绑定控件中以声明方式创建的参数的数据字段`UpdateParameters`元素和参数中的新增<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>所有合并事件处理程序。 （有关详细信息，请参阅上一节）。<xref:System.Web.UI.WebControls.ObjectDataSource>控制然后尝试查找要调用的方法。 首先，它会查找一个或多个方法中指定的名称与<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性。 如果不找到任何匹配项，则<xref:System.InvalidOperationException>引发异常。 如果找到匹配项，则会查找匹配的参数名。 例如，假设由指定的类型<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性具有两个方法名为`UpdateARecord`。 一个`UpdateARecord`具有一个形参`ID`，和其他`UpdateARecord`具有两个参数`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合具有名为只有一个参数`ID`，则`UpdateARecord`方法替换只是`ID`调用参数。 参数的类型不会签入解析方法。 参数的顺序不重要。  
  
 如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>设置属性，以不同方式解析方法。 <xref:System.Web.UI.WebControls.ObjectDataSource>方法中指定的名称查找<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>中指定属性，它采用一个参数的类型的<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性。 在这种情况下，参数的名称并不重要。  
  
   
  
## Examples  
 以下三个示例显示 Web 页面、 代码隐藏页类，并使用户能够检索和更新 Northwind 数据库中的员工表中的记录的数据访问类。  
  
 第一个示例演示包含两个网页<xref:System.Web.UI.WebControls.ObjectDataSource>控件，<xref:System.Web.UI.WebControls.DropDownList>控件，和一个<xref:System.Web.UI.WebControls.DetailsView>控件。 第一个<xref:System.Web.UI.WebControls.ObjectDataSource>控件和<xref:System.Web.UI.WebControls.DropDownList>控件用于检索和显示数据库中的雇员姓名。 第二个<xref:System.Web.UI.WebControls.ObjectDataSource>控件和<xref:System.Web.UI.WebControls.DetailsView>控件用于检索、 显示和修改用户所选员工记录中的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 第二个示例显示了处理程序<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>和<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected>事件处理程序序列化对象，其中包含员工表中检索到的数据。 序列化的对象存储在视图状态。 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件处理程序反序列化包含正在更新数据记录的原始数据的视图状态中的对象。 包含原始数据的对象作为参数传递给 Update 方法。 原始数据必须传递到数据库，以便可以使用它来检查数据是否已由另一个进程修改。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 第三个示例显示了与 Northwind 数据库进行交互的数据访问类。 类使用 LINQ 来查询和更新雇员表。 该示例需要 LINQ to SQL 类表示 Northwind 数据库和雇员表。 有关更多信息，请参见[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数集合，该集合包含由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> 属性指定的方法使用的参数。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，包含由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> 属性指定的方法使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名称和类型中包含的参数<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合的名称和中的参数的类型必须匹配<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>方法签名。 受影响的参数名称<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>属性和区分大小写。 集合中的参数取决于数据绑定控件，以声明方式，指定的参数和以编程方式添加的参数中的数据。 有关详细信息，请参阅中的"参数合并"一节<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>并[ObjectDataSource 控件与使用参数](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>属性检索<xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A>所包含的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与之关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。  
  
 有关参数合并、 对象生存期和方法解析的详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>。  
  
> [!IMPORTANT]
>  应验证从客户端接收任何参数值。 运行时只需用到的参数值替换<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用<xref:System.Web.UI.WebControls.DropDownList>控件，<xref:System.Web.UI.WebControls.TextBox>控件和多个<xref:System.Web.UI.WebControls.ObjectDataSource>要更新的数据对象。 第二个代码示例所示`EmployeeLogic`第一个代码示例中使用的类。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.DropDownList>控件，<xref:System.Web.UI.WebControls.TextBox>控件和多个<xref:System.Web.UI.WebControls.ObjectDataSource>控件更新数据。 <xref:System.Web.UI.WebControls.DropDownList>显示 Northwind 员工名称时<xref:System.Web.UI.WebControls.TextBox>控件用于输入和更新地址信息。 因为<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合中包含<xref:System.Web.UI.WebControls.ControlParameter>绑定到的所选值<xref:System.Web.UI.WebControls.DropDownList>，引发的按钮<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>选择某个员工后才启用的操作。  
  
> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]  
  
 下面的代码示例演示`EmployeeLogic`前面的代码示例中使用的类。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Updating : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件来执行特定于应用程序，以验证参数的值或更改之前的参数值的其他初始化<xref:System.Web.UI.WebControls.ObjectDataSource>控件执行更新操作。 参数都可用作<xref:System.Collections.IDictionary>访问的集合<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>属性，它公开由<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>对象。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 以下三个示例显示 Web 页面、 代码隐藏页类，并使用户能够检索和更新 Northwind 数据库中的员工表中的记录的数据访问类。  
  
 第一个示例演示包含两个网页<xref:System.Web.UI.WebControls.ObjectDataSource>控件，<xref:System.Web.UI.WebControls.DropDownList>控件，和一个<xref:System.Web.UI.WebControls.DetailsView>控件。 第一个<xref:System.Web.UI.WebControls.ObjectDataSource>控件和<xref:System.Web.UI.WebControls.DropDownList>控件用于检索和显示数据库中的雇员姓名。 第二个<xref:System.Web.UI.WebControls.ObjectDataSource>控件和<xref:System.Web.UI.WebControls.DetailsView>控件用于检索、 显示和修改用户所选员工记录中的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 第二个示例显示了处理程序<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>和<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected>事件处理程序序列化对象，其中包含员工表中检索到的数据。 序列化的对象存储在视图状态。 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件处理程序反序列化包含正在更新数据记录的原始数据的视图状态中的对象。 包含原始数据的对象作为参数传递给 Update 方法。 原始数据必须传递到数据库，以便可以使用它来检查数据是否已由另一个进程修改。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 第三个示例显示了与 Northwind 数据库进行交互的数据访问类。 类使用 LINQ 来查询和更新雇员表。 该示例需要 LINQ to SQL 类表示 Northwind 数据库和雇员表。 有关更多信息，请参见[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
  </Members>
</Type>