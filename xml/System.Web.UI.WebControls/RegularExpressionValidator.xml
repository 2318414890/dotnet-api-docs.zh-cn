<Type Name="RegularExpressionValidator" FullName="System.Web.UI.WebControls.RegularExpressionValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e358a3f8986d8a40cc843ba451250087198461d2" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51871673" /></Metadata><TypeSignature Language="C#" Value="public class RegularExpressionValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RegularExpressionValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.RegularExpressionValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RegularExpressionValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegularExpressionValidator : System::Web::UI::WebControls::BaseValidator" />
  <TypeSignature Language="F#" Value="type RegularExpressionValidator = class&#xA;    inherit BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:RegularExpressionValidator runat="server" ErrorMessage="RegularExpressionValidator"&gt;&lt;/{0}:RegularExpressionValidator&gt;")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:RegularExpressionValidator runat=server ErrorMessage="RegularExpressionValidator"&gt;&lt;/{0}:RegularExpressionValidator&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>验证相关输入控件的值是否与正则表达式指定的模式匹配。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.RegularExpressionValidator>控制检查输入控件的值是否与所定义的正则表达式模式匹配。 此验证类型，可检查的字符，如电子邮件地址、 电话号码和邮政编码中的可预测序列。  
  
> [!NOTE]
>  验证成功的输入的控件是否为空。 如果关联的输入控件需要一个值，则使用<xref:System.Web.UI.WebControls.RequiredFieldValidator>除了控制<xref:System.Web.UI.WebControls.RegularExpressionValidator>控件。  
  
 除非在浏览器不支持客户端验证或客户端验证已显式禁用执行服务器端和客户端验证 (通过设置<xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A>属性设置为`false`)。  
  
 正则表达式验证实现是比在服务器上的客户端上略有不同。 在客户端上使用 JScript 正则表达式语法。 在服务器上，<xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType>使用语法。 由于 JScript 正则表达式语法是的子集<xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType>语法，它建议用于生成客户端和服务器上相同的结果 JScript 正则表达式语法。  
  
> [!NOTE]
>  当你使用<xref:System.Web.UI.WebControls.RegularExpressionValidator>控件内部<xref:System.Web.UI.UpdatePanel>控制，请确保验证程序控件与之关联的控件相同的面板。 有关使用详细信息<xref:System.Web.UI.UpdatePanel>控制部分页面更新，请参阅[局部页面呈现概述](https://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49)。  
  
 验证控件有关的其他信息，请参阅<xref:System.Web.UI.WebControls.BaseValidator>。 有关正则表达式的详细信息，请参阅[.NET Framework 正则表达式](~/docs/standard/base-types/regular-expressions.md)。  
  
## <a name="accessibility"></a>可访问性  
 有关如何配置此控件，以便它将生成符合辅助功能标准标记的信息，请参阅[Visual Studio 和 ASP.NET 中的辅助功能](https://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13)和[ASP.NET 控件和可访问性](https://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.RegularExpressionValidator>控件来验证五位数邮政编码。  
  
> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[Classic RegularExpressionValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic RegularExpressionValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic RegularExpressionValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic RegularExpressionValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
    <related type="Article" href="~/docs/standard/base-types/regular-expressions.md">.NET Framework 正则表达式</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegularExpressionValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.RegularExpressionValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegularExpressionValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.RegularExpressionValidator" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
        <altmember cref="T:System.Text.RegularExpressions.Regex" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.RegularExpressionValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="regularExpressionValidator.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">表示在客户端上呈现 HTML 内容的输出流的 <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>向指定的 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象添加控件需要呈现的 HTML 特性和样式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何重写<xref:System.Web.UI.WebControls.RegularExpressionValidator.AddAttributesToRender%2A>中的自定义服务器控件的方法，以便<xref:System.Web.UI.WebControls.RegularExpressionValidator>错误消息将始终显示为粗体。  
  
 [!code-csharp[CustomRegularExpressionValidatorAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomRegularExpressionValidatorAddAttributesToRender/CS/custom_regularexpressionvalidator_addattributestorender.cs#2)]
 [!code-vb[CustomRegularExpressionValidatorAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomRegularExpressionValidatorAddAttributesToRender/VB/custom_regularexpressionvalidator_addattributestorender.vb#2)]  
  
 下面的代码示例演示如何使用使用`CustomRegularExpressionValidatorAddAttributesToRender`在上述示例中，在 Web 窗体页中定义的控件。  
  
> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[CustomRegularExpressionValidatorAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomRegularExpressionValidatorAddAttributesToRender/CS/custom_regularexpressionvalidator_addattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomRegularExpressionValidatorAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomRegularExpressionValidatorAddAttributesToRender/VB/custom_regularexpressionvalidator_addattributestorendervb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
        <altmember cref="T:System.Text.RegularExpressions.Regex" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected override bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.RegularExpressionValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool EvaluateIsValid();" />
      <MemberSignature Language="F#" Value="override this.EvaluateIsValid : unit -&gt; bool" Usage="regularExpressionValidator.EvaluateIsValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示输入控件中的值是否有效。</summary>
        <returns>如果输入控件中的值有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何重写<xref:System.Web.UI.WebControls.RegularExpressionValidator.EvaluateIsValid%2A>方法中的自定义服务器控件，以便它始终会检查对中的匹配项的表达式值<xref:System.Web.UI.WebControls.RegularExpressionValidator>。  
  
> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-csharp[CustomRegularExpressionValidatorEvaluateIsValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomRegularExpressionValidatorEvaluateIsValid/CS/custom_regularexpressionvalidator_evaluateisvalid.cs#2)]
 [!code-vb[CustomRegularExpressionValidatorEvaluateIsValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomRegularExpressionValidatorEvaluateIsValid/VB/custom_regularexpressionvalidator_evaluateisvalid.vb#2)]  
  
 下面的代码示例演示如何使用`CustomRegularExpressionValidatorEvaluateIsValid`在上述示例中，在 Web 窗体页中定义的控件。  
  
 [!code-aspx-csharp[CustomRegularExpressionValidatorEvaluateIsValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomRegularExpressionValidatorEvaluateIsValid/CS/custom_regularexpressionvalidator_evaluateisvalidcs.aspx#1)]
 [!code-aspx-vb[CustomRegularExpressionValidatorEvaluateIsValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomRegularExpressionValidatorEvaluateIsValid/VB/custom_regularexpressionvalidator_evaluateisvalidvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
        <altmember cref="T:System.Text.RegularExpressions.Regex" />
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.RegularExpressionValidator.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchTimeout As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;int&gt; MatchTimeout { Nullable&lt;int&gt; get(); void set(Nullable&lt;int&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.MatchTimeout : Nullable&lt;int&gt; with get, set" Usage="System.Web.UI.WebControls.RegularExpressionValidator.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于在操作超时前执行单个匹配操作的最大时间间隔。</summary>
        <value>用于在操作超时前执行单个匹配操作的最大时间间隔。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationExpression">
      <MemberSignature Language="C#" Value="public string ValidationExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.RegularExpressionValidator.ValidationExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ValidationExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationExpression : string with get, set" Usage="System.Web.UI.WebControls.RegularExpressionValidator.ValidationExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.RegexTypeEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.RegexTypeEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.RegexTypeEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置确定字段验证模式的正则表达式。</summary>
        <value>指定用于验证字段格式的正则表达式的字符串。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性用于指定用于检查的字符，如社会安全号码、 电子邮件地址、 电话号码和邮政编码中可预测序列的模式。  
  
 <xref:System.Web.UI.WebControls.RegularExpressionValidator> 不对空字符串执行验证。 如果要测试的字符串可能为空，请使用<xref:System.Web.UI.WebControls.RequiredFieldValidator>并将<xref:System.Web.UI.WebControls.RegularExpressionValidator>。  
  
 有关正则表达式的详细信息，请参阅[.NET Framework 正则表达式](~/docs/standard/base-types/regular-expressions.md)。  
  
> [!NOTE]
>  如果遇到与模式匹配构造的问题，请尝试包装与表达式"^ （"和"） $"。 例如，"&#124;ab"变为"^ (&#124;ab) $"。  
  
 无法通过主题或样式表主题设置此属性。 有关详细信息，请参阅<xref:System.Web.UI.ThemeableAttribute>并[ASP.NET 主题和外观](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.UI.WebControls.RegularExpressionValidator.ValidationExpression%2A>属性来验证具有五个数字字段。 当<xref:System.Web.UI.WebControls.Button>单击控件时，生成<xref:System.Web.UI.WebControls.Button.OnClick%2A>事件处理程序检查<xref:System.Web.UI.Page.IsValid%2A>属性<xref:System.Web.UI.Page>以确定是否中的文本<xref:System.Web.UI.WebControls.TextBox>满足正则表达式。  
  
> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[Classic RegularExpressionValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic RegularExpressionValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic RegularExpressionValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic RegularExpressionValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">正则表达式的格式不对。</exception>
      </Docs>
    </Member>
  </Members>
</Type>