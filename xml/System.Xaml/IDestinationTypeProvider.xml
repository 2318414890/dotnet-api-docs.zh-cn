<Type Name="IDestinationTypeProvider" FullName="System.Xaml.IDestinationTypeProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="13c859988f910ff40697624953cd052610ee8e25" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46587751" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDestinationTypeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDestinationTypeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.IDestinationTypeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDestinationTypeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDestinationTypeProvider" />
  <TypeSignature Language="F#" Value="type IDestinationTypeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="7f99c-101">表示一个服务，该服务可返回目标类型的 CLR 类型系统标识符。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7f99c-101">Represents a service that can return a CLR type system identifier for the destination type.</span>
      </span>
      <span data-ttu-id="7f99c-102">与目标类型相关的情况是属性设置操作的目标类型由反射或其他机制间接报告。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7f99c-102">The destination type is relevant when the destination type for a property-setting operation is indirectly reported by reflection or other mechanisms.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f99c-103">返回的类型<xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A>通过使用当前的 XAML 架构上下文来解决从 XAML 节点流的当前位置。</span><span class="sxs-lookup"><span data-stu-id="7f99c-103">The type that is returned by <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> is resolved from the current position of the XAML node stream by using current XAML schema context.</span></span>  
  
 <span data-ttu-id="7f99c-104">如果由.NET Framework XAML 服务和访问服务上下文，在这些情况下实现使用 XAML 类型系统<xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A>返回<xref:System.Xaml.XamlType.UnderlyingType%2A>基于可用的 XAML 类型系统信息和基于 CLR 的 XAML 架构上下文。</span><span class="sxs-lookup"><span data-stu-id="7f99c-104">If you use the XAML type system as implemented by .NET Framework XAML Services and access the service context under these conditions, <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> returns the <xref:System.Xaml.XamlType.UnderlyingType%2A> based on available XAML type system information and CLR-based XAML schema context.</span></span>  
  
 <span data-ttu-id="7f99c-105">此服务是适用于其中纯 CLR 反射或其他机制可能会提供足够的信息有关的目标类型的情况。</span><span class="sxs-lookup"><span data-stu-id="7f99c-105">This service is relevant for situations where pure CLR reflection or other mechanisms might not provide enough information about a destination type.</span></span> <span data-ttu-id="7f99c-106">以下是一些相关方案的列表<xref:System.Xaml.IDestinationTypeProvider>:</span><span class="sxs-lookup"><span data-stu-id="7f99c-106">The following is a list of some relevant scenarios for <xref:System.Xaml.IDestinationTypeProvider>:</span></span>  
  
-   <span data-ttu-id="7f99c-107">CLR 类型系统报告间接类型由于 CLR 如何定义和使用类型，并且你想真实的目标类型。</span><span class="sxs-lookup"><span data-stu-id="7f99c-107">The CLR type system reports an indirect type because of how the CLR defines and uses types, and you want a true destination type.</span></span> <span data-ttu-id="7f99c-108">例如，.NET Framework XAML 服务中的 Api 使用此服务在内部它们处理事件成员时。</span><span class="sxs-lookup"><span data-stu-id="7f99c-108">For example, the APIs in .NET Framework XAML Services use this service internally when they process event members.</span></span> <span data-ttu-id="7f99c-109">事件报告的作为纯 CLR 反射<xref:System.Delegate>。</span><span class="sxs-lookup"><span data-stu-id="7f99c-109">Events are reported by pure CLR reflection as a <xref:System.Delegate>.</span></span>  
  
-   <span data-ttu-id="7f99c-110">你想要确保目标类型的类型转换器用法与类型转换器可以生成所需的类型相匹配。</span><span class="sxs-lookup"><span data-stu-id="7f99c-110">You want to ensure that the destination type of a type converter usage matches the expected type that the type converter can produce.</span></span> <span data-ttu-id="7f99c-111">此方案非常适合于在参数化的目标类型或泛型。</span><span class="sxs-lookup"><span data-stu-id="7f99c-111">This scenario is useful when the destination type is parameterized or generic.</span></span>  
  
-   <span data-ttu-id="7f99c-112">从嵌套在另一个值转换器的使用情况调用值转换器。</span><span class="sxs-lookup"><span data-stu-id="7f99c-112">Your value converter is being called from a usage that nested in another value converter.</span></span> <span data-ttu-id="7f99c-113">在这种情况下，<xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A>展开嵌套，并返回实际设置，而不是返回的输出类型的任何干预的值转换器的属性的目标类型。</span><span class="sxs-lookup"><span data-stu-id="7f99c-113">In this case, <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> unwinds the nesting and returns the destination type of the actual property being set, instead of returning the output type of any intervening value converter.</span></span>  
  
 <span data-ttu-id="7f99c-114">类型转换器和标记扩展可以查询<xref:System.Xaml.IDestinationTypeProvider>作为 XAML 对象编写器调用值转换行为时，XAML 对象编写器提供的服务上下文上的服务。</span><span class="sxs-lookup"><span data-stu-id="7f99c-114">Type converters and markup extensions can query for <xref:System.Xaml.IDestinationTypeProvider> as a service on the service context that is provided by a XAML object writer, when the XAML object writer invokes value conversion behavior.</span></span> <span data-ttu-id="7f99c-115">有关详细信息，请参阅[Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)并[Service Contexts Available to 类型转换器和标记扩展](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)。</span><span class="sxs-lookup"><span data-stu-id="7f99c-115">For more information, see [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md) and [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectWriter" />
    <related type="Article" href="http://msdn.microsoft.com/library/db07a952-05ce-4aa4-b6f9-aac7397d0326">
      <span data-ttu-id="7f99c-116">类型转换器或 XAML 的标记扩展</span>
      <span class="sxs-lookup">
        <span data-stu-id="7f99c-116">Type Converters or Markup Extensions for XAML</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="GetDestinationType">
      <MemberSignature Language="C#" Value="public Type GetDestinationType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDestinationType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IDestinationTypeProvider.GetDestinationType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDestinationType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetDestinationType();" />
      <MemberSignature Language="F#" Value="abstract member GetDestinationType : unit -&gt; Type" Usage="iDestinationTypeProvider.GetDestinationType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f99c-117">返回 CLR <see cref="T:System.Type" />，用于标识相关类型转换器或标记扩展的目标类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f99c-117">Returns the CLR <see cref="T:System.Type" /> that identifies the destination type for the relevant type converter or markup extension.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f99c-118">目标类型的 CLR <see cref="T:System.Type" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f99c-118">A CLR <see cref="T:System.Type" /> value for the destination type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f99c-119">此方法具有任何输入的参数。</span><span class="sxs-lookup"><span data-stu-id="7f99c-119">This method has no input parameter.</span></span> <span data-ttu-id="7f99c-120">要返回的内容 (以及是否而不返回任何内容`null`) 由 XAML 节点流中的当前节点位置。</span><span class="sxs-lookup"><span data-stu-id="7f99c-120">What to return (and whether to return anything other than `null`) is determined by the current node position in the XAML node stream.</span></span>  
  
## <a name="service-implementers"></a><span data-ttu-id="7f99c-121">服务实施者</span><span class="sxs-lookup"><span data-stu-id="7f99c-121">Service Implementers</span></span>  
 <span data-ttu-id="7f99c-122">如果重新实现此服务，<xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A>方法应返回的标记扩展或类型转换器预期检查时要对照其最具体的转换或输出类型的类型。</span><span class="sxs-lookup"><span data-stu-id="7f99c-122">If you reimplement this service, the <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> method should return the type that a markup extension or type converter expects to check against its most specific conversion or output type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>