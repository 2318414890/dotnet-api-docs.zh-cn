<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlType.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac514664bfd79f70a81adc02c3d6f947177210cafa4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">14664bfd79f70a81adc02c3d6f947177210cafa4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlType">
          <source>Reports information about XAML types as part of the overall XAML system that is implemented in .NET Framework XAML Services.</source>
          <target state="translated">报告作为整体 XAML 系统（在 .NET Framework XAML 服务中实现）的一部分的 XAML 类型相关信息。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>Many APIs in the <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> class provide information about XAML types, where the concept they report on is similar to particular sections of the XAML specification [MS-XAML].</source>
          <target state="translated">中的许多 Api<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>类提供有关 XAML 类型，它们报告的概念是类似于特定的 XAML 规范 [MS-XAML] 节的信息。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is used extensively in the .NET Framework XAML Services API for reporting information about a XAML type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 是广泛使用.NET Framework XAML 服务 API 中有关 XAML 类型的报表信息。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> reports the information that you might need to know about a XAML type in order to work with an instance or to access its members from a XAML node stream, or a similar XAML representation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 报告可能需要了解的有关 XAML 类型才能使用实例或从 XAML 节点流中或类似的 XAML 表示形式访问其成员的信息。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>Its reporting is similar to how the <ph id="ph1">&lt;xref:System.Type&gt;</ph> in the CLR type system, together with reflection classes such as <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, provide information about a CLR type and its usage.</source>
          <target state="translated">其 reporting 是类似于如何<ph id="ph1">&lt;xref:System.Type&gt;</ph>CLR 类型系统中，以及反射类如<ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>，提供有关 CLR 类型和其用法的信息。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>To extend the XAML type system, you can derive from <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">若要扩展的 XAML 类型系统，你可以从派生<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>To do so effectively, you might also need to implement a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>.</source>
          <target state="translated">若要有效执行此操作，你可能还需要实现<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> enables the generalized XAML type system to work with the type system backing that you specify as part of the invocation behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>启用通用的 XAML 类型系统，若要使用的类型系统支持你指定的调用行为的一部分。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>The specific custom <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> provides a way to reduce the dependencies on the CLR type system, which are used by the default <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> behavior.</source>
          <target state="translated">特定的自定义<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>提供一种方法，以减少在 CLR 类型系统中，所使用的默认值的依赖关系<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>行为。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlType">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
          <source>The underlying CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> for the XAML type to construct.</source>
          <target state="translated">要构造的 XAML 类型的基础 CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
          <source>XAML schema context for XAML readers or XAML writers.</source>
          <target state="translated">XAML 读取器或 XAML 编写器的 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> class based on the underlying CLR type information.</source>
          <target state="translated">基于基础 CLR 类型信息初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
          <source>One or more of <ph id="ph1">&lt;paramref name="underlyingType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph> are <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">一个或多个 <ph id="ph1">&lt;paramref name="underlyingType" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>The name of the type to create.</source>
          <target state="translated">要创建的类型的名称。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>The type arguments for a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> that represents a generic type.</source>
          <target state="translated">用于表示泛型类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的类型参数。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Can be (and often is) <ph id="ph1">&lt;see langword="null" /&gt;</ph>, which indicates that the represented type is not a generic type.</source>
          <target state="translated">可能为（并且通常为） <ph id="ph1">&lt;see langword="null" /&gt;</ph>，指示表示的类型不是泛型类型。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>XAML schema context for XAML readers and XAML writers.</source>
          <target state="translated">XAML 读取器和 XAML 编写器的 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> class based on a string name for the type.</source>
          <target state="translated">基于类型的字符串名称初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>This is a protected constructor.</source>
          <target state="translated">这是一个受保护的构造函数。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>No current public derived classes exist that use this particular path for construction.</source>
          <target state="translated">没有当前的公共派生的类存在用于构造此特定的路径。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>As a consumer of the existing <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, you must use the other constructor signatures (<ph id="ph2">&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29&gt;</ph>, <ph id="ph3">&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph>, or <ph id="ph4">&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph>) to initialize a <ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph> object.</source>
          <target state="translated">为现有的使用者<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，必须使用其他构造函数签名 (<ph id="ph2">&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29&gt;</ph>， <ph id="ph3">&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph>，或<ph id="ph4">&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph>) 初始化<ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>One or more of <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph> are <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">一个或多个 <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
          <source>The underlying type for the XAML type to construct.</source>
          <target state="translated">要构造的 XAML 类型的基础类型。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
          <source>XAML schema context for the XAML reader.</source>
          <target state="translated">XAML 读取器的 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> implementation that handles run-time reflection calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">可针对 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 处理运行时反射调用的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> class based on underlying type information and a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> implementation.</source>
          <target state="translated">基于基础类型信息和 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 实现初始化 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
          <source>One or more of <ph id="ph1">&lt;paramref name="underlyingType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph> are <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">一个或多个 <ph id="ph1">&lt;paramref name="underlyingType" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>The XAML namespace for the type, as a string.</source>
          <target state="translated">类型的 XAML 命名空间（字符串形式）。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>The name of the type in the provided <bpt id="p1">&lt;c&gt;</bpt>unknownTypeNamespace<ept id="p1">&lt;/c&gt;</ept> XAML namespace.</source>
          <target state="translated">提供的 <bpt id="p1">&lt;c&gt;</bpt>unknownTypeNamespace<ept id="p1">&lt;/c&gt;</ept> XAML 命名空间中类型的名称。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>The type arguments for a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> that represents a generic type.</source>
          <target state="translated">用于表示泛型类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的类型参数。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Can be (and often is) <ph id="ph1">&lt;see langword="null" /&gt;</ph>, which indicates that the represented type is not a generic type.</source>
          <target state="translated">可能为（并且通常为） <ph id="ph1">&lt;see langword="null" /&gt;</ph>，指示表示的类型不是泛型类型。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>XAML schema context for XAML readers or XAML writers.</source>
          <target state="translated">XAML 读取器或 XAML 编写器的 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> class based on the XAML namespace and a string name for the type.</source>
          <target state="translated">基于 XAML 命名空间和类型的字符串名称初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>This constructor is exclusively for analysis and XAML-node recording of type usages that are known to not have backing in the supporting type system and XAML schema context.</source>
          <target state="translated">此构造函数专用于已知在支持类型系统和 XAML 架构上下文中，没有支持的类型用法的分析和 XAML 节点记录。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Use this constructor only for "unknown" types where a XAML type that maps to an underlying type system is unavailable.</source>
          <target state="translated">使用此构造函数仅针对"未知"的类型映射到基础类型系统的 XAML 类型是不可用。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>This constructor might not produce a result where <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=nameWithType&gt;</ph> is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">此构造函数可能会产生结果其中<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=nameWithType&gt;</ph>是<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Instead, the default reflector logic reports the underlying type as <ph id="ph1">&lt;xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">相反，默认反射器逻辑将基础类型报告为<ph id="ph1">&lt;xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>However, this behavior can change because of the <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;</ph> override.</source>
          <target state="translated">但是，此行为可以更改由于<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;</ph>重写。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>One or more of <ph id="ph1">&lt;paramref name="unknownTypeNamespace" /&gt;</ph>, <ph id="ph2">&lt;paramref name="unknownTypeName" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="schemaContext" /&gt;</ph> are <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">一个或多个 <ph id="ph1">&lt;paramref name="unknownTypeNamespace" /&gt;</ph>、<ph id="ph2">&lt;paramref name="unknownTypeName" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="schemaContext" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.AllowedContentTypes">
          <source>Gets a read-only collection of the types that are usable as the <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ContentProperty" /&gt;</ph> value for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">获取类型的只读集合，这些类型可用作此 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ContentProperty" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.AllowedContentTypes">
          <source>A read-only collection of possible content types.</source>
          <target state="translated">可能的内容类型的只读集合。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.AllowedContentTypes">
          <source>Types that are assignable a specific content type (for example, assignable to a base type that is an allowed content type) are not considered multiple types for purposes of <ph id="ph1">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>.</source>
          <target state="translated">可分配的类型 （例如，分配给是允许的内容类型的基类型） 特定的内容类型不被视为出于的多个类型<ph id="ph1">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.AllowedContentTypes">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.BaseType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the immediate base type of this XAML type.</source>
          <target state="translated">获取此 XAML 类型的直接基类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.BaseType">
          <source>Determination of this value is based on the underlying type of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> and schema context.</source>
          <target state="translated">将基于此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的基础类型和架构上下文来确定此值。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the immediate base type of this XAML type.</source>
          <target state="translated">此 XAML 类型的直接基类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>By default, <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> returns an internal constant that represents an <ph id="ph2">&lt;xref:System.Object&gt;</ph> if <ph id="ph3">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
          <target state="translated">默认情况下，<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>返回内部常数，用于表示<ph id="ph2">&lt;xref:System.Object&gt;</ph>如果<ph id="ph3">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>是<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> 是虚拟的并且因此，可以重写。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改有关 XAML 类型的报告的类型信息，以便它不再按预期的方式其基础的 CLR 类型的类型系统信息一致。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">为了进行的赋值操作或访问任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>The type to check against the current <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> .</source>
          <target state="translated">要针对当前的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 检查的类型。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>Returns a value that indicates whether an instance of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> has the specified <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> in its list of assignable types.</source>
          <target state="translated">返回一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的实例在其可分配类型的列表中是否有指定的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="xamlType" /&gt;</ph> is in the assignable types list; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="xamlType" /&gt;</ph> 在可分配的类型列表中，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>Although the assignable type does not have all the capabilities of the reference type, you can use it for assignment.</source>
          <target state="translated">尽管可分配的类型不具有的引用类型的所有功能，你可以对分配来使用它。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>For example, you can use assignment to make type matches for the values of a property.</source>
          <target state="translated">例如，可以使用分配以使属性的值的类型匹配。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>The concept of assignable types in XAML is similar to the concept of casting up in the CLR type system.</source>
          <target state="translated">在 XAML 中的分配类型的概念是 CLR 类型系统中的向上转换的概念类似。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>For example, under a CLR type system, every type has an <ph id="ph1">&lt;xref:System.Object&gt;</ph> in its assignable type list.</source>
          <target state="translated">例如下的 CLR 类型系统，每个类型具有<ph id="ph1">&lt;xref:System.Object&gt;</ph>其可分配的类型列表中。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>If one of the two <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> instances that are used for comparison has <ph id="ph2">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> equal to <ph id="ph3">`true`</ph>, this method has a special Unknown mode that returns <ph id="ph4">`true`</ph> if the two <ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph> instances are equivalent.</source>
          <target state="translated">如果两种状态之一<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>使用实例比较具有<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>等于<ph id="ph3">`true`</ph>，此方法已返回特殊未知的模式<ph id="ph4">`true`</ph>如果两个<ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph>实例是否相等。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>The default implementation uses the CLR <ph id="ph1">&lt;xref:System.Type&gt;</ph> from <ph id="ph2">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> for this <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> and the input <ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph>, and calls <ph id="ph5">&lt;xref:System.Type.IsAssignableFrom%2A&gt;</ph>.</source>
          <target state="translated">默认实现使用 CLR<ph id="ph1">&lt;xref:System.Type&gt;</ph>从<ph id="ph2">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>此<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>和输入<ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph>，并调用<ph id="ph5">&lt;xref:System.Type.IsAssignableFrom%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>Override this method if you want a different determination of assignable types.</source>
          <target state="translated">如果你想分配类型的一种方式确定，重写此方法。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>Passing a null <ph id="ph1">`xamlType`</ph> does not throw an exception and always returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">传递 null<ph id="ph1">`xamlType`</ph>不会引发异常，并始终返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> 是虚拟的并且因此，可以重写。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the assignability of a XAML type so that it no longer aligns in an expected way with the type-casting behavior of its underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改的 XAML 类型可分配性，以便它不再按预期的方式其基础的 CLR 类型的类型转换行为一致。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">为了进行的赋值操作或访问任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.ConstructionRequiresArguments">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> must have arguments (generic constraints through <ph id="ph2">&lt;see langword="x:TypeArguments" /&gt;</ph>, initialization text, or other XAML techniques) to construct a valid instance of the type.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 是否必须具有参数（通过 <ph id="ph2">&lt;see langword="x:TypeArguments" /&gt;</ph> 实现的泛型约束、初始化文本或其他 XAML 技术）才能构造有效的类型实例。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ConstructionRequiresArguments">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if construction of an instance requires some argument value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果需要某个参数值才能构造实例，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ConstructionRequiresArguments">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ConstructionRequiresArguments">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the content property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">获取此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的内容属性的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 信息。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the content property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的内容属性的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 信息。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>May be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no content property exists.</source>
          <target state="translated">如果不存在内容属性，则可能为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>When using the binding or backing of the CLR type system, the XAML content property can be specified on a type by applying <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> to the type definition.</source>
          <target state="translated">当使用绑定或支持的 CLR 类型系统，可以通过应用指定的类型的 XAML 内容属性<ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>到类型定义。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>This property aligns to the <ph id="ph1">`[content property]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">此属性对齐到<ph id="ph1">`[content property]`</ph>[MS-XAML] 规范中的信息项。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed <ph id="ph1">&lt;see langword="Collection&amp;lt;T&amp;gt;" /&gt;</ph>.</source>
          <target state="translated">获取用于在内容属性不是严格类型匹配时包装其内容的类型，例如强类型 <ph id="ph1">&lt;see langword="Collection&amp;lt;T&amp;gt;" /&gt;</ph> 中的字符串。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>A read-only collection of possible content wrapper types; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">可能的内容包装类型的只读集合；否则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>If there are no wrappers to account for type match loosening, this property is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果不没有为类型匹配放宽考虑任何包装，此属性是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>Types that evaluate as <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> for a specific content type are not considered multiple types for purposes of <ph id="ph2">&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;</ph>.</source>
          <target state="translated">在计算中值的类型<ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph>对于特定的内容类型，可以不考虑多个类型的目的<ph id="ph2">&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>In the CLR binding for <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>, the XAML content wrapper type can be specified on a type as a <ph id="ph3">&lt;xref:System.Windows.Markup.ContentWrapperAttribute&gt;</ph>.</source>
          <target state="translated">在 CLR 绑定中为<ph id="ph1">&lt;xref:System.Xaml&gt;</ph>和<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>，可以将类型作为上指定的 XAML 内容包装类型<ph id="ph3">&lt;xref:System.Windows.Markup.ContentWrapperAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.DeferringLoader">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that represents the deferred loading conversion behavior for this type.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>，它表示此类型的延迟加载转换行为。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.DeferringLoader">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> constraint that represents the deferred loading behavior for this type.</source>
          <target state="translated">具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph>，表示此类型的延迟加载行为。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.DeferringLoader">
          <source>XAML template behavior in WPF is an example of deferred loading behavior.</source>
          <target state="translated">在 WPF 中的 XAML 模板行为是延迟的加载行为的一个示例。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.DeferringLoader">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.DeferringLoader">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlType">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">指示当前对象是否等于另一个对象。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Object)">
          <source>The object to compare with this object.</source>
          <target state="translated">要与此对象进行比较的对象。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Object)">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">指示当前对象是否等于另一个对象。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果当前对象等于 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> 参数，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
          <source>An object to compare with this object.</source>
          <target state="translated">一个与此对象进行比较的对象。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
          <target state="translated">指示当前对象是否等于同一类型的另一个对象。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="other" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果当前对象等于 <ph id="ph2">&lt;paramref name="other" /&gt;</ph> 参数，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
          <source>The directive for which to find the aliased member.</source>
          <target state="translated">要为其查找别名成员的指令。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
          <source>Returns the XAML member that is aliased to a XAML directive by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">返回由此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 将其别名设置为 XAML 指令的 XAML 成员。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
          <source>The aliased member, if found; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果可找到，则为别名成员，否则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this method can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，调用此方法可以调用<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>Returns a collection that contains all the attachable properties that are exposed by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">返回一个集合，该集合包含由此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 公开的所有可附加的属性。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>A collection that contains zero or more <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> values.</source>
          <target state="translated">一个包含零个或多个 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 值的集合。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>Each <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> in the returned collection should contain values that support the concept that the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> is an attachable member.</source>
          <target state="translated">每个<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>返回的集合中应包含的值的支持概念，<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>是可附加成员。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>For example, members should return <ph id="ph1">`true`</ph> for <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph>, a type for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>, and so on.</source>
          <target state="translated">例如，成员应返回<ph id="ph1">`true`</ph>为<ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph>，类型<ph id="ph3">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>，依次类推。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this method can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，调用此方法可以调用<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAllMembers">
          <source>Returns a collection that contains all the members that are exposed by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">返回一个集合，该集合包含由此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 公开的所有成员。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAllMembers">
          <source>A collection that contains zero or more <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> values.</source>
          <target state="translated">一个包含零个或多个 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 值的集合。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAllMembers">
          <source>Calls to this method can invoke <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph> overrides on <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">调用此方法可以调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph>上重写<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>The name of the attachable member to get, in <bpt id="p1">&lt;c&gt;</bpt>ownerTypeName.MemberName<ept id="p1">&lt;/c&gt;</ept> form.</source>
          <target state="translated">要获取的可附加成员的名称，形式为 <bpt id="p1">&lt;c&gt;</bpt>ownerTypeName.MemberName<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> representing a specific named attachable member of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">返回一个 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>，表示此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的一个命名的特定可附加成员。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> object for the requested attachable member; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if no attachable member by that name exists.</source>
          <target state="translated">请求的可附加成员的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 对象；如果不存在该名称的可附加成员，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>Calls to this method can invoke <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> overrides on <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">调用此方法可以调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph>上重写<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> 是虚拟的并且因此，可以重写。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改 XAML 类型的报告的成员，以便它们不再按与预期的方式对齐<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph><ph id="ph2">`Get*`</ph>有关基础 CLR 类型的信息。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">对于成员报告的任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetHashCode">
          <source>Returns the hash code for this object.</source>
          <target state="translated">返回该对象的哈希代码。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetHashCode">
          <source>An integer hash code.</source>
          <target state="translated">整数哈希代码。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>The name of the member to get (as a string).</source>
          <target state="translated">要获取的成员的名称（字符串形式）。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> for a specific named member from this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">从此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 中返回特定命名成员的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the member, if such a member was found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果已找到此类成员，则为成员的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 信息；否则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>The value for <ph id="ph1">`name`</ph> is expected to be unqualified.</source>
          <target state="translated">值<ph id="ph1">`name`</ph>应为非限定。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>Type-qualified names that indicate an attached member should be submitted to <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;</ph> instead.</source>
          <target state="translated">指明附加的成员的类型限定名称应提交到<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;</ph>相反。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>Prefixed member names should not be used; a prefix is situational to a usage and the XAML type system cannot know the context of such a usage and how the prefix is mapped.</source>
          <target state="translated">前缀的成员名称不应使用;前缀是态势到一种用法，XAML 类型系统无法知道这类用法的上下文，以及如何映射前缀。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>Calls to this method can invoke <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> overrides on <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">调用此方法可以调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph>上重写<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> 是虚拟的并且因此，可以重写。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改 XAML 类型的报告的成员，以便它们不再按与预期的方式对齐<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph><ph id="ph2">`Get*`</ph>有关基础 CLR 类型的信息。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">对于成员报告的任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>The count (arity) of the particular syntax or constructor mode that you want information about.</source>
          <target state="translated">您需要其相关信息的特定语法或构造函数模式的计数 (arity)。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">对于标记扩展类型，返回此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的特定标记扩展用法中所支持位置参数的类型。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> values, where each <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is the type for that position in the syntax.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 值的列表，其中每个 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 都是该位置在语法中的类型。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>You must specify the types in the same order when you supply markup input for the markup extension.</source>
          <target state="translated">您必须按照为标记扩展提供标记输入时的相同顺序指定类型。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>This API is only relevant if this <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a markup extension (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph> is <ph id="ph3">`true`</ph>).</source>
          <target state="translated">此 API 才是相关，如果此<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>表示标记扩展 (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>是<ph id="ph3">`true`</ph>)。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>The input <ph id="ph1">`parameterCount`</ph> is not for requesting the type of a specific positional parameter.</source>
          <target state="translated">输入<ph id="ph1">`parameterCount`</ph>不适用于请求特定的位置参数的类型。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>It is for specifying the arity of a markup extension usage.</source>
          <target state="translated">它可用于指定 arity 的标记扩展用法。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>Markup extension usage often has multiple "signatures" and uses different parameter arity (count) of positional parameters to differentiate.</source>
          <target state="translated">通常，标记扩展用法有多个"签名"，并使用不同的参数 arity （计数） 的位置参数来区分。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</source>
          <target state="translated">但是，你可以配置架构上下文，以允许重复 arities 和使用差异的类型的位置参数。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;</ph>.</source>
          <target state="translated">有关详情，请参阅<ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>For a specific arity (count), the parameter positions and types can vary.</source>
          <target state="translated">对于特定 arity （计数），可以改变的参数位置和类型。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>To get the positional type of a specific arity's markup extension usage, you first call <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph> specifying the arity count.</source>
          <target state="translated">若要获取的位置的一种特定 arity 的标记扩展用法，请先调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph>指定 arity 计数。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>Then get the item at that position from the returned collection.</source>
          <target state="translated">然后从返回的集合，该位置获取项。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>Calls to this method can invoke <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupPositionalParameters%2A&gt;</ph> overrides on <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">调用此方法可以调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupPositionalParameters%2A&gt;</ph>上重写<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>Returns a list of string identifiers for XAML namespaces that the type is included in.</source>
          <target state="translated">为包括了类型的 XAML 命名空间返回字符串标识符的列表。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>A list of string values, where each string is the URI identifier for a XAML namespace.</source>
          <target state="translated">字符串值的列表，其中的每个字符串都是 XAML 命名空间的 URI 标识符。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>Typical XAML namespace identifiers are strings in URI form.</source>
          <target state="translated">典型 XAML 命名空间标识符是 URI 形式的字符串。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>The default implementation checks the following, in order: the XAML namespace that is supplied in construction (<ph id="ph1">&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph> signature only); and the namespaces that are available from the schema context.</source>
          <target state="translated">默认实现将检查以下内容，按顺序： 在构造中提供的 XAML 命名空间 (<ph id="ph1">&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph>签名仅); 和命名空间的架构上下文可用。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>If these are each <ph id="ph1">`null`</ph>, a new list is generated that contains a single empty string.</source>
          <target state="translated">如果这些是每个<ph id="ph1">`null`</ph>，包含一个空字符串，则生成的新列表。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>You can override this method to change the lookup methodology.</source>
          <target state="translated">你可以重写此方法可以更改的查找方法。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.Invoker">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">获取与此 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 关联的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Invoker">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">与此 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 关联的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Invoker">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calling <ph id="ph2">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph> can invoke either <ph id="ph3">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，则调用<ph id="ph2">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph>可能调用<ph id="ph3">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph>或该方法的特定重写。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Invoker">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Invoker">
          <source>If a <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph> override returns <ph id="ph2">`null`</ph>, or if the default implementation returns <ph id="ph3">`null`</ph> because of lack of <ph id="ph4">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> for this <ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph>, then <ph id="ph6">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph> returns <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph>重写返回<ph id="ph2">`null`</ph>，或如果默认实现返回<ph id="ph3">`null`</ph>由于缺乏<ph id="ph4">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>此<ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph>，然后<ph id="ph6">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph>返回<ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsAmbient">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an ambient type, as per the XAML definition.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 按照 XAML 定义是否表示环境类型。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsAmbient">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an ambient type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示环境类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsAmbient">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsAmbient">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsArray">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an array.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 是否表示数组。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsArray">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an array; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示数组，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsArray">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsArray">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsCollection">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a collection.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 是否表示集合。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsCollection">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a collection; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示集合，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsCollection">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsCollection">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsConstructible">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a constructible type, as per the XAML definition.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 按照 XAML 定义是否表示可构造类型。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsConstructible">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a constructible type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示可构造类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsConstructible">
          <source>This property aligns to the <ph id="ph1">`[is default constructible]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">此属性对齐到<ph id="ph1">`[is default constructible]`</ph>[MS-XAML] 规范中的信息项。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsConstructible">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsConstructible">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsDictionary">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a dictionary, as per the XAML definition.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 按照 XAML 定义是否表示字典。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsDictionary">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a dictionary; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示字典，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsDictionary">
          <source>This property aligns to the <ph id="ph1">`[is dictionary]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">此属性对齐到<ph id="ph1">`[is dictionary]`</ph>[MS-XAML] 规范中的信息项。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsDictionary">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsDictionary">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsGeneric">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a generic type.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 是否表示泛型类型。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsGeneric">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a generic type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示泛型类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsGeneric">
          <source>This property is a helper property that checks for a null value of <ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph>.</source>
          <target state="translated">此属性是一个帮助器属性，检查是否有空值的<ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsGeneric">
          <source>There is no specific <ph id="ph1">`Lookup`</ph> method related to <ph id="ph2">&lt;xref:System.Xaml.XamlType.IsGeneric%2A&gt;</ph>.</source>
          <target state="translated">没有任何特定<ph id="ph1">`Lookup`</ph>方法与<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsGeneric%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsMarkupExtension">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a markup extension.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 是否表示标记扩展。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsMarkupExtension">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a markup extension; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示标记扩展，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsMarkupExtension">
          <source>In XAML specification terms, this type must be assignable to <ph id="ph1">`x:MarkupExtension`</ph> in order to return <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>.</source>
          <target state="translated">在 XAML 规范术语中，此类型必须可赋给<ph id="ph1">`x:MarkupExtension`</ph>为了返回<ph id="ph2">`true`</ph>为<ph id="ph3">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsMarkupExtension">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsMarkupExtension">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a XAML namescope, as per the XAML definition.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 按照 XAML 定义是否表示 XAML 名称范围。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a XAML namescope; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示 XAML 名称范围，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>A XAML namescope enforces the name uniqueness of the property or properties used for <ph id="ph1">`x:Name`</ph><ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>.</source>
          <target state="translated">XAML 名称范围强制实施的或多个属性用于名称的唯一性<ph id="ph1">`x:Name`</ph> <ph id="ph2"> / </ph> <ph id="ph3">`[name property]`</ph>。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph> is <ph id="ph2">`true`</ph>, some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph>是<ph id="ph2">`true`</ph>，强制唯一性的某种机制都应存在，并且应从拥有 XAML 名称范围的此类型角度进行评估。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>The XAML namescope then extends to the content of the type until another XAML namescope-owning type is encountered.</source>
          <target state="translated">在遇到另一个 XAML 名称范围所属类型之前，XAML 名称范围随后扩展到类型的内容。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>This property aligns to the <ph id="ph1">`[is name scope]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">此属性对齐到<ph id="ph1">`[is name scope]`</ph>[MS-XAML] 规范中的信息项。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsNameScope%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsNameScope%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsNameValid">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is initialized by using a valid <ph id="ph2">&lt;see langword="xamlName" /&gt;</ph> string as its <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.Name" /&gt;</ph>.</source>
          <target state="translated">获取一个值，该值指示是否使用有效的 <ph id="ph2">&lt;see langword="xamlName" /&gt;</ph> 字符串作为其 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 来初始化此 <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.Name" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameValid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is initialized by using a valid <ph id="ph3">&lt;see langword="xamlName" /&gt;</ph> string; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果使用有效的 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 字符串来初始化此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>，则为 <ph id="ph3">&lt;see langword="xamlName" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsNullable">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a nullable type, as per the XAML definition.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 按照 XAML 定义是否表示可以为 null 的类型。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNullable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a nullable type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示可以为 null 的类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNullable">
          <source>This property aligns to the <ph id="ph1">`[is nullable]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">此属性对齐到<ph id="ph1">`[is nullable]`</ph>[MS-XAML] 规范中的信息项。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNullable">
          <source>If you are not using the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsNullable%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果你未使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsNullable%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsPublic">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a public type in the relevant type system.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 是否表示相关类型系统中的公共类型。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a public type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示公共类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsPublic">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsPublic">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> 是虚拟的并且因此，可以重写。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsPublic">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system and access information of its underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改报告的访问有关 XAML 类型的信息，以便它不再按预期的方式其基础的 CLR 类型的类型系统和访问信息一致。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsPublic">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">为了进行的赋值操作或访问任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsUnknown">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a type that cannot be resolved in the underlying type system.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 是否表示无法在基础类型系统中解析的类型。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUnknown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an unresolvable type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示不可解析的类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUnknown">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUnknown">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, a <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> that has <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> cannot be written into an object graph.</source>
          <target state="translated">涉及了加载路径<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>、<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>具有<ph id="ph3">`true`</ph>为<ph id="ph4">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>无法写入到对象图。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUnknown">
          <source>Under the default implementations in <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> , the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=nameWithType&gt;</ph> call throws a <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph> reports <ph id="ph5">`true`</ph> for <ph id="ph6">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">在中的默认实现<ph id="ph1">&lt;xref:System.Xaml&gt;</ph>、<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=nameWithType&gt;</ph>调用会引发<ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph>时相关<ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph>报表<ph id="ph5">`true`</ph>为<ph id="ph6">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUnknown">
          <source>You should not pass a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that has <ph id="ph2">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> as <ph id="ph3">`true`</ph> unless you are prepared to handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior or the XAML node stream prior to writing the object graph.</source>
          <target state="translated">您不应传递<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>具有<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>作为<ph id="ph3">`true`</ph>除非你已准备好处理的异常从<ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>，或通过其他方式来调整<ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>行为或 XAML 节点流，然后再写入对象关系图。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is built top-down during XAML initialization.</source>
          <target state="translated">获取一个值，该值指示在 XAML 初始化过程中是否自上而下生成此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is built top-down during XAML initialization; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果在 XAML 初始化过程中自上而下生成此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>Top-down is a metaphor that approximates XAML processor behavior when creating the object graph.</source>
          <target state="translated">自上而下的是在创建对象图时对与 XAML 处理器行为相近的比喻。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>When built top-down, a type is instantiated, attached to the parent, and then has its properties set.</source>
          <target state="translated">自上而下生成，当一个类型实例化时，附加到父级，并且然后设置其属性。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>Top-down construction avoids invoking property-changed handlers multiple times.</source>
          <target state="translated">自上而下构造可避免调用多次的属性更改处理程序。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</source>
          <target state="translated">这种处理波及对象图因此，消除了多个处理程序调用并提供为启动一个性能优化选项的对象图。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a whitespace significant collection, as per the XML definition.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 按照 XML 定义是否表示空白有意义集合。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a whitespace significant collection; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示空白有意义集合，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsXData">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents XML <ph id="ph2">&lt;see langword="XDATA" /&gt;</ph>, as per the XAML definition.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 按照 XAML 定义是否表示 XML <ph id="ph2">&lt;see langword="XDATA" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsXData">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents <ph id="ph3">&lt;see langword="XDATA" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，则为 <ph id="ph3">&lt;see langword="XDATA" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsXData">
          <source>This property aligns to the <ph id="ph1">`[is xdata]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">此属性对齐到<ph id="ph1">`[is xdata]`</ph>[MS-XAML] 规范中的信息项。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsXData">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsXData">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.ItemType">
          <source>Gets a value that provides the type information for the <ph id="ph1">&lt;see langword="Items" /&gt;</ph> property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">获取一个值，该值为此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的 <ph id="ph1">&lt;see langword="Items" /&gt;</ph> 属性提供类型信息。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ItemType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the type of the items in the collection; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a collection.</source>
          <target state="translated">集合中项的类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 对象；如果此 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 不表示集合，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ItemType">
          <source>This property is only relevant if this <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a collection (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsCollection%2A&gt;</ph> is <ph id="ph3">`true`</ph>).</source>
          <target state="translated">此属性才是相关，如果此<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>表示的集合 (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsCollection%2A&gt;</ph>是<ph id="ph3">`true`</ph>)。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ItemType">
          <source>The <ph id="ph1">`Items`</ph> property is whatever property holds items in that type of collection or array.</source>
          <target state="translated"><ph id="ph1">`Items`</ph>属性是任何属性存储该类型的集合或数组中的项。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ItemType">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ItemType">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.KeyType">
          <source>Gets a value that provides the type information for the key property of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, if the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a dictionary.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示字典，则获取一个值，该值为此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的键属性提供类型信息。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.KeyType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the type of the key for dictionary usage, otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a dictionary.</source>
          <target state="translated">字典用法键的类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 对象；否则，如果此 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 不表示字典，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.KeyType">
          <source>This property is only relevant if this <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a dictionary (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsDictionary%2A&gt;</ph> is <ph id="ph3">`true`</ph>).</source>
          <target state="translated">此属性才是相关，如果此<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>表示的字典 (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsDictionary%2A&gt;</ph>是<ph id="ph3">`true`</ph>)。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.KeyType">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.KeyType">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>The directive for which to find the aliased member.</source>
          <target state="translated">要为其查找别名成员的指令。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>Returns the XAML member that is aliased to a XAML directive by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">返回由此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 将其别名设置为 XAML 指令的 XAML 成员。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>The aliased member, if found; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果可找到，则为别名成员，否则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAliasedProperty%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法，当调用方获取一个值从<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAliasedProperty%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>The default implementation can return results for the following XAML directives: <ph id="ph1">`Key`</ph>; <ph id="ph2">`Name`</ph>; <ph id="ph3">`Uid`</ph>; and <ph id="ph4">`xml:lang`</ph>.</source>
          <target state="translated">默认实现可以返回结果为以下 XAML 指令： <ph id="ph1">`Key`</ph>;<ph id="ph2">`Name`</ph>;<ph id="ph3">`Uid`</ph>; 和<ph id="ph4">`xml:lang`</ph>。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>Values for these depend on underlying reflection and might still return <ph id="ph1">`null`</ph> if no aliased property is found.</source>
          <target state="translated">这些依赖于基础反射和仍可能会返回值<ph id="ph1">`null`</ph>如果不找到任何别名属性。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or the schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>Returns an enumerable set that contains all attachable properties that are exposed by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">返回一个可枚举集合，该集合包含由此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 公开的所有可附加的属性。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>An enumerable set that contains zero or more <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> values; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">包含零个或多个 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 值的可枚举集合；否则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法，当调用方获取一个值从<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>Although <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;</ph> returns a generic collection, this <ph id="ph2">`Lookup`</ph> method returns a generic enumerable set.</source>
          <target state="translated">尽管<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;</ph>返回泛型集合而言，这<ph id="ph2">`Lookup`</ph>方法返回的通用的可枚举集合。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">默认实现使用内部的 CLR 反射。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>When <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the default implementation can use <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, if it is available.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>是<ph id="ph2">`null`</ph>，默认实现可以使用<ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>、 是否可用。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>This behavior calls <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> recursively to attempt to find a valid base type and returns <ph id="ph2">`null`</ph> if no valid base type exists.</source>
          <target state="translated">此行为调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph>以递归方式来尝试找到有效的基类型和返回<ph id="ph2">`null`</ph>如果不存在任何有效的基类型。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</source>
          <target state="translated">为信息不能确定由于缺乏类型系统或反射支持的情况下，应保留 null 返回值。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>If a type is valid and reflection or other techniques are available, but a type does not have attachable members, you should instead return an empty <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> set.</source>
          <target state="translated">如果类型是有效并且反射或其他技术都可用，但是类型不具有可附加成员，则应改为返回一个空<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>设置。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>Returns an enumerable set that contains all the members that are exposed by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">返回一个可枚举集合，该集合包含由此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 公开的所有成员。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>An enumerable set that contains zero or more <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> values.</source>
          <target state="translated">包含零个或多个 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 值的可枚举集合。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法，当调用方获取一个值从<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>Although <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;</ph> returns a generic collection, this <ph id="ph2">`Lookup`</ph> method returns a generic enumerable set.</source>
          <target state="translated">尽管<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;</ph>返回泛型集合而言，这<ph id="ph2">`Lookup`</ph>方法返回的通用的可枚举集合。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">默认实现使用内部的 CLR 反射。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>For cases where <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the default implementation can use <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, if it is available.</source>
          <target state="translated">用例其中<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>是<ph id="ph2">`null`</ph>，默认实现可以使用<ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>、 是否可用。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>This behavior calls <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph> recursively to attempt to find a valid base type, and returns <ph id="ph2">`null`</ph> if no valid base type exists.</source>
          <target state="translated">此行为调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph>以递归方式来尝试找到有效的基类型，并返回<ph id="ph2">`null`</ph>如果不存在任何有效的基类型。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</source>
          <target state="translated">为信息不能确定由于缺乏类型系统或反射支持的情况下，应保留 null 返回值。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>If a type is valid, reflection or other techniques are available; if a type does not have members, you should instead return an empty <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> set.</source>
          <target state="translated">如果类型为有效，反射或其他技术才会有效。如果类型没有成员，则应改为返回一个空<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>设置。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>Return values for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> should be mutually exclusive.</source>
          <target state="translated">返回的值<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph>应该是互相排斥。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>If you have a situation where a backing type system property can support a standard instance usage as well as an attachable usage, that member should be reported as two different <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> values, with one value appearing in the attachable list and another in the standard members list.</source>
          <target state="translated">如果你有其中后备类型系统的属性可以支持标准实例用法，以及可附加的使用情况的情况下，该成员应报告为两个不同<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>值，其中一个的值出现在可附加的列表，另一个位于标准成员列表。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>Returns a list of the types that are usable as the <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ContentProperty" /&gt;</ph> value for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">返回类型的列表，这些类型可用作此 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ContentProperty" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>A list of possible content types.</source>
          <target state="translated">可能的内容类型的列表。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法，当调用方获取一个值从<ph id="ph1">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>Types that evaluate as <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> for a specific content type are not considered multiple types for purposes of <ph id="ph2">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>.</source>
          <target state="translated">在计算中值的类型<ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph>对于特定的内容类型，可以不考虑多个类型的目的<ph id="ph2">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>The default implementation can use other properties of <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> (<ph id="ph2">&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph>) to obtain a result.</source>
          <target state="translated">默认实现可以使用的其他属性<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>(<ph id="ph2">&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;</ph>，或<ph id="ph4">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph>) 以获取结果。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>The <ph id="ph1">`Lookup`</ph> overrides for the preceding property list can also be invoked in this determination.</source>
          <target state="translated"><ph id="ph1">`Lookup`</ph>重写也可以在此判断中调用上面的属性列表。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>The name of the attachable member to get, in <bpt id="p1">&lt;c&gt;</bpt>ownerTypeName.MemberName<ept id="p1">&lt;/c&gt;</ept> form.</source>
          <target state="translated">要获取的可附加成员的名称，形式为 <bpt id="p1">&lt;c&gt;</bpt>ownerTypeName.MemberName<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> for a specific named attachable from this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">为 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 中特定的已命名可附加成员返回 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> object for the requested attachable member; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if no attachable member by that name exists.</source>
          <target state="translated">请求的可附加成员的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 对象；如果不存在该名称的可附加成员，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法，当调用方获取一个值从<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">默认实现使用内部的 CLR 反射。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>When <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the default implementation can use <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, if it is available.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>是<ph id="ph2">`null`</ph>，默认实现可以使用<ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>、 是否可用。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>This behavior calls <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> recursively to attempt to find a valid base type and returns <ph id="ph2">`null`</ph> if no valid base type exists.</source>
          <target state="translated">此行为调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph>以递归方式来尝试找到有效的基类型和返回<ph id="ph2">`null`</ph>如果不存在任何有效的基类型。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> 是虚拟的并且因此，可以重写。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改 XAML 类型的报告的成员，以便它们不再按与预期的方式对齐<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph><ph id="ph2">`Get*`</ph>有关基础 CLR 类型的信息。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">对于成员报告的任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the immediate base type of this XAML type.</source>
          <target state="translated">返回此 XAML 类型的直接基类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>Determination of this value is based on the underlying type of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> and schema context.</source>
          <target state="translated">将基于此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的基础类型和架构上下文来确定此值。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the immediate base type of this XAML type.</source>
          <target state="translated">此 XAML 类型的直接基类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法，当调用方获取一个值从<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>The default implementation might return an internal constant that represents the <ph id="ph1">&lt;xref:System.Object&gt;</ph> if <ph id="ph2">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">默认实现可能会返回一个内部常量，用于表示<ph id="ph1">&lt;xref:System.Object&gt;</ph>如果<ph id="ph2">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>是<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> 是虚拟的并且因此，可以重写。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改有关 XAML 类型的报告的类型信息，以便它不再按预期的方式其基础的 CLR 类型的类型系统信息一致。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">为了进行的赋值操作或访问任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>Returns a value of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlCollectionKind" /&gt;</ph> enumeration that declares which specific collection type this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> uses.</source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlCollectionKind" /&gt;</ph> 枚举的一个值，该枚举声明此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 使用哪种特定集合类型。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>A value of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlCollectionKind" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlCollectionKind" /&gt;</ph> 枚举的一个值。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>This method is invoked by an internal private method (no public <ph id="ph1">`CollectionKind`</ph> or <ph id="ph2">`GetCollectionKind`</ph> API exists on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>).</source>
          <target state="translated">调用此方法，一个内部私有方法 (没有公共<ph id="ph1">`CollectionKind`</ph>或<ph id="ph2">`GetCollectionKind`</ph>API 上是否存在<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">默认实现使用内部的 CLR 反射。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>For cases where <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the default implementation can use <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, if it is available.</source>
          <target state="translated">用例其中<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>是<ph id="ph2">`null`</ph>，默认实现可以使用<ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>、 是否可用。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>This behavior indirectly calls <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> recursively to attempt to find a valid base type; it returns <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph> if no valid base type exists.</source>
          <target state="translated">此行为间接调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>以递归方式来尝试找到有效的基类型; 它将返回<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph>如果不存在任何有效的基类型。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>In general, the default implementation attempts to find the <ph id="ph1">`Add`</ph> method of the underlying type by reflection.</source>
          <target state="translated">一般情况下，默认实现将尝试查找<ph id="ph1">`Add`</ph>通过反射的基础类型的方法。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>If found, the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> of the <ph id="ph2">`Add`</ph> method is enough information to determine which <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlCollectionKind&gt;</ph> value should be returned.</source>
          <target state="translated">如果找到，<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>的<ph id="ph2">`Add`</ph>方法是足够的信息来确定哪些<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlCollectionKind&gt;</ph>应返回值。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>Otherwise, it returns <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">否则，它将返回 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> must have arguments (generic constraints through <ph id="ph2">&lt;see langword="x:TypeArguments" /&gt;</ph>, initialization text, or other XAML techniques) to construct a valid instance of the type.</source>
          <target state="translated">返回一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 是否必须具有参数（通过 <ph id="ph2">&lt;see langword="x:TypeArguments" /&gt;</ph> 实现的泛型约束、初始化文本或其他 XAML 技术）才能构造有效的类型实例。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if construction of an instance requires some argument value; otherwise, false.</source>
          <target state="translated">如果需要某个参数值才能构造实例，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 false。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法，当调用方获取一个值从<ph id="ph1">&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source>The default implementation returns <ph id="ph1">`false`</ph> for types considered value types in the CLR type system.</source>
          <target state="translated">默认实现返回<ph id="ph1">`false`</ph>被认为是在 CLR 中的值类型的类型的类型系统。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source>For other than value types, CLR reflection <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> is used to determine whether a default constructor exists.</source>
          <target state="translated">对于以外的值类型，CLR 反射<ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph>用于确定是否存在默认构造函数。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the content property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">返回此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的内容属性的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 信息。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the content property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的内容属性的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 信息。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>May be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">可为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法，当调用方获取一个值从<ph id="ph1">&lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>The default implementation checks for <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> on the type definition.</source>
          <target state="translated">默认实现可检查<ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>的类型定义。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>如果无特性包含在紧挨的基础类型的属性。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>If these checks do not discover a content type, the default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果这些检查未发现的内容类型，默认实现返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>Gets a list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> values that represent the content wrappers for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 值的列表，这些值表示此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的内容包装。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> values that represent the content wrappers for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 值的列表，这些值表示此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的内容包装。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>A content wrapper is a class that represents the content collection type when the types that are used in that collection are not contiguous to the type system.</source>
          <target state="translated">内容包装是一个类，表示内容的集合类型时使用该集合中的类型不是连续类型系统。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>The types of collection items for the content wrapper are expected to be limited in some manner beyond <ph id="ph1">&lt;xref:System.Object&gt;</ph> or a neutral object equivalent.</source>
          <target state="translated">预期的内容包装的集合项类型进行限制以外的某种方式<ph id="ph1">&lt;xref:System.Object&gt;</ph>或非特定对象等效。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>However, this limitation is only enforced by the design or purpose of the properties that use that type, and not by the type system.</source>
          <target state="translated">但是，由设计或使用该类型的属性的目的而不是类型系统，只被实施此限制。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>More than one content wrapper can exist on a type.</source>
          <target state="translated">类型可以存在多个内容包装。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>For an example class and scenario from the WPF XAML implementation, see <ph id="ph1">&lt;xref:System.Windows.Documents.InlineCollection&gt;</ph>.</source>
          <target state="translated">有关示例类，以及从 WPF XAML 实现的方案，请参阅<ph id="ph1">&lt;xref:System.Windows.Documents.InlineCollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
          <source>When implemented in a derived class, returns an <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> implementation.</source>
          <target state="translated">在派生类中实现时，返回 <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
          <source>Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</source>
          <target state="translated">重写该方法以提供内部反射提供一种替代方式，若要获取 CLR 属性值。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
          <source>In absence of an override, the internal reflector uses typical CLR reflection logic.</source>
          <target state="translated">在没有重写时，内部反射器使用典型的 CLR 反射逻辑。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
          <source>The default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">默认实现返回 <ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used for deferred loading of XAML-declared objects.</source>
          <target state="translated">返回一个 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 对象，该对象用于 XAML 声明的对象的延迟加载。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that has a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> constraint on the generic.</source>
          <target state="translated">对泛型具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法，当调用方获取一个值从<ph id="ph1">&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;</ph> to return a different value than is enabled by default internal reflection and are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> information.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;</ph>返回不同的值比通过默认内部反射，并且还提供自定义<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>信息。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>The default implementation returns an object on the basis of reading <ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph>.</source>
          <target state="translated">默认实现返回的对象通过读取<ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>It can also  check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>如果无特性包含在紧挨的基础类型的属性。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>If a value is unavailable, this method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果没有可用的值，此方法返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">返回与此 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 关联的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> information for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 信息；否则为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>The default implementation does not require that a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> be constructed by using one of the constructors that pass an initial <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>.</source>
          <target state="translated">默认实现不要求<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>通过传递一个初始的构造函数之一构造<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>However, an <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> value must exist for the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>; otherwise, the default implementation returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">但是，<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>值必须存在<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>; 否则为默认实现返回<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>Override this method if you also create a derived class from <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> and intend to return the derived class.</source>
          <target state="translated">如果你还创建派生的类中重写此方法<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>并且想要返回的派生的类。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>If you return <ph id="ph1">`null`</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph> returns <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> to callers.</source>
          <target state="translated">如果返回<ph id="ph1">`null`</ph>，<ph id="ph2">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph>返回<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>向调用方。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an ambient type, as per the XAML definition.</source>
          <target state="translated">返回一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 按照 XAML 定义是否表示环境类型。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an ambient type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示环境类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>The default implementation uses CLR reflection on the <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> and can check the base types.</source>
          <target state="translated">默认实现上使用 CLR 反射<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>可以检查基类型。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>This implementation checks for the <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> that is applied to the relevant type's definition at the class level and returns <ph id="ph2">`true`</ph> in this case.</source>
          <target state="translated">此实现可检查<ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>用于应用于在类级别的相关类型的定义，并返回<ph id="ph2">`true`</ph>在这种情况下。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>All other cases return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">所有其他情况下返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;</ph> to return a different value than is enabled by default internal reflection.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;</ph>返回不同的值比通过默认内部反射。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a constructible type, as per the XAML definition.</source>
          <target state="translated">返回一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 按照 XAML 定义是否表示可构造类型。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a constructible type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示可构造类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>The default implementation uses CLR reflection on the <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>.</source>
          <target state="translated">默认实现上使用 CLR 反射<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>The type must be concrete, non-nested, and closed.</source>
          <target state="translated">类型必须是具体的、 非嵌套和已关闭。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>The default implementation checks whether the type is a value type and the return of <ph id="ph1">&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;</ph>.</source>
          <target state="translated">默认实现将检查类型是否是值类型和返回<ph id="ph1">&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>For a null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>, this method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">对于空<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>，此方法返回<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;</ph> to return a different value than is enabled by default internal reflection.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;</ph>返回不同的值比通过默认内部反射。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a markup extension.</source>
          <target state="translated">返回一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 是否表示标记扩展。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a markup extension; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示标记扩展，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source>The default implementation consists only of this call:</source>
          <target state="translated">默认实现仅包括此调用：</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source>In XAML specification terms, this type must be assignable to <ph id="ph1">`x:MarkupExtension`</ph> in order to return <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>.</source>
          <target state="translated">在 XAML 规范术语中，此类型必须可赋给<ph id="ph1">`x:MarkupExtension`</ph>为了返回<ph id="ph2">`true`</ph>为<ph id="ph3">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a XAML namescope, as per the XAML definition.</source>
          <target state="translated">返回一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 按照 XAML 定义是否表示 XAML 名称范围。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a XAML namescope; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示 XAML 名称范围，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>The default implementation makes a <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> call indirectly against the type <ph id="ph2">&lt;xref:System.Windows.Markup.INameScope&gt;</ph>.</source>
          <target state="translated">默认实现制作<ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph>对类型间接调用<ph id="ph2">&lt;xref:System.Windows.Markup.INameScope&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> is an interface that is defined in the assembly WindowsBase.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> 是 WindowsBase 程序集中定义一个接口。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>This technique for XAML namescope identification is used both by WPF and <ph id="ph1">[!INCLUDE[TLA#tla_workflow](~/includes/tlasharptla-workflow-md.md)]</ph> implementations of XAML.</source>
          <target state="translated">使用这一用于 XAML 名称范围标识方法的 WPF 和<ph id="ph1">[!INCLUDE[TLA#tla_workflow](~/includes/tlasharptla-workflow-md.md)]</ph>的 XAML 实现。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>A XAML namescope enforces the name uniqueness of the property or properties that are used for <ph id="ph1">`x:Name`</ph><ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>.</source>
          <target state="translated">XAML 名称范围强制实施的或多个适用于的属性名称的唯一性<ph id="ph1">`x:Name`</ph> <ph id="ph2"> / </ph> <ph id="ph3">`[name property]`</ph>。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph> is <ph id="ph2">`true`</ph>, then some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph>是<ph id="ph2">`true`</ph>，然后强制唯一性的某种机制都应存在，并且应从拥有 XAML 名称范围的此类型角度进行评估。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>The XAML namescope then extends to the content of the type until another XAML namescope owning type is encountered.</source>
          <target state="translated">遇到另一个 XAML 名称范围所属类型之前，XAML 名称范围然后扩展到类型的内容。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a nullable type, as per the XAML definition.</source>
          <target state="translated">返回一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 按照 XAML 定义是否表示可以为 null 的类型。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a nullable type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示可以为 null 的类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source>The default implementation makes a determination based on the CLR core library nullable concept, checked against <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>.</source>
          <target state="translated">默认实现作出决定基于 CLR 核心库可以为 null 的概念，进行比照<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source>For a null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>, it returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">对于空<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>，它将返回<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a public type in the relevant type system.</source>
          <target state="translated">返回一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 是否表示相关类型系统中的公共类型。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a public type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示公共类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>The default implementation uses CLR reflection against a non-null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>.</source>
          <target state="translated">默认实现使用针对非 null 的 CLR 反射<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>For a null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>, it returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">对于空<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>，它将返回<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> 是虚拟的并且因此，可以重写。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system or access information of its underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改报告的访问有关 XAML 类型的信息，以便它不再按预期的方式其基础的 CLR 类型的类型系统或访问信息一致。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">为了进行的赋值操作或访问任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a type that cannot be resolved in the underlying type system.</source>
          <target state="translated">返回一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 是否表示无法在基础类型系统中解析的类型。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a nonresolvable type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示不可解析的类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source>The default implementation can use CLR reflection.</source>
          <target state="translated">默认实现可以使用 CLR 反射。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source>For a null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>, it returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">对于空<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>，它将返回<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a whitespace significant collection, as per the XML definition.</source>
          <target state="translated">返回一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 按照 XML 定义是否表示空白有意义集合。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a white-space significant collection; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示空白有意义集合，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;</ph>.</source>
          <target state="translated">默认实现返回一个值基于读取<ph id="ph1">&lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>It can also check the <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>如果无特性包含在紧挨的基础类型的属性。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>If a value is not available, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果值不是可用的它将返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsXData">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents XML <ph id="ph2">&lt;see langword="XDATA" /&gt;</ph>, as per the XAML definition.</source>
          <target state="translated">返回一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 按照 XAML 定义是否表示 XML <ph id="ph2">&lt;see langword="XDATA" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsXData">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents <ph id="ph3">&lt;see langword="XDATA" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，则为 <ph id="ph3">&lt;see langword="XDATA" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsXData">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsXData">
          <source>The default implementation makes a <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> call indirectly against the type <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated">默认实现制作<ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph>对类型间接调用<ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsXData">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>Returns a value that provides the type information for the <ph id="ph1">&lt;see langword="Items" /&gt;</ph> property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">返回一个值，该值为此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的 <ph id="ph1">&lt;see langword="Items" /&gt;</ph> 属性提供类型信息。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the type of the items in the collection; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph> if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a collection.</source>
          <target state="translated">集合中项的类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 对象；如果此 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 不表示集合，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>The default implementation can use CLR reflection concepts, such as checking for an <ph id="ph1">`Add`</ph> method by <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> and using the <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>; checking <ph id="ph4">&lt;xref:System.Xaml.XamlType.IsArray%2A&gt;</ph>; and checking <ph id="ph5">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> and trying the same logic there.</source>
          <target state="translated">默认实现可以使用 CLR 反射概念，例如检查<ph id="ph1">`Add`</ph>方法<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>和使用<ph id="ph3">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>; 检查<ph id="ph4">&lt;xref:System.Xaml.XamlType.IsArray%2A&gt;</ph>; 并检查<ph id="ph5">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>和尝试的相同逻辑。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>Cases where <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> returns <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph> should return <ph id="ph3">`null`</ph>.</source>
          <target state="translated">情况<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>返回<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph>应返回<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>Returns a value that provides the type information for the key property of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, if the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a dictionary.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示字典，则返回一个值，该值为此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的键属性提供类型信息。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the type of the key for dictionary usage, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a dictionary,</source>
          <target state="translated">字典用法的键类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 对象，或者，如果此 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 不表示字典，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>The default implementation can use CLR reflection concepts, such as checking for an <ph id="ph1">`Add`</ph> method by <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> and using the <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>; and checking <ph id="ph4">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> and trying the same logic there.</source>
          <target state="translated">默认实现可以使用 CLR 反射概念，例如检查<ph id="ph1">`Add`</ph>方法<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>和使用<ph id="ph3">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>; 并检查<ph id="ph4">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>和尝试的相同逻辑。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>Cases where <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> does not return <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.Dictionary?displayProperty=nameWithType&gt;</ph> should return <ph id="ph3">`null`</ph>.</source>
          <target state="translated">情况<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>不返回<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.Dictionary?displayProperty=nameWithType&gt;</ph>应返回<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>Returns a value that provides the type information for the returned <ph id="ph1">&lt;see langword="ProvideValue" /&gt;</ph> of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, if it represents a markup extension.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示标记扩展，则返回一个为其已返回的 <ph id="ph1">&lt;see langword="ProvideValue" /&gt;</ph> 提供类型信息的值。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the return type for markup extension usage; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a markup extension.</source>
          <target state="translated">标记扩展用法的返回类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 对象；否则，如果此 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 不表示标记扩展，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>The default implementation returns a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> on the basis of reading <ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph>.</source>
          <target state="translated">默认实现返回<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>根据读取<ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>如果无特性包含在紧挨的基础类型的属性。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>If a value is not available, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果值不是可用的它将返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>The name of the member to get (as a string).</source>
          <target state="translated">要获取的成员的名称（字符串形式）。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to return a member even if that member has a <ph id="ph2">&lt;see langword="true" /&gt;</ph> value for <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.IsReadOnly" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> to not return a <ph id="ph5">&lt;see cref="P:System.Xaml.XamlMember.IsReadOnly" /&gt;</ph> member.</source>
          <target state="translated">设置为 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 以返回成员，即使该成员的 <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.IsReadOnly" /&gt;</ph> 值为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>；设置为 <ph id="ph4">&lt;see langword="false" /&gt;</ph> 以返回 <ph id="ph5">&lt;see cref="P:System.Xaml.XamlMember.IsReadOnly" /&gt;</ph> 成员。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> for a specific named member from this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">从此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 中返回特定命名成员的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the member, if a member was found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果已找到成员，则为成员的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 信息；否则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>The default implementation returns a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> based on internal CLR reflection and evaluation against the schema context.</source>
          <target state="translated">默认实现返回<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>基于内部 CLR 反射和评估针对架构上下文。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> 是虚拟的并且因此，可以重写。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改 XAML 类型的报告的成员，以便它们不再按与预期的方式对齐<ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph><ph id="ph2">`Get*`</ph>有关基础 CLR 类型的信息。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">对于成员报告的任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>The count (arity) of the particular syntax or constructor mode that you want information about.</source>
          <target state="translated">您需要其相关信息的特定语法或构造函数模式的计数 (arity)。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">对于标记扩展类型，返回此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的特定标记扩展用法中所支持位置参数的类型。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> values where each such <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is the type for that position in the syntax.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 值的列表，其中每个此类 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 都是该位置在语法中的类型。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>You must specify those types in the same order when supplying markup input for the markup extension.</source>
          <target state="translated">您必须按照为标记扩展提供标记输入时的相同顺序指定这些类型。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>The default implementation uses internal reflection information based on finding constructors and checking the arity.</source>
          <target state="translated">默认实现使用基于查找构造函数和检查 arity 内部反射信息。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>This API is only relevant if this <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a markup extension (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph> is <ph id="ph3">`true`</ph>).</source>
          <target state="translated">此 API 才是相关，如果此<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>表示标记扩展 (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>是<ph id="ph3">`true`</ph>)。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>The input <ph id="ph1">`parameterCount`</ph> is not for requesting the type of a specific positional parameter.</source>
          <target state="translated">输入<ph id="ph1">`parameterCount`</ph>不适用于请求特定的位置参数的类型。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>It is for specifying the arity of a markup extension usage.</source>
          <target state="translated">它可用于指定 arity 的标记扩展用法。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>Markup extension usage often has multiple signatures and uses different parameter arity (count) of positional parameters to differentiate.</source>
          <target state="translated">通常，标记扩展用法有多个签名，并使用不同的参数 arity （计数） 的位置参数来区分。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</source>
          <target state="translated">但是，你可以配置架构上下文，以允许重复 arities 和使用差异的类型的位置参数。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;</ph>.</source>
          <target state="translated">有关详情，请参阅<ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>For a specific arity count, the parameter positions and types can vary.</source>
          <target state="translated">特定 arity count 的参数位置和类型而异。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>To get the positional type of a specific arity's markup extension usage, you first call <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph> with the arity count.</source>
          <target state="translated">若要获取的位置的一种特定 arity 的标记扩展用法，请先调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph>arity 计数。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>Then get the item at that position from the returned collection.</source>
          <target state="translated">然后从返回的集合，该位置获取项。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
          <source>Returns a handler callback to use for the set operations of markup extensions.</source>
          <target state="translated">返回一个用于标记扩展的 set 操作的处理程序回调。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
          <source>A handler callback to use for the set operations of markup extensions.</source>
          <target state="translated">用于标记扩展的 set 操作的处理程序回调。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;</ph>.</source>
          <target state="translated">默认实现返回一个值基于读取<ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>如果无特性包含在紧挨的基础类型的属性。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果没有可用的值，它将返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
          <source>Returns a handler to use for type converter setting cases.</source>
          <target state="translated">返回一个用于类型转换器设置情况的处理程序。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
          <source>A handler to use for type converter setting cases.</source>
          <target state="translated">一个用于类型转换器设置情况的处理程序。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt;</ph>.</source>
          <target state="translated">默认实现返回一个值基于读取<ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>如果无特性包含在紧挨的基础类型的属性。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果没有可用的值，它将返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> should be serialized using a mode that  trims surrounding whitespace.</source>
          <target state="translated">返回一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 是否应使用修整周围空白的模式进行序列化。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> should be serialized in a mode that trims surrounding whitespace; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 应使用修整周围空白的模式进行序列化，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;</ph>.</source>
          <target state="translated">默认实现返回一个值基于读取<ph id="ph1">&lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>如果无特性包含在紧挨的基础类型的属性。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source>If a value is unavailable, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果没有可用的值，它将返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that has a <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint, which represents type-conversion behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">返回具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>，该约束表示此 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的值的类型转换行为。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint that represents type-conversion behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>，该约束表示此 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的值的类型转换行为；否则为 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>.</source>
          <target state="translated">默认实现返回一个值基于读取<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>The default implementation can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">默认实现还可以检查<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>如果无特性包含在紧挨的基础类型的属性。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>It also includes special logic for default conversion of enumerations, common value types, and generics.</source>
          <target state="translated">它还包括了特殊逻辑，默认转换的枚举，常用的值类型和泛型。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果没有可用的值，它将返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>Returns the CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that underlies this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">返回为此 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 提供支持的 CLR <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>The CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that underlies this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">为此 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 提供支持的 CLR <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>The default implementation returns an internal field.</source>
          <target state="translated">默认实现返回一个内部字段。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>That field is generally initialized during construction and its value is based on which constructor was called and the information that you provided.</source>
          <target state="translated">该字段通常已初始化在构造过程中，并且其值基于已调用的构造函数和你提供的信息。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is built top-down during XAML initialization.</source>
          <target state="translated">返回一个值，该值指示在 XAML 初始化过程中是否自上而下生成此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is built top-down during XAML initialization; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果在 XAML 初始化过程中自上而下生成此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>Top-down is a metaphor that approximates XAML processor behavior when it creates the object graph.</source>
          <target state="translated">自上而下的是在创建对象图时对与 XAML 处理器行为相近的比喻。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>When built top-down, a type is instantiated, attached to the parent, and has its properties set.</source>
          <target state="translated">生成时的上下的类型实例化，附加到父级，并设置其属性。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>Top-down construction avoids invoking property-changed handlers multiple times.</source>
          <target state="translated">自上而下构造可避免调用多次的属性更改处理程序。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</source>
          <target state="translated">这种处理波及对象图因此，消除了多个处理程序调用并提供为启动一个性能优化选项的对象图。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;</ph>.</source>
          <target state="translated">默认实现返回一个值基于读取<ph id="ph1">&lt;xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>如果无特性包含在紧挨的基础类型的属性。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>If a value is unavailable, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果没有可用的值，它将返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that has a <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint, which represents value serialization behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">返回具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>，该约束表示此 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的值的值序列化行为。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint that represents value serialization behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>，该约束表示此 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的值的值序列化行为；否则为 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;</ph>.</source>
          <target state="translated">可以调用此方法通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>.</source>
          <target state="translated">默认实现返回一个值基于读取<ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>如果无特性包含在紧挨的基础类型的属性。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>It also includes special logic for default serialization of enumerations, common value types, or generics.</source>
          <target state="translated">它还包括了特殊逻辑，默认序列化的枚举、 常用的值类型或泛型。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果没有可用的值，它将返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;</ph> to use different logic.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;</ph>若要使用不同的逻辑。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.MarkupExtensionReturnType">
          <source>Gets a value that provides the type information for the returned <ph id="ph1">&lt;see langword="ProvideValue" /&gt;</ph> of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, if it represents a markup extension.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示标记扩展，则获取一个为其已返回的 <ph id="ph1">&lt;see langword="ProvideValue" /&gt;</ph> 提供类型信息的值。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.MarkupExtensionReturnType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the return type for markup extension usage; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a markup extension.</source>
          <target state="translated">标记扩展用法的返回类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 对象；否则，如果此 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 不表示标记扩展，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.MarkupExtensionReturnType">
          <source>This property is only relevant if this <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a markup extension (<ph id="ph2">`x:MarkupExtension`</ph> is in the assignable types list).</source>
          <target state="translated">此属性才是相关，如果此<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>表示标记扩展 (<ph id="ph2">`x:MarkupExtension`</ph>是可赋值的类型列表中)。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.MarkupExtensionReturnType">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.MarkupExtensionReturnType">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.Name">
          <source>Gets the string name of the type that this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents.</source>
          <target state="translated">获取此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示的类型的字符串名称。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Name">
          <source>The string name of this XAML type.</source>
          <target state="translated">此 XAML 类型的字符串名称。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Name">
          <source>This property typically gets the schema-constructed name (per the <ph id="ph1">&lt;xref:System.Xaml.XamlType.%23ctor%2A&gt;</ph> signature), or the name of the <ph id="ph2">&lt;xref:System.Type&gt;</ph>, if it is constructed by using the pertinent constructor of the CLR type system.</source>
          <target state="translated">此属性通常获取的架构构造的名称 (每个<ph id="ph1">&lt;xref:System.Xaml.XamlType.%23ctor%2A&gt;</ph>签名)，或名称<ph id="ph2">&lt;xref:System.Type&gt;</ph>，如果它通过使用 CLR 类型系统的相关构造函数构造。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> objects have the same value.</source>
          <target state="translated">确定两个指定的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 对象是否具有相同的值。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="xamlType1" /&gt;</ph> is the same as the value of <ph id="ph3">&lt;paramref name="xamlType2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 的值与 <ph id="ph2">&lt;paramref name="xamlType1" /&gt;</ph> 的值相同，则为 <ph id="ph3">&lt;paramref name="xamlType2" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> objects have different values.</source>
          <target state="translated">确定两个指定的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 对象是否具有不同的值。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="xamlType1" /&gt;</ph> is different from the value of <ph id="ph3">&lt;paramref name="xamlType2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 的值与 <ph id="ph2">&lt;paramref name="xamlType1" /&gt;</ph> 的值不同，则为 <ph id="ph3">&lt;paramref name="xamlType2" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.PreferredXamlNamespace">
          <source>Gets the single XAML namespace that is the primary XAML namespace for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">获取单个 XAML 命名空间，该命名空间是此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的主 XAML 命名空间。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.PreferredXamlNamespace">
          <source>The identifier, as a string, of the primary XAML namespace for this XAML type.</source>
          <target state="translated">此 XAML 类型的主 XAML 命名空间的标识符（字符串形式）。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.PreferredXamlNamespace">
          <source>This implementation provides the same value as calling <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A&gt;</ph> and then getting the first value string from the returned enumerable set.</source>
          <target state="translated">这种实现提供相同的值调用<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A&gt;</ph>，然后从返回的可枚举集合中获取的第一个值字符串。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.SchemaContext">
          <source>Gets the active <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> for processing this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">获取用于处理此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 的活动 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.SchemaContext">
          <source>The active <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> for processing this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">用于处理此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 的活动 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.SchemaContext">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> is a required parameter entry when constructing a <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> 在构造时是必需的参数项<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.ToString">
          <source>Returns a string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">返回此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.ToString">
          <source>A string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.ToString">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> implementation of <ph id="ph2">&lt;xref:System.Object.ToString%2A&gt;</ph> returns the <ph id="ph3">&lt;xref:System.Xaml.XamlType.Name%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>实现<ph id="ph2">&lt;xref:System.Object.ToString%2A&gt;</ph>返回<ph id="ph3">&lt;xref:System.Xaml.XamlType.Name%2A&gt;</ph>属性<ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> has whitespace handling behavior for serialization that trims the surrounding whitespace in its content.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 是否具有用于在其内容中修整周围空白的序列化空白处理行为。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a type that uses whitespace trimming; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示使用空白修整的类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.TypeArguments">
          <source>Gets a list of type arguments for cases where this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a generic.</source>
          <target state="translated">针对此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 表示泛型的情况获取类型参数的列表。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeArguments">
          <source>A list of type argument types; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>, if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a generic.</source>
          <target state="translated">类型参数类型的列表；否则，如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 不表示泛型，则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeArguments">
          <source>There are certain scenarios for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> where calling the <ph id="ph2">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph> parameter returns a list where the types are still open.</source>
          <target state="translated">有的某些方案<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>其中调用<ph id="ph2">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph>参数返回列表的类型是仍处于打开状态。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeArguments">
          <source>In this case, one or more of the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> values will have placeholder values for <ph id="ph2">&lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType&gt;</ph>, such as <ph id="ph3">`T`</ph>, to represent that the generic is still open.</source>
          <target state="translated">在这种情况下，一个或多个返回<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>值将具有占位符值<ph id="ph2">&lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType&gt;</ph>，如<ph id="ph3">`T`</ph>，用于表示泛型是否仍处于打开状态。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeArguments">
          <source>This scenario can occur if you get a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> from a call to <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%2A&gt;</ph>, instead of from a XAML reader implementation.</source>
          <target state="translated">如果你获取，则会发生这种情况下<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>调用<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%2A&gt;</ph>，而不是从 XAML 读取器实现。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.TypeConverter">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint that represents type conversion behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">获取一个具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>，该约束表示此 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的值的类型转换行为。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeConverter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint that represents type conversion behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">一个具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>，该约束表示此 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的值的类型转换行为。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeConverter">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeConverter">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</ph>在此类型上。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.UnderlyingType">
          <source>Gets the CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that underlies this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">获取为此 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 提供支持的 CLR <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.UnderlyingType">
          <source>The CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that underlies this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">为此 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 提供支持的 CLR <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.ValueSerializer">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint that represents value serialization behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">获取具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>，该约束表示此 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的值的值序列化行为。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ValueSerializer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint that represents value serialization behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>，该约束表示此 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的值的值序列化行为；否则为 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ValueSerializer">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，此属性的调用会<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;</ph>上重写<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>派生类。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ValueSerializer">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;</ph> on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;</ph>在此类型上。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>