<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlWriter.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b0eee4990fee035e3caee65baff737024203a8eb.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b0eee4990fee035e3caee65baff737024203a8eb</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlWriter">
          <source>Provides default implementation and base class definitions for a XAML writer.</source>
          <target state="translated">为 XAML 编写器提供默认实现和基类定义。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlWriter">
          <source>This is not a working default XAML writer; you must either derive from <ph id="ph1">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph> and implement its abstract members, or use an existing <ph id="ph2">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph> derived class.</source>
          <target state="translated">这不是工作默认 XAML 编写器；您必须从 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph> 派生并实现其抽象成员，或者使用现有的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph> 派生类。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlWriter">
          <source>The two most relevant practical derived classes of <ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph> are the <ph id="ph2">&lt;xref:System.Xaml.XamlXmlWriter&gt;</ph> and <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> classes, as the following details explain:</source>
          <target state="translated">两个最相关的实际派生的类<ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph>是<ph id="ph2">&lt;xref:System.Xaml.XamlXmlWriter&gt;</ph>和<ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>类，如详细解释如下：</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlWriter">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlXmlWriter&gt;</ph> processes a XAML node set and produces an XML text file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlXmlWriter&gt;</ph> 处理 XAML 节点集并生成一个 XML 文本文件。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlWriter">
          <source>This class might be used for serialization or as part of the function of a tool that works with in-memory representation of XAML and produces XAML file output.</source>
          <target state="translated">用于序列化或作为一种工具，使用内存中表示形式的 XAML 工作，并且生成 XAML 文件输出的函数的一部分，则可能会使用此类。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlWriter">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> processes a XAML node set and produces an object graph.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> 处理 XAML 节点集并生成对象图。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlWriter">
          <source>This class might be used as part of a full or partial customization of a technology's XAML parser.</source>
          <target state="translated">此类可能使用的一种技术的 XAML 分析器的完整或部分自定义项的一部分。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlWriter">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlWriterSettings&gt;</ph> is a class for settings that are used by a <ph id="ph2">&lt;xref:System.Xaml.XamlWriter&gt;</ph>; however, by default, the <ph id="ph3">&lt;xref:System.Xaml.XamlWriterSettings&gt;</ph> class does not hold any specific settings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlWriterSettings&gt;</ph> 是用于使用的设置的类<ph id="ph2">&lt;xref:System.Xaml.XamlWriter&gt;</ph>; 但是，默认情况下，<ph id="ph3">&lt;xref:System.Xaml.XamlWriterSettings&gt;</ph>类不包含任何特定的设置。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlWriter">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph> base constructor does not use this settings class as an argument, nor does any other <ph id="ph2">&lt;xref:System.Xaml.XamlWriter&gt;</ph> member.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph>基构造函数不使用此设置类作为参数，同样也不处理任何其他<ph id="ph2">&lt;xref:System.Xaml.XamlWriter&gt;</ph>成员。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlWriter">
          <source>Instead, the <ph id="ph1">&lt;xref:System.Xaml.XamlXmlWriter&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> classes include their own settings classes as construction arguments.</source>
          <target state="translated">相反，<ph id="ph1">&lt;xref:System.Xaml.XamlXmlWriter&gt;</ph>和<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>类包括其自己设置类作为构造参数。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlWriter">
          <source>These settings classes are <ph id="ph1">&lt;xref:System.Xaml.XamlXmlWriterSettings&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterSettings&gt;</ph>.</source>
          <target state="translated">这些设置类是<ph id="ph1">&lt;xref:System.Xaml.XamlXmlWriterSettings&gt;</ph>和<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterSettings&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlWriter">
          <source>The settings classes define actual settings values and are based on <ph id="ph1">&lt;xref:System.Xaml.XamlWriterSettings&gt;</ph>, so that they can use the <ph id="ph2">&lt;xref:System.Xaml.XamlWriterSettings&gt;</ph> merge feature.</source>
          <target state="translated">设置类定义实际设置值和基于<ph id="ph1">&lt;xref:System.Xaml.XamlWriterSettings&gt;</ph>，以便他们可以使用<ph id="ph2">&lt;xref:System.Xaml.XamlWriterSettings&gt;</ph>合并功能。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.Close">
          <source>Closes the XAML writer object.</source>
          <target state="translated">关闭 XAML 编写器对象。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlWriter.Close">
          <source>In the base implementation, calling <ph id="ph1">&lt;xref:System.Xaml.XamlWriter.Close%2A&gt;</ph> calls the <ph id="ph2">&lt;xref:System.Xaml.XamlWriter.Dispose%2A&gt;</ph> method with the <ph id="ph3">`isDisposing`</ph> parameter as <ph id="ph4">`true`</ph>.</source>
          <target state="translated">在基实现中，调用<ph id="ph1">&lt;xref:System.Xaml.XamlWriter.Close%2A&gt;</ph>调用<ph id="ph2">&lt;xref:System.Xaml.XamlWriter.Dispose%2A&gt;</ph>方法替换<ph id="ph3">`isDisposing`</ph>参数作为<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release the managed resources; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示释放托管资源；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">释放由 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph> 占用的非托管资源，还可以另外再释放托管资源。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlWriter.Dispose(System.Boolean)">
          <source>You must call the base class to get <ph id="ph1">&lt;xref:System.Xaml.XamlWriter.IsDisposed%2A&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">`true`</ph>.</source>
          <target state="translated">必须调用基的类，以获取<ph id="ph1">&lt;xref:System.Xaml.XamlWriter.IsDisposed%2A&gt;</ph> <ph id="ph2"> = </ph> <ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlWriter.IsDisposed">
          <source>Gets whether <ph id="ph1">&lt;see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" /&gt;</ph> has been called.</source>
          <target state="translated">获取的值指示是否已调用了 <ph id="ph1">&lt;see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlWriter.IsDisposed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" /&gt;</ph> has been called; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已调用 <ph id="ph2">&lt;see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" /&gt;</ph>，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlWriter.SchemaContext">
          <source>When implemented in a derived class, gets the active XAML schema context.</source>
          <target state="translated">在派生类中实现时，获取或设置活动 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlWriter.SchemaContext">
          <source>The active XAML schema context.</source>
          <target state="translated">活动 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.System#IDisposable#Dispose">
          <source>See <ph id="ph1">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph>.</source>
          <target state="translated">请参阅 <ph id="ph1">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.WriteEndMember">
          <source>When implemented in a derived class, produces the representation of an end member node.</source>
          <target state="translated">在派生类中实现时，生成结束成员节点的表示形式。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.WriteEndObject">
          <source>When implemented in a derived class, produces the representation of an end object node.</source>
          <target state="translated">在派生类中实现时，生成结束对象节点的表示形式。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.WriteGetObject">
          <source>When implemented in a derived class, produces an object for cases where the object is a default or implicit value of the property being set, instead of being specified as a discrete object value in the input XAML node set.</source>
          <target state="translated">在派生类中实现时，针对对象是所设置属性的默认值或隐式值的情况生成对象，而不是指定为输入 XAML 节点集中的离散对象值。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>The namespace declaration to write.</source>
          <target state="translated">要写入的命名空间声明。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>When implemented in a derived class, writes a XAML namespace declaration node.</source>
          <target state="translated">在派生类中实现时，写入 XAML 命名空间声明节点。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
          <source>The reader to use for node determination.</source>
          <target state="translated">要用于确定节点的读取器。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
          <source>Performs switching based on node type from the XAML reader (<ph id="ph1">&lt;see cref="P:System.Xaml.XamlReader.NodeType" /&gt;</ph>) and calls the relevant <ph id="ph2">&lt;see langword="Write" /&gt;</ph> method for the writer implementation.</source>
          <target state="translated">基于 XAML 读取器中的节点类型 (<ph id="ph1">&lt;see cref="P:System.Xaml.XamlReader.NodeType" /&gt;</ph>) 执行切换，并为编写器实现调用相关的 <ph id="ph2">&lt;see langword="Write" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
          <source>Notes for Inheritors</source>
          <target state="translated">对继承者的说明</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph> method is not a virtual method because it has practical implementation for all existing <ph id="ph2">&lt;xref:System.Xaml.XamlNodeType&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph>方法不是虚方法，因为它具有所有现有的实际实现<ph id="ph2">&lt;xref:System.Xaml.XamlNodeType&gt;</ph>值。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
          <source>Based on <ph id="ph1">&lt;xref:System.Xaml.XamlNodeType&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph> calls into the <ph id="ph3">`Write`</ph> virtual members that are dedicated to particular node types.</source>
          <target state="translated">基于<ph id="ph1">&lt;xref:System.Xaml.XamlNodeType&gt;</ph>，<ph id="ph2">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph>调入<ph id="ph3">`Write`</ph>专用于特定节点类型的虚拟成员。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
          <source>If you have an advanced XAML writing scenario that expands the XAML type system and XAML node stream concept so that new node types are defined, do not use <ph id="ph1">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph> calls in your logic.</source>
          <target state="translated">如果你有将展开的 XAML 类型系统和 XAML 节点流概念，因此新的高级的 XAML 编写方案定义节点类型，则不要使用<ph id="ph1">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph>在你的逻辑中调用。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
          <source>You must instead provide your own alternative for node-type switching logic in the class or in virtual overrides.</source>
          <target state="translated">而是必须的节点类型切换逻辑在类或虚拟的重写中提供您自己的替代。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
          <source><ph id="ph1">&lt;paramref name="reader" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="reader" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
          <source>The default implementation encountered a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlNodeType" /&gt;</ph> that is not in the default enumeration.</source>
          <target state="translated">默认实现遇到不在默认枚举中的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlNodeType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>The member node to write.</source>
          <target state="translated">要写入的成员节点。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>When implemented in a derived class, writes the representation of a start member node.</source>
          <target state="translated">在派生类中实现时，写入开始成员节点的表示形式。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>The XAML type of the object to write.</source>
          <target state="translated">要写入的对象的 XAML 类型。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>When implemented in a derived class, writes the representation of a start object node.</source>
          <target state="translated">在派生类中实现时，写入开始对象节点的表示形式。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.WriteValue(System.Object)">
          <source>The value to write.</source>
          <target state="translated">要写入的值。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlWriter.WriteValue(System.Object)">
          <source>When implemented in a derived class, writes a value node.</source>
          <target state="translated">在派生类中实现时，写入值节点。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>