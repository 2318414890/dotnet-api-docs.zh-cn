<Type Name="XamlWriter" FullName="System.Xaml.XamlWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b0eee4990fee035e3caee65baff737024203a8eb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XamlWriter : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlWriter extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlWriter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XamlWriter&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlWriter abstract : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="a0dcd-101">为 XAML 编写器提供默认实现和基类定义。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a0dcd-101">Provides default implementation and base class definitions for a XAML writer.</span>
      </span>
      <span data-ttu-id="a0dcd-102">这不是工作默认 XAML 编写器；您必须从 <see cref="T:System.Xaml.XamlWriter" /> 派生并实现其抽象成员，或者使用现有的 <see cref="T:System.Xaml.XamlWriter" /> 派生类。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a0dcd-102">This is not a working default XAML writer; you must either derive from <see cref="T:System.Xaml.XamlWriter" /> and implement its abstract members, or use an existing <see cref="T:System.Xaml.XamlWriter" /> derived class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0dcd-103">两个最相关的实际派生的类<xref:System.Xaml.XamlWriter>是<xref:System.Xaml.XamlXmlWriter>和<xref:System.Xaml.XamlObjectWriter>类，如详细解释如下：</span><span class="sxs-lookup"><span data-stu-id="a0dcd-103">The two most relevant practical derived classes of <xref:System.Xaml.XamlWriter> are the <xref:System.Xaml.XamlXmlWriter> and <xref:System.Xaml.XamlObjectWriter> classes, as the following details explain:</span></span>  
  
-   <span data-ttu-id="a0dcd-104"><xref:System.Xaml.XamlXmlWriter> 处理 XAML 节点集并生成一个 XML 文本文件。</span><span class="sxs-lookup"><span data-stu-id="a0dcd-104"><xref:System.Xaml.XamlXmlWriter> processes a XAML node set and produces an XML text file.</span></span> <span data-ttu-id="a0dcd-105">用于序列化或作为一种工具，使用内存中表示形式的 XAML 工作，并且生成 XAML 文件输出的函数的一部分，则可能会使用此类。</span><span class="sxs-lookup"><span data-stu-id="a0dcd-105">This class might be used for serialization or as part of the function of a tool that works with in-memory representation of XAML and produces XAML file output.</span></span>  
  
-   <span data-ttu-id="a0dcd-106"><xref:System.Xaml.XamlObjectWriter> 处理 XAML 节点集并生成对象图。</span><span class="sxs-lookup"><span data-stu-id="a0dcd-106"><xref:System.Xaml.XamlObjectWriter> processes a XAML node set and produces an object graph.</span></span> <span data-ttu-id="a0dcd-107">此类可能使用的一种技术的 XAML 分析器的完整或部分自定义项的一部分。</span><span class="sxs-lookup"><span data-stu-id="a0dcd-107">This class might be used as part of a full or partial customization of a technology's XAML parser.</span></span>  
  
 <span data-ttu-id="a0dcd-108"><xref:System.Xaml.XamlWriterSettings> 是用于使用的设置的类<xref:System.Xaml.XamlWriter>; 但是，默认情况下，<xref:System.Xaml.XamlWriterSettings>类不包含任何特定的设置。</span><span class="sxs-lookup"><span data-stu-id="a0dcd-108"><xref:System.Xaml.XamlWriterSettings> is a class for settings that are used by a <xref:System.Xaml.XamlWriter>; however, by default, the <xref:System.Xaml.XamlWriterSettings> class does not hold any specific settings.</span></span> <span data-ttu-id="a0dcd-109"><xref:System.Xaml.XamlWriter>基构造函数不使用此设置类作为参数，同样也不处理任何其他<xref:System.Xaml.XamlWriter>成员。</span><span class="sxs-lookup"><span data-stu-id="a0dcd-109">The <xref:System.Xaml.XamlWriter> base constructor does not use this settings class as an argument, nor does any other <xref:System.Xaml.XamlWriter> member.</span></span> <span data-ttu-id="a0dcd-110">相反，<xref:System.Xaml.XamlXmlWriter>和<xref:System.Xaml.XamlObjectWriter>类包括其自己设置类作为构造参数。</span><span class="sxs-lookup"><span data-stu-id="a0dcd-110">Instead, the <xref:System.Xaml.XamlXmlWriter> and <xref:System.Xaml.XamlObjectWriter> classes include their own settings classes as construction arguments.</span></span> <span data-ttu-id="a0dcd-111">这些设置类是<xref:System.Xaml.XamlXmlWriterSettings>和<xref:System.Xaml.XamlObjectWriterSettings>。</span><span class="sxs-lookup"><span data-stu-id="a0dcd-111">These settings classes are <xref:System.Xaml.XamlXmlWriterSettings> and <xref:System.Xaml.XamlObjectWriterSettings>.</span></span> <span data-ttu-id="a0dcd-112">设置类定义实际设置值和基于<xref:System.Xaml.XamlWriterSettings>，以便他们可以使用<xref:System.Xaml.XamlWriterSettings>合并功能。</span><span class="sxs-lookup"><span data-stu-id="a0dcd-112">The settings classes define actual settings values and are based on <xref:System.Xaml.XamlWriterSettings>, so that they can use the <xref:System.Xaml.XamlWriterSettings> merge feature.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlWriter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a0dcd-113">初始化 <see cref="T:System.Xaml.XamlWriter" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-113">Initializes a new instance of the <see cref="T:System.Xaml.XamlWriter" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a0dcd-114">关闭 XAML 编写器对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-114">Closes the XAML writer object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0dcd-115">在基实现中，调用<xref:System.Xaml.XamlWriter.Close%2A>调用<xref:System.Xaml.XamlWriter.Dispose%2A>方法替换`isDisposing`参数作为`true`。</span><span class="sxs-lookup"><span data-stu-id="a0dcd-115">In the base implementation, calling <xref:System.Xaml.XamlWriter.Close%2A> calls the <xref:System.Xaml.XamlWriter.Dispose%2A> method with the `isDisposing` parameter as `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="a0dcd-116">
            <see langword="true" /> 表示释放托管资源；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-116">
              <see langword="true" /> to release the managed resources; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0dcd-117">释放由 <see cref="T:System.Xaml.XamlWriter" /> 占用的非托管资源，还可以另外再释放托管资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-117">Releases the unmanaged resources used by the <see cref="T:System.Xaml.XamlWriter" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0dcd-118">必须调用基的类，以获取<xref:System.Xaml.XamlWriter.IsDisposed%2A>  =  `true`。</span><span class="sxs-lookup"><span data-stu-id="a0dcd-118">You must call the base class to get <xref:System.Xaml.XamlWriter.IsDisposed%2A> = `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlWriter.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a0dcd-119">获取的值指示是否已调用了 <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-119">Gets whether <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" /> has been called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a0dcd-120">如果已调用 <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-120">
              <see langword="true" /> if <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" /> has been called; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlWriter.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a0dcd-121">在派生类中实现时，获取或设置活动 XAML 架构上下文。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-121">When implemented in a derived class, gets the active XAML schema context.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a0dcd-122">活动 XAML 架构上下文。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-122">The active XAML schema context.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a0dcd-123">请参阅 <see cref="M:System.IDisposable.Dispose" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-123">See <see cref="M:System.IDisposable.Dispose" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndMember">
      <MemberSignature Language="C#" Value="public abstract void WriteEndMember ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteEndMember" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndMember ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndMember();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a0dcd-124">在派生类中实现时，生成结束成员节点的表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-124">When implemented in a derived class, produces the representation of an end member node.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public abstract void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndObject();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a0dcd-125">在派生类中实现时，生成结束对象节点的表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-125">When implemented in a derived class, produces the representation of an end object node.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteGetObject">
      <MemberSignature Language="C#" Value="public abstract void WriteGetObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteGetObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteGetObject" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteGetObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteGetObject();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a0dcd-126">在派生类中实现时，针对对象是所设置属性的默认值或隐式值的情况生成对象，而不是指定为输入 XAML 节点集中的离散对象值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-126">When implemented in a derived class, produces an object for cases where the object is a default or implicit value of the property being set, instead of being specified as a discrete object value in the input XAML node set.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNamespace">
      <MemberSignature Language="C#" Value="public abstract void WriteNamespace (System.Xaml.NamespaceDeclaration namespaceDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNamespace(class System.Xaml.NamespaceDeclaration namespaceDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteNamespace(System::Xaml::NamespaceDeclaration ^ namespaceDeclaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceDeclaration" Type="System.Xaml.NamespaceDeclaration" />
      </Parameters>
      <Docs>
        <param name="namespaceDeclaration">
          <span data-ttu-id="a0dcd-127">要写入的命名空间声明。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-127">The namespace declaration to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0dcd-128">在派生类中实现时，写入 XAML 命名空间声明节点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-128">When implemented in a derived class, writes a XAML namespace declaration node.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNode">
      <MemberSignature Language="C#" Value="public void WriteNode (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNode(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNode (reader As XamlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNode(System::Xaml::XamlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="a0dcd-129">要用于确定节点的读取器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-129">The reader to use for node determination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0dcd-130">基于 XAML 读取器中的节点类型 (<see cref="P:System.Xaml.XamlReader.NodeType" />) 执行切换，并为编写器实现调用相关的 <see langword="Write" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-130">Performs switching based on node type from the XAML reader (<see cref="P:System.Xaml.XamlReader.NodeType" />) and calls the relevant <see langword="Write" /> method for the writer implementation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="notes-for-inheritors"></a><span data-ttu-id="a0dcd-131">对继承者的说明</span><span class="sxs-lookup"><span data-stu-id="a0dcd-131">Notes for Inheritors</span></span>  
 <span data-ttu-id="a0dcd-132"><xref:System.Xaml.XamlWriter.WriteNode%2A>方法不是虚方法，因为它具有所有现有的实际实现<xref:System.Xaml.XamlNodeType>值。</span><span class="sxs-lookup"><span data-stu-id="a0dcd-132">The <xref:System.Xaml.XamlWriter.WriteNode%2A> method is not a virtual method because it has practical implementation for all existing <xref:System.Xaml.XamlNodeType> values.</span></span> <span data-ttu-id="a0dcd-133">基于<xref:System.Xaml.XamlNodeType>，<xref:System.Xaml.XamlWriter.WriteNode%2A>调入`Write`专用于特定节点类型的虚拟成员。</span><span class="sxs-lookup"><span data-stu-id="a0dcd-133">Based on <xref:System.Xaml.XamlNodeType>, <xref:System.Xaml.XamlWriter.WriteNode%2A> calls into the `Write` virtual members that are dedicated to particular node types.</span></span>  
  
 <span data-ttu-id="a0dcd-134">如果你有将展开的 XAML 类型系统和 XAML 节点流概念，因此新的高级的 XAML 编写方案定义节点类型，则不要使用<xref:System.Xaml.XamlWriter.WriteNode%2A>在你的逻辑中调用。</span><span class="sxs-lookup"><span data-stu-id="a0dcd-134">If you have an advanced XAML writing scenario that expands the XAML type system and XAML node stream concept so that new node types are defined, do not use <xref:System.Xaml.XamlWriter.WriteNode%2A> calls in your logic.</span></span> <span data-ttu-id="a0dcd-135">而是必须的节点类型切换逻辑在类或虚拟的重写中提供您自己的替代。</span><span class="sxs-lookup"><span data-stu-id="a0dcd-135">You must instead provide your own alternative for node-type switching logic in the class or in virtual overrides.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a0dcd-136">
            <paramref name="reader" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-136">
              <paramref name="reader" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="a0dcd-137">默认实现遇到不在默认枚举中的 <see cref="T:System.Xaml.XamlNodeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-137">The default implementation encountered a <see cref="T:System.Xaml.XamlNodeType" /> that is not in the default enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartMember">
      <MemberSignature Language="C#" Value="public abstract void WriteStartMember (System.Xaml.XamlMember xamlMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartMember(class System.Xaml.XamlMember xamlMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteStartMember(System.Xaml.XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartMember(System::Xaml::XamlMember ^ xamlMember);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlMember" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="xamlMember">
          <span data-ttu-id="a0dcd-138">要写入的成员节点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-138">The member node to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0dcd-139">在派生类中实现时，写入开始成员节点的表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-139">When implemented in a derived class, writes the representation of a start member node.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public abstract void WriteStartObject (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartObject(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteStartObject(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartObject (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartObject(System::Xaml::XamlType ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="a0dcd-140">要写入的对象的 XAML 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-140">The XAML type of the object to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0dcd-141">在派生类中实现时，写入开始对象节点的表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-141">When implemented in a derived class, writes the representation of a start object node.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public abstract void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="a0dcd-142">要写入的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-142">The value to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0dcd-143">在派生类中实现时，写入值节点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0dcd-143">When implemented in a derived class, writes a value node.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>