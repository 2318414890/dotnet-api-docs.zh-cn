<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlMember.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5284b342cd8ec18017e3ac4ac33597d46dbc3c75f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">284b342cd8ec18017e3ac4ac33597d46dbc3c75f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>Provides the XAML type system identifier for members of XAML types.</source>
          <target state="translated">为 XAML 类型的成员提供 XAML 类型系统标识符。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>The identifier is used by XAML readers and XAML writers during processing of member nodes (when the XAML reader is positioned on a <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph>) and also for general XAML type system logic.</source>
          <target state="translated">该标识符由 XAML 读取器和 XAML 编写器在处理成员节点的过程中使用（如果 XAML 读取器位于 <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph> 上），另外还用于常规 XAML 类型系统逻辑。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> can use three methodologies for returning information about a XAML member: standard common language runtime (CLR) reflection; a reference-only reflection technique calling internal APIs that use optimized bit flags; or calling into virtual overrides of the <ph id="ph2">`Lookup*`</ph> API that is provided by possible <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> subclasses.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 可以使用三个方法用于返回有关 XAML 成员的信息： 标准公共语言运行时 (CLR) 反射;调用内部的仅引用反射技术 Api 该使用优化位标志;调入虚拟重写或<ph id="ph2">`Lookup*`</ph>可能由提供的 API<ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>子类。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For most uses of .NET Framework XAML Services APIs and the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> API, you use the default XAML schema context.</source>
          <target state="translated">大部分使用.NET Framework XAML 服务 Api 和<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>API，你将使用默认 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The default XAML schema context for .NET Framework XAML Services uses CLR backing for the type system.</source>
          <target state="translated">.NET Framework XAML 服务的默认 XAML 架构上下文使用 CLR 后备类型系统。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>This enables the XAML readers and XAML writers to work with any type or member that is defined in, or otherwise available to, the CLR and its reflection techniques.</source>
          <target state="translated">这使 XAML 读取器和 XAML 编写器，以处理任何类型或成员定义在中，或其他可用于、 CLR 和其反射技术。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Lookup* APIs and XamlMember Derived Classes</source>
          <target state="translated">查找 * Api 和 XamlMember 派生类</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> defines several virtual members that derived classes might override.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 定义了几个派生类的虚拟成员可能会重写。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>These members have names that always start with the string <ph id="ph1">`Lookup`</ph>.</source>
          <target state="translated">这些成员的名称的字符串始终开头<ph id="ph1">`Lookup`</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The remainder of the API name then references the property that the virtual method influences.</source>
          <target state="translated">API 的其余部分名称然后引用虚拟方法影响的属性。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For example, a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class might override <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> to influence what the base-defined property <ph id="ph3">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph> returns in a derived class.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生的类可能会重写<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph>来影响哪些的基本定义的属性<ph id="ph3">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>返回派生类中。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You can predict return values for such properties in <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> or existing derived classes by reading the documentation for the relevant <ph id="ph2">`Lookup*`</ph> methods.</source>
          <target state="translated">您可以预测中的这些属性的返回值<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>或现有派生类通过阅读相关的文档<ph id="ph2">`Lookup*`</ph>方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The purpose of the <ph id="ph1">`Lookup*`</ph> methods is to provide a XAML type system extension technique that incorporates the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> base class.</source>
          <target state="translated">用途<ph id="ph1">`Lookup*`</ph>方法是提供一种 XAML 类型系统扩展方法包含<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>基类。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>By deriving from <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> and overriding the <ph id="ph2">`Lookup`</ph> virtual members, you can define the concept of a XAML member for a XAML schema in a XAML type system without being tied to the specifics of a backing type system or technology.</source>
          <target state="translated">通过从派生<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>和重写<ph id="ph2">`Lookup`</ph>虚拟成员，你可以定义 XAML 成员的 XAML 架构的概念中的 XAML 类型系统而不受限于的后备类型系统或技术的详细信息。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You can also use a provided XAML schema context under this scheme and still return the results you want.</source>
          <target state="translated">你可以还使用在此方案下，提供的 XAML 架构上下文，并仍返回所需的结果。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>As an example, consider the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> property <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>.</source>
          <target state="translated">作为示例，请考虑<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>属性<ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>This property informs callers that operations such as using a <ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph> for serialization can write a value for this member on a target object.</source>
          <target state="translated">此属性通知调用方该操作，例如使用<ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph>的序列化可以将一个值写入此成员对目标对象。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>In the default implementation, the determination of whether the member is writable is made by using reflection techniques against the backing CLR <ph id="ph1">&lt;xref:System.Type&gt;</ph> and its members (the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>).</source>
          <target state="translated">在默认实现中，通过使用针对后备 CLR 反射技术进行确定成员是否可写<ph id="ph1">&lt;xref:System.Type&gt;</ph>和其成员 ( <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Therefore, by default, the XAML type system depends on the CLR type system.</source>
          <target state="translated">因此，默认情况下，XAML 类型系统依赖于 CLR 类型系统。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>However, you can remove this dependency for your XAML type system reporting of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> by overriding the API <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph>.</source>
          <target state="translated">但是，你可以为你 XAML 类型系统的报表的删除此依赖关系<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>通过重写 API <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Within your override, you can use other determinations, such as metadata that is specific to your technology, a master lookup table that is optimized for a fixed XAML vocabulary, or a variety of other strategies for determining whether a XAML member is writable in your XAML vocabulary.</source>
          <target state="translated">重写中，你可以使用其他决定，例如特定于您的技术，主查找表中可写 XAML 成员是否为固定的 XAML 词汇或其他策略用于确定各种优化的元数据你XAML 词汇。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Constructing XamlMember Without XAML Schema Context</source>
          <target state="translated">构造 XamlMember 而无需 XAML 架构上下文</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Most constructors of <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> require a <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> as part of their initialization.</source>
          <target state="translated">大多数构造函数的<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>需要<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>作为其初始化的一部分。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> is also necessary for many internal <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> operations, such as obtaining information that is being forwarded from the backing type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> ，还有必要对于许多内部<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>操作，例如获取被转发从后备类型的信息。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>When you are working with the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> API, you typically have a <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> that is available from a surrounding construct such as a <ph id="ph3">&lt;xref:System.Xaml.XamlWriter&gt;</ph>.</source>
          <target state="translated">当你正在使用<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>API，你通常具有<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>如也是可从周边构造<ph id="ph3">&lt;xref:System.Xaml.XamlWriter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>In this case, you can pass the <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> reference through to all XAML type system calls that require a XAML schema context.</source>
          <target state="translated">在这种情况下，你可以将传递<ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>引用通过对所有需要 XAML 架构上下文的 XAML 类型系统调用。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>One specific constructor, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph>, does not require a <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>.</source>
          <target state="translated">一个特定的构造函数， <ph id="ph1">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph>，不需要<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>However, a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature returns <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">但是，<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>构造<ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph>签名返回<ph id="ph3">`true`</ph>为<ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, such a member cannot be written into an object graph.</source>
          <target state="translated">涉及了加载路径<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>，此类成员不能写入到对象图。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Using the .NET Framework XAML services implementation, the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> call throws a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> reports <ph id="ph4">`true`</ph> for <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">使用.NET Framework XAML 服务实现中，<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph>调用会引发<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph>时相关<ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>报表<ph id="ph4">`true`</ph>为<ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You should not construct a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that has a value of <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> unless your implementation can handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior.</source>
          <target state="translated">不应构造<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>，其值为<ph id="ph2">`true`</ph>为<ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>除非你实现可以处理从异常<ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>，或通过其他方式来调整<ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>行为。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For example, one or more of the  following might be true of your implementation:</source>
          <target state="translated">例如，一个或多个以下可能的实现 true:</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The XAML schema context is available later.</source>
          <target state="translated">XAML 架构上下文是更高版本可用。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You use a member invoker pattern.</source>
          <target state="translated">使用成员调用程序模式。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You deliberately override <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> in a custom XAML writer.</source>
          <target state="translated">您有意重写<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph>中自定义 XAML 编写器。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> that represents the event member.</source>
          <target state="translated">用于表示事件成员的 CLR 类型系统 <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用于限定成员的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 上下文。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using CLR type system <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>.</source>
          <target state="translated">使用 CLR 类型系统 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> 初始化 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents an event (event handler connection-point property).</source>
          <target state="translated">如果成员表示一个事件 （事件处理程序连接点属性），请使用此构造函数。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> that represents the property member.</source>
          <target state="translated">用于表示属性成员的 CLR 类型系统 <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用于限定成员的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 上下文。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using CLR type system <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>.</source>
          <target state="translated">使用 CLR 类型系统 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> 初始化 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents a property (and specifically is not an event handler connection).</source>
          <target state="translated">如果该成员表示的属性 （并不具体而言是事件处理程序连接），请使用此构造函数。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> that represents the event member.</source>
          <target state="translated">用于表示事件成员的 CLR 类型系统 <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用于限定成员的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 上下文。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time reflection calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">可针对 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 处理运行时反射调用的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using CLR type system <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>, including <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">使用 CLR 类型系统 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>（包括 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 信息）初始化 <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor if the member represents an event (or an event handler connection-point property).</source>
          <target state="translated">如果成员表示一个事件 （或事件处理程序连接点属性），请使用此构造函数。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> that represents the property member.</source>
          <target state="translated">用于表示属性成员的 CLR 类型系统 <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用于限定成员的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 上下文。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time invocation calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">用于针对 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 处理运行时调用的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using reflection <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>, including <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">使用反射 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>（包括 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 信息）初始化 <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor only if the member represents a property and if it is not an event handler connection.</source>
          <target state="translated">只有成员表示的属性，并且它不是事件处理程序连接，请使用此构造函数。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The string name of the attachable event.</source>
          <target state="translated">可附加事件的字符串名称。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the handler <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method of the attachable member's backing implementation.</source>
          <target state="translated">可附加成员的支持实现的处理程序 <ph id="ph2">&lt;see langword="Add" /&gt;</ph> 方法的 CLR 类型系统 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用于限定成员的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 上下文。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable event.</source>
          <target state="translated">针对表示可附加事件的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 初始化 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents an attachable event member.</source>
          <target state="translated">如果成员表示可附加的事件成员，请使用此构造函数。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>The string name of the member.</source>
          <target state="translated">成员的字符串名称。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> information for the declaring type.</source>
          <target state="translated">声明类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 信息。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the member is attachable; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要指示成员是可附加的，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using a string name and declaring <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> information.</source>
          <target state="translated">使用字符串名称和声明 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 信息初始化 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that is constructed with this signature has significant limitations.</source>
          <target state="translated">使用此签名构造的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 具有很大的限制。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature returns <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>构造<ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph>签名返回<ph id="ph3">`true`</ph>为<ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, such a member cannot be written into an object graph.</source>
          <target state="translated">涉及了加载路径<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>，此类成员不能写入到对象图。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>Using the .NET Framework XAML Services implementation, the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> call throws a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> reports <ph id="ph4">`true`</ph> for <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">使用.NET Framework XAML 服务实现中，<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph>调用会引发<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph>时相关<ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>报表<ph id="ph4">`true`</ph>为<ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>You should not construct a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> with <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph><ph id="ph3">`true`</ph> unless your implementation can handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior.</source>
          <target state="translated">不应构造<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>与<ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph><ph id="ph3">`true`</ph>除非你实现可以处理从异常<ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>，或通过其他方式来调整<ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>行为。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>For example, one or more of the following might be true of your implementation:</source>
          <target state="translated">例如，一个或多个以下可能的实现 true:</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>The XAML schema context is available later.</source>
          <target state="translated">XAML 架构上下文是更高版本可用。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>You use a member invoker pattern.</source>
          <target state="translated">使用成员调用程序模式。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>You deliberately override <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> in a custom XAML writer.</source>
          <target state="translated">您有意重写<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph>中自定义 XAML 编写器。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> or <ph id="ph2">&lt;paramref name="declaringType" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="declaringType" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The string name of the attachable property.</source>
          <target state="translated">可附加属性的字符串名称。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated">可附加成员的支持实现的 <ph id="ph2">&lt;see langword="get" /&gt;</ph> 访问器的 CLR 类型系统 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated">可附加成员的支持实现的 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 访问器的 CLR 类型系统 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用于限定成员的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 上下文。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable property.</source>
          <target state="translated">针对表示可附加属性的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 初始化 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents an attachable property.</source>
          <target state="translated">如果成员表示可附加属性，请使用此构造函数。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The string name of the attachable event.</source>
          <target state="translated">可附加事件的字符串名称。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the handler <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method of the attachable member's backing implementation.</source>
          <target state="translated">可附加成员的支持实现的处理程序 <ph id="ph2">&lt;see langword="Add" /&gt;</ph> 方法的 CLR 类型系统 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用于限定成员的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 上下文。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time invocation calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">用于针对 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 处理运行时调用的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable event, including <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">针对表示可附加事件的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>（包括 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 信息）初始化 <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor if the member represents an attachable event member.</source>
          <target state="translated">如果成员表示可附加的事件成员，请使用此构造函数。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The string name of the attachable property.</source>
          <target state="translated">可附加属性的字符串名称。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated">可附加成员的支持实现的 <ph id="ph2">&lt;see langword="get" /&gt;</ph> 访问器的 CLR 类型系统 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated">可附加成员的支持实现的 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 访问器的 CLR 类型系统 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">用于限定成员的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 上下文。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time invocation calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">用于针对 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 处理运行时调用的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable property, including <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">针对表示可附加属性的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>（包括 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 信息）初始化 <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor if the member represents an attachable property member.</source>
          <target state="translated">如果成员表示附加的属性成员，请使用此构造函数。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the type that declares the member that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">获取类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>，该类型声明与此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 关联的成员。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the type that declares the member that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>，该类型声明与此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 关联的成员。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>This value is typically set during initialization and is usually not <ph id="ph1">`null`</ph>.</source>
          <target state="translated">此值通常设置在初始化期间，而且通常不是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> information can be passed in by constructors for initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> 可以传递信息在由构造函数进行初始化。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>By calling directly into base constructors, initialization for <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived classes can omit some of the value-checks that are made in the base class.</source>
          <target state="translated">通过直接调入基类的构造函数，初始化<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生的类可以省略某些在基类中进行值检查。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>Therefore, the derived initialization can change the reported type-member relationship information of a XAML member so that it no longer aligns in an expected way with the type system information of its underlying CLR declaration.</source>
          <target state="translated">因此，派生的初始化可以更改 XAML 成员的报告的类型成员关系信息，以便它不再按预期的方式与其基础 CLR 声明的类型系统信息一致。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>For any security-critical checks of declaring type information, use the underlying CLR type instead.</source>
          <target state="translated">对于声明的类型信息的任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used for deferred loading of XAML declared objects.</source>
          <target state="translated">获取一个 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 对象，该对象用于 XAML 声明的对象的延迟加载。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> constraint on the generic.</source>
          <target state="translated">一个对泛型具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDeferringLoader%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph>时，将调用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDeferringLoader%2A&gt;</ph>或该方法的特定重写。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>This behavior occurs in cases where the initial internal reflection logic has not already set the information.</source>
          <target state="translated">在其中的初始内部反射逻辑还未设置信息的情况下会发生此行为。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Gets a list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 对象的列表。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>These report the members where dependency relationships for initialization order exist relative to this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">这些对象报告一些成员，其中的初始化顺序依赖关系相对于此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 存在。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 对象的列表。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDependsOn%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph>时，将调用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDependsOn%2A&gt;</ph>或该方法的特定重写。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>This behavior occurs in cases where the initial internal reflection logic has not already set the information.</source>
          <target state="translated">在其中的初始内部反射逻辑还未设置信息的情况下会发生此行为。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>The <ph id="ph1">`DependsOn`</ph> pattern can be applied to object model cases that deliberately contradict a general XAML rule.</source>
          <target state="translated"><ph id="ph1">`DependsOn`</ph>模式可以应用于故意矛盾常规的 XAML 规则的对象模型事例。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>The general XAML rule is that members of a type that are not passed as initialization text (or by a factory method in XAML 2009) must be able to be assigned in any order.</source>
          <target state="translated">一般的 XAML 规则是一种类型的初始化文本作为 （或通过在 XAML 2009 的工厂方法） 不传递的成员必须能够以任意顺序指定。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>By applying a <ph id="ph1">`DependsOn`</ph> pattern to a member, you can instruct XAML writers to always process the referenced member before this member.</source>
          <target state="translated">通过应用<ph id="ph1">`DependsOn`</ph>模式于成员，你可以指示 XAML 编写器始终处理之前此成员引用的成员。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>You can apply this pattern in situations where the value of the current member requires context or other information that is only available after the other member is set.</source>
          <target state="translated">你可以应用在其中的当前成员的值需要上下文或其他成员设置之后才可用的其他信息的情况下此模式。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>The <ph id="ph1">`DependsOn`</ph> pattern should be applied judiciously and reserved for property scenarios where it serves an architectural purpose.</source>
          <target state="translated"><ph id="ph1">`DependsOn`</ph>应谨慎地应用模式，并将其保留为它所服务体系结构的用途的属性方案。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Large numbers of dependencies have the potential to slow down XAML processing.</source>
          <target state="translated">大量的依赖项也可能会减慢 XAML 处理。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Also, it is possible to produce circular dependencies, in which case the XAML processing behavior is undefined.</source>
          <target state="translated">另外，它还有可能产生循环依赖关系，在这种情况下的 XAML 处理行为是不确定。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Example <ph id="ph1">`DependsOn`</ph> scenarios from WPF include certain properties on <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph>, on <ph id="ph4">&lt;xref:System.Windows.Trigger&gt;</ph>, and on <ph id="ph5">&lt;xref:System.Windows.Setter&gt;</ph>.</source>
          <target state="translated">示例<ph id="ph1">`DependsOn`</ph>方案从 WPF 上包括某些属性<ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph>上<ph id="ph4">&lt;xref:System.Windows.Trigger&gt;</ph>，然后在<ph id="ph5">&lt;xref:System.Windows.Setter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">指示当前对象是否等于另一个对象。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Object)">
          <source>The object to compare with this object.</source>
          <target state="translated">要与此对象进行比较的对象。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Object)">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">指示当前对象是否等于另一个对象。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果当前对象等于 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> 参数，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
          <source>An object to compare with this object.</source>
          <target state="translated">一个与此对象进行比较的对象。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
          <target state="translated">指示当前对象是否等于同一类型的另一个对象。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="other" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果当前对象等于 <ph id="ph2">&lt;paramref name="other" /&gt;</ph> 参数，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetHashCode">
          <source>Returns the hash code for this object.</source>
          <target state="translated">返回该对象的哈希代码。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetHashCode">
          <source>An integer hash code.</source>
          <target state="translated">整数哈希代码。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetXamlNamespaces">
          <source>Returns a list of XAML namespaces where this XAML member can exist.</source>
          <target state="translated">返回 XAML 命名空间的列表，此 XAML 成员可能存在于这些命名空间中。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetXamlNamespaces">
          <source>A list of XAML namespace identifiers as strings.</source>
          <target state="translated">字符串形式的 XAML 命名空间标识符的列表。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.GetXamlNamespaces">
          <source>The default implementation returns the <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=nameWithType&gt;</ph> call result from the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> that is associated with this <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated">默认实现返回<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=nameWithType&gt;</ph>调用结果<ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>与此关联<ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.Invoker">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">获取与此 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 关联的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">与此 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 关联的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>The <ph id="ph1">`Invoker`</ph> pattern is an advanced XAML type system extension technique.</source>
          <target state="translated"><ph id="ph1">`Invoker`</ph>模式是高级的 XAML 类型系统扩展方法。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>The <ph id="ph1">`Invoker`</ph> pattern provides a way to inject different schema type mapping behavior, while still using XAML type system definitions from .NET Framework XAML Services.</source>
          <target state="translated"><ph id="ph1">`Invoker`</ph>模式提供了将不同的架构类型映射行为，注入时仍在使用从.NET Framework XAML 服务 XAML 类型系统定义的方法。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>If a <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph> override returns <ph id="ph2">`null`</ph>, or if the default implementation returns <ph id="ph3">`null`</ph> because it lacks the <ph id="ph4">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> for this <ph id="ph5">&lt;xref:System.Xaml.XamlMember&gt;</ph>, the <ph id="ph6">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> property returns <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph>重写返回<ph id="ph2">`null`</ph>，或如果默认实现返回<ph id="ph3">`null`</ph>因为它缺少<ph id="ph4">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>此<ph id="ph5">&lt;xref:System.Xaml.XamlMember&gt;</ph>、<ph id="ph6">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>属性返回<ph id="ph7">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> is the default.</source>
          <target state="translated">默认为 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>This is true for most operations that use .NET Framework XAML Services and the default XAML schema context, and where no specific override <ph id="ph1">`Invoker`</ph> patterns are passed for construction of XAML type system entities.</source>
          <target state="translated">这适用于使用.NET Framework XAML 服务和默认 XAML 架构上下文，并且没有特定的重写其中的大多数操作<ph id="ph1">`Invoker`</ph>模式传递有关构造的 XAML 类型系统实体。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>时，将调用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph>或该方法的特定重写。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is reported as an ambient property.</source>
          <target state="translated">获取一个值，该值指示是否将此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 报告为一个环境属性。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is reported as an ambient property; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果将此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 报告为环境属性，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAmbient%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAmbient%2A&gt;</ph>时，将调用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph>或该方法的特定重写。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>This behavior occurs in implementations where the initial internal reflection logic has not already set the information.</source>
          <target state="translated">在其中的初始内部反射逻辑还未设置信息的实现会发生此行为。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>Checking for ambient properties is are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</source>
          <target state="translated">检查环境属性通常是 XAML 处理逻辑，以确保对象和依赖于环境限定使用的类型的值可以正常工作的一部分。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>The .NET Framework XAML Services APIs and the default XAML schema context populates this value based on attribution with <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>.</source>
          <target state="translated">.NET Framework XAML 服务 Api 和默认 XAML 架构上下文填充此值根据与归属<ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> uses this existing <ph id="ph2">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> technique, and it returns <ph id="ph3">`true`</ph> if <ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> exists on a member declaration.</source>
          <target state="translated">默认实现<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph>使用此现有<ph id="ph2">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>技术，并返回<ph id="ph3">`true`</ph>如果<ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>成员声明上是否存在。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> is found on members of several WPF types, which include <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Setter&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> 在多个 WPF 类型，其中包括的成员上找到<ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.Setter&gt;</ph>，和<ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>It is also found on the <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> type, which connotes that any member that uses <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> as its type should be considered ambient even if the member is not specifically attributed.</source>
          <target state="translated">它还会在找到<ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>类型，可以表示的任何成员，它使用<ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>为其类型应视为环境即使没有专门特性化的成员。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsAttachable">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is an attachable member.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否为可附加成员。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAttachable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is an attachable member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是可附加成员，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAttachable">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph> value is initialized based on which constructor was used to construct a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph>基于哪个构造函数用于构造初始化值<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is a XAML directive.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否为 XAML 指令。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is a XAML directive; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是 XAML 指令，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> value is initialized based on which constructor was used to construct a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph>基于哪个构造函数用于构造初始化值<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>The base <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> constructors initialize so that <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">基<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>构造函数初始化，以便<ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph>是<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>However, the <ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> class (a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class) initializes so that <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">但是，<ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph>类 (<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生类) 初始化，以便<ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph>是<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>If you want to report <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> as <ph id="ph2">`true`</ph> to callers of a custom XAML schema class for XAML members, make sure you derive from <ph id="ph3">&lt;xref:System.Xaml.XamlDirective&gt;</ph> because that is the only way to enable that behavior.</source>
          <target state="translated">如果您希望报告<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph>作为<ph id="ph2">`true`</ph>到 XAML 成员的自定义 XAML 架构类的调用方，请确保派生自<ph id="ph3">&lt;xref:System.Xaml.XamlDirective&gt;</ph>，因为它是启用此行为的唯一方法。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsEvent">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event member.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示事件成员。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsEvent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示事件，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsEvent">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsEvent%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph>时，将调用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsEvent%2A&gt;</ph>或该方法的特定重写。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsNameValid">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is initialized with a valid <ph id="ph2">&lt;see langword="xamlName" /&gt;</ph> string as its <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.Name" /&gt;</ph>.</source>
          <target state="translated">获取一个值，该值指示是否使用有效的 <ph id="ph2">&lt;see langword="xamlName" /&gt;</ph> 字符串作为其 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 来初始化此 <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.Name" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsNameValid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is initialized with a valid <ph id="ph3">&lt;see langword="xamlName" /&gt;</ph> string; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果使用有效的 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 字符串来初始化此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>，则为 <ph id="ph3">&lt;see langword="xamlName" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsReadOnly">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a read-only member.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示只读成员。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a read-only member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示只读成员，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadOnly">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadOnly%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>时，将调用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadOnly%2A&gt;</ph>或该方法的特定重写。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member with a callable public <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示一个具有可调用公共 <ph id="ph2">&lt;see langword="get" /&gt;</ph> 访问器的成员。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a callable public <ph id="ph3">&lt;see langword="get" /&gt;</ph> accessor; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示可调用公共 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 访问器，则为 <ph id="ph3">&lt;see langword="get" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> value checks whether the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is public.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>是否值检查<ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>是公共的。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is nonpublic, the <ph id="ph2">`get`</ph> accessor is not callable in a practical way, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>是非公共的<ph id="ph2">`get`</ph>访问器不能用切实可行的方法，调用和<ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>返回<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>时，将调用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph>或该方法的特定重写。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph>方法是虚拟的因此，可以重写。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">重写有可能更改 （恶意或其他） 的报告的访问信息的 XAML 成员，使其不再按预期的方式与其基础 CLR 声明的类型系统访问信息符合。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">对于访问级别的任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>Gets a value that indicates whether the member is not resolvable by the backing system that is used for type and member resolution.</source>
          <target state="translated">获取一个值，该值指示用于类型和成员解析的支持系统是否无法解析成员。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the member is not resolvable; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the member is resolvable.</source>
          <target state="translated">如果成员不可解析，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果成员可解析，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature returns <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>构造<ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph>签名返回<ph id="ph3">`true`</ph>为<ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> with <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> cannot be written into an object graph.</source>
          <target state="translated">涉及了加载路径<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>、<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>与<ph id="ph3">`true`</ph>为<ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>无法写入到对象图。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>Under the default implementations in .NET Framework XAML Services APIs, the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> call throws a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> reports <ph id="ph4">`true`</ph> for <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">在.NET Framework XAML 服务 Api 中的默认实现<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph>调用会引发<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph>时相关<ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>报表<ph id="ph4">`true`</ph>为<ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>You should not construct a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that has a value of <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> unless your implementation can handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior.</source>
          <target state="translated">不应构造<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>，其值为<ph id="ph2">`true`</ph>为<ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>除非你实现可以处理从异常<ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>，或通过其他方式来调整<ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>行为。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsUnknown%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>时，将调用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsUnknown%2A&gt;</ph>或该方法的特定重写。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsWriteOnly">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a write-only member.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示只写成员。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWriteOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a write-only member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示只写成员，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWriteOnly">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>时，将调用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A&gt;</ph>或该方法的特定重写。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that has a callable public <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示一个具有可调用公共 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 访问器的成员。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a callable public <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示可调用公共 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 访问器，则为 <ph id="ph3">&lt;see langword="set" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> value considers whether the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is public as part of the determination.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>值会考虑是否<ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>是公共的决定的一部分。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is nonpublic, the <ph id="ph2">`set`</ph> accessor is not callable in a practical way, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>是非公共的<ph id="ph2">`set`</ph>访问器不能用切实可行的方法，调用和<ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>返回<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>时，将调用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph>或该方法的特定重写。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph>方法是虚拟的因此，可以重写。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">重写有可能更改 （恶意或其他） 的报告的访问信息的 XAML 成员，使其不再按预期的方式与其基础 CLR 声明的类型系统访问信息符合。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">对于访问级别的任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>When implemented in a derived class, returns an <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> implementation.</source>
          <target state="translated">在派生类中实现时，返回 <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</source>
          <target state="translated">重写该方法以提供内部反射提供一种替代方式，若要获取 CLR 属性值。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>In the absence of an override, the internal reflector uses typical CLR reflection logic such as calls to <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>.</source>
          <target state="translated">在没有重写时，内部反射器使用典型的 CLR 反射逻辑，例如调用<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>The default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">默认实现返回 <ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used for deferred loading of XAML declared objects.</source>
          <target state="translated">返回一个 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 对象，该对象用于 XAML 声明的对象的延迟加载。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that has a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> constraint on the generic.</source>
          <target state="translated">对泛型具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>This method is invoked when a caller gets a value from the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> property.</source>
          <target state="translated">当调用方获取一个值时，会调用此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> information.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph>从通过默认内部反射的值返回不同的值和如果也要提供自定义<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>信息。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>The default implementation returns an object either by reading <ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph> or using a <ph id="ph2">&lt;xref:System.Xaml.XamlDeferringLoader&gt;</ph> from the declaring type.</source>
          <target state="translated">默认实现返回一个对象通过读取<ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph>或使用<ph id="ph2">&lt;xref:System.Xaml.XamlDeferringLoader&gt;</ph>从声明的类型。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>If neither object is available, this method might return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果这两个对象是可用，则此方法可能返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 对象的列表。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Items in the list report the members where dependency relationships for initialization order exist relative to this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">此列表中的项报告一些成员，其中的初始化顺序依赖关系相对于此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 存在。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 对象的列表。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>This method is invoked when a caller gets a value from the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> property.</source>
          <target state="translated">当调用方获取一个值时，会调用此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> information.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph>从通过默认内部反射的值返回不同的值和如果也要提供自定义<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>信息。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>The WPF XAML reader and writer implementations attribute this case with <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph>.</source>
          <target state="translated">WPF XAML 读取器和编写器实现属性使用这种情况下<ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>The default implementation uses this existing <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> technique.</source>
          <target state="translated">默认实现使用此现有<ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph>技术。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Override this method if you are not using <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> for this purpose and intend to replace that technique for indicating property processing order with your own technique.</source>
          <target state="translated">重写此方法，如果你不使用<ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph>此目的，并且想要替换该技术，它指示与您自己的方法的属性处理顺序。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>If you do not intend to support a property processing order, you can use the default implementation because it returns no results, which is appropriate.</source>
          <target state="translated">如果不想支持属性处理顺序，你可以使用的默认实现，因为它会不返回任何结果，这是适用。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>The list is read-only.</source>
          <target state="translated">列表为只读。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">返回与此 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 关联的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 信息；或者为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>This method is invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>.</source>
          <target state="translated">调用此方法，通过调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>The default implementation does not require that a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> be constructed by using one of the constructors that pass an initial <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.</source>
          <target state="translated">默认实现不要求<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>通过传递一个初始的构造函数之一构造<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>However, an <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> value must exist for the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>; otherwise, the default implementation returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">但是，<ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>值必须存在<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>; 否则为默认实现返回<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>Override this method if you also derive from <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> and intend to return the derived class.</source>
          <target state="translated">重写此方法，如果还派生自<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>并且想要返回的派生的类。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>If you return <ph id="ph1">`null`</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> returns <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> to callers.</source>
          <target state="translated">如果返回<ph id="ph1">`null`</ph>，<ph id="ph2">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>返回<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>向调用方。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is reported as an ambient property.</source>
          <target state="translated">返回的值指示是否将此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 作为环境属性报告。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to report this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> as an ambient property; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要将此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 报告为环境属性，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>This method is invoked by internal calls that check for ambient XAML property information.</source>
          <target state="translated">通过检查环境的 XAML 属性信息的内部调用会调用此方法。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Ambient property behavior is accounted for in the public API behavior of XAML readers and XAML writers.</source>
          <target state="translated">环境属性行为中的 XAML 读取器和 XAML 编写器的公共 API 行为仅用于。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>The internal calls that reference <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</source>
          <target state="translated">引用在内部调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph>通常是 XAML 处理逻辑，以确保对象和依赖于环境限定使用的类型的值可以正常工作的一部分。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>The default .NET Framework XAML Services implementation uses CLR attributing to obtain this information from reflection over backing types.</source>
          <target state="translated">默认.NET Framework XAML 服务实现使用归获取此信息从反射通过后备类型的 CLR。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Specifically, the default implementation checks for <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> and returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> if <ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> exists on a member definition.</source>
          <target state="translated">具体而言，默认实现可检查<ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>并返回<ph id="ph2">`true`</ph>为<ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph>如果<ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>成员定义上是否存在。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Override this method if you are not using <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> for this purpose and intend to replace that technique for indicating ambient XAML properties with your own technique.</source>
          <target state="translated">重写此方法，如果你不使用<ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>此目的，并且想要替换该技术，该值指示环境的 XAML 属性，使用您自己的方法。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Example APIs from WPF that attribute with <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> are <ph id="ph2">&lt;xref:System.Windows.Trigger.Property%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Style.BasedOn%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">从属性的 WPF 示例 Api<ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>是<ph id="ph2">&lt;xref:System.Windows.Trigger.Property%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.Style.BasedOn%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event.</source>
          <target state="translated">返回的值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示一个事件。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to report that this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要报告此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示事件，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>The default implementation checks whether <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> is of type <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph>, and if it is, returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">默认实现检查是否<ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>属于类型<ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph>，如果是，则返回<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph>.</source>
          <target state="translated">当调用方获取一个值时，会调用此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</source>
          <target state="translated">重写此方法，如果你要针对整个报表统一结果<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生类，或如果您拥有的专用元数据可用，可以将本文解释为确定 XAML 类型系统表示形式之间实现基于每个用例。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an intended read-only property.</source>
          <target state="translated">返回的值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示预期的只读属性。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to report this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> as an intended read-only property; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要将此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 报告为预期的只读属性，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>The default implementation returns <ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> exists, but a public <ph id="ph3">`set`</ph> accessor does not exist for it, as determined by internal reflection.</source>
          <target state="translated">默认实现返回<ph id="ph1">`true`</ph>如果<ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>存在，但公共<ph id="ph3">`set`</ph>访问器不存在，由内部反射。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>.</source>
          <target state="translated">当调用方获取一个值时，会调用此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</source>
          <target state="translated">重写此方法，如果你要针对整个报表统一结果<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生类，或如果您拥有的专用元数据可用，可以将本文解释为确定 XAML 类型系统表示形式之间实现基于每个用例。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a property that has a public <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">返回的值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示一个具有公共 <ph id="ph2">&lt;see langword="get" /&gt;</ph> 访问器的属性。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a property that has a public <ph id="ph3">&lt;see langword="get" /&gt;</ph> accessor; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示具有公共 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 访问器的属性，则为 <ph id="ph3">&lt;see langword="get" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>The default implementation returns results based either on internal reflection or the negation of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>, processing in that order.</source>
          <target state="translated">默认实现返回根据内部反射或求反运算的结果<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>按此顺序进行处理。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> returns whether the member itself is public; it returns <ph id="ph2">`true`</ph> for a public member on a nonpublic declaring type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> 返回该成员是否为公共的则它将返回<ph id="ph2">`true`</ph>上声明类型的非公共公共成员。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>Use <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> instead, if you also want to consider the visibility of the declaring type.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>相反，如果你还想要考虑的可见性的声明类型。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>.</source>
          <target state="translated">当调用方获取一个值时，会调用此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">重写此方法，如果你要针对整个报表统一结果<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生类，或如果你拥有的专用元数据可用于确定这一点基于每个用例。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph>方法是虚拟的因此，可以重写。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">重写有可能更改 （恶意或其他） 的报告的访问信息的 XAML 成员，使其不再按预期的方式与其基础 CLR 声明的类型系统访问信息符合。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">对于访问级别的任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that is not resolvable by the backing system that is used for type and member resolution.</source>
          <target state="translated">返回的值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示一个用于类型和成员解析的支持系统无法解析的成员。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a non-resolvable member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示不可解析的成员，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>This method may be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">当调用方获取一个值从可能调用此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>The default implementation returns results that are based on either internal reflection or checking for a <ph id="ph1">`null`</ph> value of <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>, processing in that order.</source>
          <target state="translated">默认实现返回结果可能会基于内部反射或检查<ph id="ph1">`null`</ph>值<ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>按此顺序进行处理。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">重写此方法，如果你要针对整个报表统一结果<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生类，或如果你拥有的专用元数据可用于确定这一点基于每个用例。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that has a public <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor but not a public <ph id="ph3">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">返回的值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示一个具有公共 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 访问器但没有公共 <ph id="ph3">&lt;see langword="get" /&gt;</ph> 访问器的成员。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a write-only member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示只写成员，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>The default implementation returns <ph id="ph1">`true`</ph> if an <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> exists that has a public <ph id="ph3">`set`</ph> accessor and a nonpublic <ph id="ph4">`get`</ph> accessor, as determined by internal reflection.</source>
          <target state="translated">默认实现返回<ph id="ph1">`true`</ph>如果<ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>存在具有公共<ph id="ph3">`set`</ph>访问器和非公共<ph id="ph4">`get`</ph>访问器，由内部反射。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>.</source>
          <target state="translated">当调用方获取一个值时，会调用此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">重写此方法，如果你要针对整个报表统一结果<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生类，或如果你拥有的专用元数据可用于确定这一点基于每个用例。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that has a public <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">返回的值指示此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 是否表示一个具有公共 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 访问器的成员。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a writable member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 表示可写成员，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>The default implementation returns results based  either internal reflection or the negation of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>, processing in that order.</source>
          <target state="translated">默认实现返回结果基于内部反射或求反运算的<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>按此顺序进行处理。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>.</source>
          <target state="translated">当调用方获取一个值时，会调用此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">重写此方法，如果你要针对整个报表统一结果<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生类，或如果你拥有的专用元数据可用于确定这一点基于每个用例。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph>方法是虚拟的因此，可以重写。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">重写有可能更改 （恶意或其他） 的报告的访问信息的 XAML 成员，使其不再按预期的方式与其基础 CLR 声明的类型系统访问信息符合。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">对于访问级别的任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters">
          <source>Returns the opening and closing bracket characters for a markup extension.</source>
          <target state="translated">返回标记扩展的开始和结束括号字符。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters">
          <source>A collection containing the opening and closing bracket characters.</source>
          <target state="translated">包含开始和结束括号字符的集合。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type where the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated">返回其中可能存在 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的类型的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>The type where the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated">其中可能存在 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>The default implementation distinguishes between attachable and non-attachable members.</source>
          <target state="translated">默认实现区分可附加的和非可附加成员。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>For non-attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> always returns <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>.</source>
          <target state="translated">对于非可附加成员，<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph>始终返回<ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>For attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> returns a result based on examining the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> accessor parameter type and interprets that type based on XAML schema context.</source>
          <target state="translated">对于可附加成员，<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph>返回基于检查结果<ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>取值函数参数类型和解释基于 XAML 架构上下文类型。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>.</source>
          <target state="translated">当调用方获取一个值时，会调用此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">重写此方法，如果你要针对整个报表统一结果<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生类，或如果你拥有的专用元数据可用于确定这一点基于每个用例。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">返回成员所使用的类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">成员所使用的类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>.</source>
          <target state="translated">当调用方获取一个值时，会调用此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> information.</source>
          <target state="translated">重写此方法，如果你想<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>从通过默认内部反射的值返回不同的值和如果也要提供自定义<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>信息。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>The default implementation uses different code paths and conceptual meanings for the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that is based on whether this <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> represents a property, method, or event.</source>
          <target state="translated">默认实现使用不同的代码路径和概念的含义，以便返回<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，基于是否这<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>表示属性、 方法或事件。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>For a property, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the type that sets the property or is returned by the property.</source>
          <target state="translated">对于属性，返回<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>是设置的属性或属性返回的类型。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>For an event, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the required event handler type (a delegate in a CLR implementation).</source>
          <target state="translated">事件，返回<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>是必需的事件处理程序类型 （中的 CLR 实现的委托）。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>For a method, <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the return type.</source>
          <target state="translated">对于方法，<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>是返回类型。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>In each case, XAML schema context is used to evaluate the XAML type from the underlying system type.</source>
          <target state="translated">在每种情况下，XAML 架构上下文用于评估的基础系统类型中的 XAML 类型。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>.</source>
          <target state="translated">当调用方获取一个值时，会调用此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">重写此方法，如果你要针对整个报表统一结果<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生类，或如果你拥有的专用元数据可用于确定这一点基于每个用例。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>Returns a type converter implementation that is associated with this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">返回与此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 关联的类型转换器实现。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> instance with <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">一个具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 实例，或者为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>The default implementation uses the following logic and processing order:</source>
          <target state="translated">默认实现使用的以下逻辑和处理顺序：</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>If attributing exists at the member level (<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>), the attribute information is used for a call to <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph> against the XAML schema context.</source>
          <target state="translated">如果在成员级别的归存在 (<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>)，特性信息用于调用<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph>对 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> is valid, a type converter that is associated with the type is returned.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>有效，则返回的类型相关联的类型转换器。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>If the member is an event, an event-specific type converter is returned.</source>
          <target state="translated">如果该成员是事件，则返回特定事件的类型转换器。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>.</source>
          <target state="translated">当调用方获取一个值时，会调用此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">重写此方法，如果你要针对整个报表统一结果<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生类，或如果你拥有的专用元数据可用于确定这一点基于每个用例。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>Returns a <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">返回与此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 关联的 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 访问器。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the associated <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">关联 <ph id="ph2">&lt;see langword="get" /&gt;</ph> 访问器的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>，或者为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>The default implementation interprets the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> property as <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> and returns the value of <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=nameWithType&gt;</ph> (with the parameter set to <ph id="ph4">`true`</ph>), which means that the returned method can be nonpublic.</source>
          <target state="translated">默认实现将解释<ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>属性作为<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>和返回的值<ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=nameWithType&gt;</ph>(参数设置为<ph id="ph4">`true`</ph>)，这意味着返回的方法可能不是公用。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>This behavior can result in <ph id="ph1">`null`</ph> for certain cases.</source>
          <target state="translated">此行为可能会导致<ph id="ph1">`null`</ph>对于某些情况。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>including cases where no associated accessor exists or the member is not a property.</source>
          <target state="translated">包括关联的访问器不存在或该成员不是属性的情况。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>This method is invoked when a caller gets a value from the <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A&gt;</ph> property on an associated <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.</source>
          <target state="translated">当调用方获取一个值时，会调用此方法<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A&gt;</ph>关联的属性<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">重写此方法，如果你要针对整个报表统一结果<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生类，或如果你拥有的专用元数据可用于确定这一点基于每个用例。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>Make sure to implement <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> so that they all return correlated results.</source>
          <target state="translated">请确保实现<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph>，以便它们都返回相关的结果。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>Returns a CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">返回与此 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 关联的 CLR 类型系统 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>A CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> object that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">与此 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 关联的 CLR 类型系统 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 对象，或者为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>The default implementation returns the underlying member information, which is based on construction.</source>
          <target state="translated">默认实现返回构造基于的基础成员信息。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>If the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object is constructed with a signature that does not provide enough information to set the underlying member, this method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph>不提供足够的信息来设置基础成员的签名与构造对象时，此方法返回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>If an underlying member was set during construction, you should not need to call this method.</source>
          <target state="translated">如果在构造过程中设置的基础的成员，你应该不需要调用此方法。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>.</source>
          <target state="translated">当调用方获取一个值时，会调用此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">重写此方法，如果你要针对整个报表统一结果<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生类，或如果你拥有的专用元数据可用于确定这一点基于每个用例。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>Make sure to implement <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> so that they all return correlated results.</source>
          <target state="translated">请确保实现<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph>，以便它们都返回相关的结果。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>Returns a <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">返回与此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 关联的 <ph id="ph1">&lt;see langword="set" /&gt;</ph> 访问器。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the associated <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">关联 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 访问器的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>，或者为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>The default implementation interprets <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> as <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> and returns the value of <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=nameWithType&gt;</ph> (with the parameter set to <ph id="ph4">`true`</ph>), which means that the returned method can be nonpublic.</source>
          <target state="translated">默认实现将解释<ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>作为<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>和返回的值<ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=nameWithType&gt;</ph>(参数设置为<ph id="ph4">`true`</ph>)，这意味着返回的方法可能不是公用。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>This can result in <ph id="ph1">`null`</ph> for certain cases, including cases where there is no such accessor, or the member is not a property.</source>
          <target state="translated">这可能会导致<ph id="ph1">`null`</ph>对于某些情况下，包括在没有此类访问器，或该成员不是属性情况。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A&gt;</ph> on an associated <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.Override this method if you want to report uniform results for an entire <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">当调用方获取一个值时，会调用此方法<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A&gt;</ph>关联<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>。重写此方法，如果你要针对整个报表统一结果<ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生类，或如果你拥有的专用元数据可用于确定这一点基于每个用例。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>Make sure to implement <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> so that they all return correlated results.</source>
          <target state="translated">请确保实现<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph>，以便它们都返回相关的结果。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>Returns a value serializer implementation that is associated with this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">返回与此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 关联的值序列化程序实现。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> instance with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint, or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">一个具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> 实例，或者为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>The default implementation uses the following logic and processing order:</source>
          <target state="translated">默认实现使用的以下逻辑和处理顺序：</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>If attributing exists at the member level (<ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>), the attribute information is used for a call to <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph> against the XAML schema context.</source>
          <target state="translated">如果在成员级别的归存在 (<ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>)，特性信息用于调用<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph>对 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> is valid, a value converter that is associated with the type is returned.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>有效，则返回的类型相关联的值转换器。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>If the previous conditions do not apply, <ph id="ph1">`null`</ph> is returned.</source>
          <target state="translated">如果不应用前几个条件，<ph id="ph1">`null`</ph>返回。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>.</source>
          <target state="translated">当调用方获取一个值时，会调用此方法<ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">重写此方法，如果你要针对整个报表统一结果<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>派生类，或如果你拥有的专用元数据可用于确定这一点基于每个用例。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters">
          <source>Defines the opening and closing bracket characters for a markup extension.</source>
          <target state="translated">定义标记扩展的开始和结束括号字符。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters">
          <source>A collection containing the opening and closing bracket characters.</source>
          <target state="translated">包含开始和结束括号字符的集合。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.Name">
          <source>Gets the <ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> name string that declares this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> 名称字符串，该字符串声明此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>The <ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> name string that declares this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> 名称字符串，该字符串声明此 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>This value is always set during construction.</source>
          <target state="translated">始终在构造过程中设置此值。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>The constructors that are implemented by <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> typically throw an exception if an initial name is not specified; therefore, do not expect this property to be <ph id="ph2">`null`</ph> or an empty string, if you are using default .NET Framework XAML Services implementations.</source>
          <target state="translated">由实现的构造函数<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>通常将引发异常如果未指定初始名称; 因此，不希望此属性才<ph id="ph2">`null`</ph>或空字符串，如果你使用默认.NET Framework XAML 服务实现。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source><bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept> and naming rules for CLR type and members are not an exact intersect.</source>
          <target state="translated"><bpt id="p1">[</bpt>XamlName 语法<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>和 CLR 类型和成员的命名规则不是精确相交。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>It is possible to declare a member name that is legal under CLR but not valid under XAML naming.</source>
          <target state="translated">它是可以声明是合法下 CLR 成员名称但在 XAML 命名无效。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>You should avoid this situation if possible.</source>
          <target state="translated">应尽可能避免这种情况。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects have the same value.</source>
          <target state="translated">确定两个指定的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 对象是否具有相同的值。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph> is the same as the value of <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 的值与 <ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph> 的值相同，则为 <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects have different values.</source>
          <target state="translated">确定两个指定的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 对象是否具有不同的值。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph> differs from the value of <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph> 的值与 <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph> 的值不同，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>Gets the single XAML namespace URI that identifies the primary XAML namespace for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">获取单个 XAML 命名空间 URI，该 URI 标识此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的主 XAML 命名空间。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>The identifier for the primary XAML namespace for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>, as a string.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的主 XAML 命名空间的标识符（字符串形式）。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A&gt;</ph> property provides the same value as calling <ph id="ph2">&lt;xref:System.Xaml.XamlMember.GetXamlNamespaces%2A&gt;</ph> and then getting the first value string from the returned list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A&gt;</ph>属性提供相同的值调用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.GetXamlNamespaces%2A&gt;</ph>，然后从返回的列表中获取的第一个值字符串。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>The preferred XAML namespace should be used when writing the member back to text or other representations that preserve XAML namespace information.</source>
          <target state="translated">写回文本或其他表示形式之间实现保留的 XAML 命名空间信息的成员时，应使用首选的 XAML 命名空间。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.SerializationVisibility">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph> value, which indicates how a visual designer should process the member.</source>
          <target state="translated">获取一个 <ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph> 值，该值指示可视化设计器应如何处理成员。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.SerializationVisibility">
          <source>A value of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph> 枚举的一个值。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.SerializationVisibility">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.TargetType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type where the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated">获取其中可能存在 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的类型的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>The type where the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated">其中可能存在 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>The returned value is different for attachable and non-attachable members.</source>
          <target state="translated">返回的值是可附加的和非可附加成员的不同。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>For non-attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph> returns <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>.</source>
          <target state="translated">对于非可附加成员，<ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>返回<ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>For attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> returns a result that is based on this logic:</source>
          <target state="translated">对于可附加成员，<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph>返回基于此逻辑的结果：</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>If reflection cannot resolve a backing (<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> <ph id="ph2">`true`</ph>), this method returns an internal constant that represents a generic object type.</source>
          <target state="translated">如果反射无法解决一个后备 (<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> <ph id="ph2">`true`</ph>)，此方法返回表示泛型对象类型的内部常量。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>If the previous condition does not apply, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> is called.</source>
          <target state="translated">如果前面的条件不适用，<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>The default implementation returns a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that is based on examining the methods that implement the <ph id="ph2">`get`</ph> and <ph id="ph3">`set`</ph> accessors.</source>
          <target state="translated">默认实现返回<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>基于检查实现的方法<ph id="ph2">`get`</ph>和<ph id="ph3">`set`</ph>访问器。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>A class might override <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> to use a different behavior such as other metadata forms that might report target types for attachable members.</source>
          <target state="translated">类可能会重写<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph>以使用不同的行为，如其他元数据窗体，可能会报告目标类型对于附加的成员。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.ToString">
          <source>Returns a string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">返回此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.ToString">
          <source>A string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.ToString">
          <source>This implementation returns <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Name%2A&gt;</ph>.</source>
          <target state="translated">此实现返回<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Name%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.Type">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">获取成员所使用的类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">成员所使用的类型的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>时，将调用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph>或该方法的特定重写。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>This occurs when the initial internal reflection logic has not already set the information.</source>
          <target state="translated">当初始内部反射逻辑还未设置信息时，将发生这种情况。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>In the default behavior (no <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph> override), the returned <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> can have different conceptual meanings.</source>
          <target state="translated">默认行为 (没有<ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph>重写)，返回<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>可以具有不同的概念含义。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>Which meaning applies depends on whether this <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> represents a property, method, or event, as the following list shows:</source>
          <target state="translated">适用的含义取决于是否这<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>表示属性、 方法或事件，如以下列表所示：</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>For a property, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the type that sets the property or is returned by the property.</source>
          <target state="translated">对于属性，返回<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>是设置的属性或属性返回的类型。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>For an event, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the required event handler type (a delegate in a CLR implementation).</source>
          <target state="translated">事件，返回<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>是必需的事件处理程序类型 （中的 CLR 实现的委托）。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>For a method, <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the return type of that method, which may be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">对于方法，<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>是该方法中，这可能是返回类型<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>In each case, the XAML schema context is used to evaluate the XAML type from the backing type.</source>
          <target state="translated">在每种情况下，XAML 架构上下文用于评估从后备类型的 XAML 类型。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which can be used for type conversion construction of XAML declared objects.</source>
          <target state="translated">获取一个 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 对象，该对象可用于 XAML 声明的对象的类型转换构造。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> value, with a <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint on the generic.</source>
          <target state="translated">一个对泛型具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTypeConverter%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>时，将调用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTypeConverter%2A&gt;</ph>或该方法的特定重写。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>This behavior occurs when the initial internal reflection logic has not already set the information.</source>
          <target state="translated">当初始内部反射逻辑还未设置信息时，将发生此行为。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Implementations that return a non-null property value for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> are not necessarily a working <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</source>
          <target state="translated">返回非 null 属性的实现值<ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>不一定是一个有效的<ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The following is a list of possible non-null return values for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> and what these values represent:</source>
          <target state="translated">以下是可能的非 null 返回值的列表<ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>以及这些值表示的含义：</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The return value reports a type converter that is attributed specifically to that member or more generally to the target type of the converter.</source>
          <target state="translated">返回值报告特定于该成员或更普遍地为转换器的目标类型特性化的类型转换器。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>This behavior is typically what most XAML type systems and XAML processors look for in order to instantiate a type converter and invoke its methods.</source>
          <target state="translated">此行为通常是哪些大多数的 XAML 类型系统和 XAML 处理器所查找的为了实例化的类型转换器和调用其方法。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The return value reports a built-in value converter.</source>
          <target state="translated">返回值将报告内置值转换器。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>These converters exist for certain internal operations that are performed by a XAML writer.</source>
          <target state="translated">这些转换器存在由 XAML 编写器执行某些内部操作。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>In particular, these built-in value converters convert the raw attribute string values to the XAML language-level primitives.</source>
          <target state="translated">具体而言，这些内置值转换器将原始属性字符串值转换为 XAML 语言级别基元。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>For the .NET Framework XAML Services implementation, these built-in type conversions often forward to a type converter that is defined in the System assembly.</source>
          <target state="translated">有关.NET Framework XAML 服务实现中，这些内置类型转换通常将转发给系统程序集中定义的类型转换器。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>For example, a conversion for an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> value has built-in forwarded conversion, and therefore, the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A&gt;</ph> value references <ph id="ph3">&lt;xref:System.ComponentModel.Int32Converter&gt;</ph>.</source>
          <target state="translated">例如，为转换<ph id="ph1">&lt;xref:System.Int32&gt;</ph>值具有内置转发转换，因此，<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A&gt;</ph>值引用<ph id="ph3">&lt;xref:System.ComponentModel.Int32Converter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The return value reports the special case of an unconstrained object model; that is, the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> has a <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> value of <ph id="ph3">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">返回值报告的不受约束的对象模型; 的特殊情况下也就是说，<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>具有<ph id="ph2">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>值<ph id="ph3">&lt;xref:System.Object&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> reports that the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=nameWithType&gt;</ph> is {<ph id="ph3">`Object}`</ph>.</source>
          <target state="translated">在这种情况下，<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph>报告<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=nameWithType&gt;</ph>是 {<ph id="ph3">`Object}`</ph>。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>However, <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph> is <ph id="ph2">`null`</ph> because no actual type or instance is available to perform this conversion.</source>
          <target state="translated">但是，<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>是<ph id="ph2">`null`</ph>因为没有实际的类型或实例是可用于执行此转换。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Instead, the object model behavior cannot be determined until run time, when the runtime of the specific technology determines the handling of its object graph.</source>
          <target state="translated">相反，直到运行时，当该特定技术的运行时确定其对象图的处理都无法确定对象模型行为。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>If you can access a working <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> from <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>, you can invoke its conversion methods.</source>
          <target state="translated">如果可以访问工作<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>从<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>，你可以调用它的转换方法。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>However, many conversion methods rely on service context.</source>
          <target state="translated">但是，多个转换方法依赖于服务上下文。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>If you do not have the same service context available that the type converter expects for its typical role of writing objects for object graphs, the converter methods can throw exceptions.</source>
          <target state="translated">如果你没有可用的类型转换器预期的写入对象的对象图其典型角色的相同的服务上下文，则转换器方法可以引发异常。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>Gets the CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> that is available for a member that is constructed by <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>, or <ph id="ph4">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>.</source>
          <target state="translated">获取 CLR 类型系统 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>，它可用于由 <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>、<ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 或 <ph id="ph4">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> 构造的成员。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> information, as cast from the initial constructor parameters.</source>
          <target state="translated">从初始构造函数参数强制转换的 CLR 类型系统 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 信息。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that is constructed with the <ph id="ph2">&lt;see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /&gt;</ph> signature returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 签名构造的 <ph id="ph2">&lt;see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /&gt;</ph> 返回 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>时，将调用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph>或该方法的特定重写。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used for value serialization of XAML declared objects.</source>
          <target state="translated">获取一个 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 对象，该对象用于 XAML 声明的对象的值序列化。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint on the generic.</source>
          <target state="translated">一个对泛型具有 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 约束的 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupValueSerializer%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>时，将调用<ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupValueSerializer%2A&gt;</ph>或该方法的特定重写。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>This behavior occurs when the initial internal reflection logic has not already set the information.</source>
          <target state="translated">当初始内部反射逻辑还未设置信息时，将发生此行为。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>Not all cases that return a non-null property value for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph> are necessarily a working <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.</source>
          <target state="translated">并非所有情况下，返回非 null 属性值，则为<ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>都是工作<ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>See <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>; the same considerations apply to <ph id="ph2">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>.</source>
          <target state="translated">请参阅<ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>; 注意事项同样适用于<ph id="ph2">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>