<Type Name="XamlObjectWriter" FullName="System.Xaml.XamlObjectWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d67227721dd773132217fd6c463e5161f2b6ad4a" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39845132" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlObjectWriter : System.Xaml.XamlWriter, System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlObjectWriter extends System.Xaml.XamlWriter implements class System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlObjectWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlObjectWriter&#xA;Inherits XamlWriter&#xA;Implements IXamlLineInfoConsumer" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlObjectWriter : System::Xaml::XamlWriter, System::Xaml::IXamlLineInfoConsumer" />
  <TypeSignature Language="F#" Value="type XamlObjectWriter = class&#xA;    inherit XamlWriter&#xA;    interface IXamlLineInfoConsumer" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xaml.XamlWriter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xaml.IXamlLineInfoConsumer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>从源 XAML 节点流创建对象图。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Write`的方法<xref:System.Xaml.XamlObjectWriter>实现一种模式，以便<xref:System.Xaml.XamlObjectWriter>使用<xref:System.Xaml.XamlWriter>由定义<xref:System.Xaml.XamlWriter.WriteNode%2A>方法。 <xref:System.Xaml.XamlWriter.WriteNode%2A> 逻辑交换机之间`Write`方法，具体取决于哪个节点类型是在读取器中的当前位置。  
  
## <a name="scope"></a>范围  
 一个<xref:System.Xaml.XamlObjectWriter>有作用域; 它是一个概念，则<xref:System.Xaml.XamlObjectWriter>其输出对象关系图中引用的概念点保持不变。 特定作用域，某些操作可能是有效或无效，或产生无操作的结果。 例如，如果您调用<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>编写指令的对象初始化已作为实例存在，则默认实现，将引发异常。  
  
 用于跟踪在自定义的作用域的可行方法<xref:System.Xaml.XamlObjectWriter>是对齐的堆栈或框架类的节点操作。 堆栈或框架可以跟踪的 push 和 pop 针对每个进入或退出时的对象模型深度级别而<xref:System.Xaml.XamlObjectWriter>写入对象图。  
  
## <a name="callbacks"></a>回调  
 若要支持中级和高级<xref:System.Xaml.XamlObjectWriter>情况下，写入对象图的机制提供回调发生的入口点时<xref:System.Xaml.XamlObjectWriter>提交或将要提交特定的操作。 某些回调在设置中启用并不特定于对象类型或写入; 该成员但是，回调信息通常是在上下文中可用，或者是在事件将通过在发送的数据。 下面是一组相关的回调：  
  
-   通过声明的回调<xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A>时作用域转到新的对象并在调用<xref:System.ComponentModel.ISupportInitialize.BeginInit%2A>阶段创建的每个对象的对象生存期。  
  
-   通过声明的回调<xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A>时作用域转到新的对象并在调用<xref:System.ComponentModel.ISupportInitialize.EndInit%2A>阶段创建的每个对象的对象生存期。  
  
-   通过声明的回调<xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A>当作用域对象，在启动时，调用时第一个<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>进行但尚未提交到该对象的作用域调用。  
  
-   通过声明的回调<xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A>作用域的对象中启动并发生时调用时<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>进行但尚未提交到该对象的作用域调用。  
  
-   通过声明的回调<xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A>时调用<xref:System.Xaml.XamlObjectWriter.OnSetValue%2A>调用。  
  
## <a name="writing-dictionary-keys"></a>书写字典键  
 默认实现<xref:System.Xaml.XamlObjectWriter>支持的约束类型转换<xref:System.Collections.Generic.Dictionary%602>之前字典内容将添加到对象图。 这种方式，泛型字典可以在运行时中由对象键控，并可以匹配相关的泛型`Add`和索引器行为。 但是，在实现中的基础<xref:System.Xaml.XamlObjectWriter>，此功能仅存在对象图创建基<xref:System.Collections.Generic.Dictionary%602>类，而不适用于的派生类<xref:System.Collections.Generic.Dictionary%602>。  
  
## <a name="checks-for-disposed"></a>检查释放  
 延迟的操作或针对已在此期间中已释放的 XAML 编写器实例进行调用，其中可能会使用 XAML 编写器。 各种 Api<xref:System.Xaml.XamlObjectWriter>可能会引发<xref:System.ObjectDisposedException>在这些情况下。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlWriter" />
    <altmember cref="T:System.Xaml.XamlObjectReader" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xaml.XamlObjectWriter" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriter(System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlObjectWriter : System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlObjectWriter" Usage="new System.Xaml.XamlObjectWriter schemaContext" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="schemaContext">与 XAML 读取器共享的 XAML 架构上下文，该读取器提供节点用于编写。</param>
        <summary>使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 所用的 XAML 架构上下文初始化 <see cref="T:System.Xaml.XamlReader" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext, System.Xaml.XamlObjectWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.XamlObjectWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext, settings As XamlObjectWriterSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriter(System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::XamlObjectWriterSettings ^ settings);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlObjectWriter : System.Xaml.XamlSchemaContext * System.Xaml.XamlObjectWriterSettings -&gt; System.Xaml.XamlObjectWriter" Usage="new System.Xaml.XamlObjectWriter (schemaContext, settings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="settings" Type="System.Xaml.XamlObjectWriterSettings" />
      </Parameters>
      <Docs>
        <param name="schemaContext">与 XAML 读取器共享的 XAML 架构上下文，该读取器提供节点用于编写。</param>
        <param name="settings">一个设置对象，该对象为 <see cref="T:System.Xaml.XamlObjectWriter" /> 行为和输出指定某些选项。</param>
        <summary>使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 所用的上下文及其设置初始化 <see cref="T:System.Xaml.XamlReader" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="xamlObjectWriter.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重置所有可能的框架并清除对象图。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="xamlObjectWriter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> 表示释放托管资源；否则为 <see langword="false" />。</param>
        <summary>释放由 <see cref="T:System.Xaml.XamlObjectWriter" /> 占用的非托管资源，也可以选择释放托管资源。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterBeginInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterBeginInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterBeginInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterBeginInit (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterBeginInit(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterBeginInit : obj -&gt; unit&#xA;override this.OnAfterBeginInit : obj -&gt; unit" Usage="xamlObjectWriter.OnAfterBeginInit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要报告的对象。 在调用处理程序时，此对象封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</param>
        <summary>为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 方法。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterEndInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterEndInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterEndInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterEndInit (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterEndInit(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterEndInit : obj -&gt; unit&#xA;override this.OnAfterEndInit : obj -&gt; unit" Usage="xamlObjectWriter.OnAfterEndInit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要报告的对象。 在调用处理程序时，此值封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</param>
        <summary>为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 方法。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterProperties (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterProperties(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterProperties : obj -&gt; unit&#xA;override this.OnAfterProperties : obj -&gt; unit" Usage="xamlObjectWriter.OnAfterProperties value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要报告的对象。 在调用处理程序时，此对象封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</param>
        <summary>为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" />  关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 引用的方法。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeProperties (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeProperties(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnBeforeProperties : obj -&gt; unit&#xA;override this.OnBeforeProperties : obj -&gt; unit" Usage="xamlObjectWriter.OnBeforeProperties value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要在调用处理程序时通过 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 传递的值。</param>
        <summary>为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" />  关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 引用的方法。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSetValue">
      <MemberSignature Language="C#" Value="protected virtual bool OnSetValue (object eventSender, System.Xaml.XamlMember member, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnSetValue(object eventSender, class System.Xaml.XamlMember member, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnSetValue (eventSender As Object, member As XamlMember, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnSetValue(System::Object ^ eventSender, System::Xaml::XamlMember ^ member, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnSetValue : obj * System.Xaml.XamlMember * obj -&gt; bool&#xA;override this.OnSetValue : obj * System.Xaml.XamlMember * obj -&gt; bool" Usage="xamlObjectWriter.OnSetValue (eventSender, member, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSender" Type="System.Object" />
        <Parameter Name="member" Type="System.Xaml.XamlMember" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventSender">要作为源向处理程序报告的对象。</param>
        <param name="member">要设置的属性的名称，该名称将作为 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 的一部分传递到处理程序。</param>
        <param name="value">要为由 <c>property</c> 命名的属性提供的值。 此值作为 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 的一部分传递给处理程序。</param>
        <summary>为此编写器调用任何与 <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> 关联的 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 引用的方法（只要 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 事件数据中的 <paramref name="handled" /> 不为 <see langword="true" />）。</summary>
        <returns>由任何关联的处理程序设置的布尔值；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`SetValue`为此 XAML 编写器的操作具有关联的处理程序 (<xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A>中声明<xref:System.Xaml.XamlObjectWriterSettings>)，此方法创建新<xref:System.Windows.Markup.XamlSetValueEventArgs>并将其传递到处理程序。 返回值将设置通过阅读<xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A>传递的事件数据的值。 如果没有处理程序，并调用此方法，该调用将返回`false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.Result" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ Result { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Result : obj" Usage="System.Xaml.XamlObjectWriter.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取写入的最后一个对象。 通常，仅在节点流位于结尾且对象关系图完整时才调用。</summary>
        <value>写入的最后一个对象，或者为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 最常见的用法<xref:System.Xaml.XamlObjectWriter.Result%2A>是仅在知道节点流为在其末尾，且对象关系图已完成时调用它。 否则为在对象图很可能是不完整，并不是适用于大多数平台方案。  
  
 <xref:System.Xaml.XamlObjectWriter.Result%2A> 如果在调用后立即调用通常仅包含一个非 null 值<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>，并且当前作用域中的成员，该对象提供的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootNameScope">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.INameScope RootNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.INameScope RootNameScope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.RootNameScope" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootNameScope As INameScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::INameScope ^ RootNameScope { System::Windows::Markup::INameScope ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RootNameScope : System.Windows.Markup.INameScope" Usage="System.Xaml.XamlObjectWriter.RootNameScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.INameScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Markup.INameScope" /> 服务，该服务为 XAML 对象编写器的绝对根节点维护 XAML 名称范围。</summary>
        <value>
          <see cref="T:System.Windows.Markup.INameScope" /> 服务，该服务为对象编写器的当前根维护 XAML 名称范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的值可能来自对象编写器上下文。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public override System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlObjectWriter.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取活动 XAML 架构上下文。</summary>
        <value>XAML 架构上下文。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XAML 架构上下文是最实用的对象编写方案的必要信息源。 XAML 架构上下文会影响在查找类型的后备类型和包含程序集的信息存在后备类型。 默认 XAML 架构上下文基于 CLR 类型映射规则。 框架通常提供其自己的 XAML 架构上下文，以便确保程序集加载机制匹配 framework 的编程和应用程序模型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineInfo">
      <MemberSignature Language="C#" Value="public void SetLineInfo (int lineNumber, int linePosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLineInfo(int32 lineNumber, int32 linePosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLineInfo (lineNumber As Integer, linePosition As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetLineInfo(int lineNumber, int linePosition);" />
      <MemberSignature Language="F#" Value="abstract member SetLineInfo : int * int -&gt; unit&#xA;override this.SetLineInfo : int * int -&gt; unit" Usage="xamlObjectWriter.SetLineInfo (lineNumber, linePosition)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
        <Parameter Name="linePosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">读取器中的行号。</param>
        <param name="linePosition">读取器中的行位置。</param>
        <summary>实现 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />，并为异常提供行信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此服务方法不应在代码中直接调用。 但是，如果要创建从派生的类<xref:System.Xaml.XamlObjectWriter>和预期要报告上下文行号是不可用或没有什么用处，可能会在调用此方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProvideLineInfo">
      <MemberSignature Language="C#" Value="public bool ShouldProvideLineInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldProvideLineInfo" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldProvideLineInfo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldProvideLineInfo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldProvideLineInfo : bool" Usage="System.Xaml.XamlObjectWriter.ShouldProvideLineInfo" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值报告行信息服务是否应提供值并因此在相关时同时调用 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> 方法。</summary>
        <value>如果行信息由编写器使用，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此实现总是返回 `true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndMember">
      <MemberSignature Language="C#" Value="public override void WriteEndMember ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndMember" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndMember ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndMember();" />
      <MemberSignature Language="F#" Value="override this.WriteEndMember : unit -&gt; unit" Usage="xamlObjectWriter.WriteEndMember " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭当前成员范围，并且可能在关闭时写入成员范围的值。 新范围将成为成员的父对象范围。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">未能从在此调用和上一个 <see langword="StartMember" /> 之间遇到的值节点创建成员值。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public override void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndObject();" />
      <MemberSignature Language="F#" Value="override this.WriteEndObject : unit -&gt; unit" Usage="xamlObjectWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭编写器中的当前对象范围。 新对象范围将成为的父成员范围。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此`EndObject`位置范围正在关闭的根对象，该新对象范围将成为根范围。  
  
 对调用<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>可能还未创建该对象由于对象成员可能是必需的初始化路径，例如初始化文本或初始化参数。 对于这些情况下，在调用<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>实际写入的对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteGetObject">
      <MemberSignature Language="C#" Value="public override void WriteGetObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteGetObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteGetObject" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteGetObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteGetObject();" />
      <MemberSignature Language="F#" Value="override this.WriteGetObject : unit -&gt; unit" Usage="xamlObjectWriter.WriteGetObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>当指定对象是父属性的默认值或隐式值时，将概念 <see langword="StartObject" /> 写入对象关系图。 隐式值来自从 XAML 架构上下文中获取的信息以及后备类型信息，而不是指定为输入 XAML 节点集中的对象值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与写入之间的差别<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A>写入和用<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>生成的对象图中所示。 <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> 并不会构造类型的实例，因为<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A>API 具有要通知的内容来构造对象图的信息。 父属性已初始化; 相反，创建对象因此<xref:System.Xaml.XamlObjectWriter>不需要构造方法。 与此相反，<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>指定该类型的实例应构造并插入到的对象图。  
  
 如果为一系列的帧，XAML 节点流的认为<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A>均衡到<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>调用。 因此，数<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A>加上<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>调用的数量应相等<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>作为 XAML 节点流的完整对象写入评估的一部分调用。  
  
 概念`StartObject`定位对象图中的隐式对象是必需的因为尽管本身的对象值是隐式默认值，但该对象仍可能需要编写基于 XAML 节点流的成员。 出现这种情况的典型情况是当<xref:System.Xaml.XamlObjectWriter>写入成员节点的集合属性，而且集合初始化是隐式的创建拥有集合属性的对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNamespace">
      <MemberSignature Language="C#" Value="public override void WriteNamespace (System.Xaml.NamespaceDeclaration namespaceDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteNamespace(class System.Xaml.NamespaceDeclaration namespaceDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteNamespace(System::Xaml::NamespaceDeclaration ^ namespaceDeclaration);" />
      <MemberSignature Language="F#" Value="override this.WriteNamespace : System.Xaml.NamespaceDeclaration -&gt; unit" Usage="xamlObjectWriter.WriteNamespace namespaceDeclaration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceDeclaration" Type="System.Xaml.NamespaceDeclaration" />
      </Parameters>
      <Docs>
        <param name="namespaceDeclaration">要写入的命名空间声明。</param>
        <summary>定义一个命名空间声明，该声明适用于下一个对象范围或成员范围。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以在当前作用域是根范围、 对象范围或成员范围编写命名空间声明。 但是，<xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>只能在调用之前调用以下项之一： <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>， <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>，或<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>。 连续<xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>情况是用于将多个命名空间声明写入同一个节点。 最终，或者<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>或<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>必须调用。  
  
 <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> 不使用`Start` / `End`隐喻。 尽管 XAML 命名空间具有在 CLR 表示形式意义上的成员，但成员已知，且无需将表示为一种特殊的<xref:System.Xaml.XamlMember>可扩展性。 若要访问的值<xref:System.Xaml.NamespaceDeclaration>，你访问其<xref:System.Xaml.NamespaceDeclaration.Namespace%2A>和<xref:System.Xaml.NamespaceDeclaration.Prefix%2A>属性。  
  
 命名空间声明可能具有<xref:System.String.Empty?displayProperty=nameWithType>的前缀值。 一个<xref:System.String.Empty?displayProperty=nameWithType>前缀表示的默认 XAML 命名空间声明。 不要尝试使用 null 以表示默认的前缀; 在此 API，会引发异常。 有关详情，请参阅<xref:System.Xaml.NamespaceDeclaration>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="namespaceDeclaration" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="namespaceDeclaration" /> 的组件为 <see langword="null" />。</exception>
        <exception cref="T:System.Xaml.XamlObjectReaderException">尝试在无效的范围中写入 XAML 命名空间节点。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartMember">
      <MemberSignature Language="C#" Value="public override void WriteStartMember (System.Xaml.XamlMember property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartMember(class System.Xaml.XamlMember property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartMember (property As XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartMember(System::Xaml::XamlMember ^ property);" />
      <MemberSignature Language="F#" Value="override this.WriteStartMember : System.Xaml.XamlMember -&gt; unit" Usage="xamlObjectWriter.WriteStartMember property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="property">要写入的 XAML 属性。 通常，您通过中间 XAML 节点流从 XAML 读取器中获取此值。</param>
        <summary>将新成员节点写入当前对象范围，并且该范围将成为新的成员范围。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  观看有关<xref:System.Xaml.XamlDuplicateMemberException>，两次在输入 XAML 中设置相同的 XAML 属性时会发生此情况。 在简单情况下，例如当同一个属性设置特性语法和属性元素语法中可以轻松查看输入的标记中此异常。 但是，更微妙的情况下会发生更难以发现的。 例如，如果将一个 XAML 内容属性，如果涉及 XAML 环境属性和属性，可附加的使用情况和实例使用情况，可能会发生此异常。 在开发的调试阶段，通常可以通过查看连接读取的标记和对象关系图写入中间 XAML 节点表示形式找到此异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">
          <paramref name="property" /> 将 <see cref="P:System.Xaml.XamlMember.IsUnknown" /> 设置为 <see langword="true" />。  
  
或 
 <see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> 传递，指示 XAML 节点流为不支持内容的对象包含内容。  
  
或 
尝试在无效的范围中写入开始成员。</exception>
        <exception cref="T:System.Xaml.XamlDuplicateMemberException">
          <paramref name="property" /> 指定父对象作用域中已显式设置的属性。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="property" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public override void WriteStartObject (System.Xaml.XamlType xamlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartObject(class System.Xaml.XamlType xamlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartObject(System::Xaml::XamlType ^ xamlType);" />
      <MemberSignature Language="F#" Value="override this.WriteStartObject : System.Xaml.XamlType -&gt; unit" Usage="xamlObjectWriter.WriteStartObject xamlType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType">要写入的类型。 通常，您从 XAML 读取器中获取此值。</param>
        <summary>将对象节点写入当前范围，并将该范围设置为新对象范围。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">处理 <see cref="P:System.Xaml.XamlType.IsUnknown" /> 类型，且无法创建对象。  
  
或 
尝试在无效的范围中写入开始对象。</exception>
        <exception cref="T:System.Xaml.XamlParseException">尝试在根对象已经在设置中提供时写入根对象。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlType" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides">
          <para>如果当前范围位于集合、 字典或数组，应使用添加到集合、 字典或数组的新实例<see langword="Add" />相关类型的方法。否则，该成员应分配给新实例。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public override void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.WriteValue : obj -&gt; unit" Usage="xamlObjectWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将值写入当前成员范围。 如果当前范围位于集合、字典或数组对象内部，则应将该值添加到集合、字典或数组中。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">尝试在无效的范围中写入值。</exception>
      </Docs>
    </Member>
  </Members>
</Type>