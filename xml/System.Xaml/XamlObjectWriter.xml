<Type Name="XamlObjectWriter" FullName="System.Xaml.XamlObjectWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ca402de94a9fb4c2404a3eb885b3a1fc9d0fc4b6" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlObjectWriter : System.Xaml.XamlWriter, System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlObjectWriter extends System.Xaml.XamlWriter implements class System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlObjectWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlObjectWriter&#xA;Inherits XamlWriter&#xA;Implements IXamlLineInfoConsumer" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlObjectWriter : System::Xaml::XamlWriter, System::Xaml::IXamlLineInfoConsumer" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xaml.XamlWriter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xaml.IXamlLineInfoConsumer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="659b1-101">从源 XAML 节点流创建对象图。</span>
      <span class="sxs-lookup">
        <span data-stu-id="659b1-101">Creates an object graph from a source XAML node stream.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="659b1-102">`Write`方法<xref:System.Xaml.XamlObjectWriter>实现模式以便<xref:System.Xaml.XamlObjectWriter>使用<xref:System.Xaml.XamlWriter>由定义<xref:System.Xaml.XamlWriter.WriteNode%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="659b1-102">The `Write` methods of <xref:System.Xaml.XamlObjectWriter> implement a pattern so that the <xref:System.Xaml.XamlObjectWriter> uses the <xref:System.Xaml.XamlWriter> that is defined by the <xref:System.Xaml.XamlWriter.WriteNode%2A> method.</span></span> <span data-ttu-id="659b1-103"><xref:System.Xaml.XamlWriter.WriteNode%2A> 逻辑交换机之间`Write`方法，具体取决于哪个节点类型是在读取器中的当前位置。</span><span class="sxs-lookup"><span data-stu-id="659b1-103"><xref:System.Xaml.XamlWriter.WriteNode%2A> logic switches between the `Write` methods, depending on which node type is at the current position in the reader.</span></span>  
  
## <a name="scope"></a><span data-ttu-id="659b1-104">范围</span><span class="sxs-lookup"><span data-stu-id="659b1-104">Scope</span></span>  
 <span data-ttu-id="659b1-105">A<xref:System.Xaml.XamlObjectWriter>具有的作用域; 它是概念，则<xref:System.Xaml.XamlObjectWriter>其输出对象关系图中的引用的概念点保持不变。</span><span class="sxs-lookup"><span data-stu-id="659b1-105">A <xref:System.Xaml.XamlObjectWriter> has a concept of scope; that is, the <xref:System.Xaml.XamlObjectWriter> maintains a conceptual point of reference in its output object graph.</span></span> <span data-ttu-id="659b1-106">为特定的作用域中，某些操作可能是有效或无效，或者不产生无操作结果。</span><span class="sxs-lookup"><span data-stu-id="659b1-106">For a particular scope, certain operations might be valid or invalid, or produce a no-operation result.</span></span> <span data-ttu-id="659b1-107">例如，如果你调用<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>若要对某个对象的初始化已实例形式存在，请编写指令，默认实现，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="659b1-107">For example, if you call <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> to write directives for initialization on an object that already exists as an instance, the default implementation throws an exception.</span></span>  
  
 <span data-ttu-id="659b1-108">用于跟踪在自定义的作用域的可行方法<xref:System.Xaml.XamlObjectWriter>是使节点操作与堆栈或框架的类。</span><span class="sxs-lookup"><span data-stu-id="659b1-108">A possible technique for tracking scope in a custom <xref:System.Xaml.XamlObjectWriter> is to align the node actions with a stack or frame class.</span></span> <span data-ttu-id="659b1-109">堆栈或框架可以跟踪的推送和弹出针对每个进入或退出时的对象模型深度级别时<xref:System.Xaml.XamlObjectWriter>写入对象图。</span><span class="sxs-lookup"><span data-stu-id="659b1-109">The stack or frame can keep track of push and pop for each level of object-model depth that is entered or exited while the <xref:System.Xaml.XamlObjectWriter> writes the object graph.</span></span>  
  
## <a name="callbacks"></a><span data-ttu-id="659b1-110">回调</span><span class="sxs-lookup"><span data-stu-id="659b1-110">Callbacks</span></span>  
 <span data-ttu-id="659b1-111">若要支持中间和高级<xref:System.Xaml.XamlObjectWriter>情况下，编写对象图的机制提供回调发生的入口点时<xref:System.Xaml.XamlObjectWriter>提交或即将提交某些操作。</span><span class="sxs-lookup"><span data-stu-id="659b1-111">To support intermediate and advanced <xref:System.Xaml.XamlObjectWriter> scenarios, the mechanism of writing an object graph provides callback entry points that occur when a <xref:System.Xaml.XamlObjectWriter> commits or is about to commit certain actions.</span></span> <span data-ttu-id="659b1-112">某些回调在设置中启用和并不特定于对象类型或写入; 的成员但是，回调信息通常是在上下文中可用，或者在事件是通过回调发送的数据。</span><span class="sxs-lookup"><span data-stu-id="659b1-112">Some callbacks are enabled in the settings and are not specific to the object type or the member being written; however, callback information is often available in context or is in the event data that is sent through the callback.</span></span> <span data-ttu-id="659b1-113">下面是相关的回调的列表：</span><span class="sxs-lookup"><span data-stu-id="659b1-113">The following is a list of relevant callbacks:</span></span>  
  
-   <span data-ttu-id="659b1-114">来声明回调<xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A>时作用域转到一个新对象并在调用<xref:System.ComponentModel.ISupportInitialize.BeginInit%2A>阶段创建的每个对象的对象生存期。</span><span class="sxs-lookup"><span data-stu-id="659b1-114">The callback that is declared by <xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A> is invoked when the scope goes to a new object and at the <xref:System.ComponentModel.ISupportInitialize.BeginInit%2A> phase of object lifetime for each created object.</span></span>  
  
-   <span data-ttu-id="659b1-115">来声明回调<xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A>时作用域转到一个新对象并在调用<xref:System.ComponentModel.ISupportInitialize.EndInit%2A>阶段创建的每个对象的对象生存期。</span><span class="sxs-lookup"><span data-stu-id="659b1-115">The callback that is declared by <xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A> is invoked when the scope goes to a new object and at the <xref:System.ComponentModel.ISupportInitialize.EndInit%2A> phase of object lifetime for each created object.</span></span>  
  
-   <span data-ttu-id="659b1-116">来声明回调<xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A>作用域的对象中启动、 发生时调用时第一个<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>进行但尚未提交到该对象的作用域调用。</span><span class="sxs-lookup"><span data-stu-id="659b1-116">The callback that is declared by <xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A> is invoked when the scope starts in an object, and occurs when the first <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> call to that object scope is made but not yet committed.</span></span>  
  
-   <span data-ttu-id="659b1-117">来声明回调<xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A>作用域的对象中启动、 发生时调用时<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>进行但尚未提交到该对象的作用域调用。</span><span class="sxs-lookup"><span data-stu-id="659b1-117">The callback that is declared by <xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A> is invoked when the scope starts in an object, and happens when the <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> call to that object scope is made but not yet committed.</span></span>  
  
-   <span data-ttu-id="659b1-118">来声明回调<xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A>时调用<xref:System.Xaml.XamlObjectWriter.OnSetValue%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="659b1-118">The callback that is declared by <xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A> is invoked when <xref:System.Xaml.XamlObjectWriter.OnSetValue%2A> is called.</span></span>  
  
## <a name="writing-dictionary-keys"></a><span data-ttu-id="659b1-119">书写字典键</span><span class="sxs-lookup"><span data-stu-id="659b1-119">Writing Dictionary Keys</span></span>  
 <span data-ttu-id="659b1-120">默认实现<xref:System.Xaml.XamlObjectWriter>支持类型转换的约束<xref:System.Collections.Generic.Dictionary%602>之前字典内容将添加到对象图。</span><span class="sxs-lookup"><span data-stu-id="659b1-120">The default implementation of <xref:System.Xaml.XamlObjectWriter> supports type conversion on the constraints of a <xref:System.Collections.Generic.Dictionary%602> before the dictionary contents are added to the object graph.</span></span> <span data-ttu-id="659b1-121">这种方式的泛型字典可以在运行时中由对象键控，并可以匹配相关的泛型`Add`和索引器行为。</span><span class="sxs-lookup"><span data-stu-id="659b1-121">In this manner, a generic dictionary can be keyed at run time by objects and can match the relevant generic `Add` and indexer behavior.</span></span> <span data-ttu-id="659b1-122">但是，如实现基<xref:System.Xaml.XamlObjectWriter>，此功能仅存在的基对象关系图创建<xref:System.Collections.Generic.Dictionary%602>类而不是针对的派生类<xref:System.Collections.Generic.Dictionary%602>。</span><span class="sxs-lookup"><span data-stu-id="659b1-122">However, as implemented for the base <xref:System.Xaml.XamlObjectWriter>, this capability exists only for object graph creation from the base <xref:System.Collections.Generic.Dictionary%602> class and not for derived classes of <xref:System.Collections.Generic.Dictionary%602>.</span></span>  
  
## <a name="checks-for-disposed"></a><span data-ttu-id="659b1-123">检查释放</span><span class="sxs-lookup"><span data-stu-id="659b1-123">Checks for Disposed</span></span>  
 <span data-ttu-id="659b1-124">XAML 编写器可能用于推迟的操作或位置上调用执行针对已在此期间释放的 XAML 编写器实例。</span><span class="sxs-lookup"><span data-stu-id="659b1-124">XAML writers are potentially used for deferred operations or where a call is made against a XAML writer instance that has been disposed in the interim.</span></span> <span data-ttu-id="659b1-125">各种 Api<xref:System.Xaml.XamlObjectWriter>可能引发<xref:System.ObjectDisposedException>在这些情况下。</span><span class="sxs-lookup"><span data-stu-id="659b1-125">Various APIs of <xref:System.Xaml.XamlObjectWriter> might throw <xref:System.ObjectDisposedException> in these cases.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlWriter" />
    <altmember cref="T:System.Xaml.XamlObjectReader" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="659b1-126">初始化 <see cref="T:System.Xaml.XamlObjectWriter" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-126">Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriter" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriter(System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="schemaContext">
          <span data-ttu-id="659b1-127">与 XAML 读取器共享的 XAML 架构上下文，该读取器提供节点用于编写。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-127">A XAML schema context that is shared with the XAML reader that provides nodes for writing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="659b1-128">使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 所用的 XAML 架构上下文初始化 <see cref="T:System.Xaml.XamlReader" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-128">Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriter" /> class using  the XAML schema context that is used by a <see cref="T:System.Xaml.XamlReader" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="659b1-129">
            <paramref name="schemaContext" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-129">
              <paramref name="schemaContext" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext, System.Xaml.XamlObjectWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.XamlObjectWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext, settings As XamlObjectWriterSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriter(System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::XamlObjectWriterSettings ^ settings);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="settings" Type="System.Xaml.XamlObjectWriterSettings" />
      </Parameters>
      <Docs>
        <param name="schemaContext">
          <span data-ttu-id="659b1-130">与 XAML 读取器共享的 XAML 架构上下文，该读取器提供节点用于编写。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-130">A XAML schema context that is shared with the XAML reader that provides nodes for writing.</span>
          </span>
        </param>
        <param name="settings">
          <span data-ttu-id="659b1-131">一个设置对象，该对象为 <see cref="T:System.Xaml.XamlObjectWriter" /> 行为和输出指定某些选项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-131">A settings object that specifies certain options for <see cref="T:System.Xaml.XamlObjectWriter" /> behavior and output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="659b1-132">使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 所用的上下文及其设置初始化 <see cref="T:System.Xaml.XamlReader" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-132">Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriter" /> class using the context that is used by a <see cref="T:System.Xaml.XamlReader" /> and its settings.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="659b1-133">
            <paramref name="schemaContext" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-133">
              <paramref name="schemaContext" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="659b1-134">重置所有可能的框架并清除对象图。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-134">Resets all possible frames and clears the object graph.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="659b1-135">
            <see langword="true" /> 表示释放托管资源；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-135">
              <see langword="true" /> to release the managed resources; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="659b1-136">释放由 <see cref="T:System.Xaml.XamlObjectWriter" /> 占用的非托管资源，也可以选择释放托管资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-136">Releases the unmanaged resources used by the <see cref="T:System.Xaml.XamlObjectWriter" />, and optionally, releases the managed resources.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterBeginInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterBeginInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterBeginInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterBeginInit (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterBeginInit(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="659b1-137">要报告的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-137">The object to report on.</span>
          </span>
          <span data-ttu-id="659b1-138">在调用处理程序时，此对象封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-138">The object is packaged into <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="659b1-139">为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-139">Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterEndInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterEndInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterEndInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterEndInit (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterEndInit(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="659b1-140">要报告的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-140">The object to report on.</span>
          </span>
          <span data-ttu-id="659b1-141">在调用处理程序时，此值封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-141">The value  is packaged into <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="659b1-142">为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-142">Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterProperties (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterProperties(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="659b1-143">要报告的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-143">The object to report on.</span>
          </span>
          <span data-ttu-id="659b1-144">在调用处理程序时，此对象封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-144">This is packaged into <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="659b1-145">为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" />  关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 引用的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-145">Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> referenced method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeProperties (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeProperties(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="659b1-146">要在调用处理程序时通过 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 传递的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-146">The value to pass through <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="659b1-147">为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" />  关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 引用的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-147">Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> referenced method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSetValue">
      <MemberSignature Language="C#" Value="protected virtual bool OnSetValue (object eventSender, System.Xaml.XamlMember member, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnSetValue(object eventSender, class System.Xaml.XamlMember member, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnSetValue (eventSender As Object, member As XamlMember, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnSetValue(System::Object ^ eventSender, System::Xaml::XamlMember ^ member, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSender" Type="System.Object" />
        <Parameter Name="member" Type="System.Xaml.XamlMember" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventSender">
          <span data-ttu-id="659b1-148">要作为源向处理程序报告的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-148">The object to report as the source to the handler.</span>
          </span>
        </param>
        <param name="member">
          <span data-ttu-id="659b1-149">要设置的属性的名称，该名称将作为 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 的一部分传递到处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-149">The name of the property to set, which is passed to the handler as part of <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="659b1-150">要为由 <c>property</c> 命名的属性提供的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-150">The value to provide for the property that is named by <c>property</c>.</span>
          </span>
          <span data-ttu-id="659b1-151">此值作为 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 的一部分传递给处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-151">The value is passed to the handler as part of <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="659b1-152">为此编写器调用任何与 <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> 关联的 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 引用的方法（只要 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 事件数据中的 <paramref name="handled" /> 不为 <see langword="true" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-152">Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> referenced method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this writer, as long as <paramref name="handled" /> in <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> event data is not <see langword="true" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="659b1-153">由任何关联的处理程序设置的布尔值；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-153">A Boolean value that is set by any associated handler; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="659b1-154">如果`SetValue`此 XAML 编写器的操作有一个关联的处理程序 (<xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A>中声明<xref:System.Xaml.XamlObjectWriterSettings>)，此方法创建新<xref:System.Windows.Markup.XamlSetValueEventArgs>并将它们传递到处理程序。</span><span class="sxs-lookup"><span data-stu-id="659b1-154">If the `SetValue` operation for this XAML writer has an associated handler (a <xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A> is declared in <xref:System.Xaml.XamlObjectWriterSettings>), this method creates new <xref:System.Windows.Markup.XamlSetValueEventArgs> and passes them to the handler.</span></span> <span data-ttu-id="659b1-155">返回值将由读取<xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A>传递事件数据的值。</span><span class="sxs-lookup"><span data-stu-id="659b1-155">The return value is set by reading the <xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A> value that is passed through the event data.</span></span> <span data-ttu-id="659b1-156">如果没有处理程序，且会调用此方法，则调用将返回`false`。</span><span class="sxs-lookup"><span data-stu-id="659b1-156">If no handler exists and this method is invoked, the call returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.Result" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ Result { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="659b1-157">获取写入的最后一个对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-157">Gets the last object that was written.</span>
          </span>
          <span data-ttu-id="659b1-158">通常，仅在节点流位于结尾且对象关系图完整时才调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-158">Typically only called when the node stream is at its end and the object graph is complete.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="659b1-159">写入的最后一个对象，或者为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-159">The last object written, or <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="659b1-160">最常见的用法<xref:System.Xaml.XamlObjectWriter.Result%2A>是仅在节点流已知要在其结尾，且对象关系图已完成时调用它。</span><span class="sxs-lookup"><span data-stu-id="659b1-160">The most typical usage of <xref:System.Xaml.XamlObjectWriter.Result%2A> is to call it only when the node stream is known to be at its end, and the object graph is complete.</span></span> <span data-ttu-id="659b1-161">否则为对象图很可能不完整，并不是适用于大多数平台方案。</span><span class="sxs-lookup"><span data-stu-id="659b1-161">Otherwise, the object graph is likely to be incomplete, and is not useful for most platform scenarios.</span></span>  
  
 <span data-ttu-id="659b1-162"><xref:System.Xaml.XamlObjectWriter.Result%2A> 如果它在调用之后立即调用通常仅包含一个非 null 值<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>，如果当前作用域是在其中该对象提供一个值的成员。</span><span class="sxs-lookup"><span data-stu-id="659b1-162"><xref:System.Xaml.XamlObjectWriter.Result%2A> typically only contains a non-null value if it is called immediately after a call to <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>, and if the current scope is in the member where the object provides a value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootNameScope">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.INameScope RootNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.INameScope RootNameScope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.RootNameScope" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootNameScope As INameScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::INameScope ^ RootNameScope { System::Windows::Markup::INameScope ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.INameScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="659b1-163">获取 <see cref="T:System.Windows.Markup.INameScope" /> 服务，该服务为 XAML 对象编写器的绝对根节点维护 XAML 名称范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-163">Gets the <see cref="T:System.Windows.Markup.INameScope" /> service that maintains the XAML namescope for the absolute node root of the XAML object writer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="659b1-164">
            <see cref="T:System.Windows.Markup.INameScope" /> 服务，该服务为对象编写器的当前根维护 XAML 名称范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-164">The <see cref="T:System.Windows.Markup.INameScope" /> service that maintains the XAML namescope for the current root of the object writer.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="659b1-165">此属性的值可能来自对象编写器上下文。</span><span class="sxs-lookup"><span data-stu-id="659b1-165">The value of this property may come from the object writer context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public override System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="659b1-166">获取活动 XAML 架构上下文。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-166">Gets the active XAML schema context.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="659b1-167">XAML 架构上下文。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-167">The XAML schema context.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="659b1-168">XAML 架构上下文都是大多数实际对象编写方案的必要信息源。</span><span class="sxs-lookup"><span data-stu-id="659b1-168">XAML schema context is a necessary information source for most practical object-writing scenarios.</span></span> <span data-ttu-id="659b1-169">XAML 架构上下文影响后备类型的类型查找，并包含有关程序集的信息存在后备类型。</span><span class="sxs-lookup"><span data-stu-id="659b1-169">The XAML schema context influences the type lookup for backing types and holds information about the assemblies where backing types exist.</span></span> <span data-ttu-id="659b1-170">默认 XAML 架构上下文基于 CLR 类型映射规则。</span><span class="sxs-lookup"><span data-stu-id="659b1-170">The default XAML schema context is based on CLR type-mapping rules.</span></span> <span data-ttu-id="659b1-171">框架通常提供其自己的 XAML 架构上下文，以便确保程序集加载机制匹配框架的编程和应用程序模型。</span><span class="sxs-lookup"><span data-stu-id="659b1-171">Frameworks typically provide their own XAML schema context in order to assure that that the assembly-loading mechanisms match the framework's programming amd application models.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineInfo">
      <MemberSignature Language="C#" Value="public void SetLineInfo (int lineNumber, int linePosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLineInfo(int32 lineNumber, int32 linePosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLineInfo (lineNumber As Integer, linePosition As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetLineInfo(int lineNumber, int linePosition);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
        <Parameter Name="linePosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">
          <span data-ttu-id="659b1-172">读取器中的行号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-172">The line number from the reader.</span>
          </span>
        </param>
        <param name="linePosition">
          <span data-ttu-id="659b1-173">读取器中的行位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-173">The line position from the reader.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="659b1-174">实现 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />，并为异常提供行信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-174">Implements <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> and provides line information for exceptions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="659b1-175">此服务方法不应在代码中直接调用。</span><span class="sxs-lookup"><span data-stu-id="659b1-175">This service method is not intended to be called directly from your code.</span></span> <span data-ttu-id="659b1-176">但是，如果要创建从派生的类<xref:System.Xaml.XamlObjectWriter>和预期要报告上下文行号是不可用或没有什么用处，此方法不能调用。</span><span class="sxs-lookup"><span data-stu-id="659b1-176">However, if you are creating a derived class from <xref:System.Xaml.XamlObjectWriter> and expect to report a context where line numbers are unavailable or not useful, this method may be called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProvideLineInfo">
      <MemberSignature Language="C#" Value="public bool ShouldProvideLineInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldProvideLineInfo" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldProvideLineInfo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldProvideLineInfo { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="659b1-177">获取一个值，该值报告行信息服务是否应提供值并因此在相关时同时调用 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-177">Gets a value that reports whether a line information service should provide values and therefore, should also call the <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> method when it is relevant.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="659b1-178">如果行信息由编写器使用，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-178">
              <see langword="true" /> if line information is used by the writer; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="659b1-179">此实现总是返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="659b1-179">This implementation always returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndMember">
      <MemberSignature Language="C#" Value="public override void WriteEndMember ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndMember" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndMember ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndMember();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="659b1-180">关闭当前成员范围，并且可能在关闭时写入成员范围的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-180">Closes the current member scope, and may write the value of the member scope while it closes.</span>
          </span>
          <span data-ttu-id="659b1-181">新范围将成为成员的父对象范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-181">The new scope becomes the parent object scope of the member.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">
          <span data-ttu-id="659b1-182">未能从在此调用和上一个 <see langword="StartMember" /> 之间遇到的值节点创建成员值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-182">Failed to create member value from a value node that is encountered between this call and a previous <see langword="StartMember" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public override void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndObject();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="659b1-183">关闭编写器中的当前对象范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-183">Closes the current object scope in the writer.</span>
          </span>
          <span data-ttu-id="659b1-184">新对象范围将成为的父成员范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-184">The new object scope becomes the parent member scope.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="659b1-185">如果此`EndObject`位置作用域关闭的根对象，新对象的作用域将成为根作用域。</span><span class="sxs-lookup"><span data-stu-id="659b1-185">If this `EndObject` position scope is closing the root object, the new object scope becomes the root scope.</span></span>  
  
 <span data-ttu-id="659b1-186">调用<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>可能不尚未创建该对象，因为对象成员可能必需的初始化路径，例如初始化文本或初始化参数。</span><span class="sxs-lookup"><span data-stu-id="659b1-186">The call to <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> might not yet have created the object because an object member might be a necessary initialization pathway, such as initialization text or initialization parameters.</span></span> <span data-ttu-id="659b1-187">对于这些情况，调用<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>实际写入对象。</span><span class="sxs-lookup"><span data-stu-id="659b1-187">For these cases, the call to <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> actually writes the object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteGetObject">
      <MemberSignature Language="C#" Value="public override void WriteGetObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteGetObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteGetObject" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteGetObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteGetObject();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="659b1-188">当指定对象是父属性的默认值或隐式值时，将概念 <see langword="StartObject" /> 写入对象关系图。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-188">Writes the conceptual <see langword="StartObject" /> into the object graph when the specified object is a default or implicit value of the parent property.</span>
          </span>
          <span data-ttu-id="659b1-189">隐式值来自从 XAML 架构上下文中获取的信息以及后备类型信息，而不是指定为输入 XAML 节点集中的对象值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-189">The implicit value comes from information that is obtained from the XAML schema context and backing type information, instead of being specified as an object value in the input XAML node set.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="659b1-190">与写入之间的差别<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A>写入和用<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>可在生成的对象图中查看。</span><span class="sxs-lookup"><span data-stu-id="659b1-190">The difference between writing with <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> and writing with <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> can be seen in the resulting object graph.</span></span> <span data-ttu-id="659b1-191"><xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> 并不构造类型的实例，因为<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A>API 具有要通知的内容构造的对象图的信息。</span><span class="sxs-lookup"><span data-stu-id="659b1-191"><xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> does not construct an instance of a type because the <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> API has no information to inform the object graph of what to construct.</span></span> <span data-ttu-id="659b1-192">相反，父属性初始化; 时创建对象时因此<xref:System.Xaml.XamlObjectWriter>不需要构造它。</span><span class="sxs-lookup"><span data-stu-id="659b1-192">Instead, the object was created when the parent property was initialized; so a <xref:System.Xaml.XamlObjectWriter> does not need to construct it.</span></span> <span data-ttu-id="659b1-193">与此相反，<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>指定该类型的实例应构造并插入到的对象图。</span><span class="sxs-lookup"><span data-stu-id="659b1-193">In contrast, <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> specifies that an instance of that type should be constructed and inserted into the object graph.</span></span>  
  
 <span data-ttu-id="659b1-194">如果你将视为一系列帧，XAML 节点流<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A>平衡到<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="659b1-194">If you think of the XAML node stream as a series of frames, a <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> is balanced to a <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> call.</span></span> <span data-ttu-id="659b1-195">因此，数<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A>加上<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>调用应等于数量<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>XAML 节点流的完整对象写入评估的一部分的调用。</span><span class="sxs-lookup"><span data-stu-id="659b1-195">Therefore, the number of <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> plus <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> calls should equal the number of <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> calls as part of a complete object-writing evaluation of the XAML node stream.</span></span>  
  
 <span data-ttu-id="659b1-196">概念`StartObject`定位的对象图中的隐式对象是必需的因为尽管本身的对象值是隐式的默认值，但该对象仍可能具有需要编写基于在 XAML 节点流的成员。</span><span class="sxs-lookup"><span data-stu-id="659b1-196">The conceptual `StartObject` position for an implicit object in the object graph is necessary because although the object value itself is an implicit default, that object might still have members that need to be written based on the XAML node stream.</span></span> <span data-ttu-id="659b1-197">出现这种情况的典型情况是当<xref:System.Xaml.XamlObjectWriter>写入成员节点的集合属性，以及集合初始化是隐式创建拥有的集合属性的对象。</span><span class="sxs-lookup"><span data-stu-id="659b1-197">A typical scenario where this occurs is when <xref:System.Xaml.XamlObjectWriter> writes member nodes for a collection property, and the collection initialization is implicit to creating the object that owns the collection property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNamespace">
      <MemberSignature Language="C#" Value="public override void WriteNamespace (System.Xaml.NamespaceDeclaration namespaceDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteNamespace(class System.Xaml.NamespaceDeclaration namespaceDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteNamespace(System::Xaml::NamespaceDeclaration ^ namespaceDeclaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceDeclaration" Type="System.Xaml.NamespaceDeclaration" />
      </Parameters>
      <Docs>
        <param name="namespaceDeclaration">
          <span data-ttu-id="659b1-198">要写入的命名空间声明。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-198">The namespace declaration to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="659b1-199">定义一个命名空间声明，该声明适用于下一个对象范围或成员范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-199">Defines a namespace declaration that applies to the next object scope or member scope.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="659b1-200">如果当前的作用域是根作用域、 对象的作用域或成员范围，可以编写一个命名空间声明。</span><span class="sxs-lookup"><span data-stu-id="659b1-200">A namespace declaration can be written if the current scope is a root scope, object scope, or member scope.</span></span> <span data-ttu-id="659b1-201">但是，<xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>只能紧跟在下列情况之一调用之前调用： <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>， <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>，或<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>。</span><span class="sxs-lookup"><span data-stu-id="659b1-201">However, <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> can only be called immediately before a call to one of the following: <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>, <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>, or <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>.</span></span> <span data-ttu-id="659b1-202">连续<xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>用例是用于将多个命名空间声明写入同一个节点。</span><span class="sxs-lookup"><span data-stu-id="659b1-202">The consecutive <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> case is for writing multiple namespace declarations to the same node.</span></span> <span data-ttu-id="659b1-203">最终，<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>或<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>必须调用。</span><span class="sxs-lookup"><span data-stu-id="659b1-203">Eventually, either <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> or <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> must be called.</span></span>  
  
 <span data-ttu-id="659b1-204"><xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> 不使用`Start` / `End`比喻。</span><span class="sxs-lookup"><span data-stu-id="659b1-204"><xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> does not use a `Start`/`End` metaphor.</span></span> <span data-ttu-id="659b1-205">尽管 XAML 命名空间在 CLR 表示的意义上具有成员，但成员已知，且不需要表示为一种特殊类型的<xref:System.Xaml.XamlMember>扩展性。</span><span class="sxs-lookup"><span data-stu-id="659b1-205">Although a XAML namespace has members in the CLR representation sense, the members are known and do not need to be represented as a special type of <xref:System.Xaml.XamlMember> for extensibility.</span></span> <span data-ttu-id="659b1-206">若要访问的值<xref:System.Xaml.NamespaceDeclaration>，你访问其<xref:System.Xaml.NamespaceDeclaration.Namespace%2A>和<xref:System.Xaml.NamespaceDeclaration.Prefix%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="659b1-206">To access the values of a <xref:System.Xaml.NamespaceDeclaration>, you access its <xref:System.Xaml.NamespaceDeclaration.Namespace%2A> and <xref:System.Xaml.NamespaceDeclaration.Prefix%2A> properties.</span></span>  
  
 <span data-ttu-id="659b1-207">命名空间声明可能具有<xref:System.String.Empty?displayProperty=nameWithType>的前缀值。</span><span class="sxs-lookup"><span data-stu-id="659b1-207">A namespace declaration may have a <xref:System.String.Empty?displayProperty=nameWithType> value for the prefix.</span></span> <span data-ttu-id="659b1-208">A<xref:System.String.Empty?displayProperty=nameWithType>前缀表示的默认 XAML 命名空间声明。</span><span class="sxs-lookup"><span data-stu-id="659b1-208">A <xref:System.String.Empty?displayProperty=nameWithType> prefix represents a declaration of the default XAML namespace.</span></span> <span data-ttu-id="659b1-209">请不要尝试使用 null 表示默认的前缀; 此 API 中引发了异常。</span><span class="sxs-lookup"><span data-stu-id="659b1-209">Do not attempt to use null to represent the default prefix;  it throws an exception in this API.</span></span> <span data-ttu-id="659b1-210">有关详情，请参阅<xref:System.Xaml.NamespaceDeclaration>。</span><span class="sxs-lookup"><span data-stu-id="659b1-210">For more information, see <xref:System.Xaml.NamespaceDeclaration>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="659b1-211">
            <paramref name="namespaceDeclaration" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-211">The <paramref name="namespaceDeclaration" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="659b1-212">
            <paramref name="namespaceDeclaration" /> 的组件为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-212">A component of <paramref name="namespaceDeclaration" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Xaml.XamlObjectReaderException">
          <span data-ttu-id="659b1-213">尝试在无效的范围中写入 XAML 命名空间节点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-213">Tried to write a XAML namespace node in an invalid scope.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartMember">
      <MemberSignature Language="C#" Value="public override void WriteStartMember (System.Xaml.XamlMember property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartMember(class System.Xaml.XamlMember property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartMember (property As XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartMember(System::Xaml::XamlMember ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="property">
          <span data-ttu-id="659b1-214">要写入的 XAML 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-214">The XAML property to write.</span>
          </span>
          <span data-ttu-id="659b1-215">通常，您通过中间 XAML 节点流从 XAML 读取器中获取此值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-215">Typically you obtain this value from a XAML reader through the XAML node stream intermediate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="659b1-216">将新成员节点写入当前对象范围，并且该范围将成为新的成员范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-216">Writes a new member node into the current object scope, and the scope becomes a new member scope.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="659b1-217">监视<xref:System.Xaml.XamlDuplicateMemberException>，相同的 XAML 属性设置中的 XAML 输入两次时会发生此情况。</span><span class="sxs-lookup"><span data-stu-id="659b1-217">Watch for a <xref:System.Xaml.XamlDuplicateMemberException>, which occurs when the same XAML property is set twice in the XAML input.</span></span> <span data-ttu-id="659b1-218">在简单情况下，例如当相同的属性设置中的特性语法和属性元素语法，你可轻松看到此异常中的输入标记。</span><span class="sxs-lookup"><span data-stu-id="659b1-218">In simple cases, such as when the same property is set in both attribute syntax and property element syntax, you can easily see this exception in the input markup.</span></span> <span data-ttu-id="659b1-219">但是，更多微妙情况会发生更难以发现的。</span><span class="sxs-lookup"><span data-stu-id="659b1-219">However, more subtle cases can occur that are more difficult to spot.</span></span> <span data-ttu-id="659b1-220">例如，如果你设置的 XAML 内容属性，如果涉及 XAML 环境属性和属性使可附加的使用情况和实例用途，可能发生此异常。</span><span class="sxs-lookup"><span data-stu-id="659b1-220">For example, this exception might occur if you set a XAML content property, if you involve XAML ambient properties, and if a property enables both an attachable usage and an instance usage.</span></span> <span data-ttu-id="659b1-221">在调试的开发阶段，可以通过查看连接读取的标记和对象关系图写入中间 XAML 节点表示形式中通常找到此异常。</span><span class="sxs-lookup"><span data-stu-id="659b1-221">In the debugging phases of development, you can often locate this exception by viewing the intermediate XAML node representation that connects the markup read and the object graph write.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">
          <span data-ttu-id="659b1-222">
            <paramref name="property" /> 将 <see cref="P:System.Xaml.XamlMember.IsUnknown" /> 设置为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-222">
              <paramref name="property" /> has <see cref="P:System.Xaml.XamlMember.IsUnknown" /> set to <see langword="true" />.</span>
          </span>
          <span data-ttu-id="659b1-223">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-223">-or-</span>
          </span>
          <span data-ttu-id="659b1-224">
            <see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> 传递，指示 XAML 节点流为不支持内容的对象包含内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-224">
              <see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> passed, which indicates that the XAML node stream contained content for an object that does not support content.</span>
          </span>
          <span data-ttu-id="659b1-225">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-225">-or-</span>
          </span>
          <span data-ttu-id="659b1-226">尝试在无效的范围中写入开始成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-226">Attempted to write a start member in an invalid scope.</span>
          </span>
        </exception>
        <exception cref="T:System.Xaml.XamlDuplicateMemberException">
          <span data-ttu-id="659b1-227">
            <paramref name="property" /> 指定父对象作用域中已显式设置的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-227">
              <paramref name="property" /> specifies a property that is already explicitly set in the parent object scope.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="659b1-228">
            <paramref name="property" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-228">
              <paramref name="property" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public override void WriteStartObject (System.Xaml.XamlType xamlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartObject(class System.Xaml.XamlType xamlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartObject(System::Xaml::XamlType ^ xamlType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType">
          <span data-ttu-id="659b1-229">要写入的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-229">The type to write.</span>
          </span>
          <span data-ttu-id="659b1-230">通常，您从 XAML 读取器中获取此值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-230">Typically you obtain this value from a XAML reader.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="659b1-231">将对象节点写入当前范围，并将该范围设置为新对象范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-231">Writes an object node into the current scope, and sets the scope to a new object scope.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">
          <span data-ttu-id="659b1-232">处理 <see cref="P:System.Xaml.XamlType.IsUnknown" /> 类型，且无法创建对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-232">Processing an <see cref="P:System.Xaml.XamlType.IsUnknown" /> type and cannot create an object.</span>
          </span>
          <span data-ttu-id="659b1-233">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-233">-or-</span>
          </span>
          <span data-ttu-id="659b1-234">尝试在无效的范围中写入开始对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-234">Attempted to write a start object in an invalid scope.</span>
          </span>
        </exception>
        <exception cref="T:System.Xaml.XamlParseException">
          <span data-ttu-id="659b1-235">尝试在根对象已经在设置中提供时写入根对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-235">Attempted to write a root object when the root object was already provided in the settings.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="659b1-236">
            <paramref name="xamlType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-236">
              <paramref name="xamlType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="659b1-237">如果当前范围内集合、 字典或数组，则应通过使用添加到集合、 字典或数组的新实例<see langword="Add" />相关类型的方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="659b1-237">If the current scope is inside a collection, dictionary, or array, the new instance should be added to the collection, dictionary, or array by using the <see langword="Add" /> method of the relevant type.</span>
            </span>
            <span data-ttu-id="659b1-238">否则，该成员应分配到的新实例。</span>
            <span class="sxs-lookup">
              <span data-stu-id="659b1-238">Otherwise, the member should be assigned to the new instance.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public override void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="659b1-239">要写入的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-239">The value to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="659b1-240">将值写入当前成员范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-240">Writes a value to the current member scope.</span>
          </span>
          <span data-ttu-id="659b1-241">如果当前范围位于集合、字典或数组对象内部，则应将该值添加到集合、字典或数组中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-241">If the current scope is inside a collection, dictionary, or array object, the value should be added to the collection, dictionary, or array.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">
          <span data-ttu-id="659b1-242">尝试在无效的范围中写入值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="659b1-242">Attempted to write a value in an invalid scope.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>