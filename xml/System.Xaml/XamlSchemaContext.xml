<Type Name="XamlSchemaContext" FullName="System.Xaml.XamlSchemaContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="30dfd7e6872cbf5555a5fecd6d6b0694782c7865" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52251644" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlSchemaContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlSchemaContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlSchemaContext" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlSchemaContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlSchemaContext" />
  <TypeSignature Language="F#" Value="type XamlSchemaContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="75747-101">定义一个可重用上下文，用于解释或映射 XAML 类型以及为这些类型提供支持的程序集中的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="75747-101">Defines a reusable context for interpreting or mapping XAML types, and the types in the assemblies that underlie them.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75747-102">XAML 架构上下文提供一个架构或词汇的 XAML 与特定的分析器实现之间的抽象层。</span><span class="sxs-lookup"><span data-stu-id="75747-102">A XAML schema context provides a layer of abstraction between a schema or vocabulary for XAML, and a specific parser implementation.</span></span> <span data-ttu-id="75747-103">通过插入的架构上下文概念，可以使用不同的 XAML 分析器使用的架构和架构上下文填写所需的特定 XAML 分析器与之交互的详细信息。</span><span class="sxs-lookup"><span data-stu-id="75747-103">By inserting the concept of a schema context, the schema can be used with different XAML parsers, and the schema context fills in the details that are needed to interact with a specific XAML parser.</span></span> <span data-ttu-id="75747-104">例如，XAML 架构上下文提供与 XAML 概念或 CLR 绑定到 XAML 类型系统相关的 Api 的查询。</span><span class="sxs-lookup"><span data-stu-id="75747-104">For example, the XAML schema context provides query APIs that relate to XAML concepts or to the CLR binding to the XAML type system.</span></span> <span data-ttu-id="75747-105">XAML 架构上下文也是负责维护加载的程序集的程序集列表定义 XAML 分析器的后备类型查找的位置。</span><span class="sxs-lookup"><span data-stu-id="75747-105">The XAML schema context is also responsible for maintaining the assembly list of loaded assemblies, which defines where a XAML parser looks for backing types.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="75747-106">在中<see cref="T:System.AppDomain" />、<see cref="T:System.Xaml.XamlSchemaContext" />在多个调用方，同时包含完整和部分信任的调用方之间共享。</span>
        <span class="sxs-lookup">
          <span data-stu-id="75747-106">In an <see cref="T:System.AppDomain" />, a <see cref="T:System.Xaml.XamlSchemaContext" /> can be shared between multiple callers, which include both full and partial trust callers.</span>
        </span>
        <span data-ttu-id="75747-107">中的框架，如 WPF 中，它们提供部分信任访问到 XAML 加载 WPF 应用程序模型的某些部分存在这种情况。</span>
        <span class="sxs-lookup">
          <span data-stu-id="75747-107">This situation exists in frameworks such as WPF, which provide partial-trust access to XAML loading for portions of the WPF application model.</span>
        </span>
        <span data-ttu-id="75747-108">默认值<see cref="T:System.Xaml.XamlSchemaContext" />实现提供了在此方案中的安全措施，通过将其所有属性和设置都保持为不可变。</span>
        <span class="sxs-lookup">
          <span data-stu-id="75747-108">The default <see cref="T:System.Xaml.XamlSchemaContext" /> implementation provides safeguards in this scenario by keeping all its properties and settings immutable.</span>
        </span>
        <span data-ttu-id="75747-109">派生的实现中还应考虑以下属性的不可变性此模型和 XAML 架构上下文的设置。</span>
        <span class="sxs-lookup">
          <span data-stu-id="75747-109">Derived implementations should also consider following this model of immutability for properties and settings of a XAML schema context.</span>
        </span>
        <span data-ttu-id="75747-110">
          <see cref="T:System.Xaml.XamlSchemaContext" />基类设计，以便查找具有任何外部可观察的副作用。</span>
        <span class="sxs-lookup">
          <span data-stu-id="75747-110">The <see cref="T:System.Xaml.XamlSchemaContext" /> base class is designed so that lookups have no externally observable side effects.</span>
        </span>
        <span data-ttu-id="75747-111">由引用的类型<see cref="T:System.Xaml.XamlSchemaContext" />Api 中的类，如<see cref="T:System.Xaml.XamlType" />或<see cref="T:System.Xaml.XamlMember" />，还生成从查找任何副作用。</span>
        <span class="sxs-lookup">
          <span data-stu-id="75747-111">The types that are referenced by <see cref="T:System.Xaml.XamlSchemaContext" /> APIs in the base class, such as <see cref="T:System.Xaml.XamlType" /> or <see cref="T:System.Xaml.XamlMember" />, also produce no side effects from lookups.</span>
        </span>
        <span data-ttu-id="75747-112">进行架构确定所需的所有数据应都可从的构造和设置<see cref="T:System.AppDomain" />。</span>
        <span class="sxs-lookup">
          <span data-stu-id="75747-112">All data that is needed to make a schema determination should be available from the construction and settings of the <see cref="T:System.AppDomain" />.</span>
        </span>
        <span data-ttu-id="75747-113">请注意，没有任何查找 Api 依赖于显式传入服务;其输入依赖于仅输入的字符串。</span>
        <span class="sxs-lookup">
          <span data-stu-id="75747-113">Notice that no lookup APIs rely on explicitly passed-in services; their input relies on string input only.</span>
        </span>
        <span data-ttu-id="75747-114">
          <see cref="T:System.Xaml.XamlSchemaContext" />基类，并<see cref="T:System.Xaml.XamlType" />和<see cref="T:System.Xaml.XamlMember" />都是线程安全的其基实现。</span>
        <span class="sxs-lookup">
          <span data-stu-id="75747-114">The <see cref="T:System.Xaml.XamlSchemaContext" /> base class, and <see cref="T:System.Xaml.XamlType" /> and <see cref="T:System.Xaml.XamlMember" /> are all thread safe in their base implementations.</span>
        </span>
        <span data-ttu-id="75747-115">如果从其中派生<see cref="T:System.Xaml.XamlSchemaContext" />或派生 XAML 类型系统类，如<see cref="T:System.Xaml.XamlType" />和<see cref="T:System.Xaml.XamlMember" />，可以选择您的类将表现为线程安全。</span>
        <span class="sxs-lookup">
          <span data-stu-id="75747-115">If you derive from <see cref="T:System.Xaml.XamlSchemaContext" /> or derive XAML type system classes such as <see cref="T:System.Xaml.XamlType" /> and <see cref="T:System.Xaml.XamlMember" /> , you can choose whether your classes will behave as thread safe.</span>
        </span>
      </para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="75747-116">初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-116">Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlSchemaContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="75747-117">初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-117">Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlSchemaContext (System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; referenceAssemblies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; referenceAssemblies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (referenceAssemblies As IEnumerable(Of Assembly))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlSchemaContext(System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ referenceAssemblies);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlSchemaContext : seq&lt;System.Reflection.Assembly&gt; -&gt; System.Xaml.XamlSchemaContext" Usage="new System.Xaml.XamlSchemaContext referenceAssemblies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="referenceAssemblies" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;" />
      </Parameters>
      <Docs>
        <param name="referenceAssemblies">
          <span data-ttu-id="75747-118">一组可枚举的程序集信息项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-118">An enumerable set of assembly information items.</span>
          </span>
          <span data-ttu-id="75747-119">每个程序集信息项都由一个 <see cref="T:System.Reflection.Assembly" /> 值指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-119">Each assembly information item is specified by an <see cref="T:System.Reflection.Assembly" /> value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75747-120">基于一组引用程序集初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-120">Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class, based on a set of reference assemblies.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlSchemaContext (System.Xaml.XamlSchemaContextSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContextSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (settings As XamlSchemaContextSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlSchemaContext(System::Xaml::XamlSchemaContextSettings ^ settings);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlSchemaContext : System.Xaml.XamlSchemaContextSettings -&gt; System.Xaml.XamlSchemaContext" Usage="new System.Xaml.XamlSchemaContext settings" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="settings" Type="System.Xaml.XamlSchemaContextSettings" />
      </Parameters>
      <Docs>
        <param name="settings">
          <span data-ttu-id="75747-121">用于构造 <see cref="T:System.Xaml.XamlSchemaContext" /> 的设置对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-121">The settings object to use to construct the <see cref="T:System.Xaml.XamlSchemaContext" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75747-122">基于一个设置对象初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-122">Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class, based on a settings object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75747-123">设置对象存储有关文本转换器和标记扩展有关的具体信息的架构上下文信息。</span><span class="sxs-lookup"><span data-stu-id="75747-123">The settings object stores information about text converter and markup extension specifics for the schema context.</span></span> <span data-ttu-id="75747-124">有关详情，请参阅<xref:System.Xaml.XamlSchemaContextSettings>。</span><span class="sxs-lookup"><span data-stu-id="75747-124">For more information, see <xref:System.Xaml.XamlSchemaContextSettings>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlSchemaContext (System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; referenceAssemblies, System.Xaml.XamlSchemaContextSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; referenceAssemblies, class System.Xaml.XamlSchemaContextSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (referenceAssemblies As IEnumerable(Of Assembly), settings As XamlSchemaContextSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlSchemaContext(System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ referenceAssemblies, System::Xaml::XamlSchemaContextSettings ^ settings);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlSchemaContext : seq&lt;System.Reflection.Assembly&gt; * System.Xaml.XamlSchemaContextSettings -&gt; System.Xaml.XamlSchemaContext" Usage="new System.Xaml.XamlSchemaContext (referenceAssemblies, settings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="referenceAssemblies" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;" />
        <Parameter Name="settings" Type="System.Xaml.XamlSchemaContextSettings" />
      </Parameters>
      <Docs>
        <param name="referenceAssemblies">
          <span data-ttu-id="75747-125">一组可枚举的程序集信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-125">An enumerable set of assembly information.</span>
          </span>
          <span data-ttu-id="75747-126">每个程序集信息项都由一个 <see cref="T:System.Reflection.Assembly" /> 值指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-126">Each assembly information item is specified by an <see cref="T:System.Reflection.Assembly" /> value.</span>
          </span>
        </param>
        <param name="settings">
          <span data-ttu-id="75747-127">用于构造 <see cref="T:System.Xaml.XamlSchemaContext" /> 的设置对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-127">The settings object to use to construct the <see cref="T:System.Xaml.XamlSchemaContext" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75747-128">基于一组引用程序集和一个设置对象初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-128">Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class, based on a set of reference assemblies and a settings object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~XamlSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!XamlSchemaContext ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="xamlSchemaContext.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="75747-129">提供一个非标准 <see langword="Finalize" /> 实现，该实现不调用 <see langword="Dispose" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-129">Provides a nonstandard <see langword="Finalize" /> implementation that does not invoke <see langword="Dispose" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75747-130">通过自动垃圾回收或手动操作，则不应释放 XAML 架构上下文。</span><span class="sxs-lookup"><span data-stu-id="75747-130">XAML schema contexts should not be disposed by automatic garbage collection or by manual operations.</span></span> <span data-ttu-id="75747-131">尽管 XAML 架构上下文不的任何非托管的资源，但<xref:System.Windows.Markup.XamlDeferLoadAttribute>属性可能仍处于活动状态，并释放的 XAML 架构上下文可能会干扰相关的延迟加载操作。</span><span class="sxs-lookup"><span data-stu-id="75747-131">Although XAML schema contexts  have no unmanaged resources, <xref:System.Windows.Markup.XamlDeferLoadAttribute> properties might still be active, and disposing a XAML schema context can interfere with the related defer-load operation.</span></span>  
  
 <span data-ttu-id="75747-132"><xref:System.AppDomain.AssemblyLoad> 通过此实现的事件处理程序，将在内部为弱引用挂钩，进行清理。</span><span class="sxs-lookup"><span data-stu-id="75747-132"><xref:System.AppDomain.AssemblyLoad> event handlers, which are hooked internally as weak references, are cleaned up by this implementation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullyQualifyAssemblyNamesInClrNamespaces">
      <MemberSignature Language="C#" Value="public bool FullyQualifyAssemblyNamesInClrNamespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FullyQualifyAssemblyNamesInClrNamespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullyQualifyAssemblyNamesInClrNamespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FullyQualifyAssemblyNamesInClrNamespaces { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.FullyQualifyAssemblyNamesInClrNamespaces : bool" Usage="System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75747-133">获取一个值，该值指定 XAML 架构及其上下文是否在查找 API 返回的值中使用完全限定的程序集名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-133">Gets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup API.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75747-134">如果 XAML 架构及其上下文在查找 API 返回的值中使用完全限定的程序集名称，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-134">
              <see langword="true" /> if a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup APIs; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75747-135">此属性返回<xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=nameWithType>建立的设置中的值<xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29>构造函数签名。</span><span class="sxs-lookup"><span data-stu-id="75747-135">This property returns the <xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=nameWithType> value that is established in the settings for the <xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29> constructor signature.</span></span> <span data-ttu-id="75747-136">如果其他签名用于构造或如果<xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=nameWithType>未专门设置为`true`，此属性的值是`false`。</span><span class="sxs-lookup"><span data-stu-id="75747-136">If other signatures were used for construction or if <xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=nameWithType> is not specifically set to `true`, the value of this property is `false`.</span></span>  
  
 <span data-ttu-id="75747-137">此属性的值会影响返回的字符串<xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A>。</span><span class="sxs-lookup"><span data-stu-id="75747-137">The value of this property influences the strings that are returned by <xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A>.</span></span> <span data-ttu-id="75747-138">如果<xref:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces%2A>是`true`，该字符串的程序集部分报告的等效项<xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="75747-138">If <xref:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces%2A> is `true`, the assembly portion of the string reports the equivalent of <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllXamlNamespaces">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetAllXamlNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetAllXamlNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllXamlNamespaces () As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetAllXamlNamespaces();" />
      <MemberSignature Language="F#" Value="abstract member GetAllXamlNamespaces : unit -&gt; seq&lt;string&gt;&#xA;override this.GetAllXamlNamespaces : unit -&gt; seq&lt;string&gt;" Usage="xamlSchemaContext.GetAllXamlNamespaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="75747-139">搜索由此 <see cref="T:System.Xaml.XamlSchemaContext" /> 持有的程序集，并返回一组命名空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-139">Searches the assemblies that are held by this <see cref="T:System.Xaml.XamlSchemaContext" /> and returns a set of namespaces.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="75747-140">命名空间标识符的可枚举集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-140">An enumerable set of namespace identifiers.</span>
          </span>
          <span data-ttu-id="75747-141">这些标识符以字符串形式提供。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-141">These identifiers are provided as strings.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75747-142">如果传入通过构造或属性的设置，此方法仅搜索引用程序集。</span><span class="sxs-lookup"><span data-stu-id="75747-142">This method only searches the reference assemblies if they are passed in through construction or property setting.</span></span> <span data-ttu-id="75747-143">如果作为引用程序集不建立了任何程序集，此方法的逻辑会检查所有已加载的程序集，这<xref:System.Xaml.XamlSchemaContext>处于活动状态。</span><span class="sxs-lookup"><span data-stu-id="75747-143">If no assemblies are established as reference assemblies, the logic of this method examines all loaded assemblies where this <xref:System.Xaml.XamlSchemaContext> is active.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllXamlTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.ICollection&lt;System.Xaml.XamlType&gt; GetAllXamlTypes (string xamlNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.ICollection`1&lt;class System.Xaml.XamlType&gt; GetAllXamlTypes(string xamlNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllXamlTypes (xamlNamespace As String) As ICollection(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::ICollection&lt;System::Xaml::XamlType ^&gt; ^ GetAllXamlTypes(System::String ^ xamlNamespace);" />
      <MemberSignature Language="F#" Value="abstract member GetAllXamlTypes : string -&gt; System.Collections.Generic.ICollection&lt;System.Xaml.XamlType&gt;&#xA;override this.GetAllXamlTypes : string -&gt; System.Collections.Generic.ICollection&lt;System.Xaml.XamlType&gt;" Usage="xamlSchemaContext.GetAllXamlTypes xamlNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlNamespace">
          <span data-ttu-id="75747-144">要为其返回类型的 XAML 命名空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-144">The XAML namespace to return types for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75747-145">搜索由此 <see cref="T:System.Xaml.XamlSchemaContext" /> 持有的程序集，并从指定的 XAML 命名空间中返回一组类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-145">Searches the assemblies that are held by this <see cref="T:System.Xaml.XamlSchemaContext" /> and returns a set of types from the specified XAML namespace.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="75747-146">XAML 类型的可枚举集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-146">An enumerable set of XAML types.</span>
          </span>
          <span data-ttu-id="75747-147">集合中的每个 XAML 类型都由一个 <see cref="T:System.Xaml.XamlType" /> 对象表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-147">Each XAML type in the set is represented by a <see cref="T:System.Xaml.XamlType" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredPrefix">
      <MemberSignature Language="C#" Value="public virtual string GetPreferredPrefix (string xmlns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetPreferredPrefix(string xmlns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPreferredPrefix (xmlns As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetPreferredPrefix(System::String ^ xmlns);" />
      <MemberSignature Language="F#" Value="abstract member GetPreferredPrefix : string -&gt; string&#xA;override this.GetPreferredPrefix : string -&gt; string" Usage="xamlSchemaContext.GetPreferredPrefix xmlns" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlns">
          <span data-ttu-id="75747-148">要为其获取首选前缀的 XAML 命名空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-148">The XAML namespace to get the preferred prefix for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75747-149">获取一个报告为首选前缀的字符串，供使用者在映射指定的 XAML 命名空间时使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-149">Gets a string that is reported as the preferred prefix for consumers to use when they map the specified XAML namespace.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="75747-150">一个字符串，使用者在为标记使用映射指定的 XAML 命名空间时应使用该字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-150">A string that consumers should use when they map the specified XAML namespace for markup use.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75747-151">信息的最直接的使用者通常是 XAML 编写器。</span><span class="sxs-lookup"><span data-stu-id="75747-151">The most immediate consumer of the information is typically a XAML writer.</span></span> <span data-ttu-id="75747-152">其他间接的使用者包含设计的工具。</span><span class="sxs-lookup"><span data-stu-id="75747-152">Other indirect consumers include design tools.</span></span>  
  
 <span data-ttu-id="75747-153">作为公共语言运行时 (CLR) 的 XAML 绑定的一部分，可以通过应用指定此信息<xref:System.Windows.Markup.XmlnsPrefixAttribute>在程序集级别。</span><span class="sxs-lookup"><span data-stu-id="75747-153">As part of the XAML binding for the common language runtime (CLR), you can specify this information by applying <xref:System.Windows.Markup.XmlnsPrefixAttribute> at the assembly level.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="75747-154">
            <paramref name="xmlns" /> 为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-154">
              <paramref name="xmlns" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetValueConverter&lt;TConverterBase&gt;">
      <MemberSignature Language="C#" Value="protected internal System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; GetValueConverter&lt;TConverterBase&gt; (Type converterType, System.Xaml.XamlType targetType) where TConverterBase : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Xaml.Schema.XamlValueConverter`1&lt;!!TConverterBase&gt; GetValueConverter&lt;class TConverterBase&gt;(class System.Type converterType, class System.Xaml.XamlType targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetValueConverter(Of TConverterBase As Class) (converterType As Type, targetType As XamlType) As XamlValueConverter(Of TConverterBase)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename TConverterBase&gt;&#xA; where TConverterBase : class System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ GetValueConverter(Type ^ converterType, System::Xaml::XamlType ^ targetType);" />
      <MemberSignature Language="F#" Value="member this.GetValueConverter : Type * System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; (requires 'ConverterBase : null)" Usage="xamlSchemaContext.GetValueConverter (converterType, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TConverterBase">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="converterType" Type="System.Type" />
        <Parameter Name="targetType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <typeparam name="TConverterBase">
          <span data-ttu-id="75747-155">特定转换器基类。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-155">The specific converter base class.</span>
          </span>
        </typeparam>
        <param name="converterType">
          <span data-ttu-id="75747-156">转换器实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-156">The converter implementation.</span>
          </span>
        </param>
        <param name="targetType">
          <span data-ttu-id="75747-157">转换器需要的目标类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-157">The desired destination type for the converter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75747-158">返回一个值转换器，该转换器可将值转换为请求的 <paramref name="targetType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-158">Returns a value converter that can convert to the requested <paramref name="targetType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="75747-159">一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，具有与施加于方法调用的约束相匹配的约束。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-159">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with a constraint that matches the constraint that is put on the method call.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXamlDirective">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlDirective GetXamlDirective (string xamlNamespace, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlDirective GetXamlDirective(string xamlNamespace, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetXamlDirective (xamlNamespace As String, name As String) As XamlDirective" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlDirective ^ GetXamlDirective(System::String ^ xamlNamespace, System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetXamlDirective : string * string -&gt; System.Xaml.XamlDirective&#xA;override this.GetXamlDirective : string * string -&gt; System.Xaml.XamlDirective" Usage="xamlSchemaContext.GetXamlDirective (xamlNamespace, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlDirective</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlNamespace" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlNamespace">
          <span data-ttu-id="75747-160">其中包含命名指令的 XAML 命名空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-160">The XAML namespace that contains the named directive.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="75747-161">要获取的指令的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-161">The name of the directive to obtain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75747-162">返回一个 <see cref="T:System.Xaml.XamlDirective" /> 值，该值表示用于 XAML 语言或用于特定实现的指令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-162">Returns a <see cref="T:System.Xaml.XamlDirective" /> value that represents a directive, either for the XAML language or for a particular implementation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="75747-163">一个 <see cref="T:System.Xaml.XamlDirective" /> 对象，表示请求的指令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-163">A <see cref="T:System.Xaml.XamlDirective" /> object that represents the requested directive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75747-164">如果创建派生的类中重写此方法<xref:System.Xaml.XamlDirective>作为 XAML 类型系统扩展方案的一部分。</span><span class="sxs-lookup"><span data-stu-id="75747-164">Override this method if you create a derived class from <xref:System.Xaml.XamlDirective> as part of a XAML type system extension scenario.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="75747-165">
            <paramref name="xamlNamespace" /> 或 <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-165">
              <paramref name="xamlNamespace" /> or <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetXamlType">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="75747-166">返回基于 CLR 或 XAML 类型标识符的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-166">Returns a <see cref="T:System.Xaml.XamlType" /> that is based on either a CLR or XAML type identifier.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetXamlType">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlType GetXamlType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlType GetXamlType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlType ^ GetXamlType(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetXamlType : Type -&gt; System.Xaml.XamlType&#xA;override this.GetXamlType : Type -&gt; System.Xaml.XamlType" Usage="xamlSchemaContext.GetXamlType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="75747-167">要为其获取 <see cref="T:System.Xaml.XamlType" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-167">The type to get a <see cref="T:System.Xaml.XamlType" /> for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75747-168">返回基于 CLR 类型标识符的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-168">Returns a <see cref="T:System.Xaml.XamlType" /> that is based on a CLR type identifier.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="75747-169">与输入 <paramref name="type" /> 匹配的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-169">The <see cref="T:System.Xaml.XamlType" /> that matches the input <paramref name="type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75747-170">此重载假定，您使用的 CLR 后备类型系统。</span><span class="sxs-lookup"><span data-stu-id="75747-170">This overload assumes that you are using the CLR for the backing type system.</span></span> <span data-ttu-id="75747-171">如果不使用 CLR 类型系统，使用<xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29>。</span><span class="sxs-lookup"><span data-stu-id="75747-171">If you are not using the CLR type system, use <xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="75747-172">
            <paramref name="type" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-172">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetXamlType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType GetXamlType (System.Xaml.Schema.XamlTypeName xamlTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlType GetXamlType(class System.Xaml.Schema.XamlTypeName xamlTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlType ^ GetXamlType(System::Xaml::Schema::XamlTypeName ^ xamlTypeName);" />
      <MemberSignature Language="F#" Value="member this.GetXamlType : System.Xaml.Schema.XamlTypeName -&gt; System.Xaml.XamlType" Usage="xamlSchemaContext.GetXamlType xamlTypeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlTypeName" Type="System.Xaml.Schema.XamlTypeName" />
      </Parameters>
      <Docs>
        <param name="xamlTypeName">
          <span data-ttu-id="75747-173">要为其获取 <see cref="T:System.Xaml.XamlType" /> 的 XAML 类型名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-173">The XAML type name to get a <see cref="T:System.Xaml.XamlType" /> for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75747-174">返回基于 XAML 系统类型名称的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-174">Returns a <see cref="T:System.Xaml.XamlType" /> that is based on a XAML system type name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="75747-175">与输入 <paramref name="xamlTypeName" /> 匹配的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-175">The <see cref="T:System.Xaml.XamlType" /> that matches the input <paramref name="xamlTypeName" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="75747-176">
            <paramref name="xamlTypeName" /> 的组件（<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> 或 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />）为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-176">A component of <paramref name="xamlTypeName" /> (<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> or <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />) is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="75747-177">
            <paramref name="xamlTypeName" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-177">
              <paramref name="xamlTypeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xaml.Schema.XamlTypeName" />
      </Docs>
    </Member>
    <Member MemberName="GetXamlType">
      <MemberSignature Language="C#" Value="protected internal virtual System.Xaml.XamlType GetXamlType (string xamlNamespace, string name, params System.Xaml.XamlType[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Xaml.XamlType GetXamlType(string xamlNamespace, string name, class System.Xaml.XamlType[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetXamlType (xamlNamespace As String, name As String, ParamArray typeArguments As XamlType()) As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Xaml::XamlType ^ GetXamlType(System::String ^ xamlNamespace, System::String ^ name, ... cli::array &lt;System::Xaml::XamlType ^&gt; ^ typeArguments);" />
      <MemberSignature Language="F#" Value="abstract member GetXamlType : string * string * System.Xaml.XamlType[] -&gt; System.Xaml.XamlType&#xA;override this.GetXamlType : string * string * System.Xaml.XamlType[] -&gt; System.Xaml.XamlType" Usage="xamlSchemaContext.GetXamlType (xamlNamespace, name, typeArguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlNamespace" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Xaml.XamlType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="xamlNamespace">
          <span data-ttu-id="75747-178">包含所需类型的 XAML 命名空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-178">The XAML namespace that contains the desired type.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="75747-179">所需类型的字符串名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-179">The string name of the desired type.</span>
          </span>
        </param>
        <param name="typeArguments">
          <span data-ttu-id="75747-180">用于泛型类型的初始化类型参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-180">The initialization type arguments for a generic type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75747-181">基于 XAML 命名空间以及类型名称的字符串返回一个 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-181">Returns a <see cref="T:System.Xaml.XamlType" /> that is based on a XAML namespace and a string for the type name.</span>
          </span>
          <span data-ttu-id="75747-182">此签名可以针对所需类型是泛型类型的情况指定类型参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-182">This signature can specify the type arguments for cases where the desired type is a generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="75747-183">与输入条件匹配的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-183">The <see cref="T:System.Xaml.XamlType" /> that matches the input criteria.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAssemblyResolve">
      <MemberSignature Language="C#" Value="protected internal virtual System.Reflection.Assembly OnAssemblyResolve (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Reflection.Assembly OnAssemblyResolve(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function OnAssemblyResolve (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Reflection::Assembly ^ OnAssemblyResolve(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="abstract member OnAssemblyResolve : string -&gt; System.Reflection.Assembly&#xA;override this.OnAssemblyResolve : string -&gt; System.Reflection.Assembly" Usage="xamlSchemaContext.OnAssemblyResolve assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">
          <span data-ttu-id="75747-184">要加载的程序集的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-184">The name of the assembly to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75747-185">在操作使用此架构上下文来解析程序集时调用，必须提供该程序集才能解析它包含的 XAML 命名空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-185">Called when operations use this schema context to resolve an assembly that is required in order to resolve the XAML namespaces that it contains.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="75747-186">解析的程序集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-186">The resolved assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75747-187">基础的程序集解析技术，这是内部 API，具有内置容错的不同的字符串形式的程序集名称，如基于<xref:System.Reflection.AssemblyName>构造行为。</span><span class="sxs-lookup"><span data-stu-id="75747-187">The underlying assembly resolution technique, which is an internal API, has built-in tolerances for different string forms of an assembly name as based on the <xref:System.Reflection.AssemblyName> construction behavior.</span></span>  
  
 <span data-ttu-id="75747-188">此 API 的目的是能够首次解析针对已知的程序集，如对引用程序集而不是针对全局程序集缓存。</span><span class="sxs-lookup"><span data-stu-id="75747-188">The purpose of this API is to enable first-opportunity resolution against known sets of assemblies, such as against reference assemblies instead of against a global assembly cache.</span></span> <span data-ttu-id="75747-189">如果填充的引用程序集列表，则默认实现可以访问已知的引用程序集。</span><span class="sxs-lookup"><span data-stu-id="75747-189">If the list of reference assemblies is populated, the default implementation can access the known reference assemblies.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Reflection.Assembly&gt; ReferenceAssemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.Assembly&gt; ReferenceAssemblies" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReferenceAssemblies As IList(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Reflection::Assembly ^&gt; ^ ReferenceAssemblies { System::Collections::Generic::IList&lt;System::Reflection::Assembly ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReferenceAssemblies : System.Collections.Generic.IList&lt;System.Reflection.Assembly&gt;" Usage="System.Xaml.XamlSchemaContext.ReferenceAssemblies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75747-190">获取 XAML 架构上下文的引用程序集的可枚举集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-190">Gets an enumerable set of reference assemblies for the XAML schema context.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75747-191">架构上下文的引用程序集的可枚举集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-191">An enumerable set of reference assemblies for the schema context.</span>
          </span>
          <span data-ttu-id="75747-192">每个程序集信息项都由一个 <see cref="T:System.Reflection.Assembly" /> 值指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-192">Each assembly information item is specified by an <see cref="T:System.Reflection.Assembly" /> value.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportMarkupExtensionsWithDuplicateArity">
      <MemberSignature Language="C#" Value="public bool SupportMarkupExtensionsWithDuplicateArity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportMarkupExtensionsWithDuplicateArity" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportMarkupExtensionsWithDuplicateArity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportMarkupExtensionsWithDuplicateArity { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportMarkupExtensionsWithDuplicateArity : bool" Usage="System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75747-193">获取一个值，该值指定 XAML 架构及其上下文是否支持存在 arity（输入参数的数量）相同的两个构造函数的标记扩展。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-193">Gets a value that specifies whether a XAML schema and its context support markup extensions that have two constructors with the same arity (number of input parameters).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75747-194">如果架构上下文允许 arity 重复的标记扩展，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-194">
              <see langword="true" /> if the schema context permits markup extensions that have duplicate arity; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="75747-195">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-195">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75747-196">此属性返回<xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=nameWithType>建立的设置中的值<xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29>构造函数签名。</span><span class="sxs-lookup"><span data-stu-id="75747-196">This property returns the <xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=nameWithType> value that is established in the settings for the <xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29> constructor signature.</span></span> <span data-ttu-id="75747-197">如果使用其他签名来进行构造，或如果<xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=nameWithType>未专门设置为`true`，此属性的值是`false`。</span><span class="sxs-lookup"><span data-stu-id="75747-197">If other signatures are used for construction or if <xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=nameWithType> is not specifically set to `true`, the value of this property is `false`.</span></span>  
  
 <span data-ttu-id="75747-198">重复 arity 的标记扩展不是要专门传送 XAML 规范 [MS-XAML] 部分 6.6.7.2。</span><span class="sxs-lookup"><span data-stu-id="75747-198">Duplicate arity of markup extensions is not specifically addressed by the XAML specification [MS-XAML], section 6.6.7.2.</span></span> <span data-ttu-id="75747-199">这是因为是相同而不考虑可能存在于标记扩展实现中的重复 arity 的标记扩展的 XAML 信息项的形成。</span><span class="sxs-lookup"><span data-stu-id="75747-199">This is because formation of the XAML information item for a markup extension is identical regardless of duplicate arity that might exist in the markup extension implementation.</span></span> <span data-ttu-id="75747-200">仅标记扩展的实际调用并将其`ProvideValue`公开与重复 arity 关联的任何问题。</span><span class="sxs-lookup"><span data-stu-id="75747-200">Only the actual invocation of the markup extension and its `ProvideValue` exposes any issues associated with duplicate arity.</span></span> <span data-ttu-id="75747-201">用于处理重复 arity 的行为因此未定义，应由每个实现的 XAML 架构上下文和 XAML 编写器集成。</span><span class="sxs-lookup"><span data-stu-id="75747-201">Behavior for handling duplicate arity is thus undefined and is left up to each implementing XAML schema context and its XAML writer integration.</span></span> <span data-ttu-id="75747-202">默认 XAML 架构上下文实现的.NET Framework XAML 服务操作不支持重复 arity;处理具有基础重复 arity 的标记扩展用法时，各种.NET Framework XAML 服务 Api 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="75747-202">The default XAML schema context as implemented for .NET Framework XAML Services operations does not support duplicate arity; various .NET Framework XAML Services APIs will throw exceptions when processing markup extension usage with underlying duplicate arity.</span></span>  
  
 <span data-ttu-id="75747-203">有关定义标记扩展的详细信息，请参阅[Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="75747-203">For more information about defining markup extensions, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetCompatibleXamlNamespace">
      <MemberSignature Language="C#" Value="public virtual bool TryGetCompatibleXamlNamespace (string xamlNamespace, out string compatibleNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetCompatibleXamlNamespace(string xamlNamespace, [out] string&amp; compatibleNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetCompatibleXamlNamespace (xamlNamespace As String, ByRef compatibleNamespace As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetCompatibleXamlNamespace(System::String ^ xamlNamespace, [Runtime::InteropServices::Out] System::String ^ % compatibleNamespace);" />
      <MemberSignature Language="F#" Value="abstract member TryGetCompatibleXamlNamespace : string *  -&gt; bool&#xA;override this.TryGetCompatibleXamlNamespace : string *  -&gt; bool" Usage="xamlSchemaContext.TryGetCompatibleXamlNamespace (xamlNamespace, compatibleNamespace)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlNamespace" Type="System.String" />
        <Parameter Name="compatibleNamespace" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="xamlNamespace">
          <span data-ttu-id="75747-204">要检查是否存在兼容结果的 XAML 命名空间的 <see langword="xmlns" /> 字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-204">The <see langword="xmlns" /> string for the XAML namespace to be checked for a compatible result.</span>
          </span>
        </param>
        <param name="compatibleNamespace">
          <span data-ttu-id="75747-205">当此方法返回时，为兼容的 XAML 命名空间请求的 <see langword="xmlns" /> 字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-205">When this method returns, the <see langword="xmlns" /> string for a compatible XAML namespace request.</span>
          </span>
          <span data-ttu-id="75747-206">如果方法返回 <see langword="false" />，则这可能与 <paramref name="xamlNamespace" /> 相同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-206">This might be identical to <paramref name="xamlNamespace" /> if the method returns <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75747-207">返回兼容 XAML 命名空间的请求的成功或失败状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-207">Returns the success or failure of a request for a compatible XAML namespace.</span>
          </span>
          <span data-ttu-id="75747-208">成功的请求会将该 XAML 命名空间报告为输出参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-208">A successful request reports that XAML namespace as an out parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="75747-209">如果 <paramref name="compatibleNamespace" /> 包含可用的结果，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-209">
              <see langword="true" /> if <paramref name="compatibleNamespace" /> contains a usable result; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75747-210">在内部，此方法使用以下的查找顺序：</span><span class="sxs-lookup"><span data-stu-id="75747-210">Internally, this method uses the following lookup order:</span></span>  
  
1.  <span data-ttu-id="75747-211">可能已填充的早期查找一个在内部实现的兼容性字典。</span><span class="sxs-lookup"><span data-stu-id="75747-211">An internally implemented compatibility dictionary, which may have been populated by an earlier lookup.</span></span>  
  
2.  <span data-ttu-id="75747-212"><xref:System.Windows.Markup.XmlnsCompatibleWithAttribute>参数评估。</span><span class="sxs-lookup"><span data-stu-id="75747-212">The <xref:System.Windows.Markup.XmlnsCompatibleWithAttribute> parameter evaluation.</span></span>  
  
 <span data-ttu-id="75747-213">如果不发现任何其他兼容的命名空间，并且此方法返回`false`，则`compatibleNamespace`参数输出中可能会有相同的值`xamlNamespace`输入。</span><span class="sxs-lookup"><span data-stu-id="75747-213">If no other compatible namespace is discovered and this method returns `false`, the `compatibleNamespace` parameter output might have the same value as the `xamlNamespace` input.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="75747-214">
            <paramref name="xamlNamespace" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75747-214">
              <paramref name="xamlNamespace" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>