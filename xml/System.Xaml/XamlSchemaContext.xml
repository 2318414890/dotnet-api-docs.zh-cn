<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlSchemaContext.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c3cb020dadf6911a6184d7c73f01746771d9bdf1.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3cb020dadf6911a6184d7c73f01746771d9bdf1</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlSchemaContext">
          <source>Defines a reusable context for interpreting or mapping XAML types, and the types in the assemblies that underlie them.</source>
          <target state="translated">定义一个可重用上下文，用于解释或映射 XAML 类型以及为这些类型提供支持的程序集中的类型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlSchemaContext">
          <source>A XAML schema context provides a layer of abstraction between a schema or vocabulary for XAML, and a specific parser implementation.</source>
          <target state="translated">XAML 架构上下文提供了一个架构或词汇对于 XAML 与特定的分析器实现之间的抽象层。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlSchemaContext">
          <source>By inserting the concept of a schema context, the schema can be used with different XAML parsers, and the schema context fills in the details that are needed to interact with a specific XAML parser.</source>
          <target state="translated">方法是插入架构上下文的概念，可与不同的 XAML 分析器，架构和架构上下文填入与特定的 XAML 分析器进行交互所需的详细信息。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlSchemaContext">
          <source>For example, the XAML schema context provides query APIs that relate to XAML concepts or to the CLR binding to the XAML type system.</source>
          <target state="translated">例如，XAML 架构上下文提供了查询与 XAML 概念或 CLR 绑定到 XAML 类型系统相关的 Api。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlSchemaContext">
          <source>The XAML schema context is also responsible for maintaining the assembly list of loaded assemblies, which defines where a XAML parser looks for backing types.</source>
          <target state="translated">XAML 架构上下文也是负责维护的加载程序集，它定义其中 XAML 分析器查找后备类型的程序集列表。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlSchemaContext">
          <source>In an <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph>, a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> can be shared between multiple callers, which include both full and partial trust callers.</source>
          <target state="translated">在<ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph>、<ph id="ph2">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>可以在多个同时包含这两者完整的调用方和部分信任的调用方之间共享。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlSchemaContext">
          <source>This situation exists in frameworks such as WPF, which provide partial-trust access to XAML loading for portions of the WPF application model.</source>
          <target state="translated">框架，例如 WPF 中，其中提供部分信任访问到使用 XAML 加载各个部分的 WPF 应用程序模型中存在这种情况。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlSchemaContext">
          <source>The default <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> implementation provides safeguards in this scenario by keeping all its properties and settings immutable.</source>
          <target state="translated">默认值<ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>实现提供在此方案中的安全措施，通过将其所有属性和设置都保持为不可变。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlSchemaContext">
          <source>Derived implementations should also consider following this model of immutability for properties and settings of a XAML schema context.</source>
          <target state="translated">派生的实现中还应考虑以下属性的不可变性此模型和 XAML 架构上下文的设置。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlSchemaContext">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> base class is designed so that lookups have no externally observable side effects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>基类进行设计，以便查找没有任何外部可观察到的副作用。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlSchemaContext">
          <source>The types that are referenced by <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> APIs in the base class, such as <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>, also produce no side effects from lookups.</source>
          <target state="translated">通过引用的类型<ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>Api 中的类，如<ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>或<ph id="ph3">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>，也会从查找任何副作用。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlSchemaContext">
          <source>All data that is needed to make a schema determination should be available from the construction and settings of the <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph>.</source>
          <target state="translated">执行架构确定所需的所有数据应都可从的构造和设置<ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlSchemaContext">
          <source>Notice that no lookup APIs rely on explicitly passed-in services; their input relies on string input only.</source>
          <target state="translated">请注意没有任何查找 Api 依赖于显式传入的服务; 示例：其输入依赖于仅输入的字符串。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlSchemaContext">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> base class, and <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> and <ph id="ph3">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> are all thread safe in their base implementations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>基类，和<ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>和<ph id="ph3">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>都是线程安全地执行其基实现。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlSchemaContext">
          <source>If you derive from <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> or derive XAML type system classes such as <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> and <ph id="ph3">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> , you can choose whether your classes will behave as thread safe.</source>
          <target state="translated">如果派生自<ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>或派生 XAML 类型系统类，如<ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>和<ph id="ph3">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>，你可以选择你的类将充当线程安全。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlSchemaContext">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
          <source>An enumerable set of assembly information items.</source>
          <target state="translated">一组可枚举的程序集信息项。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
          <source>Each assembly information item is specified by an <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> value.</source>
          <target state="translated">每个程序集信息项都由一个 <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> 值指定。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> class, based on a set of reference assemblies.</source>
          <target state="translated">基于一组引用程序集初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)">
          <source>The settings object to use to construct the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>.</source>
          <target state="translated">用于构造 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 的设置对象。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> class, based on a settings object.</source>
          <target state="translated">基于一个设置对象初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)">
          <source>The settings object stores information about text converter and markup extension specifics for the schema context.</source>
          <target state="translated">此设置对象存储有关文本转换器和标记扩展有关的架构上下文的细节信息的信息。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContextSettings&gt;</ph>.</source>
          <target state="translated">有关详情，请参阅<ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContextSettings&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)">
          <source>An enumerable set of assembly information.</source>
          <target state="translated">一组可枚举的程序集信息。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)">
          <source>Each assembly information item is specified by an <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> value.</source>
          <target state="translated">每个程序集信息项都由一个 <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> 值指定。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)">
          <source>The settings object to use to construct the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>.</source>
          <target state="translated">用于构造 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 的设置对象。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> class, based on a set of reference assemblies and a settings object.</source>
          <target state="translated">基于一组引用程序集和一个设置对象初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.Finalize">
          <source>Provides a nonstandard <ph id="ph1">&lt;see langword="Finalize" /&gt;</ph> implementation that does not invoke <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">提供一个非标准 <ph id="ph1">&lt;see langword="Finalize" /&gt;</ph> 实现，该实现不调用 <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.Finalize">
          <source>XAML schema contexts should not be disposed by automatic garbage collection or by manual operations.</source>
          <target state="translated">通过自动垃圾回收或手动操作，则不应释放 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.Finalize">
          <source>Although XAML schema contexts  have no unmanaged resources, <ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph> properties might still be active, and disposing a XAML schema context can interfere with the related defer-load operation.</source>
          <target state="translated">尽管 XAML 架构上下文不具有任何非托管的资源，但<ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph>属性可能仍处于活动状态，并释放的 XAML 架构上下文可能会妨碍相关的延迟加载操作。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.Finalize">
          <source><ph id="ph1">&lt;xref:System.AppDomain.AssemblyLoad&gt;</ph> event handlers, which are hooked internally as weak references, are cleaned up by this implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomain.AssemblyLoad&gt;</ph> 通过此实现清理作为弱引用内部挂钩的事件处理程序。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
          <source>Gets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup API.</source>
          <target state="translated">获取一个值，该值指定 XAML 架构及其上下文是否在查找 API 返回的值中使用完全限定的程序集名称。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup APIs; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 XAML 架构及其上下文在查找 API 返回的值中使用完全限定的程序集名称，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
          <source>This property returns the <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=nameWithType&gt;</ph> value that is established in the settings for the <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29&gt;</ph> constructor signature.</source>
          <target state="translated">此属性返回<ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=nameWithType&gt;</ph>建立的设置中的值<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29&gt;</ph>构造函数签名。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
          <source>If other signatures were used for construction or if <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=nameWithType&gt;</ph> is not specifically set to <ph id="ph2">`true`</ph>, the value of this property is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">如果其他签名已用于构造，或如果<ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=nameWithType&gt;</ph>未特别设置<ph id="ph2">`true`</ph>，此属性的值是<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
          <source>The value of this property influences the strings that are returned by <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A&gt;</ph>.</source>
          <target state="translated">此属性的值会影响返回的字符串<ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the assembly portion of the string reports the equivalent of <ph id="ph3">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces%2A&gt;</ph>是<ph id="ph2">`true`</ph>，字符串的程序集部分报告的等效项<ph id="ph3">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces">
          <source>Searches the assemblies that are held by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> and returns a set of namespaces.</source>
          <target state="translated">搜索由此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 持有的程序集，并返回一组命名空间。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces">
          <source>An enumerable set of namespace identifiers.</source>
          <target state="translated">命名空间标识符的可枚举集合。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces">
          <source>These identifiers are provided as strings.</source>
          <target state="translated">这些标识符以字符串形式提供。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces">
          <source>This method only searches the reference assemblies if they are passed in through construction or property setting.</source>
          <target state="translated">如果它们将传递中构造或属性的设置，则此方法将仅搜索的引用程序集。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces">
          <source>If no assemblies are established as reference assemblies, the logic of this method examines all loaded assemblies where this <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> is active.</source>
          <target state="translated">如果为引用程序集不建立了任何程序集，此方法的逻辑检查所有已加载的程序集位置这<ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>处于活动状态。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)">
          <source>The XAML namespace to return types for.</source>
          <target state="translated">要为其返回类型的 XAML 命名空间。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)">
          <source>Searches the assemblies that are held by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> and returns a set of types from the specified XAML namespace.</source>
          <target state="translated">搜索由此 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 持有的程序集，并从指定的 XAML 命名空间中返回一组类型。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)">
          <source>An enumerable set of XAML types.</source>
          <target state="translated">XAML 类型的可枚举集合。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)">
          <source>Each XAML type in the set is represented by a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object.</source>
          <target state="translated">集合中的每个 XAML 类型都由一个 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 对象表示。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
          <source>The XAML namespace to get the preferred prefix for.</source>
          <target state="translated">要为其获取首选前缀的 XAML 命名空间。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
          <source>Gets a string that is reported as the preferred prefix for consumers to use when they map the specified XAML namespace.</source>
          <target state="translated">获取一个报告为首选前缀的字符串，供使用者在映射指定的 XAML 命名空间时使用。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
          <source>A string that consumers should use when they map the specified XAML namespace for markup use.</source>
          <target state="translated">一个字符串，使用者在为标记使用映射指定的 XAML 命名空间时应使用该字符串。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
          <source>The most immediate consumer of the information is typically a XAML writer.</source>
          <target state="translated">信息的最直接的使用者通常是 XAML 编写器。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
          <source>Other indirect consumers include design tools.</source>
          <target state="translated">其他间接使用者包含设计工具。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
          <source>As part of the XAML binding for the common language runtime (CLR), you can specify this information by applying <ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsPrefixAttribute&gt;</ph> at the assembly level.</source>
          <target state="translated">作为公共语言运行时 (CLR) 的 XAML 绑定的一部分，你可以通过应用指定此信息<ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsPrefixAttribute&gt;</ph>程序集级别。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
          <source><ph id="ph1">&lt;paramref name="xmlns" /&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xmlns" /&gt;</ph> 为 null。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)">
          <source>The specific converter base class.</source>
          <target state="translated">特定转换器基类。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)">
          <source>The converter implementation.</source>
          <target state="translated">转换器实现。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)">
          <source>The desired destination type for the converter.</source>
          <target state="translated">转换器需要的目标类型。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)">
          <source>Returns a value converter that can convert to the requested <ph id="ph1">&lt;paramref name="targetType" /&gt;</ph>.</source>
          <target state="translated">返回一个值转换器，该转换器可将值转换为请求的 <ph id="ph1">&lt;paramref name="targetType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with a constraint that matches the constraint that is put on the method call.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>，具有与施加于方法调用的约束相匹配的约束。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
          <source>The XAML namespace that contains the named directive.</source>
          <target state="translated">其中包含命名指令的 XAML 命名空间。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
          <source>The name of the directive to obtain.</source>
          <target state="translated">要获取的指令的名称。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> value that represents a directive, either for the XAML language or for a particular implementation.</source>
          <target state="translated">返回一个 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> 值，该值表示用于 XAML 语言或用于特定实现的指令。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> object that represents the requested directive.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> 对象，表示请求的指令。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
          <source>Override this method if you create a derived class from <ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> as part of a XAML type system extension scenario.</source>
          <target state="translated">如果创建派生的类中重写此方法<ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph>作为 XAML 类型系统扩展方案的一部分。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="xamlNamespace" /&gt;</ph> or <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xamlNamespace" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="name" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlSchemaContext">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> that is based on either a CLR or XAML type identifier.</source>
          <target state="translated">返回基于 CLR 或 XAML 类型标识符的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
          <source>The type to get a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for.</source>
          <target state="translated">要为其获取 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> that is based on a CLR type identifier.</source>
          <target state="translated">返回基于 CLR 类型标识符的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> that matches the input <ph id="ph2">&lt;paramref name="type" /&gt;</ph>.</source>
          <target state="translated">与输入 <ph id="ph2">&lt;paramref name="type" /&gt;</ph> 匹配的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
          <source>This overload assumes that you are using the CLR for the backing type system.</source>
          <target state="translated">此重载假设你正在使用 CLR 的后备类型系统。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
          <source>If you are not using the CLR type system, use <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29&gt;</ph>.</source>
          <target state="translated">如果不使用的 CLR 类型系统，使用<ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)">
          <source>The XAML type name to get a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for.</source>
          <target state="translated">要为其获取 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 的 XAML 类型名称。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> that is based on a XAML system type name.</source>
          <target state="translated">返回基于 XAML 系统类型名称的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> that matches the input <ph id="ph2">&lt;paramref name="xamlTypeName" /&gt;</ph>.</source>
          <target state="translated">与输入 <ph id="ph2">&lt;paramref name="xamlTypeName" /&gt;</ph> 匹配的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)">
          <source>A component of <ph id="ph1">&lt;paramref name="xamlTypeName" /&gt;</ph> (<ph id="ph2">&lt;see cref="P:System.Xaml.Schema.XamlTypeName.Name" /&gt;</ph> or <ph id="ph3">&lt;see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" /&gt;</ph>) is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xamlTypeName" /&gt;</ph> 的组件（<ph id="ph2">&lt;see cref="P:System.Xaml.Schema.XamlTypeName.Name" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" /&gt;</ph>）为 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)">
          <source><ph id="ph1">&lt;paramref name="xamlTypeName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xamlTypeName" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
          <source>The XAML namespace that contains the desired type.</source>
          <target state="translated">包含所需类型的 XAML 命名空间。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
          <source>The string name of the desired type.</source>
          <target state="translated">所需类型的字符串名称。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
          <source>The initialization type arguments for a generic type.</source>
          <target state="translated">用于泛型类型的初始化类型参数。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> that is based on a XAML namespace and a string for the type name.</source>
          <target state="translated">基于 XAML 命名空间以及类型名称的字符串返回一个 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
          <source>This signature can specify the type arguments for cases where the desired type is a generic type.</source>
          <target state="translated">此签名可以针对所需类型是泛型类型的情况指定类型参数。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> that matches the input criteria.</source>
          <target state="translated">与输入条件匹配的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
          <source>The name of the assembly to load.</source>
          <target state="translated">要加载的程序集的名称。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
          <source>Called when operations use this schema context to resolve an assembly that is required in order to resolve the XAML namespaces that it contains.</source>
          <target state="translated">在操作使用此架构上下文来解析程序集时调用，必须提供该程序集才能解析它包含的 XAML 命名空间。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
          <source>The resolved assembly.</source>
          <target state="translated">解析的程序集。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
          <source>The underlying assembly resolution technique, which is an internal API, has built-in tolerances for different string forms of an assembly name as based on the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> construction behavior.</source>
          <target state="translated">基础的程序集解析技术，这是一个内部 API，已对不同的字符串形式的程序集名称的内置容差，因为基于<ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph>构造行为。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
          <source>The purpose of this API is to enable first-opportunity resolution against known sets of assemblies, such as against reference assemblies instead of against a global assembly cache.</source>
          <target state="translated">此 API 的目的是能够首次解析针对已知的程序集，如针对而不是针对全局程序集缓存的引用程序集。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
          <source>If the list of reference assemblies is populated, the default implementation can access the known reference assemblies.</source>
          <target state="translated">如果填充的引用程序集的列表，则默认实现可以访问的已知的引用程序集。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies">
          <source>Gets an enumerable set of reference assemblies for the XAML schema context.</source>
          <target state="translated">获取 XAML 架构上下文的引用程序集的可枚举集合。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies">
          <source>An enumerable set of reference assemblies for the schema context.</source>
          <target state="translated">架构上下文的引用程序集的可枚举集合。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies">
          <source>Each assembly information item is specified by an <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> value.</source>
          <target state="translated">每个程序集信息项都由一个 <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> 值指定。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
          <source>Gets a value that specifies whether a XAML schema and its context support markup extensions that have two constructors with the same arity (number of input parameters).</source>
          <target state="translated">获取一个值，该值指定 XAML 架构及其上下文是否支持存在 arity（输入参数的数量）相同的两个构造函数的标记扩展。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the schema context permits markup extensions that have duplicate arity; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果架构上下文允许 arity 重复的标记扩展，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
          <source>This property returns the <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=nameWithType&gt;</ph> value that is established in the settings for the <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29&gt;</ph> constructor signature.</source>
          <target state="translated">此属性返回<ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=nameWithType&gt;</ph>建立的设置中的值<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29&gt;</ph>构造函数签名。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
          <source>If other signatures are used for construction or if <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=nameWithType&gt;</ph> is not specifically set to <ph id="ph2">`true`</ph>, the value of this property is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">如果其他签名用于构造，或如果<ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=nameWithType&gt;</ph>未特别设置<ph id="ph2">`true`</ph>，此属性的值是<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
          <source>Duplicate arity of markup extensions is not specifically addressed by the XAML specification [MS-XAML], section 6.6.7.2.</source>
          <target state="translated">XAML 规范 [MS-XAML] 第节 6.6.7.2 未专门得到解决重复 arity 的标记扩展。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
          <source>This is because formation of the XAML information item for a markup extension is identical regardless of duplicate arity that might exist in the markup extension implementation.</source>
          <target state="translated">这是因为形成的标记扩展的 XAML 信息项而不考虑在标记扩展实现中可能存在的重复 arity 等同。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
          <source>Only the actual invocation of the markup extension and its <ph id="ph1">`ProvideValue`</ph> exposes any issues associated with duplicate arity.</source>
          <target state="translated">仅实际调用标记扩展并将其<ph id="ph1">`ProvideValue`</ph>公开与重复 arity 相关联的任何问题。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
          <source>Behavior for handling duplicate arity is thus undefined and is left up to each implementing XAML schema context and its XAML writer integration.</source>
          <target state="translated">处理重复 arity 的行为因此是不确定，并且仍最多每个实现的 XAML 架构上下文和其 XAML 编写器集成。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
          <source>The default XAML schema context as implemented for .NET Framework XAML Services operations does not support duplicate arity; various .NET Framework XAML Services APIs will throw exceptions when processing markup extension usage with underlying duplicate arity.</source>
          <target state="translated">默认 XAML 架构上下文的.NET Framework XAML 服务操作实现不支持重复 arity;处理具有基础重复 arity 的标记扩展用法时，各种.NET Framework XAML 服务 Api 将引发异常。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
          <source>For more information about defining markup extensions, see <bpt id="p1">[</bpt>Markup Extensions for XAML Overview<ept id="p1">](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept>.</source>
          <target state="translated">有关定义标记扩展的详细信息，请参阅<bpt id="p1">[</bpt>的标记扩展 XAML 概述<ept id="p1">](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
          <source>The <ph id="ph1">&lt;see langword="xmlns" /&gt;</ph> string for the XAML namespace to be checked for a compatible result.</source>
          <target state="translated">要检查是否存在兼容结果的 XAML 命名空间的 <ph id="ph1">&lt;see langword="xmlns" /&gt;</ph> 字符串。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
          <source>When this method returns, the <ph id="ph1">&lt;see langword="xmlns" /&gt;</ph> string for a compatible XAML namespace request.</source>
          <target state="translated">当此方法返回时，为兼容的 XAML 命名空间请求的 <ph id="ph1">&lt;see langword="xmlns" /&gt;</ph> 字符串。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
          <source>This might be identical to <bpt id="p1">&lt;c&gt;</bpt>xamlNamespace<ept id="p1">&lt;/c&gt;</ept> if the method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果方法返回 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，则这可能与 <bpt id="p1">&lt;c&gt;</bpt>xamlNamespace<ept id="p1">&lt;/c&gt;</ept> 相同。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
          <source>Returns the success or failure of a request for a compatible XAML namespace.</source>
          <target state="translated">返回兼容 XAML 命名空间的请求的成功或失败状态。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
          <source>A successful request reports that XAML namespace as an out parameter.</source>
          <target state="translated">成功的请求会将该 XAML 命名空间报告为输出参数。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="compatibleNamespace" /&gt;</ph> contains a usable result; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="compatibleNamespace" /&gt;</ph> 包含可用的结果，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
          <source>Internally, this method uses the following lookup order:</source>
          <target state="translated">此方法在内部，使用以下查找顺序：</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
          <source>An internally implemented compatibility dictionary, which may have been populated by an earlier lookup.</source>
          <target state="translated">已由早期查找填充一个内部实现的兼容性字典。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsCompatibleWithAttribute&gt;</ph> parameter evaluation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsCompatibleWithAttribute&gt;</ph>参数评估。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
          <source>If no other compatible namespace is discovered and this method returns <ph id="ph1">`false`</ph>, the <ph id="ph2">`compatibleNamespace`</ph> parameter output might have the same value as the <ph id="ph3">`xamlNamespace`</ph> input.</source>
          <target state="translated">如果不发现任何其他兼容的命名空间，并且此方法返回<ph id="ph1">`false`</ph>、<ph id="ph2">`compatibleNamespace`</ph>参数输出可能具有相同的值作为<ph id="ph3">`xamlNamespace`</ph>输入。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
          <source><ph id="ph1">&lt;paramref name="xamlNamespace" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xamlNamespace" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>