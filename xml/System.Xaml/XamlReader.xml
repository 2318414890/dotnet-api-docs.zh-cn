<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlReader.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b2c5d677ab741eb848cf99fa1f0d969968ff9639.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2c5d677ab741eb848cf99fa1f0d969968ff9639</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlReader">
          <source>Provides base definitions for classes that consume XAML input and produce XAML node streams.</source>
          <target state="translated">为使用 XAML 输入并生成 XAML 节点流的类提供基定义。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> is an abstract class and does not provide implementations or definitions that have a working result for all members.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 是一个抽象类，不提供实现或定义具有工作结果的所有成员。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Members that do have an implementation in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> are noted in the remarks for that member.</source>
          <target state="translated">在具有实现的成员<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>注释中有该成员说明。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Specifically, <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> has several abstract members that must be implemented, and several virtual members.</source>
          <target state="translated">具体而言，<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>具有多个必须实现的抽象成员和多个虚拟成员。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Of the virtual members, <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> each provide a default implementation that is appropriate for most cases.</source>
          <target state="translated">虚拟成员、<ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>每提供适合于大多数情况下的默认实现。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>However, the <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> default implementations rely on other expected behavior of the implementing XAML reader; in particular, they rely on the <ph id="ph3">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> override.</source>
          <target state="translated">但是，<ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>默认实现依赖于实现的 XAML 读取器的其他预期的行为; 具体而言，它们依赖于<ph id="ph3">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>重写。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlReader.Dispose%2A&gt;</ph> is also a virtual member that has a working default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlReader.Dispose%2A&gt;</ph> 也是有一个工作的默认实现的虚拟成员。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>The following two classes are the most relevant and practical derived classes in .NET Framework XAML Services and the System.Xaml assembly:</source>
          <target state="translated">以下两个类是.NET Framework XAML 服务和 System.Xaml 程序集中的一些最相关和实际的派生的类：</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectReader&gt;</ph>, which reads an object graph, such as the active object graph of an application at run time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlObjectReader&gt;</ph>其中读取对象图，如应用程序在运行时的活动对象图。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>, which reads XAML in the form of a XML text file by using a general <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> that loads the file as an intermediary helper class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>使用常规读取的 XML 文本文件形式的 XAML<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>加载该文件作为一个中间的帮助器类。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Other XAML readers from other frameworks include <ph id="ph1">&lt;xref:System.Windows.Baml2006.Baml2006Reader&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.Debugger.XamlDebuggerXmlReader&gt;</ph>.</source>
          <target state="translated">从其他框架其他 XAML 读取器包括<ph id="ph1">&lt;xref:System.Windows.Baml2006.Baml2006Reader&gt;</ph>和<ph id="ph2">&lt;xref:System.Activities.Debugger.XamlDebuggerXmlReader&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> differs from <ph id="ph2">[!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)]</ph> and <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph> design principles because <ph id="ph4">&lt;xref:System.Xaml.XamlReader&gt;</ph> does not have a <ph id="ph5">`Create`</ph> method to return underlying default XAML reader implementations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 不同于<ph id="ph2">[!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)]</ph>和<ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph>设计原则，因为<ph id="ph4">&lt;xref:System.Xaml.XamlReader&gt;</ph>没有<ph id="ph5">`Create`</ph>方法以返回基础的默认 XAML 读取器实现。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>You must instead instantiate specific derived XAML reader classes by calling their constructors or other class-specific helper APIs.</source>
          <target state="translated">通过调用其构造函数或其他特定于类的帮助器 Api，你必须改为实例化特定派生的 XAML 读取器类。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Subtree Readers</source>
          <target state="translated">子树读取器</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>For the most part, you call <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> API in the context of specific XAML reader classes that derive from <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph>.</source>
          <target state="translated">大多数情况下，调用<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>派生自特定 XAML 读取器类的上下文中的 API <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>However, in one particular case, you access <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> API on a practical XAML reader instance that is not public and not derived from <ph id="ph2">&lt;xref:System.Xaml.XamlObjectReader&gt;</ph> or <ph id="ph3">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>.</source>
          <target state="translated">但是，在一个特定的情况下，你访问<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>API，在不是公用的且不派生自的实际 XAML 读取器实例<ph id="ph2">&lt;xref:System.Xaml.XamlObjectReader&gt;</ph>或<ph id="ph3">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>This case is when you call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>, which returns a <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> instance.</source>
          <target state="translated">在调用时，这种情况下是<ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>，它将返回<ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph>实例。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>In the default implementation, the <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> that is returned by this API is an internal class.</source>
          <target state="translated">在默认实现中， <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> ，它是返回的此 API 是一个内部的类。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> obtained for subtree reading has valid actions for APIs such as <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>, and those actions are based on the parent reader class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>获取子树读取具有有效的 Api 操作如<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>，并且这些操作基于父读取器类。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>This design enables the internal class to track the frame level where the subtree was entered.</source>
          <target state="translated">此设计允许内部的类，以跟踪子树输入其中的帧级别。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>The acting subtree <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> makes sure that if the current node position is moved beyond the bounds of the subtree, the specific subtree reader reports end-of-file or <ph id="ph2">`null`</ph> at the current node.</source>
          <target state="translated">操作子树<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>可确保，如果当前节点位置移动到子树的边界之外，特定的子树读取器报告文件尾或<ph id="ph2">`null`</ph>在当前节点。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Notes about subtree reader usage are included on certain <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> APIs.</source>
          <target state="translated">有关子树读取器使用情况的说明包括对某些<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>Api。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.#ctor">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 类。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Close">
          <source>Closes the XAML node stream.</source>
          <target state="translated">关闭 XAML 节点流。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Close">
          <source>In the base implementation, calling <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Close%2A&gt;</ph> calls <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Dispose%2A&gt;</ph> with the <ph id="ph3">`isDisposing`</ph> parameter as <ph id="ph4">`true`</ph>.</source>
          <target state="translated">在基实现中，调用<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Close%2A&gt;</ph>调用<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Dispose%2A&gt;</ph>与<ph id="ph3">`isDisposing`</ph>参数作为<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release the managed resources; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示释放托管资源；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>, and optionally, releases the managed resources.</source>
          <target state="translated">释放由 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 占用的非托管资源，也可以选择释放托管资源。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
          <source>You must call the base class to get <ph id="ph1">&lt;xref:System.Xaml.XamlReader.IsDisposed%2A&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">`true`</ph>.</source>
          <target state="translated">必须调用基的类，以获取<ph id="ph1">&lt;xref:System.Xaml.XamlReader.IsDisposed%2A&gt;</ph> <ph id="ph2"> = </ph> <ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.IsDisposed">
          <source>Gets whether <ph id="ph1">&lt;see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /&gt;</ph> has been called.</source>
          <target state="translated">获取的值指示是否已调用了 <ph id="ph1">&lt;see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.IsDisposed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /&gt;</ph> has been called; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已调用 <ph id="ph2">&lt;see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /&gt;</ph>，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.IsEof">
          <source>When implemented in a derived class, gets a value that reports whether the reader position is at end-of-file.</source>
          <target state="translated">在派生类中实现时，获取一个值，该值报告读取器位置是否位于文件结尾。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.IsEof">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the position is at the conceptual end-of-file of the XAML node stream; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果位置在 XAML 节点流的概念上的文件末尾，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.IsEof">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.IsEof%2A&gt;</ph>, with behavior that correctly reflects the bounds of the entered subtree.</source>
          <target state="translated">子树读取器可以调用<ph id="ph1">&lt;xref:System.Xaml.XamlReader.IsEof%2A&gt;</ph>，正确地反映了输入的子树的边界的行为。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.IsEof">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">有关详细信息，请参阅中的"子树读取器"一节<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>，或请参阅<ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.Member">
          <source>When implemented in a derived class, gets the current member at the reader position, if the reader position is on a <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph>.</source>
          <target state="translated">在派生类中实现时，如果读取器位置在 <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph> 上，则获取位于读取器位置处的当前成员。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Member">
          <source>The current member; or <ph id="ph1">&lt;see langword="null" /&gt;</ph>, if the reader position is not on a member.</source>
          <target state="translated">当前成员；如果读取器位置不在成员上，则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Member">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Member%2A&gt;</ph>, with behavior restrictions.</source>
          <target state="translated">子树读取器可以调用<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Member%2A&gt;</ph>，有行为限制。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Member">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">有关详细信息，请参阅中的"子树读取器"一节<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>，或请参阅<ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.Namespace">
          <source>When implemented in a derived class, gets the XAML namespace information from the current node.</source>
          <target state="translated">在派生类中实现时，从当前节点中获取 XAML 命名空间信息。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Namespace">
          <source>The XAML namespace information, if it is available; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果可用，则为当前节点中的 XAML 命名空间信息；否则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Namespace">
          <source>The intended design of this API is to return a non-null result only if the <ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph> of the current node is <ph id="ph2">&lt;xref:System.Xaml.XamlNodeType.NamespaceDeclaration&gt;</ph>.</source>
          <target state="translated">此 API 的预期的设计是返回非 null 结果仅当<ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>的当前节点是<ph id="ph2">&lt;xref:System.Xaml.XamlNodeType.NamespaceDeclaration&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Namespace">
          <source>The property does not report the XAML namespace that applies to objects or members in a general scoping sense, as interpreted under a XAML schema context.</source>
          <target state="translated">属性不会报告适用于成员在常规的作用域意义上或对象的 XAML 命名空间，根据下的 XAML 架构上下文的说明。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Namespace">
          <source>Your application must provide a means to cache information for the acting XAML namespace as it traverses XAML nodes, if you need that information in a manner other than how the XAML schema context reports it to a writer.</source>
          <target state="translated">你的应用程序必须提供有关操作的缓存信息的一种手段 XAML 命名空间遍历 XAML 节点时，如果你需要该信息以外的 XAML 架构上下文如何到编写器报告它的方式。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Namespace">
          <source>See <ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader.Namespace%2A&gt;</ph> for notes on the reference implementation.</source>
          <target state="translated">请参阅<ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader.Namespace%2A&gt;</ph>了解说明的引用实现。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.NodeType">
          <source>When implemented in a derived class, gets the type of the current node.</source>
          <target state="translated">在派生类中实现时，获取当前节点的类型。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.NodeType">
          <source>A value of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlNodeType" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlNodeType" /&gt;</ph> 枚举的一个值。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.NodeType">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>, with behavior restrictions.</source>
          <target state="translated">子树读取器可以调用<ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>，有行为限制。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.NodeType">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">有关详细信息，请参阅中的"子树读取器"一节<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>，或请参阅<ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Read">
          <source>When implemented in a derived class, provides the next XAML node from the source, if a node is available.</source>
          <target state="translated">在派生类中实现时，提供源中的下一个 XAML 节点（如果节点可用）。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Read">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a node is available; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果某节点可用，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Read">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>, with behavior restrictions.</source>
          <target state="translated">子树读取器可以调用<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>，有行为限制。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Read">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">有关详细信息，请参阅中的"子树读取器"一节<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>，或请参阅<ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> that is based on the current <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>, where the returned <ph id="ph3">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> is used to iterate through a subtree of the XAML node structure.</source>
          <target state="translated">返回基于当前 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>，其中返回的 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 用于循环访问 XAML 节点结构。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>A new XAML reader instance for the subtree.</source>
          <target state="translated">子树的新 XAML 读取器实例。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>This method has a default implementation and returns a valid <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>.</source>
          <target state="translated">此方法有一个默认实现，并返回一个有效<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The returned <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> is an internal class that restricts certain <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> actions.</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>是一个内部的类，用于限制某些<ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph>操作。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The restrictions are consistent with the purpose of reading only a dimensioned subtree of a larger source for a XAML node set, and of returning end-of-file or <ph id="ph1">`null`</ph> at the current node when the subtree is exited.</source>
          <target state="translated">限制都与仅读取维度子树的较大源的 XAML 节点集，并返回文件尾的以下目的一致或<ph id="ph1">`null`</ph>在当前节点的子树退出时。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>Generally, you should check the current node from the initial <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> to determine whether you need a subtree reader.</source>
          <target state="translated">通常情况下，应检查当前节点从初始<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>以确定是否需要子树读取器。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>How you check this may be implementation-specific; however, avoid creating multiple subtree readers for every subtree.</source>
          <target state="translated">如何检查这可能是特定于实现的;但是，应避免创建多个子树读取器，用于每个子树。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>In addition, avoid invoking a subtree reader for certain node cases (for example, for <ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.NamespaceDeclaration&gt;</ph>) that cannot contain a subtree of nodes.</source>
          <target state="translated">此外，请避免调用某些节点情况下的子树读取器 (例如，对于<ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.NamespaceDeclaration&gt;</ph>)，不能包含节点的子树。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>After you obtain a subtree reader, you must call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> on it to obtain a current node (or call <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> to obtain a next node).</source>
          <target state="translated">获取子树读取器之后，必须调用<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>于该功能来获取当前节点 (或调用<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>以获取下一个节点)。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>You do not automatically obtain an initial node position from the subtree reader when you create it.</source>
          <target state="translated">未自动获得的初始节点位置从子树读取器创建它时。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The reader you obtain by calling <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> from this default implementation is an internal class.</source>
          <target state="translated">通过调用获取读取器<ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>此默认实现是一个内部的类。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The internal class bases its behavior on the <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> implementation that is being used when <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> is called.</source>
          <target state="translated">内部类的行为基于<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>实现正在使用时<ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The purpose of the internal class is to wrap the <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> and general traversal behavior.</source>
          <target state="translated">内部类的用途是将<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>和常规遍历行为。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The traversal stays within the intended subtree by keeping track of <ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.StartMember&gt;</ph><ph id="ph2">/</ph><ph id="ph3">&lt;xref:System.Xaml.XamlNodeType.EndMember&gt;</ph> pairs or <ph id="ph4">&lt;xref:System.Xaml.XamlNodeType.StartObject&gt;</ph><ph id="ph5">/</ph><ph id="ph6">&lt;xref:System.Xaml.XamlNodeType.EndObject&gt;</ph> pairs.</source>
          <target state="translated">遍历保持在预期的子树内通过跟踪<ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.StartMember&gt;</ph> <ph id="ph2">/</ph> <ph id="ph3">&lt;xref:System.Xaml.XamlNodeType.EndMember&gt;</ph>对或<ph id="ph4">&lt;xref:System.Xaml.XamlNodeType.StartObject&gt;</ph> <ph id="ph5">/</ph> <ph id="ph6">&lt;xref:System.Xaml.XamlNodeType.EndObject&gt;</ph>对。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>It also correctly returns <ph id="ph1">`false`</ph> for <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> and <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlReader.IsEof%2A&gt;</ph> when the reader is at the end of the subtree, as defined by its entry point.</source>
          <target state="translated">它还正确返回<ph id="ph1">`false`</ph>为<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>和<ph id="ph3">`true`</ph>为<ph id="ph4">&lt;xref:System.Xaml.XamlReader.IsEof%2A&gt;</ph>当读取器末尾的子树中，定义其入口点。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>In general, you assume that any <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> API you call from a subtree reader has the same implementation as the overall <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> except for the traversal bounding behavior.</source>
          <target state="translated">一般情况下，您假定任何<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>从子树读取器调用的 API 具有相同的实现整体<ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph>除外遍历绑定行为。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>However, <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> is virtual.</source>
          <target state="translated">但是，<ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>是虚拟的。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>Therefore, a specific <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> implementation can provide behavior that differs from the <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> internal wrapper behavior; and a <ph id="ph3">&lt;xref:System.Xaml.XamlReader&gt;</ph> implementation can even disable subtree reader functionality by returning <ph id="ph4">&lt;xref:System.NotImplementedException&gt;</ph> or other exceptions.</source>
          <target state="translated">因此，特定<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>实现可以提供与不同的行为<ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph>内部包装行为; 和<ph id="ph3">&lt;xref:System.Xaml.XamlReader&gt;</ph>实现甚至可以通过返回禁用子树读取器功能<ph id="ph4">&lt;xref:System.NotImplementedException&gt;</ph>或其他异常。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.SchemaContext">
          <source>When implemented in a derived class, gets an object that provides XAML schema context information for the information set.</source>
          <target state="translated">在派生类中实现时，获取一个对象，该对象提供信息集的 XAML 架构上下文信息。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.SchemaContext">
          <source>An object that provides XAML schema context information for the information set.</source>
          <target state="translated">一个对象，该对象提供信息集的 XAML 架构上下文信息。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Skip">
          <source>Skips the current node and advances the reader position to the next node.</source>
          <target state="translated">跳过当前节点并将读取器位置推进到下一个节点。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>Once skipped, <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> is called by the default <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> implementation.</source>
          <target state="translated">一次跳过，<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>默认情况下调用<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>实现。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>You typically do not call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> in sequence.</source>
          <target state="translated">通常不调用<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>序列中。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>In the default <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> implementation, different actions are taken depending on which <ph id="ph2">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph> the reader position is currently on.</source>
          <target state="translated">默认情况下<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>实现，具体取决于采取不同的操作<ph id="ph2">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>读取器位置是当前开机。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>If the reader position is currently on a <ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.StartMember&gt;</ph> or <ph id="ph2">&lt;xref:System.Xaml.XamlNodeType.StartObject&gt;</ph>, that member or object is skipped.</source>
          <target state="translated">如果读取器位置是当前位于<ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.StartMember&gt;</ph>或<ph id="ph2">&lt;xref:System.Xaml.XamlNodeType.StartObject&gt;</ph>，将跳过成员或对象。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>For other <ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph> values, no action is taken other than calling <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> from the current position.</source>
          <target state="translated">对于其他<ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>值，不执行任何操作之外调用<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>从当前位置。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>, with behavior restrictions.</source>
          <target state="translated">子树读取器可以调用<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>，有行为限制。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">有关详细信息，请参阅中的"子树读取器"一节<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>，或请参阅<ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>The node tree behavior of <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType&gt;</ph> is based on the XML equivalent <ph id="ph2">&lt;xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">节点树行为<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType&gt;</ph>基于 XML 等效<ph id="ph2">&lt;xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>Based on the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType&gt;</ph> behavior equivalence, <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType&gt;</ph> skips the node and its subtree, not just the single entry node.</source>
          <target state="translated">基于<ph id="ph1">&lt;xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType&gt;</ph>行为等效性，<ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType&gt;</ph>跳过此节点及其子树，而不仅仅是一项节点。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.System#IDisposable#Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> class.</source>
          <target state="translated">释放 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 类的当前实例所使用的所有资源。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.Type">
          <source>When implemented in a derived class, gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the current node.</source>
          <target state="translated">在派生类中实现时，获取当前节点的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Type">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the current node; or <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if the current reader position is not on an object.</source>
          <target state="translated">当前节点的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>；如果当前读取器位置不在对象上，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Type">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Type%2A&gt;</ph>, with behavior restrictions.</source>
          <target state="translated">子树读取器可以调用<ph id="ph1">&lt;xref:System.Xaml.XamlReader.Type%2A&gt;</ph>，有行为限制。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Type">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">有关详细信息，请参阅中的"子树读取器"一节<ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>，或请参阅<ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.Value">
          <source>When implemented in a derived class, gets the value of the current node.</source>
          <target state="translated">在派生类中实现时，获取当前节点的值。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Value">
          <source>The value of the current node; or <ph id="ph1">&lt;see langword="null" /&gt;</ph>, if the current reader position is not on a <ph id="ph2">&lt;see cref="F:System.Xaml.XamlNodeType.Value" /&gt;</ph> node type.</source>
          <target state="translated">当前节点的值；如果当前读取器位置不在 <ph id="ph2">&lt;see cref="F:System.Xaml.XamlNodeType.Value" /&gt;</ph> 节点类型上，则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>