<Type Name="XamlReader" FullName="System.Xaml.XamlReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b2c5d677ab741eb848cf99fa1f0d969968ff9639" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XamlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XamlReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader abstract : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="6eca3-101">为使用 XAML 输入并生成 XAML 节点流的类提供基定义。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6eca3-101">Provides base definitions for classes that consume XAML input and produce XAML node streams.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6eca3-102"><xref:System.Xaml.XamlReader> 是一个抽象类，不提供实现或定义具有工作结果的所有成员。</span><span class="sxs-lookup"><span data-stu-id="6eca3-102"><xref:System.Xaml.XamlReader> is an abstract class and does not provide implementations or definitions that have a working result for all members.</span></span> <span data-ttu-id="6eca3-103">在具有实现的成员<xref:System.Xaml.XamlReader>注释中有该成员说明。</span><span class="sxs-lookup"><span data-stu-id="6eca3-103">Members that do have an implementation in <xref:System.Xaml.XamlReader> are noted in the remarks for that member.</span></span> <span data-ttu-id="6eca3-104">具体而言，<xref:System.Xaml.XamlReader>具有多个必须实现的抽象成员和多个虚拟成员。</span><span class="sxs-lookup"><span data-stu-id="6eca3-104">Specifically, <xref:System.Xaml.XamlReader> has several abstract members that must be implemented, and several virtual members.</span></span>  
  
 <span data-ttu-id="6eca3-105">虚拟成员、<xref:System.Xaml.XamlReader.ReadSubtree%2A>和<xref:System.Xaml.XamlReader.Skip%2A>每提供适合于大多数情况下的默认实现。</span><span class="sxs-lookup"><span data-stu-id="6eca3-105">Of the virtual members, <xref:System.Xaml.XamlReader.ReadSubtree%2A> and <xref:System.Xaml.XamlReader.Skip%2A> each provide a default implementation that is appropriate for most cases.</span></span> <span data-ttu-id="6eca3-106">但是，<xref:System.Xaml.XamlReader.ReadSubtree%2A>和<xref:System.Xaml.XamlReader.Skip%2A>默认实现依赖于实现的 XAML 读取器的其他预期的行为; 具体而言，它们依赖于<xref:System.Xaml.XamlReader.Read%2A>重写。</span><span class="sxs-lookup"><span data-stu-id="6eca3-106">However, the <xref:System.Xaml.XamlReader.ReadSubtree%2A> and <xref:System.Xaml.XamlReader.Skip%2A> default implementations rely on other expected behavior of the implementing XAML reader; in particular, they rely on the <xref:System.Xaml.XamlReader.Read%2A> override.</span></span> <span data-ttu-id="6eca3-107"><xref:System.Xaml.XamlReader.Dispose%2A> 也是有一个工作的默认实现的虚拟成员。</span><span class="sxs-lookup"><span data-stu-id="6eca3-107"><xref:System.Xaml.XamlReader.Dispose%2A> is also a virtual member that has a working default implementation.</span></span>  
  
 <span data-ttu-id="6eca3-108">以下两个类是.NET Framework XAML 服务和 System.Xaml 程序集中的一些最相关和实际的派生的类：</span><span class="sxs-lookup"><span data-stu-id="6eca3-108">The following two classes are the most relevant and practical derived classes in .NET Framework XAML Services and the System.Xaml assembly:</span></span>  
  
-   <span data-ttu-id="6eca3-109"><xref:System.Xaml.XamlObjectReader>其中读取对象图，如应用程序在运行时的活动对象图。</span><span class="sxs-lookup"><span data-stu-id="6eca3-109"><xref:System.Xaml.XamlObjectReader>, which reads an object graph, such as the active object graph of an application at run time.</span></span>  
  
-   <span data-ttu-id="6eca3-110"><xref:System.Xaml.XamlXmlReader>使用常规读取的 XML 文本文件形式的 XAML<xref:System.Xml.XmlReader>加载该文件作为一个中间的帮助器类。</span><span class="sxs-lookup"><span data-stu-id="6eca3-110"><xref:System.Xaml.XamlXmlReader>, which reads XAML in the form of a XML text file by using a general <xref:System.Xml.XmlReader> that loads the file as an intermediary helper class.</span></span>  
  
 <span data-ttu-id="6eca3-111">从其他框架其他 XAML 读取器包括<xref:System.Windows.Baml2006.Baml2006Reader>和<xref:System.Activities.Debugger.XamlDebuggerXmlReader>。</span><span class="sxs-lookup"><span data-stu-id="6eca3-111">Other XAML readers from other frameworks include <xref:System.Windows.Baml2006.Baml2006Reader> and <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.</span></span>  
  
 <span data-ttu-id="6eca3-112"><xref:System.Xaml.XamlReader> 不同于[!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)]和<xref:System.Xml.XmlReader>设计原则，因为<xref:System.Xaml.XamlReader>没有`Create`方法以返回基础的默认 XAML 读取器实现。</span><span class="sxs-lookup"><span data-stu-id="6eca3-112"><xref:System.Xaml.XamlReader> differs from [!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)] and <xref:System.Xml.XmlReader> design principles because <xref:System.Xaml.XamlReader> does not have a `Create` method to return underlying default XAML reader implementations.</span></span> <span data-ttu-id="6eca3-113">通过调用其构造函数或其他特定于类的帮助器 Api，你必须改为实例化特定派生的 XAML 读取器类。</span><span class="sxs-lookup"><span data-stu-id="6eca3-113">You must instead instantiate specific derived XAML reader classes by calling their constructors or other class-specific helper APIs.</span></span>  
  
## <a name="subtree-readers"></a><span data-ttu-id="6eca3-114">子树读取器</span><span class="sxs-lookup"><span data-stu-id="6eca3-114">Subtree Readers</span></span>  
 <span data-ttu-id="6eca3-115">大多数情况下，调用<xref:System.Xaml.XamlReader>派生自特定 XAML 读取器类的上下文中的 API <xref:System.Xaml.XamlReader>。</span><span class="sxs-lookup"><span data-stu-id="6eca3-115">For the most part, you call <xref:System.Xaml.XamlReader> API in the context of specific XAML reader classes that derive from <xref:System.Xaml.XamlReader>.</span></span> <span data-ttu-id="6eca3-116">但是，在一个特定的情况下，你访问<xref:System.Xaml.XamlReader>API，在不是公用的且不派生自的实际 XAML 读取器实例<xref:System.Xaml.XamlObjectReader>或<xref:System.Xaml.XamlXmlReader>。</span><span class="sxs-lookup"><span data-stu-id="6eca3-116">However, in one particular case, you access <xref:System.Xaml.XamlReader> API on a practical XAML reader instance that is not public and not derived from <xref:System.Xaml.XamlObjectReader> or <xref:System.Xaml.XamlXmlReader>.</span></span> <span data-ttu-id="6eca3-117">在调用时，这种情况下是<xref:System.Xaml.XamlReader.ReadSubtree%2A>，它将返回<xref:System.Xaml.XamlReader>实例。</span><span class="sxs-lookup"><span data-stu-id="6eca3-117">This case is when you call <xref:System.Xaml.XamlReader.ReadSubtree%2A>, which returns a <xref:System.Xaml.XamlReader> instance.</span></span> <span data-ttu-id="6eca3-118">在默认实现中， <xref:System.Xaml.XamlReader> ，它是返回的此 API 是一个内部的类。</span><span class="sxs-lookup"><span data-stu-id="6eca3-118">In the default implementation, the <xref:System.Xaml.XamlReader> that is returned by this API is an internal class.</span></span>  
  
 <span data-ttu-id="6eca3-119"><xref:System.Xaml.XamlReader>获取子树读取具有有效的 Api 操作如<xref:System.Xaml.XamlReader.Read%2A>和<xref:System.Xaml.XamlReader.NodeType%2A>，并且这些操作基于父读取器类。</span><span class="sxs-lookup"><span data-stu-id="6eca3-119">The <xref:System.Xaml.XamlReader> obtained for subtree reading has valid actions for APIs such as <xref:System.Xaml.XamlReader.Read%2A> and <xref:System.Xaml.XamlReader.NodeType%2A>, and those actions are based on the parent reader class.</span></span> <span data-ttu-id="6eca3-120">此设计允许内部的类，以跟踪子树输入其中的帧级别。</span><span class="sxs-lookup"><span data-stu-id="6eca3-120">This design enables the internal class to track the frame level where the subtree was entered.</span></span> <span data-ttu-id="6eca3-121">操作子树<xref:System.Xaml.XamlReader>可确保，如果当前节点位置移动到子树的边界之外，特定的子树读取器报告文件尾或`null`在当前节点。</span><span class="sxs-lookup"><span data-stu-id="6eca3-121">The acting subtree <xref:System.Xaml.XamlReader> makes sure that if the current node position is moved beyond the bounds of the subtree, the specific subtree reader reports end-of-file or `null` at the current node.</span></span>  
  
 <span data-ttu-id="6eca3-122">有关子树读取器使用情况的说明包括对某些<xref:System.Xaml.XamlReader>Api。</span><span class="sxs-lookup"><span data-stu-id="6eca3-122">Notes about subtree reader usage are included on certain <xref:System.Xaml.XamlReader> APIs.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectReader" />
    <altmember cref="T:System.Xaml.XamlXmlReader" />
    <altmember cref="T:System.Xaml.XamlReaderSettings" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6eca3-123">初始化 <see cref="T:System.Xaml.XamlReader" /> 类。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-123">Initializes the <see cref="T:System.Xaml.XamlReader" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6eca3-124">关闭 XAML 节点流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-124">Closes the XAML node stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6eca3-125">在基实现中，调用<xref:System.Xaml.XamlReader.Close%2A>调用<xref:System.Xaml.XamlReader.Dispose%2A>与`isDisposing`参数作为`true`。</span><span class="sxs-lookup"><span data-stu-id="6eca3-125">In the base implementation, calling <xref:System.Xaml.XamlReader.Close%2A> calls <xref:System.Xaml.XamlReader.Dispose%2A> with the `isDisposing` parameter as `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="6eca3-126">
            <see langword="true" /> 表示释放托管资源；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-126">
              <see langword="true" /> to release the managed resources; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6eca3-127">释放由 <see cref="T:System.Xaml.XamlReader" /> 占用的非托管资源，也可以选择释放托管资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-127">Releases the unmanaged resources used by the <see cref="T:System.Xaml.XamlReader" />, and optionally, releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6eca3-128">必须调用基的类，以获取<xref:System.Xaml.XamlReader.IsDisposed%2A>  =  `true`。</span><span class="sxs-lookup"><span data-stu-id="6eca3-128">You must call the base class to get <xref:System.Xaml.XamlReader.IsDisposed%2A> = `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6eca3-129">获取的值指示是否已调用了 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-129">Gets whether <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> has been called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6eca3-130">如果已调用 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-130">
              <see langword="true" /> if <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> has been called; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEof">
      <MemberSignature Language="C#" Value="public abstract bool IsEof { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEof" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsEof" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEof As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsEof { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6eca3-131">在派生类中实现时，获取一个值，该值报告读取器位置是否位于文件结尾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-131">When implemented in a derived class, gets a value that reports whether the reader position is at end-of-file.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6eca3-132">如果位置在 XAML 节点流的概念上的文件末尾，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-132">
              <see langword="true" /> if the position is at the conceptual end-of-file of the XAML node stream; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6eca3-133">子树读取器可以调用<xref:System.Xaml.XamlReader.IsEof%2A>，正确地反映了输入的子树的边界的行为。</span><span class="sxs-lookup"><span data-stu-id="6eca3-133">Subtree readers can call <xref:System.Xaml.XamlReader.IsEof%2A>, with behavior that correctly reflects the bounds of the entered subtree.</span></span> <span data-ttu-id="6eca3-134">有关详细信息，请参阅中的"子树读取器"一节<xref:System.Xaml.XamlReader>，或请参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</span><span class="sxs-lookup"><span data-stu-id="6eca3-134">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.IsEof" />
        <altmember cref="P:System.Xaml.XamlXmlReader.IsEof" />
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlMember Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember Member" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Member" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Member As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlMember ^ Member { System::Xaml::XamlMember ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6eca3-135">在派生类中实现时，如果读取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，则获取位于读取器位置处的当前成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-135">When implemented in a derived class, gets the current member at the reader position, if the reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6eca3-136">当前成员；如果读取器位置不在成员上，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-136">The current member; or <see langword="null" />, if the reader position is not on a member.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6eca3-137">子树读取器可以调用<xref:System.Xaml.XamlReader.Member%2A>，有行为限制。</span><span class="sxs-lookup"><span data-stu-id="6eca3-137">Subtree readers can call <xref:System.Xaml.XamlReader.Member%2A>, with behavior restrictions.</span></span> <span data-ttu-id="6eca3-138">有关详细信息，请参阅中的"子树读取器"一节<xref:System.Xaml.XamlReader>，或请参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</span><span class="sxs-lookup"><span data-stu-id="6eca3-138">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Member" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Member" />
        <altmember cref="T:System.Xaml.XamlMember" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.NamespaceDeclaration Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.NamespaceDeclaration Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As NamespaceDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::NamespaceDeclaration ^ Namespace { System::Xaml::NamespaceDeclaration ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.NamespaceDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6eca3-139">在派生类中实现时，从当前节点中获取 XAML 命名空间信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-139">When implemented in a derived class, gets the XAML namespace information from the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6eca3-140">如果可用，则为当前节点中的 XAML 命名空间信息；否则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-140">The XAML namespace information, if it is available; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6eca3-141">此 API 的预期的设计是返回非 null 结果仅当<xref:System.Xaml.XamlReader.NodeType%2A>的当前节点是<xref:System.Xaml.XamlNodeType.NamespaceDeclaration>。</span><span class="sxs-lookup"><span data-stu-id="6eca3-141">The intended design of this API is to return a non-null result only if the <xref:System.Xaml.XamlReader.NodeType%2A> of the current node is <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>.</span></span> <span data-ttu-id="6eca3-142">属性不会报告适用于成员在常规的作用域意义上或对象的 XAML 命名空间，根据下的 XAML 架构上下文的说明。</span><span class="sxs-lookup"><span data-stu-id="6eca3-142">The property does not report the XAML namespace that applies to objects or members in a general scoping sense, as interpreted under a XAML schema context.</span></span> <span data-ttu-id="6eca3-143">你的应用程序必须提供有关操作的缓存信息的一种手段 XAML 命名空间遍历 XAML 节点时，如果你需要该信息以外的 XAML 架构上下文如何到编写器报告它的方式。</span><span class="sxs-lookup"><span data-stu-id="6eca3-143">Your application must provide a means to cache information for the acting XAML namespace as it traverses XAML nodes, if you need that information in a manner other than how the XAML schema context reports it to a writer.</span></span> <span data-ttu-id="6eca3-144">请参阅<xref:System.Xaml.XamlXmlReader.Namespace%2A>了解说明的引用实现。</span><span class="sxs-lookup"><span data-stu-id="6eca3-144">See <xref:System.Xaml.XamlXmlReader.Namespace%2A> for notes on the reference implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Namespace" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xaml.XamlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XamlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlNodeType NodeType { System::Xaml::XamlNodeType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6eca3-145">在派生类中实现时，获取当前节点的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-145">When implemented in a derived class, gets the type of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6eca3-146">
            <see cref="T:System.Xaml.XamlNodeType" /> 枚举的一个值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-146">A value of the <see cref="T:System.Xaml.XamlNodeType" /> enumeration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6eca3-147">子树读取器可以调用<xref:System.Xaml.XamlReader.NodeType%2A>，有行为限制。</span><span class="sxs-lookup"><span data-stu-id="6eca3-147">Subtree readers can call <xref:System.Xaml.XamlReader.NodeType%2A>, with behavior restrictions.</span></span> <span data-ttu-id="6eca3-148">有关详细信息，请参阅中的"子树读取器"一节<xref:System.Xaml.XamlReader>，或请参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</span><span class="sxs-lookup"><span data-stu-id="6eca3-148">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.NodeType" />
        <altmember cref="P:System.Xaml.XamlXmlReader.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Read();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6eca3-149">在派生类中实现时，提供源中的下一个 XAML 节点（如果节点可用）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-149">When implemented in a derived class, provides the next XAML node from the source, if a node is available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6eca3-150">如果某节点可用，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-150">
              <see langword="true" /> if a node is available; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6eca3-151">子树读取器可以调用<xref:System.Xaml.XamlReader.Read%2A>，有行为限制。</span><span class="sxs-lookup"><span data-stu-id="6eca3-151">Subtree readers can call <xref:System.Xaml.XamlReader.Read%2A>, with behavior restrictions.</span></span> <span data-ttu-id="6eca3-152">有关详细信息，请参阅中的"子树读取器"一节<xref:System.Xaml.XamlReader>，或请参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</span><span class="sxs-lookup"><span data-stu-id="6eca3-152">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xaml.XamlXmlReader.Read" />
        <altmember cref="M:System.Xaml.XamlObjectReader.Read" />
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.ReadSubtree" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSubtree () As XamlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlReader ^ ReadSubtree();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6eca3-153">返回基于当前 <see cref="T:System.Xaml.XamlReader" /> 的 <see cref="T:System.Xaml.XamlReader" />，其中返回的 <see cref="T:System.Xaml.XamlReader" /> 用于循环访问 XAML 节点结构。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-153">Returns a <see cref="T:System.Xaml.XamlReader" /> that is based on the current <see cref="T:System.Xaml.XamlReader" />, where the returned <see cref="T:System.Xaml.XamlReader" /> is used to iterate through a subtree of the XAML node structure.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6eca3-154">子树的新 XAML 读取器实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-154">A new XAML reader instance for the subtree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6eca3-155">此方法有一个默认实现，并返回一个有效<xref:System.Xaml.XamlReader>。</span><span class="sxs-lookup"><span data-stu-id="6eca3-155">This method has a default implementation and returns a valid <xref:System.Xaml.XamlReader>.</span></span> <span data-ttu-id="6eca3-156">返回<xref:System.Xaml.XamlReader>是一个内部的类，用于限制某些<xref:System.Xaml.XamlReader>操作。</span><span class="sxs-lookup"><span data-stu-id="6eca3-156">The returned <xref:System.Xaml.XamlReader> is an internal class that restricts certain <xref:System.Xaml.XamlReader> actions.</span></span> <span data-ttu-id="6eca3-157">限制都与仅读取维度子树的较大源的 XAML 节点集，并返回文件尾的以下目的一致或`null`在当前节点的子树退出时。</span><span class="sxs-lookup"><span data-stu-id="6eca3-157">The restrictions are consistent with the purpose of reading only a dimensioned subtree of a larger source for a XAML node set, and of returning end-of-file or `null` at the current node when the subtree is exited.</span></span>  
  
 <span data-ttu-id="6eca3-158">通常情况下，应检查当前节点从初始<xref:System.Xaml.XamlReader.Read%2A>以确定是否需要子树读取器。</span><span class="sxs-lookup"><span data-stu-id="6eca3-158">Generally, you should check the current node from the initial <xref:System.Xaml.XamlReader.Read%2A> to determine whether you need a subtree reader.</span></span> <span data-ttu-id="6eca3-159">如何检查这可能是特定于实现的;但是，应避免创建多个子树读取器，用于每个子树。</span><span class="sxs-lookup"><span data-stu-id="6eca3-159">How you check this may be implementation-specific; however, avoid creating multiple subtree readers for every subtree.</span></span> <span data-ttu-id="6eca3-160">此外，请避免调用某些节点情况下的子树读取器 (例如，对于<xref:System.Xaml.XamlNodeType.NamespaceDeclaration>)，不能包含节点的子树。</span><span class="sxs-lookup"><span data-stu-id="6eca3-160">In addition, avoid invoking a subtree reader for certain node cases (for example, for <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>) that cannot contain a subtree of nodes.</span></span>  
  
 <span data-ttu-id="6eca3-161">获取子树读取器之后，必须调用<xref:System.Xaml.XamlReader.Read%2A>于该功能来获取当前节点 (或调用<xref:System.Xaml.XamlReader.Skip%2A>以获取下一个节点)。</span><span class="sxs-lookup"><span data-stu-id="6eca3-161">After you obtain a subtree reader, you must call <xref:System.Xaml.XamlReader.Read%2A> on it to obtain a current node (or call <xref:System.Xaml.XamlReader.Skip%2A> to obtain a next node).</span></span> <span data-ttu-id="6eca3-162">未自动获得的初始节点位置从子树读取器创建它时。</span><span class="sxs-lookup"><span data-stu-id="6eca3-162">You do not automatically obtain an initial node position from the subtree reader when you create it.</span></span>  
  
 <span data-ttu-id="6eca3-163">通过调用获取读取器<xref:System.Xaml.XamlReader.ReadSubtree%2A>此默认实现是一个内部的类。</span><span class="sxs-lookup"><span data-stu-id="6eca3-163">The reader you obtain by calling <xref:System.Xaml.XamlReader.ReadSubtree%2A> from this default implementation is an internal class.</span></span> <span data-ttu-id="6eca3-164">内部类的行为基于<xref:System.Xaml.XamlReader>实现正在使用时<xref:System.Xaml.XamlReader.ReadSubtree%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="6eca3-164">The internal class bases its behavior on the <xref:System.Xaml.XamlReader> implementation that is being used when <xref:System.Xaml.XamlReader.ReadSubtree%2A> is called.</span></span> <span data-ttu-id="6eca3-165">内部类的用途是将<xref:System.Xaml.XamlReader.Read%2A>和常规遍历行为。</span><span class="sxs-lookup"><span data-stu-id="6eca3-165">The purpose of the internal class is to wrap the <xref:System.Xaml.XamlReader.Read%2A> and general traversal behavior.</span></span> <span data-ttu-id="6eca3-166">遍历保持在预期的子树内通过跟踪<xref:System.Xaml.XamlNodeType.StartMember> / <xref:System.Xaml.XamlNodeType.EndMember>对或<xref:System.Xaml.XamlNodeType.StartObject> / <xref:System.Xaml.XamlNodeType.EndObject>对。</span><span class="sxs-lookup"><span data-stu-id="6eca3-166">The traversal stays within the intended subtree by keeping track of <xref:System.Xaml.XamlNodeType.StartMember>/<xref:System.Xaml.XamlNodeType.EndMember> pairs or <xref:System.Xaml.XamlNodeType.StartObject>/<xref:System.Xaml.XamlNodeType.EndObject> pairs.</span></span> <span data-ttu-id="6eca3-167">它还正确返回`false`为<xref:System.Xaml.XamlReader.Read%2A>和`true`为<xref:System.Xaml.XamlReader.IsEof%2A>当读取器末尾的子树中，定义其入口点。</span><span class="sxs-lookup"><span data-stu-id="6eca3-167">It also correctly returns `false` for <xref:System.Xaml.XamlReader.Read%2A> and `true` for <xref:System.Xaml.XamlReader.IsEof%2A> when the reader is at the end of the subtree, as defined by its entry point.</span></span> <span data-ttu-id="6eca3-168">一般情况下，您假定任何<xref:System.Xaml.XamlReader>从子树读取器调用的 API 具有相同的实现整体<xref:System.Xaml.XamlReader>除外遍历绑定行为。</span><span class="sxs-lookup"><span data-stu-id="6eca3-168">In general, you assume that any <xref:System.Xaml.XamlReader> API you call from a subtree reader has the same implementation as the overall <xref:System.Xaml.XamlReader> except for the traversal bounding behavior.</span></span>  
  
 <span data-ttu-id="6eca3-169">但是，<xref:System.Xaml.XamlReader.ReadSubtree%2A>是虚拟的。</span><span class="sxs-lookup"><span data-stu-id="6eca3-169">However, <xref:System.Xaml.XamlReader.ReadSubtree%2A> is virtual.</span></span> <span data-ttu-id="6eca3-170">因此，特定<xref:System.Xaml.XamlReader>实现可以提供与不同的行为<xref:System.Xaml.XamlReader>内部包装行为; 和<xref:System.Xaml.XamlReader>实现甚至可以通过返回禁用子树读取器功能<xref:System.NotImplementedException>或其他异常。</span><span class="sxs-lookup"><span data-stu-id="6eca3-170">Therefore, a specific <xref:System.Xaml.XamlReader> implementation can provide behavior that differs from the <xref:System.Xaml.XamlReader> internal wrapper behavior; and a <xref:System.Xaml.XamlReader> implementation can even disable subtree reader functionality by returning <xref:System.NotImplementedException> or other exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6eca3-171">在派生类中实现时，获取一个对象，该对象提供信息集的 XAML 架构上下文信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-171">When implemented in a derived class, gets an object that provides XAML schema context information for the information set.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6eca3-172">一个对象，该对象提供信息集的 XAML 架构上下文信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-172">An object that provides XAML schema context information for the information set.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.SchemaContext" />
        <altmember cref="P:System.Xaml.XamlXmlReader.SchemaContext" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Skip();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6eca3-173">跳过当前节点并将读取器位置推进到下一个节点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-173">Skips the current node and advances the reader position to the next node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6eca3-174">一次跳过，<xref:System.Xaml.XamlReader.Read%2A>默认情况下调用<xref:System.Xaml.XamlReader.Skip%2A>实现。</span><span class="sxs-lookup"><span data-stu-id="6eca3-174">Once skipped, <xref:System.Xaml.XamlReader.Read%2A> is called by the default <xref:System.Xaml.XamlReader.Skip%2A> implementation.</span></span> <span data-ttu-id="6eca3-175">通常不调用<xref:System.Xaml.XamlReader.Skip%2A>和<xref:System.Xaml.XamlReader.Read%2A>序列中。</span><span class="sxs-lookup"><span data-stu-id="6eca3-175">You typically do not call <xref:System.Xaml.XamlReader.Skip%2A> and <xref:System.Xaml.XamlReader.Read%2A> in sequence.</span></span>  
  
 <span data-ttu-id="6eca3-176">默认情况下<xref:System.Xaml.XamlReader.Skip%2A>实现，具体取决于采取不同的操作<xref:System.Xaml.XamlReader.NodeType%2A>读取器位置是当前开机。</span><span class="sxs-lookup"><span data-stu-id="6eca3-176">In the default <xref:System.Xaml.XamlReader.Skip%2A> implementation, different actions are taken depending on which <xref:System.Xaml.XamlReader.NodeType%2A> the reader position is currently on.</span></span> <span data-ttu-id="6eca3-177">如果读取器位置是当前位于<xref:System.Xaml.XamlNodeType.StartMember>或<xref:System.Xaml.XamlNodeType.StartObject>，将跳过成员或对象。</span><span class="sxs-lookup"><span data-stu-id="6eca3-177">If the reader position is currently on a <xref:System.Xaml.XamlNodeType.StartMember> or <xref:System.Xaml.XamlNodeType.StartObject>, that member or object is skipped.</span></span> <span data-ttu-id="6eca3-178">对于其他<xref:System.Xaml.XamlReader.NodeType%2A>值，不执行任何操作之外调用<xref:System.Xaml.XamlReader.Read%2A>从当前位置。</span><span class="sxs-lookup"><span data-stu-id="6eca3-178">For other <xref:System.Xaml.XamlReader.NodeType%2A> values, no action is taken other than calling <xref:System.Xaml.XamlReader.Read%2A> from the current position.</span></span>  
  
 <span data-ttu-id="6eca3-179">子树读取器可以调用<xref:System.Xaml.XamlReader.Skip%2A>，有行为限制。</span><span class="sxs-lookup"><span data-stu-id="6eca3-179">Subtree readers can call <xref:System.Xaml.XamlReader.Skip%2A>, with behavior restrictions.</span></span> <span data-ttu-id="6eca3-180">有关详细信息，请参阅中的"子树读取器"一节<xref:System.Xaml.XamlReader>，或请参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</span><span class="sxs-lookup"><span data-stu-id="6eca3-180">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 <span data-ttu-id="6eca3-181">节点树行为<xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType>基于 XML 等效<xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6eca3-181">The node tree behavior of <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> is based on the XML equivalent <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6eca3-182">基于<xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>行为等效性，<xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType>跳过此节点及其子树，而不仅仅是一项节点。</span><span class="sxs-lookup"><span data-stu-id="6eca3-182">Based on the <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType> behavior equivalence, <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> skips the node and its subtree, not just the single entry node.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6eca3-183">释放 <see cref="T:System.Xaml.XamlReader" /> 类的当前实例所使用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-183">Releases all resources used by the current instance of the <see cref="T:System.Xaml.XamlReader" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Type" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6eca3-184">在派生类中实现时，获取当前节点的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-184">When implemented in a derived class, gets the <see cref="T:System.Xaml.XamlType" /> of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6eca3-185">当前节点的 <see cref="T:System.Xaml.XamlType" />；如果当前读取器位置不在对象上，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-185">The <see cref="T:System.Xaml.XamlType" /> of the current node; or <see langword="null" />, if the current reader position is not on an object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6eca3-186">子树读取器可以调用<xref:System.Xaml.XamlReader.Type%2A>，有行为限制。</span><span class="sxs-lookup"><span data-stu-id="6eca3-186">Subtree readers can call <xref:System.Xaml.XamlReader.Type%2A>, with behavior restrictions.</span></span> <span data-ttu-id="6eca3-187">有关详细信息，请参阅中的"子树读取器"一节<xref:System.Xaml.XamlReader>，或请参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</span><span class="sxs-lookup"><span data-stu-id="6eca3-187">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Type" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Type" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6eca3-188">在派生类中实现时，获取当前节点的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-188">When implemented in a derived class, gets the value of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6eca3-189">当前节点的值；如果当前读取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 节点类型上，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6eca3-189">The value of the current node; or <see langword="null" />, if the current reader position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" /> node type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Value" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Value" />
      </Docs>
    </Member>
  </Members>
</Type>