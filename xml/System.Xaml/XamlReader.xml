<Type Name="XamlReader" FullName="System.Xaml.XamlReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="361d6f6e42e4a0ec79f9b0006b2e2dd2f40184d4" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46661449" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XamlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XamlReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type XamlReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>为使用 XAML 输入并生成 XAML 节点流的类提供基定义。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlReader> 是一个抽象类，不提供实现或定义的所有成员的工作结果。 成员中具有实现的<xref:System.Xaml.XamlReader>记下注释中的该成员。 具体而言，<xref:System.Xaml.XamlReader>具有几个必须实现的抽象成员和多个虚拟成员。  
  
 虚拟成员<xref:System.Xaml.XamlReader.ReadSubtree%2A>和<xref:System.Xaml.XamlReader.Skip%2A>每个提供适用于大多数情况下的默认实现。 但是，<xref:System.Xaml.XamlReader.ReadSubtree%2A>并<xref:System.Xaml.XamlReader.Skip%2A>的默认实现依赖于实现的 XAML 读取器的其他预期的行为; 具体而言，它们依赖于<xref:System.Xaml.XamlReader.Read%2A>重写。 <xref:System.Xaml.XamlReader.Dispose%2A> 也是有一个工作的默认实现的虚拟成员。  
  
 以下两个类是在.NET Framework XAML 服务和 System.Xaml 程序集最密切且最实用的派生的类：  
  
-   <xref:System.Xaml.XamlObjectReader>其中读取对象图，如在运行时的应用程序的活动对象图。  
  
-   <xref:System.Xaml.XamlXmlReader>其中通过使用一种通用读取 XAML 形式的 XML 文本文件<xref:System.Xml.XmlReader>加载该文件作为中间帮助器类。  
  
 其他 XAML 读取器的其他框架包括<xref:System.Windows.Baml2006.Baml2006Reader>和<xref:System.Activities.Debugger.XamlDebuggerXmlReader>。  
  
 <xref:System.Xaml.XamlReader> 不同于[!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)]并<xref:System.Xml.XmlReader>设计原则，因为<xref:System.Xaml.XamlReader>没有`Create`方法以返回 XAML 读取器实现的基础的默认值。 通过调用其构造函数或其他特定于类的帮助器 Api，你必须改为实例化特定派生的 XAML 读取器类。  
  
## <a name="subtree-readers"></a>子树读取器  
 大多数情况下，调用<xref:System.Xaml.XamlReader>派生自特定 XAML 读取器类的上下文中的 API <xref:System.Xaml.XamlReader>。 但是，在一个特定的情况下，你访问<xref:System.Xaml.XamlReader>API 对实际的 XAML 读取器实例不是公共的和不派生自<xref:System.Xaml.XamlObjectReader>或<xref:System.Xaml.XamlXmlReader>。 这种情况下在调用时处于<xref:System.Xaml.XamlReader.ReadSubtree%2A>，它将返回<xref:System.Xaml.XamlReader>实例。 在默认实现中， <xref:System.Xaml.XamlReader> ，它是此 API 返回的是一个内部类。  
  
 <xref:System.Xaml.XamlReader>获取的子树读取有有效的 Api 操作，如<xref:System.Xaml.XamlReader.Read%2A>和<xref:System.Xaml.XamlReader.NodeType%2A>，并且这些操作基于父读取器类。 此设计使要跟踪其中输入子树的框架级别的内部类。 操作子树<xref:System.Xaml.XamlReader>可确保，如果当前节点的位置移动到的子树的边界以外，特定子树读取器报告文件结尾或`null`在当前节点。  
  
 有关子树读取器使用情况的说明包含在特定<xref:System.Xaml.XamlReader>Api。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectReader" />
    <altmember cref="T:System.Xaml.XamlXmlReader" />
    <altmember cref="T:System.Xaml.XamlReaderSettings" />
    <related type="Article" href="http://msdn.microsoft.com/library/7c11abec-1075-474c-9d9b-778e5dab21c3">了解 XAML 节点流结构和概念</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xaml.XamlReader" /> 类。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="xamlReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭 XAML 节点流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在基实现中，调用<xref:System.Xaml.XamlReader.Close%2A>调用<xref:System.Xaml.XamlReader.Dispose%2A>与`isDisposing`作为参数`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="xamlReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> 表示释放托管资源；否则为 <see langword="false" />。</param>
        <summary>释放由 <see cref="T:System.Xaml.XamlReader" /> 占用的非托管资源，也可以选择释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须调用基类以获取<xref:System.Xaml.XamlReader.IsDisposed%2A>  =  `true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Xaml.XamlReader.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取的值指示是否已调用了 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />。</summary>
        <value>如果已调用 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEof">
      <MemberSignature Language="C#" Value="public abstract bool IsEof { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEof" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsEof" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEof As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsEof { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEof : bool" Usage="System.Xaml.XamlReader.IsEof" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在派生类中实现时，获取一个值，该值报告读取器位置是否位于文件结尾。</summary>
        <value>如果位置在 XAML 节点流的概念上的文件末尾，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 子树读取器可以调用<xref:System.Xaml.XamlReader.IsEof%2A>，与行为是否正确反映了输入的子树的边界。 有关详细信息，请参阅中的"子树读取器"部分<xref:System.Xaml.XamlReader>，或参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.IsEof" />
        <altmember cref="P:System.Xaml.XamlXmlReader.IsEof" />
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlMember Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember Member" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Member" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Member As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlMember ^ Member { System::Xaml::XamlMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Member : System.Xaml.XamlMember" Usage="System.Xaml.XamlReader.Member" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在派生类中实现时，如果读取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，则获取位于读取器位置处的当前成员。</summary>
        <value>当前成员；如果读取器位置不在成员上，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 子树读取器可以调用<xref:System.Xaml.XamlReader.Member%2A>，行为限制。 有关详细信息，请参阅中的"子树读取器"部分<xref:System.Xaml.XamlReader>，或参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Member" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Member" />
        <altmember cref="T:System.Xaml.XamlMember" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.NamespaceDeclaration Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.NamespaceDeclaration Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As NamespaceDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::NamespaceDeclaration ^ Namespace { System::Xaml::NamespaceDeclaration ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xaml.NamespaceDeclaration" Usage="System.Xaml.XamlReader.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.NamespaceDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在派生类中实现时，从当前节点中获取 XAML 命名空间信息。</summary>
        <value>如果可用，则为当前节点中的 XAML 命名空间信息；否则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 API 的预期的设计是要返回非 null 结果才<xref:System.Xaml.XamlReader.NodeType%2A>的当前节点是<xref:System.Xaml.XamlNodeType.NamespaceDeclaration>。 属性不会报告适用于对象或常规范围意义中的成员的 XAML 命名空间，根据说明下的 XAML 架构上下文。 你的应用程序必须提供一种方式来使其执行操作的缓存信息 XAML 命名空间会遍历 XAML 节点，如果你需要这些信息以外的 XAML 架构上下文如何到编写器报告它的方式。 请参阅<xref:System.Xaml.XamlXmlReader.Namespace%2A>了解说明的引用实现。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Namespace" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xaml.XamlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XamlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlNodeType NodeType { System::Xaml::XamlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xaml.XamlNodeType" Usage="System.Xaml.XamlReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在派生类中实现时，获取当前节点的类型。</summary>
        <value>
          <see cref="T:System.Xaml.XamlNodeType" /> 枚举的一个值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 子树读取器可以调用<xref:System.Xaml.XamlReader.NodeType%2A>，行为限制。 有关详细信息，请参阅中的"子树读取器"部分<xref:System.Xaml.XamlReader>，或参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.NodeType" />
        <altmember cref="P:System.Xaml.XamlXmlReader.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Read();" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; bool" Usage="xamlReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中实现时，提供源中的下一个 XAML 节点（如果节点可用）。</summary>
        <returns>如果某节点可用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 子树读取器可以调用<xref:System.Xaml.XamlReader.Read%2A>，行为限制。 有关详细信息，请参阅中的"子树读取器"部分<xref:System.Xaml.XamlReader>，或参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xaml.XamlXmlReader.Read" />
        <altmember cref="M:System.Xaml.XamlObjectReader.Read" />
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.ReadSubtree" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSubtree () As XamlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlReader ^ ReadSubtree();" />
      <MemberSignature Language="F#" Value="abstract member ReadSubtree : unit -&gt; System.Xaml.XamlReader&#xA;override this.ReadSubtree : unit -&gt; System.Xaml.XamlReader" Usage="xamlReader.ReadSubtree " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回基于当前 <see cref="T:System.Xaml.XamlReader" /> 的 <see cref="T:System.Xaml.XamlReader" />，其中返回的 <see cref="T:System.Xaml.XamlReader" /> 用于循环访问 XAML 节点结构。</summary>
        <returns>子树的新 XAML 读取器实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法具有默认实现，并返回一个有效<xref:System.Xaml.XamlReader>。 返回<xref:System.Xaml.XamlReader>是一个内部类，用于限制某些<xref:System.Xaml.XamlReader>操作。 限制是一致、 目的在于读取仅划分维度的子树的较大源的 XAML 节点集，返回文件尾或`null`在当前节点的子树退出时。  
  
 通常情况下，应检查当前节点从初始<xref:System.Xaml.XamlReader.Read%2A>以确定是否需要子树读取器。 如何检查这可能是特定于实现的;但是，避免创建多个为每个子树的子树读取器。 此外，请避免调用某些节点情况下的子树读取器 (例如，对于<xref:System.Xaml.XamlNodeType.NamespaceDeclaration>)，不能包含节点的子树。  
  
 获取子树读取器之后，必须调用<xref:System.Xaml.XamlReader.Read%2A>它以获取当前节点 (或调用<xref:System.Xaml.XamlReader.Skip%2A>以获取下一个节点)。 未自动获得初始节点位置从子树读取器时创建它。  
  
 读取器通过调用获取<xref:System.Xaml.XamlReader.ReadSubtree%2A>从此默认实现是一个内部类。 内部类的行为基于<xref:System.Xaml.XamlReader>实现，它正在使用时<xref:System.Xaml.XamlReader.ReadSubtree%2A>调用。 内部类的目的是包装<xref:System.Xaml.XamlReader.Read%2A>和常规遍历行为。 遍历返回的预期的子树内保持通过跟踪<xref:System.Xaml.XamlNodeType.StartMember> / <xref:System.Xaml.XamlNodeType.EndMember>对或<xref:System.Xaml.XamlNodeType.StartObject> / <xref:System.Xaml.XamlNodeType.EndObject>对。 也可以正确返回`false`有关<xref:System.Xaml.XamlReader.Read%2A>并`true`为<xref:System.Xaml.XamlReader.IsEof%2A>当读取器末尾的子树中，由其入口点定义。 一般情况下，您假定任何<xref:System.Xaml.XamlReader>API 从子树读取器调用具有相同的实现作为整体<xref:System.Xaml.XamlReader>除外遍历绑定行为。  
  
 但是，<xref:System.Xaml.XamlReader.ReadSubtree%2A>是虚拟的。 因此，特定于<xref:System.Xaml.XamlReader>实现可以提供与不同的行为<xref:System.Xaml.XamlReader>内部包装的行为; 和一个<xref:System.Xaml.XamlReader>实现甚至可以禁用的子树读取器功能通过返回<xref:System.NotImplementedException>或其他异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlReader.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在派生类中实现时，获取一个对象，该对象提供信息集的 XAML 架构上下文信息。</summary>
        <value>一个对象，该对象提供信息集的 XAML 架构上下文信息。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.SchemaContext" />
        <altmember cref="P:System.Xaml.XamlXmlReader.SchemaContext" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Skip();" />
      <MemberSignature Language="F#" Value="abstract member Skip : unit -&gt; unit&#xA;override this.Skip : unit -&gt; unit" Usage="xamlReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>跳过当前节点并将读取器位置推进到下一个节点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一次跳过<xref:System.Xaml.XamlReader.Read%2A>默认情况下调用<xref:System.Xaml.XamlReader.Skip%2A>实现。 通常不调用<xref:System.Xaml.XamlReader.Skip%2A>和<xref:System.Xaml.XamlReader.Read%2A>序列中。  
  
 在默认<xref:System.Xaml.XamlReader.Skip%2A>实现，具体取决于执行不同操作<xref:System.Xaml.XamlReader.NodeType%2A>读取器位置是目前已打开。 如果读取器位置当前所在<xref:System.Xaml.XamlNodeType.StartMember>或<xref:System.Xaml.XamlNodeType.StartObject>，将跳过成员或对象。 对于其他<xref:System.Xaml.XamlReader.NodeType%2A>值，不执行任何操作之外调用<xref:System.Xaml.XamlReader.Read%2A>从当前位置。  
  
 子树读取器可以调用<xref:System.Xaml.XamlReader.Skip%2A>，行为限制。 有关详细信息，请参阅中的"子树读取器"部分<xref:System.Xaml.XamlReader>，或参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。  
  
 节点树行为<xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType>基于的 XML 等效项<xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>。 基于<xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>行为等效性<xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType>跳过此节点及其子树，而不仅仅是单个条目节点。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放 <see cref="T:System.Xaml.XamlReader" /> 类的当前实例所使用的所有资源。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Type" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Xaml.XamlType" Usage="System.Xaml.XamlReader.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在派生类中实现时，获取当前节点的 <see cref="T:System.Xaml.XamlType" />。</summary>
        <value>当前节点的 <see cref="T:System.Xaml.XamlType" />；如果当前读取器位置不在对象上，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 子树读取器可以调用<xref:System.Xaml.XamlReader.Type%2A>，行为限制。 有关详细信息，请参阅中的"子树读取器"部分<xref:System.Xaml.XamlReader>，或参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Type" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Type" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Xaml.XamlReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在派生类中实现时，获取当前节点的值。</summary>
        <value>当前节点的值；如果当前读取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 节点类型上，则为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Value" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Value" />
      </Docs>
    </Member>
  </Members>
</Type>