<Type Name="RouteTable" FullName="System.Web.Routing.RouteTable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="15cb4c22d889ccf0de855db101580c880abf76b8" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30537991" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RouteTable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RouteTable extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Routing.RouteTable" />
  <TypeSignature Language="VB.NET" Value="Public Class RouteTable" />
  <TypeSignature Language="C++ CLI" Value="public ref class RouteTable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>存储应用程序的 URL 路由。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 路由是在用于处理请求，并可以使用动态构造 Url 的 URL 模式。 <xref:System.Web.Routing.RouteTable.Routes%2A>属性是`static`属性 (`Shared`在 Visual Basic 中)，其中包含应用程序，用于指定如何将 URL 请求匹配到将处理该请求的类的所有路由。 若要指定一个路由，你添加到路由定义<xref:System.Web.Routing.RouteTable.Routes%2A>属性。 通常，你将添加到路由<xref:System.Web.Routing.RouteTable.Routes%2A>属性的事件处理程序从`Application_Start`Global.asax 文件中的事件。  
  
 应用程序时 ASP.NET 应用程序处理请求时，循环访问集合中的路由<xref:System.Web.Routing.RouteTable.Routes%2A>属性来查找符合格式的 URL 请求的路由。 你将添加到的路由的顺序<xref:System.Web.Routing.RouteTable.Routes%2A>属性很重要，因为应用程序使用查找集合中的第一个路由，与匹配 URL。  
  
   
  
## Examples  
 下面的示例演示如何将添加<xref:System.Web.Routing.Route>对象传递给<xref:System.Web.Routing.RouteTable.Routes%2A>属性。  
  
 [!code-csharp[System.Web.Routing.RouteTable.Routes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Routing.RouteTable.Routes/cs/Global.asax#1)]
 [!code-vb[System.Web.Routing.RouteTable.Routes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Routing.RouteTable.Routes/vb/Global.asax#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RouteTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Routing.RouteTable.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RouteTable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Routing.RouteTable" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Routes">
      <MemberSignature Language="C#" Value="public static System.Web.Routing.RouteCollection Routes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Routing.RouteCollection Routes" />
      <MemberSignature Language="DocId" Value="P:System.Web.Routing.RouteTable.Routes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Routes As RouteCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Routing::RouteCollection ^ Routes { System::Web::Routing::RouteCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Routing.RouteCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取从 <see cref="T:System.Web.Routing.RouteBase" /> 类派生的对象的集合。</summary>
        <value>包含集合中所有路由的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 路由是在用于处理请求，并可以使用动态构造 Url 的 URL 模式。 <xref:System.Web.Routing.RouteTable.Routes%2A>属性是`static`属性 (`Shared`在 Visual Basic 中)，它表示用于指定如何将 URL 请求匹配到将处理该请求的类的所有对象。 若要指定一个路由，你添加到路由定义<xref:System.Web.Routing.RouteTable.Routes%2A>属性。 通常，你将添加到路由<xref:System.Web.Routing.RouteTable.Routes%2A>属性的事件处理程序从`Application_Start`Global.asax 文件中的事件。  
  
 应用程序时 ASP.NET 应用程序处理请求时，循环访问集合中的路由<xref:System.Web.Routing.RouteTable.Routes%2A>属性来查找符合格式的 URL 请求的路由。 你将添加到的路由的顺序<xref:System.Web.Routing.RouteTable.Routes%2A>属性很重要，因为应用程序集合中使用的第一个路由，与匹配 URL。  
  
   
  
## Examples  
 下面的示例演示如何将添加<xref:System.Web.Routing.Route>对象传递给<xref:System.Web.Routing.RouteTable.Routes%2A>属性。  
  
 [!code-csharp[System.Web.Routing.RouteTable.Routes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Routing.RouteTable.Routes/cs/Global.asax#1)]
 [!code-vb[System.Web.Routing.RouteTable.Routes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Routing.RouteTable.Routes/vb/Global.asax#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>