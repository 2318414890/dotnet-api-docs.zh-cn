<Type Name="PageRouteHandler" FullName="System.Web.Routing.PageRouteHandler">
  <TypeSignature Language="C#" Value="public class PageRouteHandler : System.Web.Routing.IRouteHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PageRouteHandler extends System.Object implements class System.Web.Routing.IRouteHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.Routing.PageRouteHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class PageRouteHandler&#xA;Implements IRouteHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageRouteHandler : System::Web::Routing::IRouteHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.Routing.IRouteHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="d555d-101">提供用于定义如何将 URL 映射到物理文件的属性和方法。</span><span class="sxs-lookup"><span data-stu-id="d555d-101">Provides properties and methods for defining how a URL maps to a physical file.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d555d-102">实例传递<xref:System.Web.Routing.PageRouteHandler>到<xref:System.Web.Routing.Route>为了映射物理文件的 URL 的构造函数。</span><span class="sxs-lookup"><span data-stu-id="d555d-102">You pass an instance of <xref:System.Web.Routing.PageRouteHandler> to the <xref:System.Web.Routing.Route> constructor in order to map a URL of a physical file.</span></span> <span data-ttu-id="d555d-103"><xref:System.Web.Routing.PageRouteHandler>对象指定的物理文件的虚拟路径，并确定是否已选中的实际 URL 的授权规则。</span><span class="sxs-lookup"><span data-stu-id="d555d-103">The <xref:System.Web.Routing.PageRouteHandler> object specifies the virtual path of the physical file and determines whether authorization rules for the physical URL is checked.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Routing.Route" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d555d-104">初始化 <see cref="T:System.Web.Routing.PageRouteHandler" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="d555d-104">Initializes a new instance of the <see cref="T:System.Web.Routing.PageRouteHandler" /> class.</span></span></summary>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageRouteHandler (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Routing.PageRouteHandler.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (virtualPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageRouteHandler(System::String ^ virtualPath);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath"><span data-ttu-id="d555d-105">此 <see cref="P:System.Web.Routing.RouteData.Route" /> 对象的物理文件的虚拟路径。</span><span class="sxs-lookup"><span data-stu-id="d555d-105">The virtual path of the physical file for this <see cref="P:System.Web.Routing.RouteData.Route" /> object.</span></span> <span data-ttu-id="d555d-106">文件必须位于当前应用程序中。</span><span class="sxs-lookup"><span data-stu-id="d555d-106">The file must be located in the current application.</span></span> <span data-ttu-id="d555d-107">因此，路径必须以波形符 (~) 开头。</span><span class="sxs-lookup"><span data-stu-id="d555d-107">Therefore, the path must begin with a tilde (~).</span></span></param>
        <summary><span data-ttu-id="d555d-108">初始化 <see cref="T:System.Web.Routing.PageRouteHandler" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="d555d-108">Initializes a new instance of the <see cref="T:System.Web.Routing.PageRouteHandler" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d555d-109">当你使用此构造函数，<xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="d555d-109">When you use this constructor, the <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> property is set to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d555d-110"><paramref name="virtualPath" /> 参数为 <see langword="null" /> 或为空字符串或不以“~/”开头。</span><span class="sxs-lookup"><span data-stu-id="d555d-110">The <paramref name="virtualPath" /> parameter is <see langword="null" /> or is an empty string or does not start with "~/".</span></span></exception>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageRouteHandler (string virtualPath, bool checkPhysicalUrlAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string virtualPath, bool checkPhysicalUrlAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (virtualPath As String, checkPhysicalUrlAccess As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageRouteHandler(System::String ^ virtualPath, bool checkPhysicalUrlAccess);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="checkPhysicalUrlAccess" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="virtualPath"><span data-ttu-id="d555d-111">此 <see cref="P:System.Web.Routing.RouteData.Route" /> 对象的物理文件的虚拟路径。</span><span class="sxs-lookup"><span data-stu-id="d555d-111">The virtual path of the physical file of this <see cref="P:System.Web.Routing.RouteData.Route" /> object.</span></span> <span data-ttu-id="d555d-112">文件必须位于当前应用程序中。</span><span class="sxs-lookup"><span data-stu-id="d555d-112">The file must be located in the current application.</span></span> <span data-ttu-id="d555d-113">因此，路径必须以波形符 (~) 开头。</span><span class="sxs-lookup"><span data-stu-id="d555d-113">Therefore, the path must begin with a tilde (~).</span></span></param>
        <param name="checkPhysicalUrlAccess"><span data-ttu-id="d555d-114">如果此属性设置为 <see langword="false" />，则授权规则将应用于请求 URL，而非物理页的 URL。</span><span class="sxs-lookup"><span data-stu-id="d555d-114">If this property is set to <see langword="false" />, authorization rules will be applied to the request URL and not to the URL of the physical page.</span></span> <span data-ttu-id="d555d-115">如果此属性设置为 <see langword="true" />，则授权规则将同时应用于请求 URL 和物理页的 URL。</span><span class="sxs-lookup"><span data-stu-id="d555d-115">If this property is set to <see langword="true" />, authorization rules will be applied to both the request URL and to the URL of the physical page.</span></span></param>
        <summary><span data-ttu-id="d555d-116">初始化 <see cref="T:System.Web.Routing.PageRouteHandler" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="d555d-116">Initializes a new instance of the <see cref="T:System.Web.Routing.PageRouteHandler" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d555d-117">默认情况下，<xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>属性是`true`。</span><span class="sxs-lookup"><span data-stu-id="d555d-117">By default, the <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> property is `true`.</span></span> <span data-ttu-id="d555d-118">因此，如果你想要应用到这两个物理页的 URL 和路由 URL 的授权规则，你可以使用<xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29>而不是此构造函数的构造函数。</span><span class="sxs-lookup"><span data-stu-id="d555d-118">Therefore, if you want authorization rules to be applied to both the URL of the physical page and to the route URL, you can use the <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29> constructor instead of this constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d555d-119"><paramref name="virtualPath" /> 参数为 <see langword="null" /> 或为空字符串或不以“~/”开头。</span><span class="sxs-lookup"><span data-stu-id="d555d-119">The <paramref name="virtualPath" /> parameter is <see langword="null" /> or is an empty string or does not start with "~/".</span></span></exception>
        <altmember cref="P:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess" />
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
    <Member MemberName="CheckPhysicalUrlAccess">
      <MemberSignature Language="C#" Value="public bool CheckPhysicalUrlAccess { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckPhysicalUrlAccess" />
      <MemberSignature Language="DocId" Value="P:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckPhysicalUrlAccess As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckPhysicalUrlAccess { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d555d-120">获取一个值，该值确定授权规则是否应用于物理文件的 URL。</span><span class="sxs-lookup"><span data-stu-id="d555d-120">Gets a value that determines whether authorization rules are applied to the physical file's URL.</span></span></summary>
        <value>
          <span data-ttu-id="d555d-121">如果检查授权中是否有与路由关联的物理文件的 URL，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d555d-121"><see langword="true" /> if authorization is checked for the URL of the physical file that is associated with the route; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="d555d-122">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="d555d-122">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d555d-123">你可以设置<xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>当你使用时，属性<xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="d555d-123">You can set the <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> property when you use the <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29> constructor.</span></span>  
  
 <span data-ttu-id="d555d-124">值<xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>属性确定是否<xref:System.Web.Routing.PageRouteHandler>对象将检查安全权限只以路由 URL 或物理页和路由 URL。</span><span class="sxs-lookup"><span data-stu-id="d555d-124">The value of the <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> property determines whether the <xref:System.Web.Routing.PageRouteHandler> object will check security permissions only for the route URL or for both the physical page and the route URL.</span></span>  
  
 <span data-ttu-id="d555d-125">当<xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>属性设置为`true`（这是其默认值），用户必须有权访问的路由 URL 和的实际 URL。</span><span class="sxs-lookup"><span data-stu-id="d555d-125">When the <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> property is set to `true` (which is its default value), a user must have permission to access both the route URL and the physical URL.</span></span> <span data-ttu-id="d555d-126">当<xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>属性设置为`false`，用户要求只有权访问的路由 URL，以及未选中的实际 URL 的权限。</span><span class="sxs-lookup"><span data-stu-id="d555d-126">When the <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> property is set to `false`, a user requires only permission to access the route URL, and permissions for the physical URL are not checked.</span></span>  
  
 <span data-ttu-id="d555d-127">权限定义在 Web.config 文件中，如下面的示例中所示：</span><span class="sxs-lookup"><span data-stu-id="d555d-127">Permissions are defined in the Web.config file, as shown in the following example:</span></span>  
  
```  
<configuration>  
  <location path="categoriespage.aspx">  
    <system.web>  
      <authorization>  
        <allow roles="admin"/>  
        <deny users="*"/>  
      </authorization>  
    </system.web>  
  </location>  
  <location path="category">  
    <system.web>  
      <authorization>  
        <allow users="*"/>  
      </authorization>  
    </system.web>  
  </location>  
</configuration>  
```  
  
 <span data-ttu-id="d555d-128">请求 URL，其中包含有关`Category/food/show`后的域名，如果该路由的 URL 模式受`Category/{action}/{categoryName}`和物理页就是 Categoriespage.aspx，[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]适用在前面的示例通过以下方式之一定义的权限：</span><span class="sxs-lookup"><span data-stu-id="d555d-128">For a request URL that contains `Category/food/show` after the domain name, if the route URL pattern is `Category/{action}/{categoryName}` and the physical page is Categoriespage.aspx, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] applies the permissions defined in the previous example in one of the following ways:</span></span>  
  
-   <span data-ttu-id="d555d-129">如果<xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>属性是`false`，所有用户被都授予访问权限，因为所有的用户都获得访问权限开头的 URL 模式`category`。</span><span class="sxs-lookup"><span data-stu-id="d555d-129">If the <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> property is `false`, all users are granted access, because all users are granted access to the URL pattern that starts with `category`.</span></span>  
  
-   <span data-ttu-id="d555d-130">如果<xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>属性是`true`，则只`admin`用户被授予访问权限。</span><span class="sxs-lookup"><span data-stu-id="d555d-130">If the <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> property is `true`, only `admin` users are granted access.</span></span> <span data-ttu-id="d555d-131">所有用户都有权访问开头的 URL 模式`category`，但仅`admin`用户都有权访问物理页 Categoriespage.aspx。</span><span class="sxs-lookup"><span data-stu-id="d555d-131">All users have access to the URL pattern that begins with `category`, but only `admin` users have access to the physical page Categoriespage.aspx.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
    <Member MemberName="GetHttpHandler">
      <MemberSignature Language="C#" Value="public virtual System.Web.IHttpHandler GetHttpHandler (System.Web.Routing.RequestContext requestContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.IHttpHandler GetHttpHandler(class System.Web.Routing.RequestContext requestContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::IHttpHandler ^ GetHttpHandler(System::Web::Routing::RequestContext ^ requestContext);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Routing.IRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.IHttpHandler</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestContext" Type="System.Web.Routing.RequestContext" />
      </Parameters>
      <Docs>
        <param name="requestContext"><span data-ttu-id="d555d-132">一个对象，用于封装有关请求的信息。</span><span class="sxs-lookup"><span data-stu-id="d555d-132">An object that encapsulates information about the request.</span></span></param>
        <summary><span data-ttu-id="d555d-133">返回用于处理请求的对象。</span><span class="sxs-lookup"><span data-stu-id="d555d-133">Returns the object that processes the request.</span></span></summary>
        <returns><span data-ttu-id="d555d-134">用于处理请求的对象。</span><span class="sxs-lookup"><span data-stu-id="d555d-134">The object that processes the request.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d555d-135"><paramref name="requestContext" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d555d-135">The <paramref name="requestContext" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
    <Member MemberName="GetSubstitutedVirtualPath">
      <MemberSignature Language="C#" Value="public string GetSubstitutedVirtualPath (System.Web.Routing.RequestContext requestContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetSubstitutedVirtualPath(class System.Web.Routing.RequestContext requestContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetSubstitutedVirtualPath(System::Web::Routing::RequestContext ^ requestContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestContext" Type="System.Web.Routing.RequestContext" />
      </Parameters>
      <Docs>
        <param name="requestContext"><span data-ttu-id="d555d-136">一个对象，用于封装有关请求的信息。</span><span class="sxs-lookup"><span data-stu-id="d555d-136">An object that encapsulates information about the request.</span></span></param>
        <summary><span data-ttu-id="d555d-137">在替换操作应用于任何替换参数后返回路由的物理文件的虚拟路径。</span><span class="sxs-lookup"><span data-stu-id="d555d-137">Returns the virtual path of the physical file for the route after substitutions have been applied to any replacement parameters.</span></span></summary>
        <returns><span data-ttu-id="d555d-138">基于路由生成的物理文件的 URL。</span><span class="sxs-lookup"><span data-stu-id="d555d-138">The URL of the physical file that was generated from a route.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d555d-139">如果<xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>值不包含任何替换参数，参数<xref:System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath%2A>方法返回相同的值<xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="d555d-139">If the <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> value does not contain any replacement parameters, the <xref:System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath%2A> method returns the same value as the <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d555d-140"><paramref name="requestContext" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d555d-140">The <paramref name="requestContext" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
    <Member MemberName="VirtualPath">
      <MemberSignature Language="C#" Value="public string VirtualPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string VirtualPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Routing.PageRouteHandler.VirtualPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VirtualPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ VirtualPath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d555d-141">获取与此路由关联的网页的虚拟路径。</span><span class="sxs-lookup"><span data-stu-id="d555d-141">Gets the virtual path of the Web page that is associated with this route.</span></span></summary>
        <value><span data-ttu-id="d555d-142">对任何替换参数应用替换操作前网页的 URL。</span><span class="sxs-lookup"><span data-stu-id="d555d-142">The URL of the Web page, before substitutions have been applied for any replacement parameters.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d555d-143">你设置<xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>中的属性<xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=nameWithType>构造函数或在<xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=nameWithType>构造函数。</span><span class="sxs-lookup"><span data-stu-id="d555d-143">You set the <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> property in the <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=nameWithType> constructor or in the <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=nameWithType> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
  </Members>
</Type>