<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ReflectionPermissionFlag.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59ea8a0435690e232ce077bff445bd216d32b3a29.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ea8a0435690e232ce077bff445bd216d32b3a29</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Permissions.ReflectionPermissionFlag">
          <source>Specifies the permitted use of the <ph id="ph1">&lt;see cref="N:System.Reflection" /&gt;</ph> and <ph id="ph2">&lt;see cref="N:System.Reflection.Emit" /&gt;</ph> namespaces.</source>
          <target state="translated">指定 <ph id="ph1">&lt;see cref="N:System.Reflection" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="N:System.Reflection.Emit" /&gt;</ph> 命名空间的允许用法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Permissions.ReflectionPermissionFlag">
          <source>This enumeration is used by the <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionAttribute&gt;</ph> classes.</source>
          <target state="translated">此枚举由<ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>和<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionAttribute&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Permissions.ReflectionPermissionFlag">
          <source>If no <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> is granted, reflection is allowed on all types and members, but invocation operations are allowed only on visible types and members.</source>
          <target state="translated">如果没有<ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>授予，反射允许所有类型和成员，但都允许仅对可见类型和成员的调用操作。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Permissions.ReflectionPermissionFlag">
          <source>For more information, see <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>反射的安全注意事项<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Permissions.ReflectionPermissionFlag">
          <source>Because <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> can provide access to private class members, we recommend that you grant <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> to Internet code only with the RestrictedMemberAccess flag, and not with any other flags.</source>
          <target state="translated">因为<ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>可以提供访问私有类的成员，我们建议你授予<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>Internet 代码只能与 RestrictedMemberAccess 标志，而不使用任何其他标志。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Permissions.ReflectionPermissionFlag">
          <source>The RestrictedMemberAccess flag is introduced in the <ph id="ph1">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]</ph>.</source>
          <target state="translated">RestrictedMemberAccess 标志在中引入<ph id="ph1">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Permissions.ReflectionPermissionFlag">
          <source>To use this flag, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">若要使用此标志，你的应用程序应面向<ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>或更高版本。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Permissions.ReflectionPermissionFlag">
          <source>AllFlags does not include the RestrictedMemberAccess flag.</source>
          <target state="translated">AllFlags 不包括 RestrictedMemberAccess 标志。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Permissions.ReflectionPermissionFlag">
          <source>To get a mask that includes all flags in this enumeration, you must use the combination of AllFlags with RestrictedMemberAccess.</source>
          <target state="translated">若要获取此枚举中包括所有标志掩码，你必须使用带有 RestrictedMemberAccess AllFlags 的组合。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Permissions.ReflectionPermissionFlag">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]</ph>, the ReflectionEmit flag is no longer required to emit code, unless debug symbols are emitted.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]</ph>，ReflectionEmit 标志不再需要发出的代码，除非发出调试符号。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Permissions.ReflectionPermissionFlag">
          <source>To use this feature, your application should target the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> or later.</source>
          <target state="translated">若要使用此功能，你的应用程序应面向<ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>或更高版本。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Permissions.ReflectionPermissionFlag">
          <source>Starting with the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, the TypeInformation flag is no longer required to reflect on nonpublic types and members; the flag has been marked obsolete.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>，TypeInformation 标志不再需要反映非公共类型和成员; 标志具有已标记为已过时。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Permissions.ReflectionPermissionFlag">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph> enumeration to initialize a new instance of the <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph> class that represents the right to perform restricted member access.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph>枚举初始化的新实例<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph>表示有权执行受限的成员访问权限的类。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Permissions.ReflectionPermissionFlag">
          <source>This example is part of a larger example that is provided for the <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.AllFlags&gt;</ph> class.</source>
          <target state="translated">此示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.AllFlags&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Permissions.ReflectionPermissionFlag">
          <source>For an example that shows how to use the RestrictedMemberAccess flag with Internet code, see <bpt id="p1">[</bpt>Walkthrough: Emitting Code in Partial Trust Scenarios<ept id="p1">](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md)</ept>.</source>
          <target state="translated">有关演示如何使用 RestrictedMemberAccess 标志具有 Internet 的代码示例，请参阅<bpt id="p1">[</bpt>演练： 在部分信任方案中发出代码<ept id="p1">](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md)</ept>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Security.Permissions.ReflectionPermissionFlag.AllFlags">
          <source><ph id="ph1">&lt;see langword="TypeInformation" /&gt;</ph> , <ph id="ph2">&lt;see langword="MemberAccess" /&gt;</ph>, and <ph id="ph3">&lt;see langword="ReflectionEmit" /&gt;</ph> are set.</source>
          <target state="translated">对 <ph id="ph1">&lt;see langword="TypeInformation" /&gt;</ph>、<ph id="ph2">&lt;see langword="MemberAccess" /&gt;</ph> 和 <ph id="ph3">&lt;see langword="ReflectionEmit" /&gt;</ph> 进行了设置。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="F:System.Security.Permissions.ReflectionPermissionFlag.AllFlags">
          <source><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.AllFlags" /&gt;</ph> does not include <ph id="ph2">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.AllFlags" /&gt;</ph> 不包括 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess">
          <source>Invocation operations on all members are allowed, regardless of grant set.</source>
          <target state="translated">无论授予集是什么，都允许在所有成员上进行调用操作。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess">
          <source>If this flag is not set, invocation operations are allowed only on visible members.</source>
          <target state="translated">如果未设置此标志，则只允许在可见成员上进行调用操作。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Security.Permissions.ReflectionPermissionFlag.NoFlags">
          <source>Enumeration of types and members is allowed.</source>
          <target state="translated">允许对类型和成员进行枚举。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="F:System.Security.Permissions.ReflectionPermissionFlag.NoFlags">
          <source>Invocation operations are allowed on visible types and members.</source>
          <target state="translated">允许在可见类型和成员上进行调用操作。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="F:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit">
          <source>Emitting debug symbols is allowed.</source>
          <target state="translated">允许发出调试符号。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="F:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this flag is no longer required to emit code.</source>
          <target state="translated">从 <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> 开始，发出代码时不再需要此标志。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess">
          <source>Restricted member access is provided for partially trusted code.</source>
          <target state="translated">为部分受信任代码提供了受限成员访问。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess">
          <source>Partially trusted code can access nonpublic types and members, but only if the grant set of the partially trusted code includes all permissions in the grant set of the assembly that contains the nonpublic types and members being accessed.</source>
          <target state="translated">部分受信任代码可以访问非公共类型和成员，但前提条件是部分受信任代码的授予集包括程序集（该程序集包含要访问的非公共类型和成员）的授予集内的所有权限。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess">
          <source>This flag is new in the <ph id="ph1">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]</ph>.</source>
          <target state="translated">此标志在 <ph id="ph1">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]</ph> 中是新增标志。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="F:System.Security.Permissions.ReflectionPermissionFlag.TypeInformation">
          <source>This flag is obsolete.</source>
          <target state="translated">此标志已过时。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="F:System.Security.Permissions.ReflectionPermissionFlag.TypeInformation">
          <source>No flags are necessary to enumerate types and members and to examine their metadata.</source>
          <target state="translated">枚举类型和成员以及检验它们的元数据时不需要任何标志。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="F:System.Security.Permissions.ReflectionPermissionFlag.TypeInformation">
          <source>Use <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.NoFlags" /&gt;</ph> instead.</source>
          <target state="translated">请改用 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.NoFlags" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>