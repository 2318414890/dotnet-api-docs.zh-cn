<Type Name="TcpClientChannel" FullName="System.Runtime.Remoting.Channels.Tcp.TcpClientChannel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aeee96253df66e881b33ee50b98538d48888a1c3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30488901" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TcpClientChannel : System.Runtime.Remoting.Channels.IChannel, System.Runtime.Remoting.Channels.IChannelSender, System.Runtime.Remoting.Channels.ISecurableChannel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpClientChannel extends System.Object implements class System.Runtime.Remoting.Channels.IChannel, class System.Runtime.Remoting.Channels.IChannelSender, class System.Runtime.Remoting.Channels.ISecurableChannel" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpClientChannel&#xA;Implements IChannel, IChannelSender, ISecurableChannel" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpClientChannel : System::Runtime::Remoting::Channels::IChannel, System::Runtime::Remoting::Channels::IChannelSender, System::Runtime::Remoting::Channels::ISecurableChannel" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Remoting</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannelSender</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.ISecurableChannel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>为远程调用实现使用 TCP 协议传输消息的客户端信道。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通道跨越远程处理边界 （例如，计算机或应用程序域） 传输消息。 <xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel>类传输使用 TCP 协议的消息。  
  
 .NET Framework 远程处理基础结构使用的通道用于传输远程调用。 当客户端进行到的远程对象调用时，则会将调用序列化到一条消息是由客户端通道发送和接收的服务器信道。 然后，它是反序列化和处理。 任何返回的值是由服务器通道传输和接收的客户端通道。  
  
 若要执行其他处理的消息在客户端中，你可以指定的实现<xref:System.Runtime.Remoting.Channels.IClientChannelSinkProvider>接口处理的所有消息都可通过<xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel>传递。  
  
 默认情况下，<xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel>类使用二进制格式化程序来序列化所有消息。  
  
 A<xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel>对象有关联的配置属性，可以在设置配置文件在运行时 (通过调用静态<xref:System.Runtime.Remoting.RemotingConfiguration.Configure%2A?displayProperty=nameWithType>方法) 或以编程方式 (通过将传递<xref:System.Collections.IDictionary>集合到<xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.%23ctor%2A>构造函数）。 有关这些配置属性的列表，请参阅的文档<xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.%23ctor%2A>。  
  
   
  
## Examples  
 下面的代码示例演示了利用<xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel>类来调用远程类型。  
  
 [!code-cpp[Remoting_TcpInfo#20](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_TcpInfo/CPP/client.cpp#20)]
 [!code-csharp[Remoting_TcpInfo#20](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_TcpInfo/CS/client.cs#20)]  
  
 在上面的示例调用的远程类型由下面的代码定义。  
  
 [!code-cpp[Remoting_TcpInfo#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_TcpInfo/CPP/remotable.cpp#10)]
 [!code-csharp[Remoting_TcpInfo#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_TcpInfo/CS/remotable.cs#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClientChannel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClientChannel();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配置属性<xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel>实例返回此构造函数的所有设置为其默认值。  
  
   
  
## Examples  
 下面的代码示例演示此构造函数的用法。  
  
 [!code-cpp[Remoting_TcpInfo#21](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_TcpInfo/CPP/client.cpp#21)]
 [!code-csharp[Remoting_TcpInfo#21](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_TcpInfo/CS/client.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClientChannel (System.Collections.IDictionary properties, System.Runtime.Remoting.Channels.IClientChannelSinkProvider sinkProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary properties, class System.Runtime.Remoting.Channels.IClientChannelSinkProvider sinkProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (properties As IDictionary, sinkProvider As IClientChannelSinkProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClientChannel(System::Collections::IDictionary ^ properties, System::Runtime::Remoting::Channels::IClientChannelSinkProvider ^ sinkProvider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IClientChannelSinkProvider" />
      </Parameters>
      <Docs>
        <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 集合，它为信道要使用的配置属性指定值。</param>
        <param name="sinkProvider">信道要使用的 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 实现。</param>
        <summary>使用指定的配置属性和接收器初始化 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关通道配置属性的详细信息，请参阅[通道和格式化程序配置属性](http://msdn.microsoft.com/library/226ecf74-ebbd-4ea0-a701-dcf4441deefe)。  
  
 如果不需要接收器功能，设置`sinkProvider`参数`null`。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此构造函数创建<xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel>具有特定的配置属性的对象。  
  
 [!code-cpp[Remoting_TcpAuth#31](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_TcpAuth/CPP/client.cpp#31)]
 [!code-csharp[Remoting_TcpAuth#31](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_TcpAuth/CS/client.cs#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">配置属性的格式设置不正确。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClientChannel (string name, System.Runtime.Remoting.Channels.IClientChannelSinkProvider sinkProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Runtime.Remoting.Channels.IClientChannelSinkProvider sinkProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.#ctor(System.String,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, sinkProvider As IClientChannelSinkProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClientChannel(System::String ^ name, System::Runtime::Remoting::Channels::IClientChannelSinkProvider ^ sinkProvider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IClientChannelSinkProvider" />
      </Parameters>
      <Docs>
        <param name="name">信道的名称。</param>
        <param name="sinkProvider">信道要使用的 <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> 实现。</param>
        <summary>使用指定的名称和接收器初始化 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数设置<xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.ChannelName%2A>属性使用`name`参数。 如果你想要注册多个通道，每个通道都必须具有唯一的名称。  
  
 如果不需要接收器功能，设置`sinkProvider`参数`null`。  
  
   
  
## Examples  
 下面的代码示例显示如何构造<xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel>。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpClientChannel#31](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpClientChannel/CPP/client.cpp#31)]
 [!code-csharp[System.Runtime.Remoting.Channels.Tcp.TcpClientChannel#31](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpClientChannel/CS/client.cs#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelName">
      <MemberSignature Language="C#" Value="public string ChannelName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ChannelName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.ChannelName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ChannelName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前信道的名称。</summary>
        <value>包含信道名称的 <see cref="T:System.String" /> 实例。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个已注册的通道具有一个唯一名称。 该名称用于检索特定通道时调用<xref:System.Runtime.Remoting.Channels.ChannelServices.GetChannel%2A>。  
  
   
  
## Examples  
 下面的代码示例演示了利用此属性。  
  
 [!code-cpp[Remoting_TcpInfo#22](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_TcpInfo/CPP/client.cpp#22)]
 [!code-csharp[Remoting_TcpInfo#22](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_TcpInfo/CS/client.cs#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelPriority">
      <MemberSignature Language="C#" Value="public int ChannelPriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChannelPriority" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.ChannelPriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ChannelPriority { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前信道的优先级。</summary>
        <value>一个整数，表示分配给该信道的优先级。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 优先级控制在其中竞争的客户端连接到给定的终结点; 顺序更高的优先级通道之前较低的优先级通道连接。 默认优先级为 1;允许负的优先级。  
  
   
  
## Examples  
 下面的代码示例演示了利用此属性。  
  
 [!code-cpp[Remoting_TcpInfo#22](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_TcpInfo/CPP/client.cpp#22)]
 [!code-csharp[Remoting_TcpInfo#22](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_TcpInfo/CS/client.cs#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageSink">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink (string url, object remoteChannelData, out string objectURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object remoteChannelData, [out] string&amp; objectURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.CreateMessageSink(System.String,System.Object,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessageSink (url As String, remoteChannelData As Object, ByRef objectURI As String) As IMessageSink" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::Messaging::IMessageSink ^ CreateMessageSink(System::String ^ url, System::Object ^ remoteChannelData, [Runtime::InteropServices::Out] System::String ^ % objectURI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessageSink</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="remoteChannelData" Type="System.Object" />
        <Parameter Name="objectURI" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">新接收器应将消息传递到的 URL。 可以为 <see langword="null" />。</param>
        <param name="remoteChannelData">新接收器将把消息传送到的远程主机的信道数据对象。 可以为 <see langword="null" />。</param>
        <param name="objectURI">此方法返回时，包含新信道消息接收器的 URI，该信道消息接收器将消息传送到指定 URL 或信道数据对象。 此参数未经初始化即被传递。</param>
        <summary>返回将消息传送到指定 URL 或信道数据对象的信道消息接收器。</summary>
        <returns>将消息传递给指定 URL 或信道数据对象的信道消息接收器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.CreateMessageSink%2A>方法返回的通道消息接收器将消息传送到指定的 URL 或通道数据对象。 如果`uri`参数是`null`，`remoteChannelData`用作接收器的目标。 请`url`或`remoteChannelData`参数可以是`null`，但不是两者。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此方法。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpClientChannel#32](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpClientChannel/CPP/client.cpp#32)]
 [!code-csharp[System.Runtime.Remoting.Channels.Tcp.TcpClientChannel#32](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpClientChannel/CS/client.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecured">
      <MemberSignature Language="C#" Value="public bool IsSecured { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecured" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.IsSecured" />
      <MemberSignature Language="VB.NET" Value="Public Property IsSecured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSecured { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个布尔值，该值指示当前信道是否安全</summary>
        <value>一个布尔值，指示当前实例是否安全。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public string Parse (string url, out string objectURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Parse(string url, [out] string&amp; objectURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.Parse(System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Parse (url As String, ByRef objectURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Parse(System::String ^ url, [Runtime::InteropServices::Out] System::String ^ % objectURI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="objectURI" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">从中提取 URI 的 URL。</param>
        <param name="objectURI">当此方法返回时，包含含有远程已知对象的 URI 的 <see cref="T:System.String" /> 实例。 此参数未经初始化即被传递。</param>
        <summary>从指定 URL 提取信道 URI 和远程已知对象 URI。</summary>
        <returns>信道 URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用此方法。  
  
 System.Runtime.Remoting.Channels.Tcp.TcpClientChannel#33  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>