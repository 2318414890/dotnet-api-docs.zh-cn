<Type Name="XPathExpression" FullName="System.Xml.XPath.XPathExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="07444010baa95a07461fa3207a53a21a5cdfe764" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720821" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XPathExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XPathExpression extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XPath.XPathExpression" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XPathExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class XPathExpression abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XPath</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一个类型化的类，表示已编译的 XPath 表达式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类返回的结果作为<xref:System.Xml.XPath.XPathNavigator.Compile%2A>方法<xref:System.Xml.XPath.XPathNavigator>类。 它是到参数<xref:System.Xml.XPath.XPathNavigator.Evaluate%2A>， <xref:System.Xml.XPath.XPathNavigator.Matches%2A>， <xref:System.Xml.XPath.XPathNavigator.Select%2A>，和<xref:System.Xml.XPath.XPathNavigator.SelectSingleNode%2A>方法<xref:System.Xml.XPath.XPathNavigator>类。  
  
   
  
## Examples  
 下面的示例演示如何使用 XPath 返回类型来确定如何处理 XPath 表达式。  
  
 [!code-cpp[XPathExpression.ReturnType#1](~/samples/snippets/cpp/VS_Snippets_Data/XPathExpression.ReturnType/CPP/returntype.cpp#1)]
 [!code-csharp[XPathExpression.ReturnType#1](~/samples/snippets/csharp/VS_Snippets_Data/XPathExpression.ReturnType/CS/returntype.cs#1)]
 [!code-vb[XPathExpression.ReturnType#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XPathExpression.ReturnType/VB/returntype.vb#1)]  
  
 该示例使用 `contosoBooks.xml` 文件作为输入。  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>继承自<see cref="T:System.Xml.XPath.XPathExpression" />类，你必须重写以下成员：  
  
-   <see cref="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)" /><see cref="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)" />  
  
-   <see cref="M:System.Xml.XPath.XPathExpression.Clone" />  
  
-   <see cref="P:System.Xml.XPath.XPathExpression.Expression" />  
  
-   <see cref="P:System.Xml.XPath.XPathExpression.ReturnType" />  
  
-   <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.IXmlNamespaceResolver)" />  
  
-   <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" />。</para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName="AddSort">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XPath</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>当在派生类中重写时，对 XPath 表达式选择的节点排序。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddSort">
      <MemberSignature Language="C#" Value="public abstract void AddSort (object expr, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddSort(object expr, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AddSort (expr As Object, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddSort(System::Object ^ expr, System::Collections::IComparer ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XPath</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expr" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="expr">一个表示排序关键字的对象。 这可以是节点的 <see langword="string" /> 值，还可以是具有已编译 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</param>
        <param name="comparer">
          <see cref="T:System.Collections.IComparer" /> 对象，为比较两个对象的等效性提供特定的数据类型比较。</param>
        <summary>当在派生类中重写时，按指定的 <see cref="T:System.Collections.IComparer" /> 对象对 XPath 表达式选择的节点排序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XPath.XPathExpression.AddSort%2A>方法使用户能够通过而不是其数据类型的对象进行排序的字符串或数字。 <xref:System.Collections.IComparer>对象提供的实现<xref:System.Collections.IComparer.Compare%2A>支持用户定义的类的排序的方法。  
  
 在下面的示例中，丛书按 ISBN 编号，其中`isbn`是一个对象，实现<xref:System.Collections.IComparer>接口。  
  
```vb  
Dim expression As XPathExpression = navigator.Compile("bookstore/book")  
Dim isbn As ISBN = New ISBN()  
expression.AddSort("@ISBN", (IComparer)isbn)  
```  
  
```csharp  
XPathExpression expression = navigator.Compile("bookstore/book");  
ISBN isbn = new ISBN();  
expression.AddSort("@ISBN", (IComparer)isbn);  
```  
  
 以下是使用时要考虑的重要说明<xref:System.Xml.XPath.XPathExpression.AddSort%2A>方法。  
  
-   添加排序的顺序提供排序关键字的使用顺序。  
  
-   如果<xref:System.Xml.XPath.XPathExpression>或排序键需要命名空间解析，则必须使用<xref:System.Xml.XPath.XPathExpression.SetContext%2A>方法以提供<xref:System.Xml.XmlNamespaceManager>用于命名空间解析。  
  
-   如果<xref:System.Xml.XPath.XPathExpression>不包括前缀，则假定命名空间统一资源标识符 (URI) 是空的命名空间。 如果 XML 包含默认命名空间，你仍必须使用<xref:System.Xml.XPath.XPathExpression.SetContext%2A>方法并提供<xref:System.Xml.XmlNamespaceManager>，其中包含的前缀和命名空间 URI 以处理默认命名空间。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XPath.XPathException">
          <see cref="T:System.Xml.XPath.XPathExpression" /> 或排序关键字包括前缀，并且未提供 <see cref="T:System.Xml.XmlNamespaceManager" /> 或未在所提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 中找到该前缀。</exception>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.Xml.XmlNamespaceManager" />
        <altmember cref="M:System.Collections.IComparer.Compare(System.Object,System.Object)" />
        <altmember cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" />
      </Docs>
    </Member>
    <Member MemberName="AddSort">
      <MemberSignature Language="C#" Value="public abstract void AddSort (object expr, System.Xml.XPath.XmlSortOrder order, System.Xml.XPath.XmlCaseOrder caseOrder, string lang, System.Xml.XPath.XmlDataType dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddSort(object expr, valuetype System.Xml.XPath.XmlSortOrder order, valuetype System.Xml.XPath.XmlCaseOrder caseOrder, string lang, valuetype System.Xml.XPath.XmlDataType dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AddSort (expr As Object, order As XmlSortOrder, caseOrder As XmlCaseOrder, lang As String, dataType As XmlDataType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddSort(System::Object ^ expr, System::Xml::XPath::XmlSortOrder order, System::Xml::XPath::XmlCaseOrder caseOrder, System::String ^ lang, System::Xml::XPath::XmlDataType dataType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XPath</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expr" Type="System.Object" />
        <Parameter Name="order" Type="System.Xml.XPath.XmlSortOrder" />
        <Parameter Name="caseOrder" Type="System.Xml.XPath.XmlCaseOrder" />
        <Parameter Name="lang" Type="System.String" />
        <Parameter Name="dataType" Type="System.Xml.XPath.XmlDataType" />
      </Parameters>
      <Docs>
        <param name="expr">一个表示排序关键字的对象。 这可以是节点的 <see langword="string" /> 值，还可以是具有已编译 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</param>
        <param name="order">一个 <see cref="T:System.Xml.XPath.XmlSortOrder" /> 值，它指示排序顺序。</param>
        <param name="caseOrder">一个 <see cref="T:System.Xml.XPath.XmlCaseOrder" /> 值，它指示大写字母和小写字母的排序方式。</param>
        <param name="lang">要用于比较的语言。 使用 <see cref="T:System.Globalization.CultureInfo" /> 类，该类可传递到语言类型的 <see cref="Overload:System.String.Compare" /> 方法，美式英语的“us-en”。 如果指定了空的字符串，则使用系统环境来确定 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <param name="dataType">一个 <see cref="T:System.Xml.XPath.XmlDataType" /> 值，它指示数据类型的排序顺序。</param>
        <summary>当在派生类中被重写时，根据所提供的参数对 XPath 表达式所选的节点进行排序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   添加排序的顺序提供排序关键字的使用顺序。  
  
-   如果<xref:System.Xml.XPath.XPathExpression>或排序键需要命名空间解析，则必须使用<xref:System.Xml.XPath.XPathExpression.SetContext%2A>方法以提供<xref:System.Xml.XmlNamespaceManager>用于命名空间解析。  
  
-   如果<xref:System.Xml.XPath.XPathExpression>不包括前缀，则假定命名空间统一资源标识符 (URI) 是空的命名空间。 如果 XML 包含默认命名空间，你仍必须使用<xref:System.Xml.XPath.XPathExpression.SetContext%2A>方法并提供<xref:System.Xml.XmlNamespaceManager>，其中包含的前缀和命名空间 URI 以处理默认命名空间。  
  
   
  
## Examples  
 下面的示例演示如何按丛书文档的价格的降序顺序排序。  
  
 [!code-vb[XPathXMLExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XPathXMLExamples/vb/xpathexpression.addsort.vb#4)]  
  
 [!code-csharp[XPathXMLExamples#5](~/samples/snippets/csharp/VS_Snippets_Data/XPathXMLExamples/cs/xpathexpression.addsort.cs#5)]  
  
 该示例使用 `books.xml` 文件作为输入。  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XPath.XPathException">
          <see cref="T:System.Xml.XPath.XPathExpression" /> 或排序关键字包括前缀，并且未提供 <see cref="T:System.Xml.XmlNamespaceManager" /> 或未在所提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 中找到该前缀。</exception>
        <altmember cref="T:System.Xml.XPath.XmlSortOrder" />
        <altmember cref="T:System.Xml.XPath.XmlCaseOrder" />
        <altmember cref="T:System.Xml.XPath.XmlDataType" />
        <altmember cref="T:System.Xml.XmlNamespaceManager" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="Overload:System.String.Compare" />
        <altmember cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XPath.XPathExpression Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathExpression Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XPath.XPathExpression.Clone" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Clone () As XPathExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Xml::XPath::XPathExpression ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XPath</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>当在派生类中重写时，获取此 <see cref="T:System.Xml.XPath.XPathExpression" /> 的复本。</summary>
        <returns>一个新 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在派生类中重写时<xref:System.Xml.XPath.XPathExpression.Clone%2A>方法返回的此克隆<xref:System.Xml.XPath.XPathExpression>具有与此相同的状态对象<xref:System.Xml.XPath.XPathExpression>对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Compile">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XPath</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>编译指定的 XPath 表达式，并且返回表示 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public static System.Xml.XPath.XPathExpression Compile (string xpath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XPath.XPathExpression Compile(string xpath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XPath.XPathExpression.Compile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compile (xpath As String) As XPathExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XPath::XPathExpression ^ Compile(System::String ^ xpath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XPath</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xpath">XPath 表达式。</param>
        <summary>编译指定的 XPath 表达式并返回表示 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</summary>
        <returns>一个 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XPath 表达式进行计算以产生以下结果类型之一。  
  
-   <xref:System.Xml.XPath.XPathResultType.NodeSet>  
  
-   <xref:System.Xml.XPath.XPathResultType.Boolean>  
  
-   <xref:System.Xml.XPath.XPathResultType.Number>  
  
-   <xref:System.Xml.XPath.XPathResultType.String>  
  
> [!NOTE]
>  如果在 XPath 表达式中指定与无效数量的自变量 （或未实现的用户定义函数），则仅在运行时将发生异常。 在编译时不检查用户定义的函数和用户定义函数因异常时执行计算的表达式时，才发生。  
  
   
  
## Examples  
 下面的示例演示如何使用 XPath 返回类型来确定如何处理 XPath 表达式。 该示例使用<xref:System.Xml.XPath.XPathExpression.Compile%2A>方法来返回新<xref:System.Xml.XPath.XPathExpression>对象。  
  
 [!code-cpp[XPathExpression.ReturnType#1](~/samples/snippets/cpp/VS_Snippets_Data/XPathExpression.ReturnType/CPP/returntype.cpp#1)]
 [!code-csharp[XPathExpression.ReturnType#1](~/samples/snippets/csharp/VS_Snippets_Data/XPathExpression.ReturnType/CS/returntype.cs#1)]
 [!code-vb[XPathExpression.ReturnType#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XPathExpression.ReturnType/VB/returntype.vb#1)]  
  
 该示例使用 `contosoBooks.xml` 文件作为输入。  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">XPath 表达式参数不是有效的 XPath 表达式。</exception>
        <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式无效。</exception>
        <altmember cref="T:System.Xml.XPath.XPathResultType" />
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public static System.Xml.XPath.XPathExpression Compile (string xpath, System.Xml.IXmlNamespaceResolver nsResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XPath.XPathExpression Compile(string xpath, class System.Xml.IXmlNamespaceResolver nsResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XPath.XPathExpression.Compile(System.String,System.Xml.IXmlNamespaceResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compile (xpath As String, nsResolver As IXmlNamespaceResolver) As XPathExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XPath::XPathExpression ^ Compile(System::String ^ xpath, System::Xml::IXmlNamespaceResolver ^ nsResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XPath</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
        <Parameter Name="nsResolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="xpath">XPath 表达式。</param>
        <param name="nsResolver">实现用于命名空间解析的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 接口的对象。</param>
        <summary>使用用于命名空间解析的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象编译指定的 XPath 表达式，并且返回表示 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</summary>
        <returns>一个 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XPath 表达式进行计算以产生以下结果类型之一。  
  
-   <xref:System.Xml.XPath.XPathResultType.NodeSet>  
  
-   <xref:System.Xml.XPath.XPathResultType.Boolean>  
  
-   <xref:System.Xml.XPath.XPathResultType.Number>  
  
-   <xref:System.Xml.XPath.XPathResultType.String>  
  
> [!NOTE]
>  如果在 XPath 表达式中指定的参数数目无效 （或未实现的用户定义函数），则仅在运行时将发生异常。 在编译时不检查用户定义的函数和用户定义函数导致的异常时执行计算的表达式时，才发生。  
  
> [!NOTE]
>  不能编译<xref:System.Xml.XPath.XPathExpression>通过传递的一个步骤中的自定义上下文<xref:System.Xml.Xsl.XsltContext>，该类实现<xref:System.Xml.IXmlNamespaceResolver>，作为此方法的自变量。 若要使用<xref:System.Xml.XPath.XPathExpression>与自定义上下文，必须调用<xref:System.Xml.XPath.XPathExpression.SetContext%2A>方法之后编译表达式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">XPath 表达式参数不是有效的 XPath 表达式。</exception>
        <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式无效。</exception>
        <altmember cref="T:System.Xml.IXmlNamespaceResolver" />
        <altmember cref="T:System.Xml.XPath.XPathResultType" />
        <altmember cref="Overload:System.Xml.XPath.XPathExpression.SetContext" />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public abstract string Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Expression" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XPath.XPathExpression.Expression" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Expression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Expression { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XPath</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当在派生类中重写时，获取 <see cref="T:System.Xml.XPath.XPathExpression" /> 的 <see langword="string" /> 表示形式。</summary>
        <value>
          <see langword="string" /> 的 <see cref="T:System.Xml.XPath.XPathExpression" /> 表示形式。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XPath.XPathResultType ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XPath.XPathResultType ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XPath.XPathExpression.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ReturnType As XPathResultType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xml::XPath::XPathResultType ReturnType { System::Xml::XPath::XPathResultType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XPath</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathResultType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当在派生类中重写时，获取 XPath 表达式的结果类型。</summary>
        <value>
          <see cref="T:System.Xml.XPath.XPathResultType" /> 值，该值表示 XPath 表达式的结果类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用 XPath 返回类型来确定如何处理 XPath 表达式。  
  
 [!code-cpp[XPathExpression.ReturnType#1](~/samples/snippets/cpp/VS_Snippets_Data/XPathExpression.ReturnType/CPP/returntype.cpp#1)]
 [!code-csharp[XPathExpression.ReturnType#1](~/samples/snippets/csharp/VS_Snippets_Data/XPathExpression.ReturnType/CS/returntype.cs#1)]
 [!code-vb[XPathExpression.ReturnType#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XPathExpression.ReturnType/VB/returntype.vb#1)]  
  
 该示例使用 `contosoBooks.xml` 文件作为输入。  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XPath.XPathResultType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetContext">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XPath</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在派生类中被重写时，指定要用于命名空间解析的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public abstract void SetContext (System.Xml.IXmlNamespaceResolver nsResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContext(class System.Xml.IXmlNamespaceResolver nsResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.IXmlNamespaceResolver)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SetContext (nsResolver As IXmlNamespaceResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetContext(System::Xml::IXmlNamespaceResolver ^ nsResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XPath</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nsResolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="nsResolver">实现 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 接口以用于命名空间解析的对象。</param>
        <summary>在派生类中被重写时，指定要用于命名空间解析的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用实现的类支持 Namespace 解析<xref:System.Xml.IXmlNamespaceResolver>接口，如<xref:System.Xml.XmlNamespaceManager>类。 <xref:System.Xml.XmlNamespaceManager>存储前缀和命名空间统一资源标识符 (URI) 的映射。 如果<xref:System.Xml.XPath.XPathExpression>需要命名空间解析，前缀和命名空间 URI 对必须添加到对象，如<xref:System.Xml.XmlNamespaceManager>类，该类实现<xref:System.Xml.IXmlNamespaceResolver>接口，与<xref:System.Xml.XPath.XPathExpression.SetContext%2A>必须调用方法以指定<xref:System.Xml.IXmlNamespaceResolver>接口用于命名空间解析的对象。  
  
 以下是使用时要考虑的重要说明<xref:System.Xml.XPath.XPathExpression.SetContext%2A>方法。  
  
-   如果<xref:System.Xml.XPath.XPathExpression>不包括前缀，则假定命名空间 URI 是空的命名空间。 如果 XML 包含默认命名空间，你仍必须使用<xref:System.Xml.XPath.XPathExpression.SetContext%2A>方法并提供包含的前缀和命名空间 URI 以处理默认命名空间的对象。  
  
-   你也可以提供<xref:System.Xml.IXmlNamespaceResolver>到命名空间解析的接口对象<xref:System.Xml.XPath.XPathExpression.Compile%2A>方法创建时你<xref:System.Xml.XPath.XPathExpression>对象。  
  
-   <xref:System.Xml.XPath.XPathExpression.SetContext%2A> 接受<xref:System.Xml.Xsl.XsltContext>为命名空间解析程序，因此可以实现自定义上下文，并使用函数和变量基于<xref:System.Xml.Xsl.IXsltContextFunction>和<xref:System.Xml.Xsl.IXsltContextVariable>。 XPath 表达式将执行它们。 有关详细信息，请参阅[用户定义函数和变量](~/docs/standard/data/xml/user-defined-functions-and-variables.md)。  
  
   
  
## Examples  
 下面的示例演示如何使用 XPath 返回类型来确定如何处理 XPath 表达式中，以及如何使用<xref:System.Xml.XPath.XPathExpression.SetContext%2A>方法以提供<xref:System.Xml.XmlNamespaceManager>命名空间解析的对象。  
  
 [!code-cpp[XPathExpression.ReturnType#1](~/samples/snippets/cpp/VS_Snippets_Data/XPathExpression.ReturnType/CPP/returntype.cpp#1)]
 [!code-csharp[XPathExpression.ReturnType#1](~/samples/snippets/csharp/VS_Snippets_Data/XPathExpression.ReturnType/CS/returntype.cs#1)]
 [!code-vb[XPathExpression.ReturnType#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XPathExpression.ReturnType/VB/returntype.vb#1)]  
  
 该示例使用 `contosoBooks.xml` 文件作为输入。  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XPath.XPathException">
          <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象参数不派生自 <see cref="T:System.Xml.IXmlNamespaceResolver" />。</exception>
        <altmember cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" />
        <altmember cref="T:System.Xml.IXmlNamespaceResolver" />
        <altmember cref="M:System.Xml.XPath.XPathExpression.Compile(System.String,System.Xml.IXmlNamespaceResolver)" />
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public abstract void SetContext (System.Xml.XmlNamespaceManager nsManager);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContext(class System.Xml.XmlNamespaceManager nsManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SetContext (nsManager As XmlNamespaceManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetContext(System::Xml::XmlNamespaceManager ^ nsManager);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XPath</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nsManager" Type="System.Xml.XmlNamespaceManager" />
      </Parameters>
      <Docs>
        <param name="nsManager">要用于命名空间解析的 <see cref="T:System.Xml.XmlNamespaceManager" /> 对象。</param>
        <summary>在派生类中被重写时，指定要用于命名空间解析的 <see cref="T:System.Xml.XmlNamespaceManager" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用支持 Namespace 解析<xref:System.Xml.XmlNamespaceManager>存储前缀和命名空间统一资源标识符 (URI) 映射的类。 如果<xref:System.Xml.XPath.XPathExpression>需要命名空间解析，前缀和命名空间 URI 对必须添加到<xref:System.Xml.XmlNamespaceManager>对象和<xref:System.Xml.XPath.XPathExpression.SetContext%2A>必须调用方法以指定<xref:System.Xml.XmlNamespaceManager>要用于命名空间解析的对象。  
  
 以下是使用时要考虑的重要说明<xref:System.Xml.XPath.XPathExpression.SetContext%2A>方法。  
  
-   如果<xref:System.Xml.XPath.XPathExpression>不包括前缀，则假定命名空间 URI 是空的命名空间。 如果 XML 包含默认命名空间，你仍必须使用<xref:System.Xml.XPath.XPathExpression.SetContext%2A>方法并提供<xref:System.Xml.XmlNamespaceManager>对象，其中包含的前缀和命名空间 URI 以处理默认命名空间。  
  
-   你也可以提供<xref:System.Xml.IXmlNamespaceResolver>到命名空间解析的对象<xref:System.Xml.XPath.XPathExpression.Compile%2A>方法创建时你<xref:System.Xml.XPath.XPathExpression>对象。  
  
-   <xref:System.Xml.XPath.XPathExpression.SetContext%2A> 接受<xref:System.Xml.Xsl.XsltContext>为命名空间解析程序，因此可以实现自定义上下文，并使用函数和变量基于<xref:System.Xml.Xsl.IXsltContextFunction>和<xref:System.Xml.Xsl.IXsltContextVariable>。 XPath 表达式将执行它们。 有关详细信息，请参阅[用户定义函数和变量](~/docs/standard/data/xml/user-defined-functions-and-variables.md)。  
  
   
  
## Examples  
 下面的示例演示如何使用 XPath 返回类型来确定如何处理 XPath 表达式中，以及如何使用<xref:System.Xml.XPath.XPathExpression.SetContext%2A>方法以提供<xref:System.Xml.XmlNamespaceManager>命名空间解析的对象。  
  
 [!code-cpp[XPathExpression.ReturnType#1](~/samples/snippets/cpp/VS_Snippets_Data/XPathExpression.ReturnType/CPP/returntype.cpp#1)]
 [!code-csharp[XPathExpression.ReturnType#1](~/samples/snippets/csharp/VS_Snippets_Data/XPathExpression.ReturnType/CS/returntype.cs#1)]
 [!code-vb[XPathExpression.ReturnType#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XPathExpression.ReturnType/VB/returntype.vb#1)]  
  
 该示例使用 `contosoBooks.xml` 文件作为输入。  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XPath.XPathException">
          <see cref="T:System.Xml.XmlNamespaceManager" /> 对象参数不是从 <see cref="T:System.Xml.XmlNamespaceManager" /> 类派生的。</exception>
        <altmember cref="T:System.Xml.XmlNamespaceManager" />
        <altmember cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.IXmlNamespaceResolver)" />
        <altmember cref="T:System.Xml.IXmlNamespaceResolver" />
        <altmember cref="M:System.Xml.XPath.XPathExpression.Compile(System.String,System.Xml.IXmlNamespaceResolver)" />
      </Docs>
    </Member>
  </Members>
</Type>