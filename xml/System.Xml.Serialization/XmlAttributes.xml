<Type Name="XmlAttributes" FullName="System.Xml.Serialization.XmlAttributes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bf080a19cbc75a5dfdf3ce5ae88f4b3cf51d0f9f" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39978479" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlAttributes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlAttributes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlAttributes" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlAttributes" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlAttributes" />
  <TypeSignature Language="F#" Value="type XmlAttributes = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示控制 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 串行化和反序列化对象方式的属性对象的集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建<xref:System.Xml.Serialization.XmlAttributes>是将重写默认的进程的一部分方式<xref:System.Xml.Serialization.XmlSerializer>序列化类实例。 例如，假设你想要从其源不可访问的 DLL 创建将对象序列化。 通过使用<xref:System.Xml.Serialization.XmlAttributeOverrides>，可以增加或其他方式控制如何序列化对象。  
  
 成员<xref:System.Xml.Serialization.XmlAttributes>类直接对应于一系列的控制序列化的特性类。 例如，<xref:System.Xml.Serialization.XmlAttributes.XmlText%2A>属性必须设置为<xref:System.Xml.Serialization.XmlTextAttribute>，它可以通过指示重写字段或属性的序列化<xref:System.Xml.Serialization.XmlSerializer>要序列化作为 XML 文本的属性值。 控制序列化的属性的完整列表，请参阅<xref:System.Xml.Serialization.XmlSerializer>。  
  
 有关使用更多详细信息<xref:System.Xml.Serialization.XmlAttributeOverrides>与<xref:System.Xml.Serialization.XmlAttributes>类，请参阅[如何： 指定 XML Stream 的备用元素名称](~/docs/standard/serialization/how-to-specify-an-alternate-element-name-for-an-xml-stream.md)。  
  
   
  
## Examples  
 下面的示例将名为的类的实例序列化为`Orchestra`，其中包含名为的单个字段`Instruments`返回的数组`Instrument`对象。 名为第二个类`Brass`继承`Instrument`类。 此示例将创建<xref:System.Xml.Serialization.XmlAttributes>对象来重写`Instrument`域 — — 允许字段接受`Brass`对象-，并将<xref:System.Xml.Serialization.XmlAttributes>对象的实例与<xref:System.Xml.Serialization.XmlAttributeOverrides>类。  
  
 [!code-cpp[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlAttributes.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlAttributes();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例将名为的类的实例序列化为`Orchestra`，其中包含名为的单个字段`Instruments`返回的数组`Instrument`对象。 名为第二个类`Brass`继承`Instrument`类。 此示例将创建<xref:System.Xml.Serialization.XmlAttributes>对象来重写`Instrument`域 — — 允许字段接受`Brass`对象-，并将<xref:System.Xml.Serialization.XmlAttributes>对象的实例与<xref:System.Xml.Serialization.XmlAttributeOverrides>类。  
  
 [!code-cpp[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlAttributes (System.Reflection.ICustomAttributeProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.ICustomAttributeProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlAttributes.#ctor(System.Reflection.ICustomAttributeProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (provider As ICustomAttributeProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlAttributes(System::Reflection::ICustomAttributeProvider ^ provider);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlAttributes : System.Reflection.ICustomAttributeProvider -&gt; System.Xml.Serialization.XmlAttributes" Usage="new System.Xml.Serialization.XmlAttributes provider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="provider" Type="System.Reflection.ICustomAttributeProvider" />
      </Parameters>
      <Docs>
        <param name="provider">可提供控制 XML 序列化的属性的其他实现的类。</param>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 类的新实例，并自定义 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 串行化和反序列化对象的方式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用的默认构造函数<xref:System.Xml.Serialization.XmlAttributes>类，而不使用此构造函数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAnyAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlAnyAttributeAttribute XmlAnyAttribute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlAnyAttributeAttribute XmlAnyAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlAnyAttribute As XmlAnyAttributeAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlAnyAttributeAttribute ^ XmlAnyAttribute { System::Xml::Serialization::XmlAnyAttributeAttribute ^ get(); void set(System::Xml::Serialization::XmlAnyAttributeAttribute ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlAnyAttribute : System.Xml.Serialization.XmlAnyAttributeAttribute with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlAnyAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlAnyAttributeAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要替代的 <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />。</summary>
        <value>要重写的 <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAnyAttributeAttribute>可以应用于返回的数组成员<xref:System.Xml.XmlAttribute>上反序列化的对象。 这允许<xref:System.Xml.Serialization.XmlSerializer>进行反序列化任何属性不具有相应成员导致对象被反序列化-因此这些元素是"未知"的<xref:System.Xml.Serialization.XmlSerializer>。 由 XML Web 服务，更改 XML 流后或知道随机数据始终是包含在 XML 流时，这非常有用。  
  
 <xref:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute%2A>属性允许您向其成员的序列化重写<xref:System.Xml.Serialization.XmlAnyAttributeAttribute>已应用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAnyElements">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlAnyElementAttributes XmlAnyElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlAnyElementAttributes XmlAnyElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XmlAnyElements As XmlAnyElementAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlAnyElementAttributes ^ XmlAnyElements { System::Xml::Serialization::XmlAnyElementAttributes ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlAnyElements : System.Xml.Serialization.XmlAnyElementAttributes" Usage="System.Xml.Serialization.XmlAttributes.XmlAnyElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlAnyElementAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要替代的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 对象集合。</summary>
        <value>表示 <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" /> 对象集合的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAnyElementAttribute>可以应用于返回的数组成员<xref:System.Xml.XmlElement>上反序列化的对象。 这允许<xref:System.Xml.Serialization.XmlSerializer>进行反序列化任何元素不具有相应成员导致对象被反序列化-因此这些元素是"未知"的<xref:System.Xml.Serialization.XmlSerializer>。 由 XML Web 服务，更改 XML 流后或知道随机数据始终是包含在 XML 流时，这非常有用。  
  
 <xref:System.Xml.Serialization.XmlAttributes.XmlAnyElements%2A>属性可以重写的成员，才能为其成员函数序列化<xref:System.Xml.Serialization.XmlAnyElementAttribute>已应用。  
  
   
  
## Examples  
 下面的示例创建一个新<xref:System.Xml.Serialization.XmlAnyElementAttribute>对象，并将其添加到通过访问的对象的集合<xref:System.Xml.Serialization.XmlAttributes.XmlAnyElements%2A>属性。 <xref:System.Xml.Serialization.XmlAttributes>随后将对象添加到<xref:System.Xml.Serialization.XmlAttributeOverrides>用于创建对象<xref:System.Xml.Serialization.XmlSerializer>对象。 <xref:System.Xml.Serialization.XmlSerializer>用于序列化或反序列化对象。 若要查看使用的效果<xref:System.Xml.Serialization.XmlAnyElementAttributes>属性，创建 XML 文档通过运行名为"UnknownElements.xml"`SerializeObject`中的方法`Main`方法。 编辑生成的文档，以包括其他 （未知） 元素。 注释掉`SerializeObject`调用中的`Main`方法，并取消注释对的调用`DeserializeObject`方法，将输出名称和任何未知的 XML 元素的值。  
  
 [!code-cpp[XmlAttributes.XmlAnyElements#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlAttributes.XmlAnyElements/CPP/xmlanyover.cpp#1)]
 [!code-csharp[XmlAttributes.XmlAnyElements#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlAttributes.XmlAnyElements/CS/xmlanyover.cs#1)]
 [!code-vb[XmlAttributes.XmlAnyElements#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlAttributes.XmlAnyElements/VB/xmlanyover.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="XmlArray">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlArrayAttribute XmlArray { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlArrayAttribute XmlArray" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlArray" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlArray As XmlArrayAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlArrayAttribute ^ XmlArray { System::Xml::Serialization::XmlArrayAttribute ^ get(); void set(System::Xml::Serialization::XmlArrayAttribute ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlArray : System.Xml.Serialization.XmlArrayAttribute with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlArrayAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个对象，该对象指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 串行化返回数组的公共字段或读/写属性的方式。</summary>
        <value>一个 <see cref="T:System.Xml.Serialization.XmlArrayAttribute" />，指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化如何返回数组的公共字段或读/写属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有两种方法中的公共字段或公共读/写属性，返回一个数组，序列化<xref:System.Xml.Serialization.XmlSerializer>： 默认序列化和受控的序列化。  
  
 在默认的序列化，没有属性应用于的成员。 序列化时，数组序列化为 XML 元素的具有嵌套序列成员名称的 XML 元素名称的嵌套序列。  
  
 若要更精确地控制的序列化，应用<xref:System.Xml.Serialization.XmlArrayAttribute>到字段或属性。 例如，您可以更改生成的 XML 元素名称从默认值为不同的名称通过设置<xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A>属性的新值。  
  
 <xref:System.Xml.Serialization.XmlAttributes.XmlArray%2A>属性允许你重写默认的序列化，以及通过应用控制的序列化<xref:System.Xml.Serialization.XmlArrayAttribute>到的成员。 例如，可以更改为新值从默认值 （成员标识符） 生成的 XML 元素名称。 此外，如果将应用<xref:System.Xml.Serialization.XmlArrayAttribute>成员，它重写任何<xref:System.Xml.Serialization.XmlArrayAttribute>分配给<xref:System.Xml.Serialization.XmlAttributes.XmlArray%2A>属性。  
  
   
  
## Examples  
 下面的示例序列化类，其中包含一个名为字段`Members`返回对象的数组。 <xref:System.Xml.Serialization.XmlArrayAttribute>用于重写字段的序列化和重命名的元素名称`Staff`。  
  
 [!code-cpp[Classic XmlAttributes.XmlArray Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlArray Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlArray Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlArray Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlArray Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlArray Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlArrayItems">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlArrayItemAttributes XmlArrayItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlArrayItemAttributes XmlArrayItems" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XmlArrayItems As XmlArrayItemAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlArrayItemAttributes ^ XmlArrayItems { System::Xml::Serialization::XmlArrayItemAttributes ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlArrayItems : System.Xml.Serialization.XmlArrayItemAttributes" Usage="System.Xml.Serialization.XmlAttributes.XmlArrayItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlArrayItemAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个对象集合，该集合指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化插入数组（由公共字段或读/写属性返回）的项的方式。</summary>
        <value>
          <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" /> 对象，它包含 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 对象的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAttributes.XmlArrayItems%2A>属性可以指定要插入到数组返回的公共字段或公共读/写属性的派生的类型。 对于所需的字段或属性接受每个新类型，创建<xref:System.Xml.Serialization.XmlArrayItemAttribute>对象和<xref:System.Xml.Serialization.XmlArrayItemAttributes.Add%2A>到<xref:System.Xml.Serialization.XmlArrayItemAttributes>) 返回的<xref:System.Xml.Serialization.XmlAttributes.XmlArrayItems%2A>属性。 （新的类型必须派生自已接受的字段或属性的类型。）<xref:System.Xml.Serialization.XmlAttributeOverrides.Add%2A> <xref:System.Xml.Serialization.XmlAttributes>对象传递给<xref:System.Xml.Serialization.XmlAttributeOverrides>对象，并指定包含该字段或属性，该对象的类型和字段或属性的名称。 构造<xref:System.Xml.Serialization.XmlSerializer>与<xref:System.Xml.Serialization.XmlAttributeOverrides>对象之前调用<xref:System.Xml.Serialization.XmlSerializer.Serialize%2A>或<xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A>方法。  
  
   
  
## Examples  
 下面的示例序列化类，其中包含一个名为字段`Members`返回对象的数组。 两个<xref:System.Xml.Serialization.XmlArrayItemAttribute>创建对象以允许要接受从名为的基类派生的对象的字段`Member`。 每个对象添加到<xref:System.Xml.Serialization.XmlAttributes>通过<xref:System.Xml.Serialization.XmlAttributes.XmlArrayItems%2A>属性。  
  
 [!code-cpp[Classic XmlAttributes.XmlArrayItems Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlArrayItems Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlArrayItems Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlArrayItems Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlArrayItems Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlArrayItems Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlAttributeAttribute XmlAttribute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlAttributeAttribute XmlAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlAttribute As XmlAttributeAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlAttributeAttribute ^ XmlAttribute { System::Xml::Serialization::XmlAttributeAttribute ^ get(); void set(System::Xml::Serialization::XmlAttributeAttribute ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlAttribute : System.Xml.Serialization.XmlAttributeAttribute with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlAttributeAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个对象，该对象指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 将公共字段或公共读/写属性串行化为 XML 特性的方式。</summary>
        <value>控制将公共字段或读/写属性序列化为 XML 特性的 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，如果没有属性应用于公共字段或公共读/写属性，会将它序列化为 XML 元素。 此外可以指示<xref:System.Xml.Serialization.XmlSerializer>通过将应用生成一个 XML 特性<xref:System.Xml.Serialization.XmlAttributeAttribute>到字段或属性。  
  
 <xref:System.Xml.Serialization.XmlAttributes.XmlAttribute%2A>属性允许你重写默认的序列化，以及通过应用控制的序列化<xref:System.Xml.Serialization.XmlAttributeAttribute>到的成员。 若要执行此操作，创建<xref:System.Xml.Serialization.XmlAttributeAttribute>并设置其属性 (如<xref:System.Xml.Serialization.XmlAttributeAttribute.AttributeName%2A>)。 分配到新的对象<xref:System.Xml.Serialization.XmlAttributes.XmlAttribute%2A>属性的<xref:System.Xml.Serialization.XmlAttributes>对象。 添加<xref:System.Xml.Serialization.XmlAttributes>对象传递给<xref:System.Xml.Serialization.XmlAttributeOverrides>对象，并指定包含该字段或属性，该对象的类型和字段或属性的名称。 最后，创建<xref:System.Xml.Serialization.XmlSerializer>使用<xref:System.Xml.Serialization.XmlAttributeOverrides>对象，并调用<xref:System.Xml.Serialization.XmlSerializer.Serialize%2A>或<xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A>方法。  
  
   
  
## Examples  
 下面的示例将名为的类序列化为`Group`，其中包含名为的属性`GroupName`;`GroupName`属性序列化为 XML 特性。 此示例将创建<xref:System.Xml.Serialization.XmlAttributeOverrides>和一个<xref:System.Xml.Serialization.XmlAttributes>对象来重写默认的序列化的字段。 该示例然后创建<xref:System.Xml.Serialization.XmlAttributeAttribute>来特别重写该属性，并且该对象设置为<xref:System.Xml.Serialization.XmlAttributes.XmlAttribute%2A>属性<xref:System.Xml.Serialization.XmlAttributes>对象添加到<xref:System.Xml.Serialization.XmlAttributeOverrides>具有指定的重写成员名称的对象。 最后，<xref:System.Xml.Serialization.XmlSerializer>是构建并返回使用<xref:System.Xml.Serialization.XmlAttributeOverrides>对象。  
  
 [!code-cpp[Classic XmlAttributes.XmlAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlChoiceIdentifier">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlChoiceIdentifierAttribute XmlChoiceIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlChoiceIdentifierAttribute XmlChoiceIdentifier" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XmlChoiceIdentifier As XmlChoiceIdentifierAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlChoiceIdentifierAttribute ^ XmlChoiceIdentifier { System::Xml::Serialization::XmlChoiceIdentifierAttribute ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlChoiceIdentifier : System.Xml.Serialization.XmlChoiceIdentifierAttribute" Usage="System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlChoiceIdentifierAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个对象，该对象允许你区分一组选择。</summary>
        <value>可应用到被序列化为 <see langword="xsi:choice" /> 元素的类成员的 <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDefaultValue">
      <MemberSignature Language="C#" Value="public object XmlDefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object XmlDefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlDefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ XmlDefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlDefaultValue : obj with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlDefaultValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 XML 元素或属性的默认值。</summary>
        <value>表示 XML 元素或属性的默认值的 <see cref="T:System.Object" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以通过应用指定的 XML 元素或 XML 属性的默认值<xref:System.ComponentModel.DefaultValueAttribute>成员。 若要检查应用的值的结果，编译到 DLL 或可执行文件，该应用程序并将生成的文件作为参数传递到 XML 架构定义工具 (XSD.exe)。 在 XML 架构文档中，默认值分配给`default`属性。 在下面的示例中的默认值为\<动物 > 元素是"狗"。  
  
```  
<?xml version="1.0"?>  
 <schema attributeFormDefault="qualified"   
 elementFormDefault="qualified" targetNamespace=""   
 xmlns="http://www.w3.org/2000/10/XMLSchema">  
   <element name="Pets" nullable="true" type="Pets"/>  
   <complexType name="Pets">  
     <sequence>  
       <element default="Dogs" name="Animal" nullable="true"   
        type="string" minOccurs="0"/>  
     </sequence>  
   </complexType>  
 </schema>  
```  
  
 若要替代默认值，创建<xref:System.Object>并将其分配给<xref:System.Xml.Serialization.XmlAttributes.XmlDefaultValue%2A>。  
  
 分配给字段或属性的值是否相等的默认值为该字段或属性，<xref:System.Xml.Serialization.XmlSerializer>不序列化到 XML 实例的值。 这是因为可以从 XML 架构中恢复所赋的值。 换而言之，将字段或属性设置为默认值是根本不设置它的等效。 同样，如果未设置值的字段或属性，<xref:System.Xml.Serialization.XmlSerializer>使用默认值在架构中找到。 在同时情况下，将属性设置为其默认值，或根本不设置），XML 文档实例不包含任何值的属性。  
  
 您可以使用而不是架构类构造函数分配的默认值。 如果使用 Xsd.exe 从架构生成类，你可以注释掉或从类文件中删除所有 [System.ComponentModel.DefaultValueAttribute("myFieldName")] 属性。  
  
   
  
## Examples  
 下面的示例演示一个名为类`Pet`，其中包含具有默认值设置为"Dog"的字段。 但是，此示例还创建<xref:System.Xml.Serialization.XmlAttributes>对象，并设置其<xref:System.Xml.Serialization.XmlAttributes.XmlDefaultValue%2A>属性的新默认值 ("Cat")。 这将覆盖原始默认值。 因此，如果字段值设置为"Cat"<xref:System.Xml.Serialization.XmlSerializer>将其视为默认值，并不将其序列化。 如果设置为任何其他值，<xref:System.Xml.Serialization.XmlSerializer>序列化值。  
  
 [!code-cpp[Classic XmlAttributes.XmlDefaultValue Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlDefaultValue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlDefaultValue Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlDefaultValue Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlDefaultValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlDefaultValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElements">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlElementAttributes XmlElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlElementAttributes XmlElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XmlElements As XmlElementAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlElementAttributes ^ XmlElements { System::Xml::Serialization::XmlElementAttributes ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlElements : System.Xml.Serialization.XmlElementAttributes" Usage="System.Xml.Serialization.XmlAttributes.XmlElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlElementAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对象集合，该集合指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 将公共字段或读/写属性串行化为 XML 元素的方式。</summary>
        <value>包含一个 <see cref="T:System.Xml.Serialization.XmlElementAttributes" /> 对象集合的 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于每个序列化为 XML 元素的重写成员，必须添加一个新<xref:System.Xml.Serialization.XmlElementAttribute>到<xref:System.Xml.Serialization.XmlElementAttributes>通过调用<xref:System.Xml.Serialization.XmlElementAttributes.Add%2A>方法。 默认情况下<xref:System.Xml.Serialization.XmlElementAttributes>创建对象并将其分配给<xref:System.Xml.Serialization.XmlAttributes.XmlElements%2A>属性。  
  
   
  
## Examples  
 下面的示例序列化为`Transportation`类，该类包含一个名为的单个字段`Vehicles`返回<xref:System.Collections.ArrayList>。 该示例将应用两个<xref:System.Xml.Serialization.XmlElementAttribute>属性到`Vehicles`字段。 该示例创建两个<xref:System.Xml.Serialization.XmlElementAttribute>对象，并将它们添加到<xref:System.Xml.Serialization.XmlElementAttributes>的集合<xref:System.Xml.Serialization.XmlAttributes>对象。 若要允许要接受不同的对象类型的数组<xref:System.Xml.Serialization.XmlAttributes>对象添加到<xref:System.Xml.Serialization.XmlAttributeOverrides>对象。  
  
 [!code-cpp[Classic XmlAttributes.XmlElements Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlElements Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlElements Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlElements Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlElements Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlElements Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEnum">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlEnumAttribute XmlEnum { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlEnumAttribute XmlEnum" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlEnum" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlEnum As XmlEnumAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlEnumAttribute ^ XmlEnum { System::Xml::Serialization::XmlEnumAttribute ^ get(); void set(System::Xml::Serialization::XmlEnumAttribute ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlEnum : System.Xml.Serialization.XmlEnumAttribute with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlEnumAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个对象，该对象指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 串行化枚举成员的方式。</summary>
        <value>指定 <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> 如何序列化枚举成员的 <see cref="T:System.Xml.Serialization.XmlSerializer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于想要重写每个标识符，必须创建<xref:System.Xml.Serialization.XmlAttributes>对象，并设置<xref:System.Xml.Serialization.XmlAttributes.XmlEnum%2A>属性设置为<xref:System.Xml.Serialization.XmlEnumAttribute>重写的标识符。 添加<xref:System.Xml.Serialization.XmlAttributes>对象传递给<xref:System.Xml.Serialization.XmlAttributeOverrides>对象，并指定这两个<xref:System.Type>包含枚举和重写的成员名称的类。  
  
   
  
## Examples  
 下面的示例将名为两个类序列化为`Food`和`FoodType`。 `FoodType`类包含两个枚举已重写的并且对于每个枚举，该示例将创建<xref:System.Xml.Serialization.XmlEnumAttribute>对象，它将分配给<xref:System.Xml.Serialization.XmlAttributes.XmlEnum%2A>属性的<xref:System.Xml.Serialization.XmlAttributes>对象。 然后该示例添加<xref:System.Xml.Serialization.XmlAttributes>对象传递给<xref:System.Xml.Serialization.XmlAttributeOverrides>对象，用于创建<xref:System.Xml.Serialization.XmlSerializer>。  
  
 [!code-cpp[Classic XmlAttributes.XmlEnum Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlEnum Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlEnum Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlEnum Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlEnum Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlEnum Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlIgnore">
      <MemberSignature Language="C#" Value="public bool XmlIgnore { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool XmlIgnore" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlIgnore" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlIgnore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool XmlIgnore { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.XmlIgnore : bool with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlIgnore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否串行化公共字段或公共读/写属性。</summary>
        <value>如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 不得序列化字段或属性，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，所有公共字段和公共读/写属性进行序列化的<xref:System.Xml.Serialization.XmlSerializer>。 也就是说，每个公共字段或属性的值被存储为 XML 元素或 XML 文档实例中的 XML 特性。  
  
 若要重写字段或属性的默认序列化，创建<xref:System.Xml.Serialization.XmlAttributes>对象，并设置其<xref:System.Xml.Serialization.XmlAttributes.XmlIgnore%2A>属性设置为`true`。 <xref:System.Xml.Serialization.XmlAttributeOverrides.Add%2A> 到对象<xref:System.Xml.Serialization.XmlAttributeOverrides>对象，并指定类型的对象，其中包含的字段或属性，若要忽略，并且若要忽略的属性的字段的名称。  
  
 如果<xref:System.Xml.Serialization.XmlIgnoreAttribute>应用于字段或属性，忽略的字段或属性。 但是通过创建重写该行为<xref:System.Xml.Serialization.XmlAttributes>对象，并设置其<xref:System.Xml.Serialization.XmlAttributes.XmlIgnore%2A>属性设置为`false`，将其添加到<xref:System.Xml.Serialization.XmlAttributeOverrides>对象，它指定包含该字段或属性，该对象的类型和名称字段或属性。  
  
   
  
## Examples  
 下面的示例将名为的类序列化为`Group`，其中包含一个名为成员`Comment`到<xref:System.Xml.Serialization.XmlIgnoreAttribute>应用。 此示例将创建<xref:System.Xml.Serialization.XmlAttributes>对象，并设置<xref:System.Xml.Serialization.XmlAttributes.XmlIgnore%2A>属性设置为`false`，从而重写<xref:System.Xml.Serialization.XmlIgnoreAttribute>。  
  
 [!code-cpp[Classic XmlAttributes.XmlIgnore Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlIgnore Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlIgnore Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlIgnore Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlIgnore Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlIgnore Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlIgnoreAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Xmlns">
      <MemberSignature Language="C#" Value="public bool Xmlns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Xmlns" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.Xmlns" />
      <MemberSignature Language="VB.NET" Value="Public Property Xmlns As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Xmlns { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Xmlns : bool with get, set" Usage="System.Xml.Serialization.XmlAttributes.Xmlns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定当替代包含返回 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 对象的成员的对象时，是否保留所有的命名空间声明。</summary>
        <value>如果应保留命名空间声明，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例包含一个名为类`Student`。 此类包含一个名为成员`MyNamespaces`，它返回<xref:System.Xml.Serialization.XmlSerializerNamespaces>对象。 此示例将创建<xref:System.Xml.Serialization.XmlAttributes>添加到的实例对象<xref:System.Xml.Serialization.XmlAttributeOverrides>类。 <xref:System.Xml.Serialization.XmlAttributes.Xmlns%2A>属性设置为`true`，它指示<xref:System.Xml.Serialization.XmlSerializer>保留命名空间时的序列化`Student`对象重写。  
  
 [!code-cpp[XmlAttributes.Xmlns property example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlAttributes.Xmlns property example/CPP/xmlns.cpp#1)]
 [!code-csharp[XmlAttributes.Xmlns property example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlAttributes.Xmlns property example/CS/xmlns.cs#1)]
 [!code-vb[XmlAttributes.Xmlns property example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlAttributes.Xmlns property example/VB/xmlns.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlRoot">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlRootAttribute XmlRoot { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlRootAttribute XmlRoot" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlRoot" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlRoot As XmlRootAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlRootAttribute ^ XmlRoot { System::Xml::Serialization::XmlRootAttribute ^ get(); void set(System::Xml::Serialization::XmlRootAttribute ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlRoot : System.Xml.Serialization.XmlRootAttribute with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlRootAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个对象，该对象指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 将类串行化为 XML 根元素的方式。</summary>
        <value>重写特性化为 XML 根元素的类的 <see cref="T:System.Xml.Serialization.XmlRootAttribute" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建<xref:System.Xml.Serialization.XmlAttributeOverrides>对象，<xref:System.Xml.Serialization.XmlAttributes>对象，和一个<xref:System.Xml.Serialization.XmlRootAttribute>对象。 该示例将分配<xref:System.Xml.Serialization.XmlRootAttribute>到<xref:System.Xml.Serialization.XmlAttributes.XmlRoot%2A>的属性<xref:System.Xml.Serialization.XmlAttributes>对象，并添加<xref:System.Xml.Serialization.XmlAttributes>对象传递给<xref:System.Xml.Serialization.XmlAttributeOverrides>对象。 最后，示例将获取<xref:System.Xml.Serialization.XmlAttributes>对象通过传递<xref:System.Type>序列化到类的<xref:System.Xml.Serialization.XmlAttributeOverrides>对象。 (在此示例中，<xref:System.Type>是`Group`。)  
  
 [!code-cpp[Classic XmlAttributes.XmlRoot Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlRoot Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlRoot Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlRoot Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlRoot Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlRoot Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlText">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlTextAttribute XmlText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlTextAttribute XmlText" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlText" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlText As XmlTextAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlTextAttribute ^ XmlText { System::Xml::Serialization::XmlTextAttribute ^ get(); void set(System::Xml::Serialization::XmlTextAttribute ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlText : System.Xml.Serialization.XmlTextAttribute with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlTextAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个对象，该对象指示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 将公共字段或公共读/写属性串行化为 XML 文本。</summary>
        <value>重写公共属性或字段的默认序列化的 <see cref="T:System.Xml.Serialization.XmlTextAttribute" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，公共字段或公共读/写属性序列化为 XML 元素由<xref:System.Xml.Serialization.XmlSerializer>。 但是，它可以强制字段或属性序列化为 XML 文本，通过应用<xref:System.Xml.Serialization.XmlTextAttribute>到字段或属性。  
  
> [!NOTE]
>  <xref:System.Xml.Serialization.XmlTextAttribute>不能应用于字段或属性，返回一个数组，该属性。  
  
 若要重写默认的序列化的字段或属性 （即不返回数组），创建<xref:System.Xml.Serialization.XmlTextAttribute>并将其分配给<xref:System.Xml.Serialization.XmlAttributes.XmlText%2A>属性的<xref:System.Xml.Serialization.XmlAttributes>对象。 添加<xref:System.Xml.Serialization.XmlAttributes>对象传递给<xref:System.Xml.Serialization.XmlAttributeOverrides>对象，并指定包含重写的字段或属性，该对象的类型和重写的字段或属性的名称。  
  
   
  
## Examples  
 下面的示例将名为的类序列化为`Group`，其中包含一个名为字段`Comment`。 重写默认方式<xref:System.Xml.Serialization.XmlSerializer>序列化字段，该示例将创建<xref:System.Xml.Serialization.XmlAttributeOverrides>和<xref:System.Xml.Serialization.XmlAttributes>对象。 该示例然后创建<xref:System.Xml.Serialization.XmlTextAttribute>对象，它将分配给<xref:System.Xml.Serialization.XmlAttributes.XmlText%2A>属性，并添加<xref:System.Xml.Serialization.XmlAttributes>对象 （具有要序列化为 XML 文本的字段的名称） 到<xref:System.Xml.Serialization.XmlAttributeOverrides>对象。 此示例将创建最后<xref:System.Xml.Serialization.XmlSerializer>使用<xref:System.Xml.Serialization.XmlAttributeOverrides>对象。  
  
 [!code-cpp[Classic XmlAttributes.XmlText Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlText Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlText Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlText Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlText Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlText Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlType">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlTypeAttribute XmlType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlTypeAttribute XmlType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlType" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlType As XmlTypeAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlTypeAttribute ^ XmlType { System::Xml::Serialization::XmlTypeAttribute ^ get(); void set(System::Xml::Serialization::XmlTypeAttribute ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlType : System.Xml.Serialization.XmlTypeAttribute with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlTypeAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个对象，该对象指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 串行化已对其应用 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> 的类的方式。</summary>
        <value>重写应用于类声明的 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> 的 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlTypeAttribute>可用于控制类型序列化的方式<xref:System.Xml.Serialization.XmlSerializer>。 例如，默认情况下，当序列化类型，<xref:System.Xml.Serialization.XmlSerializer>类名用作 XML 元素名称。 通过创建<xref:System.Xml.Serialization.XmlTypeAttribute>，并设置<xref:System.Xml.Serialization.XmlAttributes.XmlType%2A>属性，以及创建<xref:System.Xml.Serialization.XmlAttributeOverrides>对象，可以更改 XML 元素名称。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Xml.Serialization.XmlTypeAttribute>对象，并将它分配给<xref:System.Xml.Serialization.XmlAttributes.XmlType%2A>属性的<xref:System.Xml.Serialization.XmlAttributes>对象。  
  
 [!code-cpp[Classic XmlAttributes.XmlType Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlType Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlType Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>