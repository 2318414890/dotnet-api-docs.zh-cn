<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XmlSerializer.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d07956b41790d10b90106ace692180cac099fd6d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d07956b41790d10b90106ace692180cac099fd6d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Serializes and deserializes objects into and from XML documents.</source>
          <target state="translated">在对象和 XML 文档之间进行序列化和反序列化操作。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> enables you to control how objects are encoded into XML.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 使您得以控制如何将对象编码到 XML 中。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>XML serialization is the process of converting an object's public properties and fields to a serial format (in this case, XML) for storage or transport.</source>
          <target state="translated">XML 序列化是将对象的公共属性和字段转换为序列格式（这里是指 XML）以便存储或传输的过程。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Deserialization re-creates the object in its original state from the XML output.</source>
          <target state="translated">反序列化中重新创建对象的 XML 输出从其原始状态。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>You can think of serialization as a way of saving the state of an object into a stream or buffer.</source>
          <target state="translated">你可以将序列化视为一种方法将对象的状态保存到流或缓冲区。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>For example, ASP.NET uses the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class to encode XML Web service messages.</source>
          <target state="translated">例如，ASP.NET 使用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>类 XML Web 服务消息进行编码。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The data in your objects is described using programming language constructs like classes, fields, properties, primitive types, arrays, and even embedded XML in the form of <ph id="ph1">&lt;xref:System.Xml.XmlElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.XmlAttribute&gt;</ph> objects.</source>
          <target state="translated">对象中的数据是用编程语言构造来描述的，如类、字段、属性、基元类型、数组，甚至 <ph id="ph1">&lt;xref:System.Xml.XmlElement&gt;</ph> 或 <ph id="ph2">&lt;xref:System.Xml.XmlAttribute&gt;</ph> 对象形式的嵌入 XML。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>You have the option of creating your own classes, annotated with attributes, or using the <bpt id="p1">[</bpt>XML Schema Definition Tool (Xsd.exe)<ept id="p1">](http://msdn.microsoft.com/library/a6e6e65c-347f-4494-9457-653bf29baac2)</ept> to generate the classes based on an existing XML Schema definition (XSD) document.</source>
          <target state="translated">你可以创建您自己的类，具有属性，或使用批注的选择<bpt id="p1">[</bpt>XML 架构定义工具 (Xsd.exe)<ept id="p1">](http://msdn.microsoft.com/library/a6e6e65c-347f-4494-9457-653bf29baac2)</ept>生成基于现有 XML 架构定义 (XSD) 文档的类。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>If you have an XML Schema, you can run the Xsd.exe to produce a set of classes that are strongly typed to the schema and annotated with attributes to adhere to the schema when serialized.</source>
          <target state="translated">如果你有一个 XML 架构，你可以运行 Xsd.exe 生成的类，强类型化为架构并使用要遵守序列化时的架构属性批注的一组。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>To transfer data between objects and XML requires a mapping from the programming language constructs to XML schema and from the XML schema to the programming language constructs.</source>
          <target state="translated">若要将数据传输对象和 XML 之间需要映射到 XML 架构的编程语言构造从和 XML 架构的编程语言构造。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> and related tools like Xsd.exe provide the bridge between these two technologies at both design time and runtime.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>和 Xsd.exe 等相关的工具提供这两种技术在同时设计时和运行时之间的桥梁。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>At design time, use the Xsd.exe to produce an XML schema document (.xsd) from your custom classes or to produce classes from a given schema.</source>
          <target state="translated">在设计时，使用 Xsd.exe 从自定义类生成 XML 架构文档 (.xsd) 或生成从给定的架构的类。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>In either case, the classes are annotated with custom attributes to instruct the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> how to map between the XML schema system and the common language runtime.</source>
          <target state="translated">在任一情况下，类进行批注使用自定义属性，以指示<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>如何 XML 架构系统和公共语言运行时之间进行映射。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>At runtime, instances of the classes can be serialized into XML documents that follow the given schema.</source>
          <target state="translated">在运行时，这些类的实例可以序列化为遵循给定的架构的 XML 文档。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Likewise, these XML documents can be deserialized into runtime objects.</source>
          <target state="translated">同样，可以将这些 XML 文档反序列化到运行时对象中。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Note that the XML schema is optional, and not required at design time or runtime.</source>
          <target state="translated">请注意，XML 架构是可选的在设计时或运行时并不是必需的。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Controlling Generated XML</source>
          <target state="translated">控制生成的 XML</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>To control the generated XML, you can apply special attributes to classes and members.</source>
          <target state="translated">若要控制生成的 XML，你可以应用于类和成员特殊属性。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>For example, to specify a different XML element name, apply an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> to a public field or property, and set the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A&gt;</ph> property.</source>
          <target state="translated">例如，若要指定不同的 XML 元素名称，将应用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph>到一个公共字段或属性和一组<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>For a complete list of similar attributes, see <bpt id="p1">[</bpt>Attributes That Control XML Serialization<ept id="p1">](http://msdn.microsoft.com/library/414b820f-a696-4206-b576-2711d85490c7)</ept>.</source>
          <target state="translated">类似的属性的完整列表，请参阅<bpt id="p1">[</bpt>属性，控制 XML 序列化<ept id="p1">](http://msdn.microsoft.com/library/414b820f-a696-4206-b576-2711d85490c7)</ept>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>You can also implement the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface to control the XML output.</source>
          <target state="translated">你也可以实现<ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>接口来控制 XML 输出。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>If the XML generated must conform to section 5 of the World Wide Consortium (www.w3.org) document, "Simple Object Access Protocol (SOAP) 1.1", you must construct the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> with an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlTypeMapping&gt;</ph>.</source>
          <target state="translated">如果生成的 XML 必须符合万维网联合会 (www.w3.org) 文档的第 5 节中，"简单对象访问协议 (SOAP) 1.1"，您必须先构造<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>与<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlTypeMapping&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>To further control the encoded SOAP XML, use the attributes listed in <bpt id="p1">[</bpt>Attributes That Control Encoded SOAP Serialization<ept id="p1">](http://msdn.microsoft.com/library/93ee258c-9c0f-4a08-897c-c10db7a00f91)</ept>.</source>
          <target state="translated">若要进一步控制编码的 SOAP XML，使用中列出的属性<bpt id="p1">[</bpt>属性，控制编码 SOAP 序列化<ept id="p1">](http://msdn.microsoft.com/library/93ee258c-9c0f-4a08-897c-c10db7a00f91)</ept>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>With the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> you can take advantage of working with strongly typed classes and still have the flexibility of XML.</source>
          <target state="translated">与<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>可以充分利用的使用强类型化的类和仍具有 XML 的灵活性。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Using fields or properties of type <ph id="ph1">&lt;xref:System.Xml.XmlElement&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlAttribute&gt;</ph> or <ph id="ph3">&lt;xref:System.Xml.XmlNode&gt;</ph> in your strongly typed classes, you can read parts of the XML document directly into XML objects.</source>
          <target state="translated">使用类型的字段或属性<ph id="ph1">&lt;xref:System.Xml.XmlElement&gt;</ph>，<ph id="ph2">&lt;xref:System.Xml.XmlAttribute&gt;</ph>或<ph id="ph3">&lt;xref:System.Xml.XmlNode&gt;</ph>在强类型类中，你可以读入 XML 文档的各部分直接 XML 对象。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>If you work with extensible XML schemas, you can also use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAnyElementAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAnyAttributeAttribute&gt;</ph> attributes to serialize and deserialize elements or attributes that are not found in the original schema.</source>
          <target state="translated">如果你使用可扩展的 XML 架构，你还可以使用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAnyElementAttribute&gt;</ph>和<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAnyAttributeAttribute&gt;</ph>属性进行序列化和反序列化的原始架构中找不到元素或属性。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>To use the objects, apply an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAnyElementAttribute&gt;</ph> to a field that returns an array of <ph id="ph2">&lt;xref:System.Xml.XmlElement&gt;</ph> objects, or apply an <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAnyAttributeAttribute&gt;</ph> to a field that returns an array of <ph id="ph4">&lt;xref:System.Xml.XmlAttribute&gt;</ph> objects.</source>
          <target state="translated">若要使用的对象，应用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAnyElementAttribute&gt;</ph>给返回的数组的字段<ph id="ph2">&lt;xref:System.Xml.XmlElement&gt;</ph>对象，或应用<ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAnyAttributeAttribute&gt;</ph>给返回的数组的字段<ph id="ph4">&lt;xref:System.Xml.XmlAttribute&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>If a property or field returns a complex object (such as an array or a class instance), the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> converts it to an element nested within the main XML document.</source>
          <target state="translated">如果属性或字段返回一个复杂对象（如数组或类实例），则 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 将其转换为嵌套在主 XML 文档内的元素。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>For example, the first class in the following code returns an instance of the second class.</source>
          <target state="translated">例如，下面的代码中的第一个类返回第二个类的实例。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The serialized, XML output looks like this:</source>
          <target state="translated">序列化，XML 输出如下所示：</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>If a schema includes an element that is optional (minOccurs = '0'), or if the schema includes a default value, you have two options.</source>
          <target state="translated">如果架构包含的元素将是可选 (minOccurs = '0')，或如果架构包含默认值，可以有两个选项。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>One option is to use <ph id="ph1">&lt;xref:System.ComponentModel.DefaultValueAttribute?displayProperty=nameWithType&gt;</ph> to specify the default value, as shown in the following code.</source>
          <target state="translated">一个选项是使用<ph id="ph1">&lt;xref:System.ComponentModel.DefaultValueAttribute?displayProperty=nameWithType&gt;</ph>来指定默认值，在下面的代码所示。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Another option is to use a special pattern to create a Boolean field recognized by the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>, and to apply the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlIgnoreAttribute&gt;</ph> to the field.</source>
          <target state="translated">另一个选项是使用特殊的模式创建布尔字段识别<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>，并将应用<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlIgnoreAttribute&gt;</ph>到字段。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The pattern is created in the form of <ph id="ph1">`propertyNameSpecified`</ph>.</source>
          <target state="translated">模式创建的形式<ph id="ph1">`propertyNameSpecified`</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>For example, if there is a field named "MyFirstName" you would also create a field named "MyFirstNameSpecified" that instructs the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> whether to generate the XML element named "MyFirstName".</source>
          <target state="translated">例如，如果没有名为"MyFirstName"还将创建名为"MyFirstNameSpecified"的字段的字段指示<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>是否生成名为"MyFirstName"的 XML 元素。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>This is shown in the following example.</source>
          <target state="translated">这在下面的示例中显示。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Overriding Default Serialization</source>
          <target state="translated">重写默认序列化</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>You can also override the serialization of any set of objects and their fields and properties by creating one of the appropriate attributes, and adding it to an instance of the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> class.</source>
          <target state="translated">你也可以通过创建一个适当的属性，并将其添加到的实例来替代序列化的对象及其字段和属性的任何集<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Overriding serialization in this way has two uses: first, you can control and augment the serialization of objects found in a DLL, even if you do not have access to the source; second, you can create one set of serializable classes, but serialize the objects in multiple ways.</source>
          <target state="translated">重写这种方式中的序列化有两个用途： 首先，你可以控制和增加的 DLL 中找到的对象序列化，即使到源，则不能访问其次，你可以创建一组可序列化的类，但采用多种方式对象进行序列化。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>For more details, see the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> class and <bpt id="p1">[</bpt>How to: Control Serialization of Derived Classes<ept id="p1">](http://msdn.microsoft.com/library/caa92596-9e15-4d91-acbe-56911ef47a84)</ept>.</source>
          <target state="translated">有关更多详细信息，请参阅<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph>类和<bpt id="p1">[</bpt>如何： 控制序列化的派生类<ept id="p1">](http://msdn.microsoft.com/library/caa92596-9e15-4d91-acbe-56911ef47a84)</ept>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>To serialize an object, call the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> method.</source>
          <target state="translated">若要序列化对象，调用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>To deserialize an object, call the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph> method.</source>
          <target state="translated">若要反序列化对象，调用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>To add XML namespaces to an XML document, see <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph>.</source>
          <target state="translated">若要将 XML 命名空间添加到 XML 文档，请参阅<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> gives special treatment to classes that implement <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>提供到实现类的特殊处理<ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>或<ph id="ph3">&lt;xref:System.Collections.ICollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>A class that implements <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> must implement a public <ph id="ph2">`Add`</ph> method that takes a single parameter.</source>
          <target state="translated">实现 <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> 的类必须实现采用单个参数的公共 <ph id="ph2">`Add`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The <ph id="ph1">`Add`</ph> method's parameter must be of the same type as is returned from the <ph id="ph2">`Current`</ph> property on the value returned from <ph id="ph3">`GetEnumerator`</ph>, or one of that type's bases.</source>
          <target state="translated"><ph id="ph1">`Add`</ph>方法的参数必须是相同的类型是从返回<ph id="ph2">`Current`</ph>上从返回的值的属性<ph id="ph3">`GetEnumerator`</ph>，或者为该类型的基之一。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>A class that implements <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> (such as <ph id="ph2">&lt;xref:System.Collections.CollectionBase&gt;</ph>) in addition to <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph> must have a public <ph id="ph4">`Item`</ph> indexed property (indexer in C#) that takes an integer, and it must have a public <ph id="ph5">`Count`</ph> property of type integer.</source>
          <target state="translated">一个类以实现<ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>(如<ph id="ph2">&lt;xref:System.Collections.CollectionBase&gt;</ph>) 除了<ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph>必须具有一个公共<ph id="ph4">`Item`</ph>索引属性 （C# 中的索引器） 采用一个整数，且它必须具有公共<ph id="ph5">`Count`</ph>的整数类型的属性。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The parameter to the <ph id="ph1">`Add`</ph> method must be the same type as is returned from the <ph id="ph2">`Item`</ph> property, or one of that type's bases.</source>
          <target state="translated">参数<ph id="ph1">`Add`</ph>方法必须是同一类型，从返回<ph id="ph2">`Item`</ph>属性，或者为该类型的基之一。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>For classes that implement <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>, values to be serialized are retrieved from the indexed <ph id="ph2">`Item`</ph> property, not by calling <ph id="ph3">`GetEnumerator`</ph>.</source>
          <target state="translated">为类，该实现<ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>，将检索要序列化的值从索引<ph id="ph2">`Item`</ph>属性，不是通过调用<ph id="ph3">`GetEnumerator`</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>You must have permission to write to the temporary directory (as defined by the TEMP environment variable) to deserialize an object.</source>
          <target state="translated">您必须有权写入到临时目录 （如由 TEMP 环境变量定义） 反序列化对象。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Dynamically Generated Assemblies</source>
          <target state="translated">动态生成的程序集</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>To increase performance, the XML serialization infrastructure dynamically generates assemblies to serialize and deserialize specified types.</source>
          <target state="translated">为了提高性能，XML 序列化基础结构将动态生成要序列化和反序列化指定的类型的程序集。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The infrastructure finds and reuses those assemblies.</source>
          <target state="translated">基础结构找到并重新使用这些程序集。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>This behavior occurs only when using the following constructors:</source>
          <target state="translated">仅在使用以下构造函数时，会出现此行为：</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>If you use any of the other constructors, multiple versions of the same assembly are generated and never unloaded, which results in a memory leak and poor performance.</source>
          <target state="translated">如果你使用任何其他构造函数，同一个程序集的多个版本生成，并永远不会卸载，从而导致内存泄漏和性能低下。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The easiest solution is to use one of the previously mentioned two constructors.</source>
          <target state="translated">最简单的解决方案是使用前面所述的两个构造函数之一。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Otherwise, you must cache the assemblies in a <ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph>, as shown in the following example.</source>
          <target state="translated">否则，你必须在其中缓存中的程序集<ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph>，下面的示例中所示。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Serialization of ArrayList and Generic List</source>
          <target state="translated">序列化 ArrayList 以及泛型列表</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> cannot serialize or deserialize the following:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>无法序列化或反序列化以下：</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Arrays of <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph></source>
          <target state="translated">数组 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Arrays of <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph></source>
          <target state="translated">数组 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph></target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Serialization of Enumerations of Unsigned Long</source>
          <target state="translated">序列化的无符号长整型的枚举</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> cannot be instantiated to serialize an enumeration if the following conditions are true: The enumeration is of type unsigned long (<ph id="ph2">`ulong`</ph> in C#) and the enumeration contains any member with a value larger than 9,223,372,036,854,775,807.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>不能实例化以序列化枚举，如果以下条件为真： 枚举为无符号长整型 (<ph id="ph2">`ulong`</ph> C# 中) 和枚举包含具有的值大于任何成员9223372036854775807。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>For example, the following cannot be serialized.</source>
          <target state="translated">例如，以下无法序列化。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Objects marked with the Obsolete Attribute no longer serialized</source>
          <target state="translated">用过时不再序列化的属性标记的对象</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>In the <ph id="ph1">[!INCLUDE[netfx35_short](~/includes/netfx35-short-md.md)]</ph> the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class no longer serializes objects that are marked as <ph id="ph3">`[Obsolete]`</ph>.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[netfx35_short](~/includes/netfx35-short-md.md)]</ph><ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>类不再将标记为的对象序列化为<ph id="ph3">`[Obsolete]`</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The following example contains two main classes: <ph id="ph1">`PurchaseOrder`</ph> and <ph id="ph2">`Test`</ph>.</source>
          <target state="translated">下面的示例包含两个主要类：<ph id="ph1">`PurchaseOrder`</ph>和<ph id="ph2">`Test`</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The <ph id="ph1">`PurchaseOrder`</ph> class contains information about a single purchase.</source>
          <target state="translated"><ph id="ph1">`PurchaseOrder`</ph>类包含单个购买有关的信息。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The <ph id="ph1">`Test`</ph> class contains the methods that create the purchase order, and that read the created purchase order.</source>
          <target state="translated"><ph id="ph1">`Test`</ph>类包含创建采购订单，以及读取创建的采购订单的方法。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>This type is thread safe.</source>
          <target state="translated">此类型是线程安全的。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)">
          <source>The type of the object that this <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> can serialize.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 可序列化的对象的类型。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的新实例，该类可以将指定类型的对象序列化为 XML 文档，也可以将 XML 文档反序列化为指定类型的对象。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)">
          <source>Commonly, an application defines several classes that the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> converts into a single XML-instance document.</source>
          <target state="translated">通常情况下，应用程序定义了几个类的<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>将转换为单个 XML 实例文档。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)">
          <source>However, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> must know only one type--the type of the class that represents the XML root element.</source>
          <target state="translated">但是，<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>必须知道只有一个类型-表示的 XML 根元素的类的类型。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> automatically serializes all subordinate class instances.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>自动序列化所有从属类的实例。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)">
          <source>Similarly, only the type of the XML root element is required for deserialization.</source>
          <target state="translated">同样，仅的 XML 根元素的类型是必需的反序列化的。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)">
          <source>The following example constructs an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> that serializes an object named <ph id="ph2">`Widget`</ph>.</source>
          <target state="translated">下面的示例构造<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>，将已命名的对象序列化为<ph id="ph2">`Widget`</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)">
          <source>The example sets various properties of the object before calling the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> method.</source>
          <target state="translated">该示例将之前调用该对象的各种属性<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlTypeMapping" /&gt;</ph> that maps one type to another.</source>
          <target state="translated">将一种类型映射到另一种类型的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlTypeMapping" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)">
          <source>Initializes an instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class using an object that maps one type to another.</source>
          <target state="translated">使用将一个类型映射到另一个类型的对象来初始化 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的实例。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)">
          <source>This constructor is used to create an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> when you serialize an object into a SOAP message.</source>
          <target state="translated">此构造函数用于创建<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>将对象序列化为 SOAP 消息。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)">
          <source>To control the SOAP messages generated, use the special attributes (beginning with the word "Soap") found in the <ph id="ph1">&lt;xref:System.Xml.Serialization&gt;</ph> namespace.</source>
          <target state="translated">若要控制生成的 SOAP 消息，请使用在中找到的特殊属性 （以单词"Soap"开头）<ph id="ph1">&lt;xref:System.Xml.Serialization&gt;</ph>命名空间。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)">
          <source>The following example serializes a class named <ph id="ph1">`Group`</ph>.</source>
          <target state="translated">下面的示例序列化类名为<ph id="ph1">`Group`</ph>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)">
          <source>The serialization of the <ph id="ph1">`GroupName`</ph>, <ph id="ph2">`IgnoreThis`</ph> fields, and the members of the <ph id="ph3">`GroupType`</ph> enumeration are overridden.</source>
          <target state="translated">序列化<ph id="ph1">`GroupName`</ph>，<ph id="ph2">`IgnoreThis`</ph>字段和的成员<ph id="ph3">`GroupType`</ph>枚举将被重写。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)">
          <source>In the <ph id="ph1">`CreateOverrideSerializer`</ph> method, a <ph id="ph2">&lt;xref:System.Xml.Serialization.SoapAttributeOverrides&gt;</ph> object is created, and for each overridden member or enumeration, a <ph id="ph3">&lt;xref:System.Xml.Serialization.SoapAttributes&gt;</ph> object is created with the appropriate property set and added to the <ph id="ph4">&lt;xref:System.Xml.Serialization.SoapAttributeOverrides&gt;</ph> object.</source>
          <target state="translated">在<ph id="ph1">`CreateOverrideSerializer`</ph>方法，<ph id="ph2">&lt;xref:System.Xml.Serialization.SoapAttributeOverrides&gt;</ph>对象在创建后，为每个重写的成员或枚举即<ph id="ph3">&lt;xref:System.Xml.Serialization.SoapAttributes&gt;</ph>对象创建相应的属性设置，并添加到<ph id="ph4">&lt;xref:System.Xml.Serialization.SoapAttributeOverrides&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)">
          <source>An <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlMapping&gt;</ph> object is created using the <ph id="ph2">&lt;xref:System.Xml.Serialization.SoapAttributeOverrides&gt;</ph> object, and that <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlMapping&gt;</ph> object is used to create the <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> that overrides the default serialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlMapping&gt;</ph>对象使用创建<ph id="ph2">&lt;xref:System.Xml.Serialization.SoapAttributeOverrides&gt;</ph>对象，并且<ph id="ph3">&lt;xref:System.Xml.Serialization.XmlMapping&gt;</ph>对象用于创建<ph id="ph4">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>可重写默认的序列化。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)">
          <source>The type of the object that this <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> can serialize.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 可序列化的对象的类型。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)">
          <source>The default namespace to use for all the XML elements.</source>
          <target state="translated">用于所有 XML 元素的默认命名空间。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的新实例，该类可以将指定类型的对象序列化为 XML 文档，也可以将 XML 文档反序列化为指定类型的对象。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)">
          <source>Specifies the default namespace for all the XML elements.</source>
          <target state="translated">指定所有 XML 元素的默认命名空间。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)">
          <source>The following example constructs an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> that serializes an object named <ph id="ph2">`Widget`</ph>.</source>
          <target state="translated">下面的示例构造<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>，将已命名的对象序列化为<ph id="ph2">`Widget`</ph>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)">
          <source>The example sets various properties of the object before calling the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> method.</source>
          <target state="translated">该示例将之前调用该对象的各种属性<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
          <source>The type of the object that this <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> can serialize.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 可序列化的对象的类型。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> array of additional object types to serialize.</source>
          <target state="translated">要序列化的其他对象类型的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 数组。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into object of a specified type.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的新实例，该类可以将指定类型的对象序列化为 XML 文档，也可以将 XML 文档反序列化为指定类型的对象。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
          <source>If a property or field returns an array, the <ph id="ph1">&lt;paramref name="extraTypes" /&gt;</ph> parameter specifies objects that can be inserted into the array.</source>
          <target state="translated">如果属性或字段返回一个数组，则 <ph id="ph1">&lt;paramref name="extraTypes" /&gt;</ph> 参数指定可插入到该数组的对象。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
          <source>By default, if a public property or field returns an object, or array of objects, the object types are automatically serialized.</source>
          <target state="translated">默认情况下，如果公共属性或字段返回一个对象或数组的对象，将自动序列的对象类型。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
          <source>However, if a class contains a field or property that returns an array of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>, any object can be inserted into that array.</source>
          <target state="translated">但是，如果类包含的字段或属性的返回类型的数组<ph id="ph1">&lt;xref:System.Object&gt;</ph>，任何对象可以插入到该数组。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
          <source>In that case, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> must be instructed to expect all the possible object types that are inserted into the <ph id="ph2">&lt;xref:System.Object&gt;</ph> array.</source>
          <target state="translated">在这种情况下，<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>预期插入到的所有可能的对象类型，必须指示<ph id="ph2">&lt;xref:System.Object&gt;</ph>数组。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
          <source>To do this, use the <ph id="ph1">`extraTypes`</ph> parameter to specify the extra object types to serialize or deserialize.</source>
          <target state="translated">若要执行此操作，使用<ph id="ph1">`extraTypes`</ph>参数来指定要序列化或反序列化的额外的对象类型。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
          <source>You can also use the <ph id="ph1">`extraTypes`</ph> parameter to specify types derived from a base class.</source>
          <target state="translated">你还可以使用<ph id="ph1">`extraTypes`</ph>参数来指定类型派生自的基类。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
          <source>For example, suppose a base class named <ph id="ph1">`Phone`</ph> exists, and a class named <ph id="ph2">`InternationalPhone`</ph> derives from it.</source>
          <target state="translated">例如，假设一个名为的基本类<ph id="ph1">`Phone`</ph>存在，和一个名为类<ph id="ph2">`InternationalPhone`</ph>派生自它。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
          <source>Use the <ph id="ph1">`extraTypes`</ph> parameter to specify the derived type as well.</source>
          <target state="translated">使用<ph id="ph1">`extraTypes`</ph>参数来指定派生的类型。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
          <source>The following example serializes an instance of a class that contains a public field that returns an array of objects.</source>
          <target state="translated">下面的示例序列化包含返回的对象数组的公共字段的类的实例。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
          <source>The <ph id="ph1">`extraTypes`</ph> parameter of the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> constructor specifies the types of the objects that can be serialized in the array.</source>
          <target state="translated"><ph id="ph1">`extraTypes`</ph>参数<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>构造函数指定数组中的可序列化的对象的类型。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
          <source>The type of the object to serialize.</source>
          <target state="translated">要序列化的对象的类型。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的新实例，该类可以将指定类型的对象序列化为 XML 文档，也可以将 XML 文档反序列化为指定类型的对象。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
          <source>Each object to be serialized can itself contain instances of classes, which this overload can override with other classes.</source>
          <target state="translated">要序列化的每个对象本身可包含类的实例，此重载可使用其他类重写这些实例。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
          <source>The <ph id="ph1">`overrides`</ph> parameter can be used to control how fields and properties are encoded in XML.</source>
          <target state="translated"><ph id="ph1">`overrides`</ph>参数可以用于控制如何以 xml 格式编码字段和属性。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
          <source>These settings override any attributes that already exist on the objects.</source>
          <target state="translated">这些设置将覆盖任何存在的对象的属性。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
          <source>This can be useful when the source code cannot be modified or multiple encodings are required for the same classes.</source>
          <target state="translated">无法修改的源代码或多个编码所需的相同的类时，这很有用。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
          <source>The following example serializes an instance of a class that is defined in a DLL and to do so, overrides the public members found in the DLL.</source>
          <target state="translated">下面的示例序列化定义在 DLL 中，并为此，将替代在 DLL 中找到的公共成员的类的实例。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
          <source>The type of the object that this <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> can serialize.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 可序列化的对象的类型。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlRootAttribute" /&gt;</ph> that represents the XML root element.</source>
          <target state="translated">表示 XML 根元素的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlRootAttribute" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class that can serialize objects of the specified type into XML documents, and deserialize an XML document into object of the specified type.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的新实例，该类可以将指定类型的对象序列化为 XML 文档，也可以将 XML 文档反序列化为指定类型的对象。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
          <source>It also specifies the class to use as the XML root element.</source>
          <target state="translated">还可以指定作为 XML 根元素使用的类。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
          <source>The root element of an XML document encloses all the other elements.</source>
          <target state="translated">XML 文档的根元素包括所有其他元素。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
          <source>By default, the object specified by the <ph id="ph1">`type`</ph> parameter is serialized as the root element.</source>
          <target state="translated">默认情况下，通过将指定的对象<ph id="ph1">`type`</ph>参数序列化为根元素。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
          <source>Properties, such as the XML element name of the root element, are taken from the <ph id="ph1">`type`</ph> object.</source>
          <target state="translated">属性，如 XML 元素名称的根元素中，将从<ph id="ph1">`type`</ph>对象。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
          <source>However, the <ph id="ph1">`root`</ph> parameter allows you to replace the default object's information by specifying an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlRootAttribute&gt;</ph>; the object allows you to set a different namespace, element name, and so on.</source>
          <target state="translated">但是，<ph id="ph1">`root`</ph>参数使你可以通过指定替换默认对象的信息<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlRootAttribute&gt;</ph>; 的对象允许你设置不同的命名空间、 元素名称和等等。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
          <source>The following example constructs an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> that uses an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlRootAttribute&gt;</ph> that contains various properties of the XML root element, such as its namespace and element name.</source>
          <target state="translated">下面的示例构造<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>使用<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlRootAttribute&gt;</ph>包含各种属性的 XML 根元素，如其命名空间和元素的名称。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>The type of the object that this <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> can serialize.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 可序列化的对象的类型。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /&gt;</ph> that extends or overrides the behavior of the class specified in the <bpt id="p1">&lt;c&gt;</bpt>type<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /&gt;</ph>，它扩展或重写<bpt id="p1">&lt;c&gt;</bpt>type<ept id="p1">&lt;/c&gt;</ept> 参数中指定类的行为。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> array of additional object types to serialize.</source>
          <target state="translated">要序列化的其他对象类型的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 数组。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlRootAttribute" /&gt;</ph> that defines the XML root element properties.</source>
          <target state="translated">定义 XML 根元素属性的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlRootAttribute" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>The default namespace of all XML elements in the XML document.</source>
          <target state="translated">XML 文档中所有 XML 元素的默认命名空间。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class that can serialize objects of type <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> into XML document instances, and deserialize XML document instances into objects of type <ph id="ph3">&lt;see cref="T:System.Object" /&gt;</ph>.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的新实例，该类可将 <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> 类型的对象序列化为 XML 文档实例，并可将 XML 文档实例反序列化为 <ph id="ph3">&lt;see cref="T:System.Object" /&gt;</ph> 类型的对象。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>Each object to be serialized can itself contain instances of classes, which this overload overrides with other classes.</source>
          <target state="translated">要序列化的每个对象本身可包含类的实例，此重载可使用其他类重写这些实例。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>This overload also specifies the default namespace for all the XML elements and the class to use as the XML root element.</source>
          <target state="translated">此重载还指定所有 XML 元素的默认命名空间和用作 XML 根元素的类。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>The <ph id="ph1">`overrides`</ph> parameter allows for the creation of an [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type<ph id="ph2">\&lt;</ph>xref:System.Xml.Serialization.XmlSerializer&gt; that serializes a class that extends or overrides the behavior of a base class.</source>
          <target state="translated"><ph id="ph1">`overrides`</ph>参数允许进行创建 [XmlSerializer 构造函数 (类型，XmlAttributeOverrides，Type<ph id="ph2">\&lt;</ph>xref:System.Xml.Serialization.XmlSerializer &gt;，序列化扩展或重写的行为的类基本类。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>For example, given a DLL, it is possible to create a class that inherits or extends a class contained in the DLL.</source>
          <target state="translated">例如，假如有一个 DLL，它是可以创建继承或扩展 DLL 中包含的类的类。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>To serialize such a class, you must use an instance of the [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type<ph id="ph1">\&lt;</ph>xref:System.Xml.Serialization.XmlAttributeOverrides&gt; class when constructing the [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type<ph id="ph2">\&lt;</ph>xref:System.Xml.Serialization.XmlSerializer&gt;.</source>
          <target state="translated">要序列化此类，必须使用的实例 [XmlSerializer 构造函数 (类型，XmlAttributeOverrides，Type<ph id="ph1">\&lt;</ph>xref:System.Xml.Serialization.XmlAttributeOverrides &gt; 类构造 [XmlSerializer 构造函数 （时类型，XmlAttributeOverrides，Type<ph id="ph2">\&lt;</ph>xref:System.Xml.Serialization.XmlSerializer &gt;。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>For more details, see [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type<ph id="ph1">\&lt;</ph>xref:System.Xml.Serialization.XmlAttributeOverrides&gt;.</source>
          <target state="translated">有关更多详细信息，请参阅 [XmlSerializer 构造函数 (类型，XmlAttributeOverrides，Type<ph id="ph1">\&lt;</ph>xref:System.Xml.Serialization.XmlAttributeOverrides &gt;。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>By default, if a public property or field returns an object, or array of objects, the object types are automatically serialized.</source>
          <target state="translated">默认情况下，如果公共属性或字段返回一个对象或数组的对象，将自动序列的对象类型。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>However, if a class contains a field or property that returns an array of type [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type<ph id="ph1">\&lt;</ph>xref:System.Object&gt;, any object can be inserted into that array.</source>
          <target state="translated">但是，如果类包含的字段或属性的返回类型的数组 [XmlSerializer 构造函数 (类型，XmlAttributeOverrides，Type<ph id="ph1">\&lt;</ph>xref:System.Object &gt;，任何对象可以插入到该数组。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>In that case, the [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type<ph id="ph1">\&lt;</ph>xref:System.Xml.Serialization.XmlSerializer&gt; must be instructed to expect all the possible object types that are inserted into the [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type<ph id="ph2">\&lt;</ph>xref:System.Object&gt; array.</source>
          <target state="translated">在这种情况下，[XmlSerializer 构造函数 (类型，XmlAttributeOverrides，Type<ph id="ph1">\&lt;</ph>xref:System.Xml.Serialization.XmlSerializer &gt; 需要插入到 [XmlSerializer 的所有可能的对象类型，必须指示构造函数 (类型，XmlAttributeOverrides，Type<ph id="ph2">\&lt;</ph>xref:System.Object &gt; 数组。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>To do this, use the <ph id="ph1">`extraTypes`</ph> parameter to specify the extra object types to serialize or deserialize.</source>
          <target state="translated">若要执行此操作，使用<ph id="ph1">`extraTypes`</ph>参数来指定要序列化或反序列化的额外的对象类型。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>The root element of an XML document encloses all the other elements.</source>
          <target state="translated">XML 文档的根元素包括所有其他元素。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>By default, the object specified by the <ph id="ph1">`type`</ph> parameter is serialized as the root element.</source>
          <target state="translated">默认情况下，通过将指定的对象<ph id="ph1">`type`</ph>参数序列化为根元素。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>Properties, such as the XML element name of the root element are taken from the <ph id="ph1">`type`</ph> object.</source>
          <target state="translated">属性，如 XML 元素名称的根元素，将从<ph id="ph1">`type`</ph>对象。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>However, the <ph id="ph1">`root`</ph> parameter allows you to replace the default object's information by specifying an [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type<ph id="ph2">\&lt;</ph>xref:System.Xml.Serialization.XmlRootAttribute&gt;; the object allows you to set a different namespace, element name, and so on.</source>
          <target state="translated">但是，<ph id="ph1">`root`</ph>参数使你可以通过指定替换默认对象的信息 [XmlSerializer 构造函数 (类型，XmlAttributeOverrides，Type<ph id="ph2">\&lt;</ph>xref:System.Xml.Serialization.XmlRootAttribute &gt;;对象允许你设置不同的命名空间、 元素名称和等等。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>Use the <ph id="ph1">`defaultName`</ph> parameter to specify the default namespace of all XML elements generated by the [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type<ph id="ph2">\&lt;</ph>xref:System.Xml.Serialization.XmlSerializer&gt;.</source>
          <target state="translated">使用<ph id="ph1">`defaultName`</ph>参数来指定由生成的所有 XML 元素的默认命名空间 [XmlSerializer 构造函数 (类型，XmlAttributeOverrides，Type<ph id="ph2">\&lt;</ph>xref:System.Xml.Serialization.XmlSerializer &gt;。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>The following example serializes an instance of a class that is defined in a DLL and to do so, overrides the public members found in the class.</source>
          <target state="translated">下面的示例序列化在 DLL 中，并为此定义，因此重写在类中找到的公共成员的类的实例。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>The example also specifies an array of extra types, the default namespace for all XML elements, and the class to use that provides the XML root element information.</source>
          <target state="translated">该示例还指定额外类型外，所有 XML 元素和要使用提供的 XML 根元素信息的类的默认命名空间的数组。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
          <source>The example assumes that the code at the beginning has been compiled into a DLL named <ph id="ph1">`HighSchool`</ph>.</source>
          <target state="translated">该示例假定开头的代码已被编译到名为 DLL <ph id="ph1">`HighSchool`</ph>。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)">
          <source>The type of the object that this <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> can serialize.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 可序列化的对象的类型。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /&gt;</ph> that extends or overrides the behavior of the class specified in the <bpt id="p1">&lt;c&gt;</bpt>type<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /&gt;</ph>，它扩展或重写<bpt id="p1">&lt;c&gt;</bpt>type<ept id="p1">&lt;/c&gt;</ept> 参数中指定类的行为。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> array of additional object types to serialize.</source>
          <target state="translated">要序列化的其他对象类型的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 数组。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlRootAttribute" /&gt;</ph> that defines the XML root element properties.</source>
          <target state="translated">定义 XML 根元素属性的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlRootAttribute" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)">
          <source>The default namespace of all XML elements in the XML document.</source>
          <target state="translated">XML 文档中所有 XML 元素的默认命名空间。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)">
          <source>The location of the types.</source>
          <target state="translated">该类型的位置。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class that can serialize objects of type <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> into XML document instances, and deserialize XML document instances into objects of type <ph id="ph3">&lt;see cref="T:System.Object" /&gt;</ph>.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的新实例，该类可将 <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> 类型的对象序列化为 XML 文档实例，并可将 XML 文档实例反序列化为 <ph id="ph3">&lt;see cref="T:System.Object" /&gt;</ph> 类型的对象。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)">
          <source>Each object to be serialized can itself contain instances of classes, which this overload overrides with other classes.</source>
          <target state="translated">要序列化的每个对象本身可包含类的实例，此重载可使用其他类重写这些实例。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)">
          <source>This overload also specifies the default namespace for all the XML elements and the class to use as the XML root element.</source>
          <target state="translated">此重载还指定所有 XML 元素的默认命名空间和用作 XML 根元素的类。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
          <source>The type of the object that this <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> can serialize.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 可序列化的对象的类型。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /&gt;</ph> that extends or overrides the behavior of the class specified in the <bpt id="p1">&lt;c&gt;</bpt>type<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /&gt;</ph>，它扩展或重写<bpt id="p1">&lt;c&gt;</bpt>type<ept id="p1">&lt;/c&gt;</ept> 参数中指定类的行为。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> array of additional object types to serialize.</source>
          <target state="translated">要序列化的其他对象类型的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 数组。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlRootAttribute" /&gt;</ph> that defines the XML root element properties.</source>
          <target state="translated">定义 XML 根元素属性的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlRootAttribute" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
          <source>The default namespace of all XML elements in the XML document.</source>
          <target state="translated">XML 文档中所有 XML 元素的默认命名空间。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
          <source>The location of the types.</source>
          <target state="translated">该类型的位置。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Security.Policy.Evidence" /&gt;</ph> class that contains credentials required to access types.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Policy.Evidence" /&gt;</ph> 类的实例，其中包含访问类型所需的凭据。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class that can serialize objects of the specified type into XML document instances, and deserialize XML document instances into objects of the specified type.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的新实例，该类可以将指定类型的对象序列化为 XML 文档，也可以将 XML 文档反序列化为指定类型的对象。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
          <source>This overload allows you to supply other types that can be encountered during a serialization or deserialization operation, as well as a default namespace for all XML elements, the class to use as the XML root element, its location, and credentials required for access.</source>
          <target state="translated">此重载允许您提供在序列化或反序列化操作过程中可能遇到的其他类型；还允许您提供所有 XML 元素的默认命名空间，作为 XML 根元素使用的类，类的位置和访问所需的凭据。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
          <source>Allows more precise control over access to a temporary directory and prevents code injection and exploitation.</source>
          <target state="translated">允许更精确地控制到临时目录的访问并阻止注入代码和利用。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
          <source>To use this method, specify a location and give access only to specific users.</source>
          <target state="translated">若要使用此方法，指定的位置，并仅向特定用户授予访问。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
          <source>Administrators can set up policies with evidence lists that match evidence to permissions.</source>
          <target state="translated">管理员可以设置策略的证据列表的匹配权限的证据。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> that points to the document to deserialize.</source>
          <target state="translated">指向要反序列化的文档的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> can deserialize a specified XML document.</source>
          <target state="translated">获取一个值，该值指示此 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 是否可以反序列化指定的 XML 文档。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> can deserialize the object that the <ph id="ph3">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> points to; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此 <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 可以反序列化 <ph id="ph3">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 指向的对象，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.CanDeserialize%2A&gt;</ph> method to check whether an XML document can be deserialized.</source>
          <target state="translated">下面的示例调用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.CanDeserialize%2A&gt;</ph>方法检查 XML 文档是否可以反序列化。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.CreateReader">
          <source>Returns an object used to read the XML document to be serialized.</source>
          <target state="translated">返回一个对象，该对象用于读取要进行序列化的 XML 文档。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.CreateReader">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializationReader" /&gt;</ph> used to read the XML document.</source>
          <target state="translated">一个用于读取 XML 文档的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializationReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.CreateReader">
          <source>Any attempt is made to access the method when the method is not overridden in a descendant class.</source>
          <target state="translated">当未在子类中重写该方法时，为访问该方法进行的任何尝试。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.CreateWriter">
          <source>When overridden in a derived class, returns a writer used to serialize the object.</source>
          <target state="translated">当在派生类中重写时，返回用于序列化对象的编写器。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.CreateWriter">
          <source>An instance that implements the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializationWriter" /&gt;</ph> class.</source>
          <target state="translated">实现 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializationWriter" /&gt;</ph> 类的实例。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.CreateWriter">
          <source>Any attempt is made to access the method when the method is not overridden in a descendant class.</source>
          <target state="translated">当未在子类中重写该方法时，为访问该方法进行的任何尝试。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Deserializes an XML document.</source>
          <target state="translated">反序列化 XML 文档。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> that contains the XML document to deserialize.</source>
          <target state="translated">包含要反序列化的 XML 文档的 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
          <source>Deserializes the XML document contained by the specified <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated">反序列化指定 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 包含的 XML 文档。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> being deserialized.</source>
          <target state="translated">正被反序列化的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
          <source>Deserialization is the process of reading an XML document and constructing an object that is strongly typed to the XML Schema (XSD) of the document.</source>
          <target state="translated">反序列化是读取 XML 文档，并构造强类型化为文档 XML 架构 (XSD) 的对象的过程。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
          <source>Before deserializing, an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> must be constructed using the type of the object that is being deserialized.</source>
          <target state="translated">在反序列化之前,<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>必须使用要反序列化的对象的类型构造。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
          <source>Use the <ph id="ph1">`stream`</ph> parameter to specify an object that derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class, which is designed to write to streams.</source>
          <target state="translated">使用<ph id="ph1">`stream`</ph>参数来指定派生自对象<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>类，该类用于写入流。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
          <source>Classes that derive from the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class include:</source>
          <target state="translated">派生自的类<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>类包括：</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> cannot deserialize the following: arrays of <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> and arrays of <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>无法反序列化以下： 数组<ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>和数组<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
          <source>The following example deserializes an object using a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object.</source>
          <target state="translated">下面的示例进行反序列化对象使用<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> that contains the XML document to deserialize.</source>
          <target state="translated">包含要反序列化的 XML 文档的 <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
          <source>Deserializes the XML document contained by the specified <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated">反序列化指定 <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> 包含的 XML 文档。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> being deserialized.</source>
          <target state="translated">正被反序列化的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
          <source>Deserialization is the process of reading an instance of an XML document and constructing an object that is strongly typed to the XML Schema (XSD) of the document.</source>
          <target state="translated">反序列化是： 读取的 XML 文档实例，并构造的对象被强类型化为 XML 架构 (XSD) 文档的过程。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
          <source>Before deserializing, an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> must be constructed using the type of the object that is being deserialized.</source>
          <target state="translated">在反序列化之前,<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>必须使用要反序列化的对象的类型构造。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
          <source>Classes that inherit from <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> include <ph id="ph2">&lt;xref:System.IO.StringReader&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.StreamReader&gt;</ph>.</source>
          <target state="translated">继承自的类<ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>包括<ph id="ph2">&lt;xref:System.IO.StringReader&gt;</ph>和<ph id="ph3">&lt;xref:System.IO.StreamReader&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
          <source>If you are using a <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> to deserialize an object, you must construct the <ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph> with an appropriate <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph>.</source>
          <target state="translated">如果你使用<ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph>进行反序列化对象，您必须先构造<ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph>与相应<ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
          <source>The encoding specified by the XML document is ignored.</source>
          <target state="translated">指定的 XML 文档的编码将被忽略。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
          <source>To use the encoding specified by the XML document, use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph> overload that takes an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> instead.</source>
          <target state="translated">若要使用指定的 XML 文档的编码，使用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph>采用重载<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>相反。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> automatically detects and uses the encoding specified by the XML document.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>自动检测并使用指定的 XML 文档的编码。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> cannot deserialize the following: arrays of <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> and arrays of <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>无法反序列化以下： 数组<ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>和数组<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
          <source>The following example deserializes an object using a <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> object.</source>
          <target state="translated">下面的示例进行反序列化对象使用<ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
          <source>An error occurred during deserialization.</source>
          <target state="translated">反序列化期间发生错误。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
          <source>The original exception is available using the <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> 属性时可使用原始异常。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.Serialization.XmlSerializationReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializationReader" /&gt;</ph> that contains the XML document to deserialize.</source>
          <target state="translated">包含要反序列化的 XML 文档的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializationReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.Serialization.XmlSerializationReader)">
          <source>Deserializes the XML document contained by the specified <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializationReader" /&gt;</ph>.</source>
          <target state="translated">反序列化指定 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializationReader" /&gt;</ph> 包含的 XML 文档。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.Serialization.XmlSerializationReader)">
          <source>The deserialized object.</source>
          <target state="translated">反序列化的对象。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.Serialization.XmlSerializationReader)">
          <source>Any attempt is made to access the method when the method is not overridden in a descendant class.</source>
          <target state="translated">当未在子类中重写该方法时，为访问该方法进行的任何尝试。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> that contains the XML document to deserialize.</source>
          <target state="translated">包含要反序列化的 XML 文档的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
          <source>Deserializes the XML document contained by the specified <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated">反序列化指定 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 包含的 XML 文档。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> being deserialized.</source>
          <target state="translated">正被反序列化的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
          <source>Deserialization is the process of reading an instance of an XML document and constructing an object that is strongly typed to the XML Schema (XSD) of the document.</source>
          <target state="translated">反序列化是： 读取的 XML 文档实例，并构造的对象被强类型化为 XML 架构 (XSD) 文档的过程。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
          <source>Before deserializing, an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> must be constructed using the type of the object that is being deserialized.</source>
          <target state="translated">在反序列化之前,<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>必须使用要反序列化的对象的类型构造。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> automatically detects and uses the encoding specified by the XML document.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>自动检测并使用指定的 XML 文档的编码。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> cannot deserialize the following: arrays of <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> and arrays of <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>无法反序列化以下： 数组<ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>和数组<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
          <source>The following example deserializes an object using an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">下面的示例进行反序列化对象使用<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
          <source>An error occurred during deserialization.</source>
          <target state="translated">反序列化期间发生错误。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
          <source>The original exception is available using the <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> 属性时可使用原始异常。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> that contains the XML document to deserialize.</source>
          <target state="translated">包含要反序列化的 XML 文档的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)">
          <source>The encoding style of the serialized XML.</source>
          <target state="translated">序列化的 XML 的编码样式。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)">
          <source>Deserializes the XML document contained by the specified <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> and encoding style.</source>
          <target state="translated">反序列化指定 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 和编码样式包含的 XML 文档。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)">
          <source>The deserialized object.</source>
          <target state="translated">反序列化的对象。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)">
          <source>Deserialization is the process of reading an instance of an XML document and constructing an object that is strongly typed to the XML Schema (XSD) of the document.</source>
          <target state="translated">反序列化是： 读取的 XML 文档实例，并构造的对象被强类型化为 XML 架构 (XSD) 文档的过程。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)">
          <source>Before deserializing, an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> must be constructed using the type of the object that is being deserialized.</source>
          <target state="translated">在反序列化之前,<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>必须使用要反序列化的对象的类型构造。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)">
          <source>Set the <ph id="ph1">`encodingStyle`</ph> parameter to "<ph id="ph2">http://schemas.xmlsoap.org/soap/encoding/</ph> " for SOAP version 1.1 encoding; otherwise, set it to "<ph id="ph3">http://www.w3.org/2001/12/soap-encoding</ph>" for SOAP version 1.2 encoding.</source>
          <target state="translated">设置<ph id="ph1">`encodingStyle`</ph>参数"<ph id="ph2">http://schemas.xmlsoap.org/soap/encoding/</ph> "为 SOAP 1.1 版编码;否则，将其设置为"<ph id="ph3">http://www.w3.org/2001/12/soap-encoding</ph>"的 SOAP 版本 1.2 编码。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> cannot deserialize the following: arrays of <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> and arrays of <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>请注意<ept id="p1">**</ept><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>无法反序列化以下： 数组<ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>和数组<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)">
          <source>An error occurred during deserialization.</source>
          <target state="translated">反序列化期间发生错误。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)">
          <source>The original exception is available using the <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> 属性时可使用原始异常。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.Xml.Serialization.XmlDeserializationEvents)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> that contains the document to deserialize.</source>
          <target state="translated">包含要反序列化的文档的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.Xml.Serialization.XmlDeserializationEvents)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /&gt;</ph> 类的实例。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.Xml.Serialization.XmlDeserializationEvents)">
          <source>Deserializes an XML document contained by the specified <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> and allows the overriding of events that occur during deserialization.</source>
          <target state="translated">反序列化一个由指定的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 包含的 XML 文档，并允许重写反序列化过程中发生的事件。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.Xml.Serialization.XmlDeserializationEvents)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> being deserialized.</source>
          <target state="translated">正被反序列化的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.Xml.Serialization.XmlDeserializationEvents)">
          <source>The object being deserialized.</source>
          <target state="translated">正在被反序列化的对象。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String,System.Xml.Serialization.XmlDeserializationEvents)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> class used to read the document.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 类的实例，用于读取文档。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String,System.Xml.Serialization.XmlDeserializationEvents)">
          <source>The encoding used.</source>
          <target state="translated">使用的编码方式。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String,System.Xml.Serialization.XmlDeserializationEvents)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /&gt;</ph> 类的实例。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String,System.Xml.Serialization.XmlDeserializationEvents)">
          <source>Deserializes the object using the data contained by the specified <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 包含的数据反序列化该对象。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String,System.Xml.Serialization.XmlDeserializationEvents)">
          <source>The object being deserialized.</source>
          <target state="translated">正在被反序列化的对象。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String,System.Xml.Serialization.XmlDeserializationEvents)">
          <source>This method is required for deserialization of unknown headers for Web Service scenarios only.</source>
          <target state="translated">此方法是必需的反序列化的未知标头的仅 Web 服务方案。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String,System.Xml.Serialization.XmlDeserializationEvents)">
          <source>This method allows you to avoid event synchronization in Web Service methods.</source>
          <target state="translated">此方法，你可以避免在 Web 服务方法中的事件同步。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Returns an instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class from the specified mappings.</source>
          <target state="translated">从指定的映射返回 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的实例。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlTypeMapping" /&gt;</ph> that maps one type to another.</source>
          <target state="translated">将一种类型映射到另一种类型的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlTypeMapping" /&gt;</ph> 的数组。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[])">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> objects created from an array of <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlTypeMapping" /&gt;</ph> objects.</source>
          <target state="translated">返回从 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 对象的数组创建的 <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlTypeMapping" /&gt;</ph> 对象的数组。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> objects.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 对象数组。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Security.Policy.Evidence)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlMapping" /&gt;</ph> objects used to map one type to another.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlMapping" /&gt;</ph> 对象的数组，这些对象用于将一个类型映射到另一个类型。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Security.Policy.Evidence)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Security.Policy.Evidence" /&gt;</ph> class that contains host and assembly data presented to the common language runtime policy system.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Policy.Evidence" /&gt;</ph> 类的实例，包含为公共语言运行时策略系统提供的主机数据和程序集数据。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Security.Policy.Evidence)">
          <source>Returns an instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class created from mappings of one XML type to another.</source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的实例，该类通过一个 XML 类型到另一个 XML 类型的映射来创建。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Security.Policy.Evidence)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的实例。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Type)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlMapping" /&gt;</ph> objects.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlMapping" /&gt;</ph> 对象数组。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the deserialized object.</source>
          <target state="translated">反序列化的对象的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Type)">
          <source>Returns an instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class from the specified mappings.</source>
          <target state="translated">从指定的映射返回 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的实例。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Type)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 类的实例。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象数组。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> objects created from an array of types.</source>
          <target state="translated">返回从类型数组创建的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 对象的数组。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> objects.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 对象数组。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.FromTypes%2A&gt;</ph> method allows you to efficiently create an array of <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> objects for processing an array of <ph id="ph3">&lt;xref:System.Type&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.FromTypes%2A&gt;</ph>方法可以有效地创建的数组<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>用于处理的数组对象<ph id="ph3">&lt;xref:System.Type&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.FromTypes%2A&gt;</ph> method to return an array of <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> objects.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.FromTypes%2A&gt;</ph>方法返回的数组<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])">
          <source>The code includes three class definitions that are each used to create an array of <ph id="ph1">&lt;xref:System.Type&gt;</ph> objects.</source>
          <target state="translated">代码包含用于创建数组的每个的三个类定义<ph id="ph1">&lt;xref:System.Type&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Returns an assembly that contains typed serializers.</source>
          <target state="translated">返回一个程序集，其中包含类型化的序列化程序。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The <bpt id="p1">[</bpt>XML Serializer Generator Tool (Sgen.exe)<ept id="p1">](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md)</ept> creates an XML serialization assembly for types in a specified assembly to improve the run-time performance of an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> when it serializes or deserializes objects of the specified types.</source>
          <target state="translated"><bpt id="p1">[</bpt>XML 序列化程序生成器工具 (Sgen.exe)<ept id="p1">](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md)</ept>创建类型的 XML 序列化程序集指定的程序集中，以提高运行时性能<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>时序列化或反序列化的对象指定的类型。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A&gt;</ph> to return the name of such an assembly.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A&gt;</ph>返回此类程序集的名称。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>If you are distributing such an assembly as part of a client application that calls a Web service, you can apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute&gt;</ph> to the client type to specify the location and name of the assembly.</source>
          <target state="translated">如果你要分发的客户端应用程序调用的 Web 服务的一部分的此类程序集，则可以应用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute&gt;</ph>为客户端类型，以指定的位置和名称的程序集。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[])">
          <source>A collection of types.</source>
          <target state="translated">类型集合。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[])">
          <source>A collection of <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlMapping" /&gt;</ph> objects used to convert one type to another.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlMapping" /&gt;</ph> 对象的集合，用于将一个类型转换为另一个类型。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[])">
          <source>Returns an assembly that contains custom-made serializers used to serialize or deserialize the specified type or types, using the specified mappings.</source>
          <target state="translated">使用指定映射返回一个程序集，该程序集包含的自定义序列化程序用于序列化或反序列化指定的一个或多个类型。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> object that contains serializers for the supplied types and mappings.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> 对象，包含提供的类型和映射的序列化程序。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[],System.CodeDom.Compiler.CompilerParameters)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that contains objects used to serialize and deserialize data.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 类型的数组，其中包含的对象用于对数据进行序列化和反序列化。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[],System.CodeDom.Compiler.CompilerParameters)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlMapping" /&gt;</ph> that maps the XML data to the type data.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlMapping" /&gt;</ph> 类型的数组，它将 XML 数据映射到类型数据。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[],System.CodeDom.Compiler.CompilerParameters)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> class that represents the parameters used to invoke a compiler.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> 类的实例，表示用于调用编译器的参数。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[],System.CodeDom.Compiler.CompilerParameters)">
          <source>Returns an assembly that contains custom-made serializers used to serialize or deserialize the specified type or types, using the specified mappings and compiler settings and options.</source>
          <target state="translated">使用指定映射、编译器设置和选项返回一个程序集，该程序集包含的自定义序列化程序用于序列化或反序列化指定的一个或多个类型。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[],System.CodeDom.Compiler.CompilerParameters)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> that contains special versions of the <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> 包含 <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 的专用版本。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Returns the name of the assembly that contains one or more versions of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> especially created to serialize or deserialize specific types.</source>
          <target state="translated">返回程序集的名称，该程序集包含专门为序列化或反序列化特定类型创建的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 的一个或多个版本。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>The <bpt id="p1">[</bpt>XML Serializer Generator Tool (Sgen.exe)<ept id="p1">](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md)</ept> creates an XML serialization assembly for types in a specified assembly to improve the run-time performance of an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> when it serializes or deserializes objects of the specified types.</source>
          <target state="translated"><bpt id="p1">[</bpt>XML 序列化程序生成器工具 (Sgen.exe)<ept id="p1">](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md)</ept>创建类型的 XML 序列化程序集指定的程序集中，以提高运行时性能<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>时序列化或反序列化的对象指定的类型。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A&gt;</ph> to return the name of such an assembly.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A&gt;</ph>返回此类程序集的名称。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>If you are distributing such an assembly as part of a client application that calls a Web service, you can apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute&gt;</ph> to the client type to specify the location and name of the assembly.</source>
          <target state="translated">如果你要分发的客户端应用程序调用的 Web 服务的一部分的此类程序集，则可以应用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute&gt;</ph>为客户端类型，以指定的位置和名称的程序集。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> you are deserializing.</source>
          <target state="translated">正在进行反序列化的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type)">
          <source>Returns the name of the assembly that contains one or more versions of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> especially created to serialize or deserialize the specified type.</source>
          <target state="translated">返回程序集的名称，该程序集包含专门为序列化或反序列化特定类型创建的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 的一个或多个版本。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type)">
          <source>The name of the assembly that contains an <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> for the type.</source>
          <target state="translated">包含该类型的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 的程序集的名称。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type)">
          <source>The <bpt id="p1">[</bpt>XML Serializer Generator Tool (Sgen.exe)<ept id="p1">](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md)</ept> creates an XML serialization assembly for types in a specified assembly to improve the run-time performance of an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> when it serializes or deserializes objects of the specified types.</source>
          <target state="translated"><bpt id="p1">[</bpt>XML 序列化程序生成器工具 (Sgen.exe)<ept id="p1">](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md)</ept>创建类型的 XML 序列化程序集指定的程序集中，以提高运行时性能<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>时序列化或反序列化的对象指定的类型。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type)">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A&gt;</ph> to return the name of such an assembly.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A&gt;</ph>返回此类程序集的名称。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type)">
          <source>If you are distributing such an assembly as part of a client application that calls a Web service, you can apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute&gt;</ph> to the client type to specify the location and name of the assembly.</source>
          <target state="translated">如果你要分发的客户端应用程序调用的 Web 服务的一部分的此类程序集，则可以应用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute&gt;</ph>为客户端类型，以指定的位置和名称的程序集。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> you are interested in.</source>
          <target state="translated">您关注的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type,System.String)">
          <source>The namespace of the type.</source>
          <target state="translated">类型的命名空间。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type,System.String)">
          <source>Returns the name of the assembly that contains the serializer for the specified type in the specified namespace.</source>
          <target state="translated">返回程序集的名称，该程序集包含指定命名空间中指定类型的序列化程序。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type,System.String)">
          <source>The name of the assembly that contains specially built serializers.</source>
          <target state="translated">程序集的名称，该程序集包含专门生成的序列化程序。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type,System.String)">
          <source>The <bpt id="p1">[</bpt>XML Serializer Generator Tool (Sgen.exe)<ept id="p1">](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md)</ept> creates an XML serialization assembly for types in a specified assembly to improve the run-time performance of an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> when it serializes or deserializes objects of the specified types.</source>
          <target state="translated"><bpt id="p1">[</bpt>XML 序列化程序生成器工具 (Sgen.exe)<ept id="p1">](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md)</ept>创建类型的 XML 序列化程序集指定的程序集中，以提高运行时性能<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>时序列化或反序列化的对象指定的类型。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type,System.String)">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A&gt;</ph> to return the name of such an assembly.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A&gt;</ph>返回此类程序集的名称。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type,System.String)">
          <source>If you are distributing such an assembly as part of a client application that calls a Web service, you can apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute&gt;</ph> to the client type to specify the location and name of the assembly.</source>
          <target state="translated">如果你要分发的客户端应用程序调用的 Web 服务的一部分的此类程序集，则可以应用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute&gt;</ph>为客户端类型，以指定的位置和名称的程序集。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="T:System.Xml.Serialization.XmlSerializer">
          <source>Serializes an object into an XML document.</source>
          <target state="translated">将对象序列化到 XML 文档中。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> used to write the XML document.</source>
          <target state="translated">用于编写 XML 文档的 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to serialize.</source>
          <target state="translated">要序列化的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
          <source>Serializes the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> and writes the XML document to a file using the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 序列化指定的 <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 并将 XML 文档写入文件。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> method converts the public fields and read/write properties of an object into XML.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph>方法将 XML 转换为的公共字段和对象的读/写属性。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
          <source>It does not convert methods, indexers, private fields, or read-only properties.</source>
          <target state="translated">它不转换方法、 索引、 私有字段或只读属性。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
          <source>To serialize all of an object's fields and properties, both public and private, use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>.</source>
          <target state="translated">要序列化的所有对象的字段和属性，公钥和私钥，使用<ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
          <source>In the <ph id="ph1">`stream`</ph> parameter, specify an object that derives from the abstract <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">在<ph id="ph1">`stream`</ph>参数，指定一个对象，派生自抽象<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
          <source>Classes that derive from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> include:</source>
          <target state="translated">派生自的类<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>包括：</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> cannot serialize the following: arrays of <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> and arrays of <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>无法序列化以下： 数组<ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>和数组<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
          <source>The following example serializes an object using a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object.</source>
          <target state="translated">下面的示例序列化对象使用<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
          <source>An error occurred during serialization.</source>
          <target state="translated">序列化期间发生错误。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
          <source>The original exception is available using the <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> 属性时可使用原始异常。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> used to write the XML document.</source>
          <target state="translated">用于编写 XML 文档的 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to serialize.</source>
          <target state="translated">要序列化的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
          <source>Serializes the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> and writes the XML document to a file using the specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 序列化指定的 <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 并将 XML 文档写入文件。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> method converts the public fields and read/write properties of an object into XML.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph>方法将 XML 转换为的公共字段和对象的读/写属性。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
          <source>It does not convert methods, indexers, private fields, or read-only properties.</source>
          <target state="translated">它不转换方法、 索引、 私有字段或只读属性。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
          <source>To serialize all an object's fields and properties, both public and private, use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>.</source>
          <target state="translated">要序列化对象的所有字段和属性，公钥和私钥，使用<ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
          <source>In the <ph id="ph1">`textWriter`</ph> parameter, specify an object that derives from the abstract <ph id="ph2">&lt;xref:System.IO.TextWriter&gt;</ph> class.</source>
          <target state="translated">在<ph id="ph1">`textWriter`</ph>参数，指定一个对象，派生自抽象<ph id="ph2">&lt;xref:System.IO.TextWriter&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
          <source>Classes that derive from <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> include:</source>
          <target state="translated">派生自的类<ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph>包括：</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> cannot serialize the following: arrays of <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> and arrays of <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>无法序列化以下： 数组<ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>和数组<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
          <source>The following example serializes an object using a <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph>.</source>
          <target state="translated">下面的示例序列化对象使用<ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Object,System.Xml.Serialization.XmlSerializationWriter)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to serialize.</source>
          <target state="translated">要序列化的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Object,System.Xml.Serialization.XmlSerializationWriter)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializationWriter" /&gt;</ph> used to write the XML document.</source>
          <target state="translated">用于编写 XML 文档的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializationWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Object,System.Xml.Serialization.XmlSerializationWriter)">
          <source>Serializes the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> and writes the XML document to a file using the specified <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlSerializationWriter" /&gt;</ph>.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 序列化指定的 <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlSerializationWriter" /&gt;</ph> 并将 XML 文档写入文件。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Object,System.Xml.Serialization.XmlSerializationWriter)">
          <source>Any attempt is made to access the method when the method is not overridden in a descendant class.</source>
          <target state="translated">当未在子类中重写该方法时，为访问该方法进行的任何尝试。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> used to write the XML document.</source>
          <target state="translated">用于编写 XML 文档的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to serialize.</source>
          <target state="translated">要序列化的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
          <source>Serializes the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> and writes the XML document to a file using the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 序列化指定的 <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> 并将 XML 文档写入文件。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> method converts the public fields and read/write properties of an object into XML.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph>方法将 XML 转换为的公共字段和对象的读/写属性。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
          <source>It does not convert methods, indexers, private fields, or read-only properties.</source>
          <target state="translated">它不转换方法、 索引、 私有字段或只读属性。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
          <source>To serialize all an object's fields and properties, both public and private, use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>.</source>
          <target state="translated">要序列化对象的所有字段和属性，公钥和私钥，使用<ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
          <source>In the <ph id="ph1">`xmlWriter`</ph> parameter, specify an object that derives from the abstract <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> class.</source>
          <target state="translated">在<ph id="ph1">`xmlWriter`</ph>参数，指定一个对象，派生自抽象<ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> derives from the <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>派生自<ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> cannot serialize the following: arrays of <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> and arrays of <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>无法序列化以下： 数组<ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>和数组<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
          <source>The following example serializes an object using an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated">下面的示例序列化对象使用<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
          <source>An error occurred during serialization.</source>
          <target state="translated">序列化期间发生错误。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
          <source>The original exception is available using the <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> 属性时可使用原始异常。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> used to write the XML document.</source>
          <target state="translated">用于编写 XML 文档的 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to serialize.</source>
          <target state="translated">要序列化的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /&gt;</ph> referenced by the object.</source>
          <target state="translated">该对象所引用的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>Serializes the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> and writes the XML document to a file using the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> that references the specified namespaces.</source>
          <target state="translated">使用引用指定命名空间的指定 <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 序列化指定的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 并将 XML 文档写入文件。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> method is invoked, the public fields and read/write properties of an object are converted into XML.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph>调用方法、 公共字段和对象的读/写属性转换为 XML。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>Methods, indexers, private fields, and read-only properties are not serialized.</source>
          <target state="translated">方法、 索引、 私有字段和只读属性不会序列化。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>To serialize all fields and properties, both public and private, use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>.</source>
          <target state="translated">要序列化所有字段和属性，公钥和私钥，使用<ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>Use the <ph id="ph1">`stream`</ph> parameter to specify an object that derives from the abstract <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class, which is designed to write to streams.</source>
          <target state="translated">使用<ph id="ph1">`stream`</ph>参数来指定派生自抽象对象<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>类，该类用于写入流。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>Classes that derive from the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class include:</source>
          <target state="translated">派生自的类<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>类包括：</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> cannot serialize the following: arrays of <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> and arrays of <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>无法序列化以下： 数组<ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>和数组<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The following example serializes an object with a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object.</source>
          <target state="translated">下面的示例将具有的对象序列化为<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The example also creates an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph> and adds two namespaces to the object.</source>
          <target state="translated">此示例还创建<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph>并将两个命名空间添加到对象。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The class that defines the serialized object is also attributed with <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> attributes to specify the namespace for each element.</source>
          <target state="translated">定义序列化的对象的类还使用特性化<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph>特性来指定每个元素的命名空间。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>An error occurred during serialization.</source>
          <target state="translated">序列化期间发生错误。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The original exception is available using the <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> 属性时可使用原始异常。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> used to write the XML document.</source>
          <target state="translated">用于编写 XML 文档的 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to serialize.</source>
          <target state="translated">要序列化的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /&gt;</ph> that contains namespaces for the generated XML document.</source>
          <target state="translated">包含生成的 XML 文档的命名空间的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>Serializes the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> and writes the XML document to a file using the specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> and references the specified namespaces.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 和指定命名空间序列化指定的 <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 并将 XML 文档写入文件。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> method is invoked the public fields and read/write properties of an object are converted into XML.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph>调用方法的公共字段和对象的读/写属性转换为 XML。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>Methods, indexers, private fields, and read-only properties are not serialized.</source>
          <target state="translated">方法、 索引、 私有字段和只读属性不会序列化。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>To serialize all fields and properties, both public and private, use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>.</source>
          <target state="translated">要序列化所有字段和属性，公钥和私钥，使用<ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>Use the <ph id="ph1">`textWriter`</ph> parameter to specify an object that derives from the abstract <ph id="ph2">&lt;xref:System.IO.TextWriter&gt;</ph> class.</source>
          <target state="translated">使用<ph id="ph1">`textWriter`</ph>参数来指定派生自抽象对象<ph id="ph2">&lt;xref:System.IO.TextWriter&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>Classes that derive from <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> class include:</source>
          <target state="translated">派生自的类<ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph>类包括：</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> cannot serialize the following: arrays of <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> and arrays of <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>无法序列化以下： 数组<ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>和数组<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The following example serializes an object with a <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph>.</source>
          <target state="translated">下面的示例将具有的对象序列化为<ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The example also creates an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph> object and adds two namespaces to the object.</source>
          <target state="translated">此示例还创建<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph>对象并将两个命名空间添加到对象。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The class that defines the serialized object is also attributed with <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> attributes to specify the namespace for each element.</source>
          <target state="translated">定义序列化的对象的类还使用特性化<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph>特性来指定每个元素的命名空间。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>An error occurred during serialization.</source>
          <target state="translated">序列化期间发生错误。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The original exception is available using the <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> 属性时可使用原始异常。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> used to write the XML document.</source>
          <target state="translated">用于编写 XML 文档的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to serialize.</source>
          <target state="translated">要序列化的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /&gt;</ph> referenced by the object.</source>
          <target state="translated">该对象所引用的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>Serializes the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> and writes the XML document to a file using the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> and references the specified namespaces.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 和指定命名空间序列化指定的 <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> 并将 XML 文档写入文件。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> method is invoked, the public fields and read/write properties of an object are converted into XML.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph>调用方法、 公共字段和对象的读/写属性转换为 XML。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>Methods, indexers, private fields, and read-only properties are not serialized.</source>
          <target state="translated">方法、 索引、 私有字段和只读属性不会序列化。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>To serialize all fields and properties, both public and private, use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>.</source>
          <target state="translated">要序列化所有字段和属性，公钥和私钥，使用<ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>Use the <ph id="ph1">`xmlWriter`</ph> parameter to specify an object that derives from the abstract <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> class, which is designed to write XML documents.</source>
          <target state="translated">使用<ph id="ph1">`xmlWriter`</ph>参数来指定派生自抽象对象<ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>类，该类用于写入 XML 文档。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> derives from the <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>派生自<ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> cannot serialize the following: arrays of <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> and arrays of <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>无法序列化以下： 数组<ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>和数组<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The following example serializes an object with an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated">下面的示例将具有的对象序列化为<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The example also creates an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph> and adds two namespaces to the object.</source>
          <target state="translated">此示例还创建<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph>并将两个命名空间添加到对象。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>Several instances of the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> class are applied to the class members to specify the namespace for each element.</source>
          <target state="translated">几个实例<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph>类应用于类成员，以指定每个元素的命名空间。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>An error occurred during serialization.</source>
          <target state="translated">序列化期间发生错误。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
          <source>The original exception is available using the <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> 属性时可使用原始异常。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> used to write the XML document.</source>
          <target state="translated">用于编写 XML 文档的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
          <source>The object to serialize.</source>
          <target state="translated">要序列化的对象。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /&gt;</ph> referenced by the object.</source>
          <target state="translated">该对象所引用的 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
          <source>The encoding style of the serialized XML.</source>
          <target state="translated">序列化的 XML 的编码样式。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
          <source>Serializes the specified object and writes the XML document to a file using the specified <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> and references the specified namespaces and encoding style.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> 和指定命名空间及编码样式序列化指定对象并将 XML 文档写入文件。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> method is invoked, the public fields and read/write properties of an object are converted into XML.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph>调用方法、 公共字段和对象的读/写属性转换为 XML。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
          <source>Methods, indexers, private fields, and read-only properties are not serialized.</source>
          <target state="translated">方法、 索引、 私有字段和只读属性不会序列化。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
          <source>To serialize all fields and properties, both public and private, use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>.</source>
          <target state="translated">要序列化所有字段和属性，公钥和私钥，使用<ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
          <source>Use the <ph id="ph1">`xmlWriter`</ph> parameter to specify an object that derives from the abstract <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> class, which is designed to write XML documents.</source>
          <target state="translated">使用<ph id="ph1">`xmlWriter`</ph>参数来指定派生自抽象对象<ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>类，该类用于写入 XML 文档。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> derives from the <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>派生自<ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
          <source>Set the <ph id="ph1">`encodingStyle`</ph> parameter to "<ph id="ph2">http://schemas.xmlsoap.org/soap/encoding/</ph>" for SOAP version 1.1 encoding; otherwise, set it to "<ph id="ph3">http://www.w3.org/2001/12/soap-encoding</ph>" for SOAP version 1.2 encoding.</source>
          <target state="translated">设置<ph id="ph1">`encodingStyle`</ph>参数"<ph id="ph2">http://schemas.xmlsoap.org/soap/encoding/</ph>"为 SOAP 1.1 版编码; 否则，将其设置为"<ph id="ph3">http://www.w3.org/2001/12/soap-encoding</ph>"的 SOAP 版本 1.2 编码。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> cannot serialize the following: arrays of <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> and arrays of <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>无法序列化以下： 数组<ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>和数组<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
          <source>An error occurred during serialization.</source>
          <target state="translated">序列化期间发生错误。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
          <source>The original exception is available using the <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> 属性时可使用原始异常。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> used to write the XML document.</source>
          <target state="translated">用于编写 XML 文档的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)">
          <source>The object to serialize.</source>
          <target state="translated">要序列化的对象。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)">
          <source>An instance of the <ph id="ph1">&lt;see langword="XmlSerializaerNamespaces" /&gt;</ph> that contains namespaces and prefixes to use.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="XmlSerializaerNamespaces" /&gt;</ph> 的实例，其中包含要使用的命名空间和前缀。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)">
          <source>The encoding used in the document.</source>
          <target state="translated">该文档中使用的编码。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)">
          <source>For SOAP encoded messages, the base used to generate id attributes.</source>
          <target state="translated">对于 SOAP 编码消息，这是用于生成 id 特性的基。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)">
          <source>Serializes the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> and writes the XML document to a file using the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>, XML namespaces, and encoding.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>、XML 命名空间和编码序列化指定的 <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> 并将 XML 文档写入文件。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)">
          <source>The <bpt id="p1">*</bpt>id<ept id="p1">*</ept> parameter supplies the base string used to create SOAP ids.</source>
          <target state="translated"><bpt id="p1">*</bpt>Id<ept id="p1">*</ept>参数提供用于创建 SOAP id 的基本字符串。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)">
          <source>By default, these are "id1", "id2" and so on.</source>
          <target state="translated">默认情况下，它们是"id1"、"id2"等。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)">
          <source>But if the parameter is set to "myBase" the generated values are "myBaseid1", "myBaseid2" and so on.</source>
          <target state="translated">但如果参数设置为"myBase"生成的值是"myBaseid1"，"myBaseid2"，依此类推。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)">
          <source>This functionality is used to create unique id values across the whole SOAP message.</source>
          <target state="translated">此功能用于创建跨整个的 SOAP 消息的唯一 id 值。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute">
          <source>Occurs when the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> encounters an XML attribute of unknown type during deserialization.</source>
          <target state="translated">当 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 在反序列化过程中遇到未知类型的 XML 特性时发生。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute">
          <source>By default, after calling the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> ignores XML attributes of unknown types.</source>
          <target state="translated">默认情况下，在调用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph>方法，<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>会忽略未知类型的 XML 属性。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute">
          <source>However, you can use this event to handle such node types.</source>
          <target state="translated">但是，你可以使用此事件来处理此类节点类型。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute">
          <source>If the instance of the class being deserialized contains a field that returns an array of <ph id="ph1">&lt;xref:System.Xml.XmlAttribute&gt;</ph> objects and an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAnyAttributeAttribute&gt;</ph> has been applied to the field, the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer.UnknownAttribute&gt;</ph> event does not occur.</source>
          <target state="translated">如果要反序列化类的实例包含返回的数组的字段<ph id="ph1">&lt;xref:System.Xml.XmlAttribute&gt;</ph>对象和<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAnyAttributeAttribute&gt;</ph>已应用于字段，<ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer.UnknownAttribute&gt;</ph>事件不会发生。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute">
          <source>Instead, all unknown XML attributes are collected into the array.</source>
          <target state="translated">相反，所有未知的 XML 属性将收集到数组。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute">
          <source>The following example prints information about any unknown attributes encountered while deserializing an XML document.</source>
          <target state="translated">下面的示例将打印在反序列化 XML 文档时遇到的任何未知属性有关的信息。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="E:System.Xml.Serialization.XmlSerializer.UnknownElement">
          <source>Occurs when the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> encounters an XML element of unknown type during deserialization.</source>
          <target state="translated">当 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 在反序列化过程中遇到未知类型的 XML 元素时发生。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnknownElement">
          <source>By default, after calling the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> ignores XML attributes of unknown types.</source>
          <target state="translated">默认情况下，在调用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph>方法，<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>会忽略未知类型的 XML 属性。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnknownElement">
          <source>However, you can use this event to handle such node types.</source>
          <target state="translated">但是，你可以使用此事件来处理此类节点类型。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnknownElement">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAnyElementAttribute&gt;</ph> is applied to a field that returns an array of <ph id="ph2">&lt;xref:System.Xml.XmlElement&gt;</ph> objects, all unknown elements are collected in the array.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAnyElementAttribute&gt;</ph>应用于返回的数组的字段<ph id="ph2">&lt;xref:System.Xml.XmlElement&gt;</ph>对象，数组中收集所有未知的元素。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnknownElement">
          <source>In that case, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.UnknownElement&gt;</ph> event does not occur.</source>
          <target state="translated">在这种情况下，<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.UnknownElement&gt;</ph>事件不会发生。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnknownElement">
          <source>The following example deserializes a class named <ph id="ph1">`Group`</ph> from a file named UnknownElements.xml.</source>
          <target state="translated">下面的示例将名为的类反序列化<ph id="ph1">`Group`</ph>从名为 UnknownElements.xml 的文件。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnknownElement">
          <source>Whenever an element is found in the file that has no corresponding member in the class, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.UnknownElement&gt;</ph> event occurs.</source>
          <target state="translated">每当在不具备对应成员在类中，该文件中找到的元素<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.UnknownElement&gt;</ph>事件发生。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnknownElement">
          <source>To try the example, paste the following XML code into a file named UnknownElements.xml.</source>
          <target state="translated">若要试用示例，请将以下 XML 代码粘贴到名为 UnknownElements.xml 的文件。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="E:System.Xml.Serialization.XmlSerializer.UnknownNode">
          <source>Occurs when the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> encounters an XML node of unknown type during deserialization.</source>
          <target state="translated">当 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 在反序列化过程中遇到未知类型的 XML 节点时发生。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnknownNode">
          <source>By default, after calling the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> ignores XML nodes of unknown types.</source>
          <target state="translated">默认情况下，在调用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph>方法，<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>忽略未知类型的 XML 节点。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnknownNode">
          <source>However, you can use this event to handle such node types.</source>
          <target state="translated">但是，你可以使用此事件来处理此类节点类型。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnknownNode">
          <source>The following example prints the type of any encountered unknown node.</source>
          <target state="translated">下面的示例将打印任何遇到未知节点的类型。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
          <source>Occurs during deserialization of a SOAP-encoded XML stream, when the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> encounters a recognized type that is not used or is unreferenced.</source>
          <target state="translated">在反序列化 SOAP 编码的 XML 流的过程中发生，此时 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> 遇到未使用（或未引用）的识别类型。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.UnreferencedObject&gt;</ph> event only occurs when the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> is used to deserialize an XML document that contains a SOAP message that conforms to section 5 of the World Wide Web Consortium (www.w3.org) document, "Simple Object Access Protocol (SOAP) 1.1".</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.UnreferencedObject&gt;</ph>才会发生事件时<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>用于反序列化包含符合万维网联合会 (www.w3.org) 文档，"简单对象访问协议 (SOAP) 1.1"的第 5 节的 SOAP 消息的 XML 文档。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
          <source>Documents that conform to section 5 are in a special format.</source>
          <target state="translated">第 5 节符合的文档是特殊格式。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
          <source>At the very least, such a document includes the main body of the SOAP message.</source>
          <target state="translated">最起码这样的文档包括 SOAP 消息的正文。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
          <source>However, rather than having all types defined inline in the document, some type definitions can be encoded as references to top-level elements in the document.</source>
          <target state="translated">但是，而不是具有所有类型以内联方式定义文档中，某些类型定义可以编码为对文档中的顶级元素的引用。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
          <source>Thus, for every element found in the main body that is a reference, there must be a corresponding element that contains the type definition.</source>
          <target state="translated">因此，为引用的正文中找到每个元素，必须有一个包含类型定义的相应元素。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
          <source>To correlate the referencing element and the type definition, the type definition has an <ph id="ph1">`id`</ph> attribute set to a unique string ID and the referencing element has an <ph id="ph2">`href`</ph> attribute that references the same ID.</source>
          <target state="translated">要关联的引用的元素和类型定义，类型定义应当有<ph id="ph1">`id`</ph>属性设置为唯一字符串 ID 和引用的元素具有<ph id="ph2">`href`</ph>属性引用相同的 id。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.UnreferencedObject&gt;</ph> event occur when there is a type definition found in the document, but no parameter in the main body references it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.UnreferencedObject&gt;</ph>事件发生时在文档中，找到的类型定义但在主正文中的无参数引用它。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
          <source>When the event occurs, you can retrieve the XML type of the unreferenced object by examining the <ph id="ph1">&lt;xref:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Xml.Serialization.UnreferencedObjectEventArgs&gt;</ph> class.</source>
          <target state="translated">发生事件时，你可以通过检查来检索未引用的对象的 XML 类型<ph id="ph1">&lt;xref:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject%2A&gt;</ph>属性<ph id="ph2">&lt;xref:System.Xml.Serialization.UnreferencedObjectEventArgs&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
          <source>The XML ID of the object is returned by the <ph id="ph1">&lt;xref:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId%2A&gt;</ph> property.</source>
          <target state="translated">返回对象的 XML ID<ph id="ph1">&lt;xref:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.UnreferencedObject&gt;</ph> event should not be confused with the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer.UnknownElement&gt;</ph> and <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer.UnknownNode&gt;</ph> events, which occur when there is no class member that corresponds to the XML node or element type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.UnreferencedObject&gt;</ph>事件不应与混淆<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer.UnknownElement&gt;</ph>和<ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer.UnknownNode&gt;</ph>没有对应的 XML 节点或元素类型的类成员时，可能发生的事件。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
          <source>The following example adds an <ph id="ph1">&lt;xref:System.Xml.Serialization.UnreferencedObjectEventHandler&gt;</ph> to an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
          <target state="translated">下面的示例添加<ph id="ph1">&lt;xref:System.Xml.Serialization.UnreferencedObjectEventHandler&gt;</ph>到<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
          <source>The event is handled by the <ph id="ph1">`Serializer``_``UnreferencedObject`</ph> method.</source>
          <target state="translated">事件由处理<ph id="ph1">`Serializer``_``UnreferencedObject`</ph>方法。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
          <source>To run the example, cut and paste the following XML into a file named "UnrefObj.xml".</source>
          <target state="translated">若要运行该示例，剪切并粘贴到名为"UnrefObj.xml"的文件的以下 XML。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>