<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IXmlSerializable.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58155c578ca3a365629ee4d705a95789ebfd67428.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8155c578ca3a365629ee4d705a95789ebfd67428</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>Provides custom formatting for XML serialization and deserialization.</source>
          <target state="translated">为 XML 序列化和反序列化提供自定义格式。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>There are two reasons to implement this interface.</source>
          <target state="translated">有两个原因，若要实现此接口。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>The first is to control how your object is serialized or deserialized by the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
          <target state="translated">第一种是控制你的对象进行序列化或反序列化如何<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>For example, you can chunk data into bytes instead of buffering large data sets, and also avoid the inflation that occurs when the data is encoded using Base64 encoding.</source>
          <target state="translated">例如，可以区块数据转换为字节，而不是缓冲大型数据集，并还能避免放大时发生数据使用 Base64 编码进行编码。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>To control the serialization, implement the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph> methods to control the <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph> and <ph id="ph4">&lt;xref:System.Xml.XmlWriter&gt;</ph> classes used to read and write the XML.</source>
          <target state="translated">若要控制序列化，实现<ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph>方法可用于控制<ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph>和<ph id="ph4">&lt;xref:System.Xml.XmlWriter&gt;</ph>类用于读取和写入 XML。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>For an example of this, see <bpt id="p1">[</bpt>How to: Chunk Serialized Data<ept id="p1">](~/docs/standard/serialization/how-to-chunk-serialized-data.md)</ept>.</source>
          <target state="translated">此示例，请参阅<bpt id="p1">[</bpt>How to： 块区序列化数据<ept id="p1">](~/docs/standard/serialization/how-to-chunk-serialized-data.md)</ept>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>The second reason is to be able to control the schema.</source>
          <target state="translated">第二个原因是要能够对架构进行控制。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>To enable this, you must apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph> to the serializable type, and specify the name of the static member that returns the schema.</source>
          <target state="translated">若要启用此功能，必须应用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph>到的可序列化类型，并指定返回的架构的静态成员的名称。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>See the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph> for an example.</source>
          <target state="translated">请参阅<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph>有关示例。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>A class that implements the interface must have a parameterless constructor.</source>
          <target state="translated">实现接口的类必须具有无参数构造函数。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>This is a requirement of the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class.</source>
          <target state="translated">这是的要求<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>The following example code shows an implementation of the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface that serializes a private field.</source>
          <target state="translated">下面的代码示例演示如何实现<ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>序列化为一个私有字段的接口。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>This method is reserved and should not be used.</source>
          <target state="translated">此方法是保留方法，请不要使用。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>When implementing the <ph id="ph1">&lt;see langword="IXmlSerializable" /&gt;</ph> interface, you should return <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <ph id="ph4">&lt;see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /&gt;</ph> to the class.</source>
          <target state="translated">在实现 <ph id="ph1">&lt;see langword="IXmlSerializable" /&gt;</ph> 接口时，应从此方法返回 <ph id="ph2">&lt;see langword="null" /&gt;</ph>（在 Visual Basic 中为 <ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>），如果需要指定自定义架构，应向该类应用 <ph id="ph4">&lt;see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph> that describes the XML representation of the object that is produced by the <ph id="ph2">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /&gt;</ph> method and consumed by the <ph id="ph3">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /&gt;</ph> method.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph>，描述由 <ph id="ph2">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /&gt;</ph> 方法生成并由 <ph id="ph3">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /&gt;</ph> 方法使用的对象的 XML 表示形式。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>When serializing or deserializing an object, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class does not perform XML validation.</source>
          <target state="translated">当序列化或反序列化对象，<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>类不执行 XML 验证。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>For this reason, it is often safe to omit schema information by providing a trivial implementation of this method, for example by returning <ph id="ph1">`null`</ph> (<ph id="ph2">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">为此，通常很安全地忽略通过提供的简单实现来这种方法，例如通过返回的架构信息<ph id="ph1">`null`</ph>(<ph id="ph2">`Nothing`</ph>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>If providing schema information is necessary, you should use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph> attribute.</source>
          <target state="translated">如果提供架构信息是必需的则应使用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>The <ph id="ph1">`GetSchema`</ph> method should still return <ph id="ph2">`null`</ph> (or <ph id="ph3">`Nothing`</ph>).</source>
          <target state="translated"><ph id="ph1">`GetSchema`</ph>方法仍应返回<ph id="ph2">`null`</ph>(或<ph id="ph3">`Nothing`</ph>)。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>Some <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> types as well as legacy custom types implementing the <ph id="ph2">`IXmlSerializable`</ph> interface may be using <ph id="ph3">`GetSchema`</ph> instead of <ph id="ph4">`XmlSchemaProvider`</ph>.</source>
          <target state="translated">某些<ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>类型，以及旧的自定义类型实现<ph id="ph2">`IXmlSerializable`</ph>可能使用接口<ph id="ph3">`GetSchema`</ph>而不是<ph id="ph4">`XmlSchemaProvider`</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>In this case, the method returns an accurate XML schema that describes the XML representation of the object generated by the <ph id="ph1">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">在这种情况下，该方法返回准确的 XML 架构描述的 XML 表示形式由生成的对象<ph id="ph1">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> stream from which the object is deserialized.</source>
          <target state="translated">对象从中进行反序列化的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 流。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>Generates an object from its XML representation.</source>
          <target state="translated">从对象的 XML 表示形式生成该对象。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph> method must reconstitute your object using the information that was written by the <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph>方法必须重建你使用已写入的信息的对象<ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>When this method is called, the reader is positioned on the start tag that wraps the information for your type.</source>
          <target state="translated">当调用此方法时，读取器定位在包装你的类型的信息的开始标记上。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>That is, directly on the start tag that indicates the beginning of a serialized object.</source>
          <target state="translated">也就是说，直接在开始标记，该值指示序列化对象的开头。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>When this method returns, it must have read the entire element from beginning to end, including all of its contents.</source>
          <target state="translated">此方法返回时，它必须具有读取整个元素从开始到结束，包括所有内容。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph> method, the framework does not handle the wrapper element automatically.</source>
          <target state="translated">与不同<ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph>方法，该框架并不自动处理包装元素。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>Your implementation must do so.</source>
          <target state="translated">您的实现必须执行此操作。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>Failing to observe these positioning rules may cause code to generate unexpected runtime exceptions or corrupt data.</source>
          <target state="translated">如果观察这些定位规则可能会导致代码，以生成意外的运行时异常或已损坏的数据。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>When implementing this method, you should consider the possibility that a malicious user might provide a well-formed but invalid XML representation in order to disable or otherwise alter the behavior of your application.</source>
          <target state="translated">实现此方法时，您应考虑以下可能性恶意用户可能会提供格式正确但无效的 XML 表示形式，以禁用或否则改变你的应用程序的行为。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>The following example illustrates an implementation of the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示的实现<ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class to deserialize this object.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>类反序列化此对象。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> stream to which the object is serialized.</source>
          <target state="translated">对象要序列化为的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> 流。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>Converts an object into its XML representation.</source>
          <target state="translated">将对象转换为其 XML 表示形式。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph> implementation you provide should write out the XML representation of the object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph>你提供的实现应写出的 XML 表示形式的对象。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>The framework writes a wrapper element and positions the XML writer after its start.</source>
          <target state="translated">框架写入包装元素，并在其开始后定位的 XML 编写器。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>Your implementation may write its contents, including child elements.</source>
          <target state="translated">实现可以编写其内容，包括的子元素。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>The framework then closes the wrapper element.</source>
          <target state="translated">框架然后关闭包装元素。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>Write sufficient information to the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> stream to allow the <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph> method to reconstitute your object.</source>
          <target state="translated">写入到的足够信息<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>流，以允许<ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph>方法，以便重建你的对象。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>For example, if your object state includes an array variable, be sure to write the length of the array, or use a parent element to contain the elements that describe the array values, so that you know how many values to read when the object is reconstituted.</source>
          <target state="translated">例如，如果对象的状态包括一个数组变量，一定要写入的长度的数组，或使用父元素可包含描述数组值的元素，以便你知道多少个值时重建对象阅读。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>The following example illustrates an implementation of the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示的实现<ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class to deserialize this object.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>类反序列化此对象。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>