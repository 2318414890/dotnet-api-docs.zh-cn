<Type Name="XmlTextAttribute" FullName="System.Xml.Serialization.XmlTextAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cd1d340d704f2f3871d98c0ff007f941da7ed18b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720761" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlTextAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTextAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlTextAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlTextAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlTextAttribute : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>当串行化或反序列化包含该成员的类时，向 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 指示应将该成员作为 XML 文本处理。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlTextAttribute>属于一系列属性，用于控制如何<xref:System.Xml.Serialization.XmlSerializer>序列化和反序列化对象 (通过其<xref:System.Xml.Serialization.XmlSerializer.Serialize%2A>和<xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A>方法)。 类似的属性的完整列表，请参阅[属性，控制 XML 序列化](~/docs/standard/serialization/attributes-that-control-xml-serialization.md)。  
  
 一个实例<xref:System.Xml.Serialization.XmlTextAttribute>类可以应用类中。  
  
 你可以将应用<xref:System.Xml.Serialization.XmlTextAttribute>到公共字段和返回的基元和枚举类型的公共读/写属性。  
  
 你可以将应用<xref:System.Xml.Serialization.XmlTextAttribute>到字段或属性返回的字符串数组。 你还可以将特性应用于类型的数组<xref:System.Object>，但是必须设置<xref:System.Xml.Serialization.XmlTextAttribute.Type%2A>到字符串的属性。 在这种情况下，插入到数组的任何字符串都序列化为 XML 文本。  
  
 <xref:System.Xml.Serialization.XmlTextAttribute>还可应用于返回的字段<xref:System.Xml.XmlNode>或数组<xref:System.Xml.XmlNode>对象。  
  
 默认情况下，<xref:System.Xml.Serialization.XmlSerializer>序列化的 XML 元素作为类成员。 但是，如果将应用<xref:System.Xml.Serialization.XmlTextAttribute>给成员<xref:System.Xml.Serialization.XmlSerializer>将其值转换成 XML 文本。 这意味着，到 XML 元素的内容编码的值。  
  
 [XML 架构定义工具 (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md)偶尔生成<xref:System.Xml.Serialization.XmlTextAttribute>从 XML 架构定义 (XSD) 文件创建类时。 发生这种情况是当架构包含`complexType`在这种情况下，具有混合内容; 相应的类包含向其返回的字符串数组的成员<xref:System.Xml.Serialization.XmlTextAttribute>应用。 例如，当`Xml Schema Definition`工具处理该架构：  
  
```  
<xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace=""   
xmlns:xs="http://www.w3.org/2001/XMLSchema">  
  <xs:element name="LinkList" type="LinkList" />  
  <xs:complexType name="LinkList" mixed="true">  
    <xs:sequence>  
      <xs:element minOccurs="1" maxOccurs="1" name="id" type="xs:int" />  
      <xs:element minOccurs="0" maxOccurs="1" name="name" type="xs:string" />  
      <xs:element minOccurs="0" maxOccurs="1" name="next" type="LinkList" />  
    </xs:sequence>  
  </xs:complexType>  
</xs:schema>  
```  
  
 生成下面的类 （已删除多余的空格和备注）：  
  
 [!code-csharp[XmlTextAttribute#0](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlTextAttribute/cs/source.cs#0)]
 [!code-vb[XmlTextAttribute#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlTextAttribute/vb/source.vb#0)]  
  
 有关使用属性的详细信息，请参阅[属性](~/docs/standard/attributes/index.md)。  
  
> [!NOTE]
>  你可以使用 word`XmlText`中你的代码而不是较长<xref:System.Xml.Serialization.XmlTextAttribute>。  
  
   
  
## Examples  
 [!code-cpp[Classic XmlTextAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlTextAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlTextAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlTextAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlText" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlTextAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以重写的方式，<xref:System.Xml.Serialization.XmlSerializer>创建序列化的公共字段或公共读/写属性<xref:System.Xml.Serialization.XmlAttributes>，并设置其<xref:System.Xml.Serialization.XmlAttributes.XmlText%2A>属性<xref:System.Xml.Serialization.XmlTextAttribute>。 有关更多详细信息，请参见 <xref:System.Xml.Serialization.XmlAttributeOverrides> 类。  
  
   
  
## Examples  
 下面的示例序列化类，其中包含公共字段，名为`Comment`。 该示例将应用<xref:System.Xml.Serialization.XmlTextAttribute>到字段，从而重写其序列化作为 XML 元素，并改为作为 XML 文本对它进行序列化。  
  
 [!code-cpp[Classic XmlTextAttribute.XmlTextAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlTextAttribute.XmlTextAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlTextAttribute.XmlTextAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlTextAttribute.XmlTextAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlTextAttribute.XmlTextAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlTextAttribute.XmlTextAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextAttribute(Type ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">要进行串行化的成员的 <see cref="T:System.Type" />。</param>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以重写的方式，<xref:System.Xml.Serialization.XmlSerializer>创建序列化的公共字段或公共读/写属性<xref:System.Xml.Serialization.XmlAttributes>，并设置其<xref:System.Xml.Serialization.XmlAttributes.XmlText%2A>属性<xref:System.Xml.Serialization.XmlTextAttribute>。 有关更多详细信息，请参见 <xref:System.Xml.Serialization.XmlAttributeOverrides> 类。  
  
   
  
## Examples  
 [!code-cpp[Classic XmlTextAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlTextAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlTextAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlTextAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlTextAttribute.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成的文本的 XML 架构定义语言 (XSD) 数据类型。</summary>
        <value>XML 架构数据类型，如“万维网联合会”(www.w3.org) 文档“XML 架构第 2 部分：数据类型”所定义。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置<xref:System.Xml.Serialization.XmlTextAttribute.DataType%2A>为 XML 架构简单数据类型的属性影响生成的 XML 的格式。 例如，通过将属性设置为"日期"会导致生成的文本要设置格式中的常规日期样式，例如： 2001年-08-31。 与此相反，将属性设置为"dateTime"结果中定义的国际组织特定时刻标准化文档 8601，"表示的日期和时间"，例如： 2001年-08-15T06:59:11.0508456-07:00。  
  
 设置的效果<xref:System.Xml.Serialization.XmlTextAttribute.DataType%2A>使用时，也可以查看属性[XML 架构定义工具 (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md)以生成已编译文件的 XML 架构。 有关使用该工具的详细信息，请参阅[XML 架构定义工具和 XML 序列化](~/docs/standard/serialization/the-xml-schema-definition-tool-and-xml-serialization.md)。  
  
 下表列出了 XML 架构简单数据类型及其.NET 等效项。  
  
 XML 架构`base64Binary`和`hexBinary`数据类型使用的数组<xref:System.Byte>结构，并应用<xref:System.Xml.Serialization.XmlTextAttribute>与<xref:System.Xml.Serialization.XmlTextAttribute.DataType%2A>设置为"base64Binary"或"hexBinary"根据需要。 XML 架构`time`和`date`数据类型，使用<xref:System.DateTime>键入并应用<xref:System.Xml.Serialization.XmlTextAttribute>与<xref:System.Xml.Serialization.XmlTextAttribute.DataType%2A>设置为"日期"或"时间"。  
  
 对于每个 XML 架构数据类型映射到一个字符串，将应用于<xref:System.Xml.Serialization.XmlTextAttribute>与其<xref:System.Xml.Serialization.XmlTextAttribute.DataType%2A>属性设置为 XML 架构数据类型。 请注意这不会更改的序列化格式，仅该成员的架构。  
  
> [!NOTE]
>  因此你必须将其设置完全符合 XML 架构数据类型之一，该属性是区分大小写。  
  
> [!NOTE]
>  将二进制数据作为 XML 传递元素会更加高效比将其传递 XML 特性。  
  
 有关 XML 架构数据类型的详细信息，请参阅名为"XML 架构第 2： 数据类型"World Wide Web 联合会 (www.w3.org) 文档。  
  
|XSD 数据类型|.NET 数据类型|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|数组<xref:System.Byte>对象|  
|boolean|<xref:System.Boolean>|  
|byte|<xref:System.SByte>|  
|date|<xref:System.DateTime>|  
|dateTime|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|ENTITY|<xref:System.String>|  
|实体|<xref:System.String>|  
|float|<xref:System.Single>|  
|gDay|<xref:System.String>|  
|gMonth|<xref:System.String>|  
|gMonthDay|<xref:System.String>|  
|gYear|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|数组<xref:System.Byte>对象|  
|Id|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|整数|<xref:System.String>|  
|语言|<xref:System.String>|  
|long|<xref:System.Int64>|  
|name|<xref:System.String>|  
|NCName|<xref:System.String>|  
|negativeInteger|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|nonPositiveInteger|<xref:System.String>|  
|NOTATION|<xref:System.String>|  
|positiveInteger|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|持续时间|<xref:System.String>|  
|字符串|<xref:System.String>|  
|short|<xref:System.Int16>|  
|时间|<xref:System.DateTime>|  
|token|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
   
  
## Examples  
 [!code-cpp[Classic XmlTextAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlTextAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlTextAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlTextAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">已指定的 XML 架构数据类型无法映射到 .NET 数据类型。</exception>
        <exception cref="T:System.InvalidOperationException">已指定的 XML 架构数据类型对该属性无效，且无法转换为成员类型。</exception>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlTextAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置成员的类型。</summary>
        <value>成员的 <see cref="T:System.Type" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Type>属性只能设置为基元类型和枚举。  
  
 <xref:System.Xml.Serialization.XmlTextAttribute>还可应用于返回的字段<xref:System.Xml.XmlNode>或数组<xref:System.Xml.XmlNode>对象。  
  
 你可以将应用<xref:System.Xml.Serialization.XmlTextAttribute>到字段或属性返回的字符串数组。 你还可以将特性应用于类型的数组<xref:System.Object>，但是必须设置<xref:System.Xml.Serialization.XmlTextAttribute.Type%2A>到字符串的属性。 在这种情况下，插入到数组的任何字符串都序列化为 XML 文本。  
  
   
  
## Examples  
 [!code-cpp[Classic XmlTextAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlTextAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlTextAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlTextAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>