<Type Name="CodeIdentifiers" FullName="System.Xml.Serialization.CodeIdentifiers">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="16b1c25698b0afa3fb04d166b9e98816c76600d1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720361" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CodeIdentifiers" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CodeIdentifiers extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.CodeIdentifiers" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeIdentifiers" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeIdentifiers" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>维护相关代码实体或类型映射的一组名称，这些名称是 .NET Framework 的 XML 序列化基础结构生成的。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下列表标识工具和类使用<xref:System.Xml.Serialization.CodeIdentifiers>:  
  
-   [Web 服务描述语言工具 (Wsdl.exe)](http://msdn.microsoft.com/library/b9210348-8bc2-4367-8c91-d1a04b403e88)，或<xref:System.Web.Services.Description.ServiceDescriptionImporter>类，而从 Web 服务描述语言 (WSDL) 文档生成客户端代理类或抽象的服务器类。  
  
-   [XML 架构定义工具 (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md)时从 XML 架构定义 (XSD) 文档中生成类的工具。  
  
-   <xref:System.Web.Services.Description.ServiceDescriptionReflector>类在创建时<xref:System.Web.Services.Description.ServiceDescription>从作为 Web 服务通过标识的类的对象<xref:System.Web.Services.WebServiceAttribute>属性。  
  
 而不是使用<xref:System.Xml.Serialization.CodeIdentifiers>直接类，而使用前面提到的工具或类。 如果你想要控制代码实体绑定到 XML 架构或 Web 服务定义的名称，使用关联的属性。  
  
 具体取决于其作用域，<xref:System.Xml.Serialization.CodeIdentifiers>实例用于维护任何以下列表中的项的名称：  
  
-   类型、 方法或字段。  
  
-   参数和返回值对应于 WSDL 方法的输入和输出消息。  
  
-   对象内<xref:System.Web.Services.Description.ServiceDescription>将序列化到 WSDL 文档的实例。  
  
 通常情况下，类用于避免命名冲突之间在特定范围内，包括包含实体的名称冲突的代码实体。  
  
 ]]></format>
    </remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeIdentifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.CodeIdentifiers.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeIdentifiers();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeIdentifiers (bool caseSensitive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool caseSensitive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.CodeIdentifiers.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (caseSensitive As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeIdentifiers(bool caseSensitive);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="caseSensitive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="caseSensitive">
          如果标识符区分大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 类的新实例并确定代码标识符是否区分大小写。</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string identifier, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string identifier, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.CodeIdentifiers.Add(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (identifier As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ identifier, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="identifier">用于对代码实体进行索引的名称。</param>
        <param name="value">代码实体或类型映射信息。</param>
        <summary>将命名的代码实体或类型映射添加到 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与不同<xref:System.Xml.Serialization.CodeIdentifiers.AddUnique%2A>方法，<xref:System.Xml.Serialization.CodeIdentifiers.Add%2A>方法不会阻止命名冲突。  
  
 如果你想要控制代码实体绑定到 XML 架构或 Web 服务定义的名称，使用关联的属性而不创建的实例<xref:System.Xml.Serialization.CodeIdentifiers>类。 完整列表，请参阅[属性，控制 XML 序列化](~/docs/standard/serialization/attributes-that-control-xml-serialization.md)。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="AddReserved">
      <MemberSignature Language="C#" Value="public void AddReserved (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddReserved(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.CodeIdentifiers.AddReserved(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddReserved (identifier As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddReserved(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">将在 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中不可用的名称。</param>
        <summary>防止在 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中使用指定的名称。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 保留的名称可以属于包含的代码实体，如为其也必须生成成员名称的类型。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="AddUnique">
      <MemberSignature Language="C#" Value="public string AddUnique (string identifier, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string AddUnique(string identifier, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.CodeIdentifiers.AddUnique(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddUnique (identifier As String, value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ AddUnique(System::String ^ identifier, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="identifier">用于对代码实体进行索引的候选名称。</param>
        <param name="value">代码实体或类型映射信息。</param>
        <summary>将命名的代码实体或类型映射添加到 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中，确保名称在该范围内是唯一的。</summary>
        <returns>标识符参数值；如果存在名称冲突，则为修改后的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果标识符参数值内不唯一<xref:System.Xml.Serialization.CodeIdentifiers>生成实例的作用域，新的唯一字符串并将其在其位置中使用。 新字符串生成的将追加到输入的名称。 原始名称不是唯一如果以前曾传递给<xref:System.Xml.Serialization.CodeIdentifiers.Add%2A>， <xref:System.Xml.Serialization.CodeIdentifiers.AddUnique%2A>，或<xref:System.Xml.Serialization.CodeIdentifiers.AddReserved%2A>方法，或如果它由以前调用生成<xref:System.Xml.Serialization.CodeIdentifiers.AddUnique%2A>方法。 在每种情况下，如果新的标识符不是唯一的它第一次传递到<xref:System.Xml.Serialization.CodeIdentifiers.MakeUnique%2A>方法来创建新的唯一标识符。  
  
 如果你想要控制代码实体绑定到 XML 架构或 Web 服务定义的名称，使用关联的属性而不创建的实例<xref:System.Xml.Serialization.CodeIdentifiers>类。 完整列表，请参阅[属性，控制 XML 序列化](~/docs/standard/serialization/attributes-that-control-xml-serialization.md)。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.CodeIdentifiers.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中移除所有代码实体或类型映射，包括它们的名称。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 保留名称，如通过添加<xref:System.Xml.Serialization.CodeIdentifiers.AddReserved%2A>方法，不会删除。  
  
 如果你想要控制代码实体绑定到 XML 架构或 Web 服务定义的名称，使用关联的属性而不创建的实例<xref:System.Xml.Serialization.CodeIdentifiers>类。 完整列表，请参阅[属性，控制 XML 序列化](~/docs/standard/serialization/attributes-that-control-xml-serialization.md)。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="IsInUse">
      <MemberSignature Language="C#" Value="public bool IsInUse (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInUse(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.CodeIdentifiers.IsInUse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInUse (identifier As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInUse(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">要检查是否已在 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中使用的名称。</param>
        <summary>确定指定名称是否已在 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中使用。</summary>
        <returns>
          如果名称已使用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 输入的名称不是唯一如果以前曾传递给<xref:System.Xml.Serialization.CodeIdentifiers.Add%2A>， <xref:System.Xml.Serialization.CodeIdentifiers.AddUnique%2A>，或<xref:System.Xml.Serialization.CodeIdentifiers.AddReserved%2A>方法，或如果它由生成<xref:System.Xml.Serialization.CodeIdentifiers.AddUnique%2A>方法。  
  
 如果你想要控制代码实体绑定到 XML 架构或 Web 服务定义的名称，使用关联的属性而不创建的实例<xref:System.Xml.Serialization.CodeIdentifiers>类。 完整列表，请参阅[属性，控制 XML 序列化](~/docs/standard/serialization/attributes-that-control-xml-serialization.md)。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="MakeRightCase">
      <MemberSignature Language="C#" Value="public string MakeRightCase (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MakeRightCase(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.CodeIdentifiers.MakeRightCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MakeRightCase (identifier As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ MakeRightCase(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">可能要修改的名称。</param>
        <summary>根据 <see cref="P:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing" /> 属性的值修改名称，以确保输入的大小写正确。</summary>
        <returns>与输入标识符相同（或改变了首字母的大小写）的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果值<xref:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing%2A>属性是`true`和输入的第一个字符是一个字母，则它由大小写，如有必要。 如果值<xref:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing%2A>是`false`、 Pascal 大小写是否生效，并且第一个字符，如果一个字母，大写，如有必要。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="MakeUnique">
      <MemberSignature Language="C#" Value="public string MakeUnique (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MakeUnique(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.CodeIdentifiers.MakeUnique(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MakeUnique (identifier As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ MakeUnique(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">要修改的名称（如果不唯一）。</param>
        <summary>确定输入名称是否与 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例范围中的其他名称冲突，如果是，则生成修改的字符串。</summary>
        <returns>标识符参数值；如果存在名称冲突，则为修改后的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 输入的名称不是唯一如果以前曾传递给<xref:System.Xml.Serialization.CodeIdentifiers.Add%2A>， <xref:System.Xml.Serialization.CodeIdentifiers.AddUnique%2A>，或<xref:System.Xml.Serialization.CodeIdentifiers.AddReserved%2A>方法，或如果它由生成<xref:System.Xml.Serialization.CodeIdentifiers.AddUnique%2A>方法。 如果名称不是唯一的则通过将追加到原始字符串生成新的字符串。  
  
 如果你想要控制代码实体绑定到 XML 架构或 Web 服务定义的名称，使用关联的属性而不创建的实例<xref:System.Xml.Serialization.CodeIdentifiers>类。 完整列表，请参阅[属性，控制 XML 序列化](~/docs/standard/serialization/attributes-that-control-xml-serialization.md)。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.CodeIdentifiers.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (identifier As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">要移除的代码实体或类型映射信息的名称。</param>
        <summary>从 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中移除由输入名称标识的代码实体或类型映射。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你想要控制代码实体绑定到 XML 架构或 Web 服务定义的名称，使用关联的属性而不创建的实例<xref:System.Xml.Serialization.CodeIdentifiers>类。 完整列表，请参阅[属性，控制 XML 序列化](~/docs/standard/serialization/attributes-that-control-xml-serialization.md)。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="RemoveReserved">
      <MemberSignature Language="C#" Value="public void RemoveReserved (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveReserved(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.CodeIdentifiers.RemoveReserved(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveReserved (identifier As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveReserved(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">将在 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中可用的名称。</param>
        <summary>从 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的保留名称中移除输入名称。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你想要控制代码实体绑定到 XML 架构或 Web 服务定义的名称，使用关联的属性而不创建的实例<xref:System.Xml.Serialization.CodeIdentifiers>类。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public object ToArray (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ToArray(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.CodeIdentifiers.ToArray(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ToArray(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">实例中所有代码实体或类型映射的类型。</param>
        <summary>返回 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例范围中的代码实体或类型映射的数组。</summary>
        <returns>代码实体或类型映射的数组，由 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 对象存储。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你想要控制代码实体绑定到 XML 架构或 Web 服务定义的名称，使用关联的属性而不创建的实例<xref:System.Xml.Serialization.CodeIdentifiers>类。 完整列表，请参阅[属性，控制 XML 序列化](~/docs/standard/serialization/attributes-that-control-xml-serialization.md)。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="UseCamelCasing">
      <MemberSignature Language="C#" Value="public bool UseCamelCasing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCamelCasing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCamelCasing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCamelCasing { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示实例是否使用 camel 大小写。</summary>
        <value>
          如果指示实例使用 camel 大小写，则为 <see langword="true" />；如果指示实例使用 Pascal 大小写，则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 camel 大小写，如果标识符的第一个字符是一个字母，它必须为小写。 使用 Pascal 大小写，如果第一个字符是一个字母，它必须是大写。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>