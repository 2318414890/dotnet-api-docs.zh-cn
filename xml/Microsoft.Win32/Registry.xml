<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Registry.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58fb289e3db8f78e3c0d8ab3e407138cd550b88bd.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8fb289e3db8f78e3c0d8ab3e407138cd550b88bd</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.Win32.Registry">
          <source>Provides <ph id="ph1">&lt;see cref="T:Microsoft.Win32.RegistryKey" /&gt;</ph> objects that represent the root keys in the Windows registry, and <ph id="ph2">&lt;see langword="static" /&gt;</ph> methods to access key/value pairs.</source>
          <target state="translated">提供表示 Windows 注册表中的根项的 <ph id="ph1">&lt;see cref="T:Microsoft.Win32.RegistryKey" /&gt;</ph> 对象，并提供访问项/值对的 <ph id="ph2">&lt;see langword="static" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>This class provides the set of standard root keys found in the registry on machines running Windows.</source>
          <target state="translated">此类提供的一套标准的根项在运行 Windows 的计算机上的注册表中找到。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>The registry is a storage facility for information about applications, users, and default system settings.</source>
          <target state="translated">注册表是有关应用程序、 用户和默认系统设置信息的存储功能。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>For example, applications can use the registry for storing information that needs to be preserved after the application is closed, and access that same information when the application is reloaded.</source>
          <target state="translated">例如，应用程序可以使用注册表来存储需要后关闭应用程序时，保留的信息，并在重新加载应用程序时访问该相同信息。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>For instance, you can store color preferences, screen locations, or the size of the window.</source>
          <target state="translated">例如，你可以存储颜色首选项、 的屏幕位置或窗口的大小。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>You can control this data for each user by storing the information in a different location in the registry.</source>
          <target state="translated">你可以通过将信息存储在注册表中的其他位置来控制此数据用于每个用户。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>The base, or root <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> instances that are exposed by the <ph id="ph2">`Registry`</ph> class delineate the basic storage mechanism for subkeys and values in the registry.</source>
          <target state="translated">基或根<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>实例公开的<ph id="ph2">`Registry`</ph>类描述子项和注册表中的值的基本存储机制。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>All keys are read-only because the registry depends on their existence.</source>
          <target state="translated">所有项都是只读的因为注册表依赖于它们存在。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>The keys exposed by <ph id="ph1">`Registry`</ph> are:</source>
          <target state="translated">通过公开的键<ph id="ph1">`Registry`</ph>是：</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>Stores information about user preferences.</source>
          <target state="translated">存储有关用户首选项的信息。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>Stores configuration information for the local machine.</source>
          <target state="translated">存储为本地计算机的配置信息。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>Stores information about types (and classes) and their properties.</source>
          <target state="translated">存储有关类型 （类） 的信息和它们的属性。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>Stores information about the default user configuration.</source>
          <target state="translated">存储有关默认用户配置的信息。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>Stores performance information for software components.</source>
          <target state="translated">将存储软件组件的性能的信息。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>Stores non-user-specific hardware information.</source>
          <target state="translated">存储非特定于用户的硬件信息。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>Stores dynamic data.</source>
          <target state="translated">将动态数据存储。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>Once you have identified the root key under which you want to store/retrieve information from the registry, you can use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> class to add or remove subkeys, and manipulate the values for a given key.</source>
          <target state="translated">一旦你确定要在其下存储/检索注册表中的信息的根密钥，你可以使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>类来添加或删除子项，和操作给定键的值。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>Hardware devices can place information in the registry automatically using the Plug and Play interface.</source>
          <target state="translated">硬件设备可以将信息放在使用自动插接口注册表中。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>Software for installing device drivers can place information in the registry by writing to standard APIs.</source>
          <target state="translated">安装设备驱动程序软件可以通过写入标准 Api 在注册表中放置信息。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>Static Methods for Getting and Setting Values</source>
          <target state="translated">用于获取和设置值的静态方法</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>In the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:Microsoft.Win32.Registry&gt;</ph> class also contains <ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:Microsoft.Win32.Registry.GetValue%2A&gt;</ph> and <ph id="ph4">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph> methods for setting and retrieving values from registry keys.</source>
          <target state="translated">在.NET Framework 2.0 版中，<ph id="ph1">&lt;xref:Microsoft.Win32.Registry&gt;</ph>类还包含<ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:Microsoft.Win32.Registry.GetValue%2A&gt;</ph>和<ph id="ph4">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph>方法以设置，并从注册表项中检索值。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>These methods open and close registry keys each time they are used, so they do not perform as well as analogous methods in the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> class, when you access a large number of values.</source>
          <target state="translated">这些方法都将打开和关闭注册表项的每个其进行使用，因此它们不会执行的时间以及在类似方法<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>类，当你访问大量的值。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>The <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> class also provides methods that allow you to set Windows access control security for registry keys, to test the data type of a value before retrieving it, and to delete keys.</source>
          <target state="translated"><ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>类还提供了让你可以设置注册表项，以进行检索之前，测试值的数据类型并删除项的 Windows 访问控制安全性的方法。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>This section contains two code examples.</source>
          <target state="translated">本部分包含两个代码示例。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>The first example demonstrates root keys, and the second example demonstrates the <ph id="ph1">`static`</ph><ph id="ph2">&lt;xref:Microsoft.Win32.Registry.GetValue%2A&gt;</ph> and <ph id="ph3">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph> methods.</source>
          <target state="translated">第一个示例演示根项，第二个示例演示<ph id="ph1">`static`</ph><ph id="ph2">&lt;xref:Microsoft.Win32.Registry.GetValue%2A&gt;</ph>和<ph id="ph3">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>Example 1</source>
          <target state="translated">示例 1</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>The following code example demonstrates how to retrieve the subkeys of the HKEY_USERS key, and print their names to the screen.</source>
          <target state="translated">下面的代码示例演示如何检索 HKEY_USERS 项中的子项和打印到屏幕其名称。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>Use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph> method to create an instance of the particular subkey of interest.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph>方法来创建感兴趣的特定子项的实例。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>You can then use other operations in <ph id="ph1">`RegistryKey`</ph> to manipulate that key.</source>
          <target state="translated">然后，可以使用中的其他操作<ph id="ph1">`RegistryKey`</ph>来操作该注册表项。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>Example 2</source>
          <target state="translated">示例 2</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values.</source>
          <target state="translated">下面的代码示例将多个数据类型的值存储在一个示例键中创建密钥，这样做了，以及然后检索和显示的值。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of <ph id="ph1">`defaultValue`</ph> when a name/value pair does not exist.</source>
          <target state="translated">示例演示了存储和检索默认 （无名称） 的名称/值对，以及如何使用<ph id="ph1">`defaultValue`</ph>名称/值对不存在时。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="F:Microsoft.Win32.Registry.ClassesRoot">
          <source>Defines the types (or classes) of documents and the properties associated with those types.</source>
          <target state="translated">定义文档的类型（或类）以及与那些类型关联的属性。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="F:Microsoft.Win32.Registry.ClassesRoot">
          <source>This field reads the Windows registry base key HKEY_CLASSES_ROOT.</source>
          <target state="translated">该字段读取 Windows 注册表基项 HKEY_CLASSES_ROOT。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.ClassesRoot">
          <source>Both conventional applications and OLE applications use data that is stored under this key.</source>
          <target state="translated">常规应用程序和 OLE 应用程序使用此项下存储的数据。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.ClassesRoot">
          <source>This key also provides backward compatibility with the Windows 3.1 registration database by storing information for DDE and OLE support.</source>
          <target state="translated">此密钥还通过将存储 DDE 和 OLE 的支持信息提供向后的兼容性 Windows 3.1 注册数据库。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.ClassesRoot">
          <source>File viewers and user interface extensions store their OLE class identifiers in this key, and processing servers are registered in this key.</source>
          <target state="translated">文件查看器和用户界面扩展将其 OLE 类标识符存储在此密钥，并在此注册表项注册处理服务器。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.ClassesRoot">
          <source>The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen.</source>
          <target state="translated">下面的示例演示如何检索此项的子项，并输出到屏幕其名称。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.ClassesRoot">
          <source>Use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph> method to create an instance of the particular subkey of interest.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph>方法来创建感兴趣的特定子项的实例。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.ClassesRoot">
          <source>You can then use other operations in <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> to manipulate that key.</source>
          <target state="translated">然后，可以使用中的其他操作<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>来操作该注册表项。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:Microsoft.Win32.Registry.CurrentConfig">
          <source>Contains configuration information pertaining to the hardware that is not specific to the user.</source>
          <target state="translated">包含有关非用户特定的硬件的配置信息。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="F:Microsoft.Win32.Registry.CurrentConfig">
          <source>This field reads the Windows registry base key HKEY_CURRENT_CONFIG.</source>
          <target state="translated">该字段读取 Windows 注册表基项 HKEY_CURRENT_CONFIG。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.CurrentConfig">
          <source>This member is mapped to a subkey within <ph id="ph1">&lt;xref:Microsoft.Win32.Registry.LocalMachine&gt;</ph>.</source>
          <target state="translated">此成员映射到中的子项<ph id="ph1">&lt;xref:Microsoft.Win32.Registry.LocalMachine&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.CurrentConfig">
          <source>An example of using this member is an application that stores a different server name for its data depending on whether the system is attached to a network.</source>
          <target state="translated">使用此成员的示例是存储不同的服务器名称，具体取决于是否系统连接到网络其数据的应用程序。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.CurrentConfig">
          <source>The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen.</source>
          <target state="translated">下面的示例演示如何检索此项的子项，并输出到屏幕其名称。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.CurrentConfig">
          <source>Use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph> method to create an instance of the particular subkey of interest.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph>方法来创建感兴趣的特定子项的实例。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.CurrentConfig">
          <source>You can then use other operations in <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> to manipulate that key.</source>
          <target state="translated">然后，可以使用中的其他操作<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>来操作该注册表项。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="F:Microsoft.Win32.Registry.CurrentUser">
          <source>Contains information about the current user preferences.</source>
          <target state="translated">包含有关当前用户首选项的信息。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="F:Microsoft.Win32.Registry.CurrentUser">
          <source>This field reads the Windows registry base key HKEY_CURRENT_USER</source>
          <target state="translated">该字段读取 Windows 注册表基项 HKEY_CURRENT_USER</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.CurrentUser">
          <source>Information stored in this key includes the settings of environment variables and data about program groups, colors, printers, network connections, and application preferences.</source>
          <target state="translated">存储在此项的信息包括的环境变量和关于程序组、 颜色、 打印机、 网络连接和应用程序首选项的数据的设置。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.CurrentUser">
          <source>This key makes it easier to establish the current user's settings.</source>
          <target state="translated">此密钥，使得易于建立当前用户的设置。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.CurrentUser">
          <source>In this key, software vendors store the current user-specific preferences to be used within their applications.</source>
          <target state="translated">此密钥，在软件供应商存储的当前的特定于用户的首选项，要在其应用程序中使用。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.CurrentUser">
          <source>Microsoft, for example, creates the HKEY_CURRENT_USER\Software\Microsoft key for its applications to use, with each application creating its own subkey under the Microsoft key.</source>
          <target state="translated">Microsoft，例如，创建要用于每个应用程序创建其自己的 Microsoft 密钥下的子项及其应用程序 HKEY_CURRENT_USER\Software\Microsoft 项。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.CurrentUser">
          <source>The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen.</source>
          <target state="translated">下面的示例演示如何检索此项的子项，并输出到屏幕其名称。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.CurrentUser">
          <source>Use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph> method to create an instance of the particular subkey of interest.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph>方法来创建感兴趣的特定子项的实例。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.CurrentUser">
          <source>You can then use other operations in <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> to manipulate that key.</source>
          <target state="translated">然后，可以使用中的其他操作<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>来操作该注册表项。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="F:Microsoft.Win32.Registry.DynData">
          <source>Contains dynamic registry data.</source>
          <target state="translated">包含动态注册表数据。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="F:Microsoft.Win32.Registry.DynData">
          <source>This field reads the Windows registry base key HKEY_DYN_DATA.</source>
          <target state="translated">该字段读取 Windows 注册表基项 HKEY_DYN_DATA。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.DynData">
          <source>The Windows 98/Windows Me registry supports both static data (which is stored on disk in the registry) and dynamic data (which changes frequently, such as performance statistics).</source>
          <target state="translated">Windows 98/Windows Me 注册表支持静态数据 （这存储在注册表中的磁盘） 和动态数据 （这会更改通常情况下，例如性能统计信息）。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.DynData">
          <source>This dynamic data area is the mechanism that allows Virtual Device Drivers (VxDs) to provide real-time data to Win32 applications that can run remotely as well as locally.</source>
          <target state="translated">此动态数据区域是可以远程和本地运行的 Win32 应用程序允许虚拟设备驱动程序 (VxDs) 提供实时数据的机制。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.DynData">
          <source>It also allows the system monitor to provide performance statistics on remote Windows 98/Windows Me systems.</source>
          <target state="translated">它还允许系统监视器在远程 Windows 98/Windows Me 系统上提供性能统计信息。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.DynData">
          <source>VxDs are not limited to performance data.</source>
          <target state="translated">VxDs 并不仅限于性能数据。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.DynData">
          <source>They can provide any data they want to pass from Ring 0 to Ring 3 efficiently without monopolizing the CPU.</source>
          <target state="translated">它们可以提供他们想要将传递从 0 循环到最低的 3 环高效而不独占 CPU 任何的数据。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.DynData">
          <source>The registry supports dynamic data by storing a pointer to a function that returns a value (or many values).</source>
          <target state="translated">注册表支持通过将存储指向返回一个值 （或多个值） 的函数的动态数据。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.DynData">
          <source>When a Registry call queries values associated with a dynamic key, that function is called to return the desired value or values.</source>
          <target state="translated">当注册表调用查询值与键相关联动态，调用函数以返回所需的值。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.DynData">
          <source>Dynamic keys were introduced in Microsoft Windows 95 to handle dynamic Registry data.</source>
          <target state="translated">动态密钥引入了在 Microsoft Windows 95 中以处理动态注册表数据。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.DynData">
          <source>They are supported only in Windows 98/Windows Me.</source>
          <target state="translated">支持仅在 Windows 98/Windows me。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.DynData">
          <source>The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen.</source>
          <target state="translated">下面的示例演示如何检索此项的子项，并输出到屏幕其名称。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.DynData">
          <source>Use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph> method to create an instance of the particular subkey of interest.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph>方法来创建感兴趣的特定子项的实例。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.DynData">
          <source>You can then use other operations in <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> to manipulate that key.</source>
          <target state="translated">然后，可以使用中的其他操作<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>来操作该注册表项。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.DynData">
          <source>Note that this example can return no results, since there might not be dynamic data available, or you might not be running Windows 98/ME.</source>
          <target state="translated">请注意，此示例可能不返回任何结果，因为可能没有可用的动态数据，或者你可能未运行 Windows 98 / me。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.DynData">
          <source>Using this key may cause an error on other systems.</source>
          <target state="translated">在其他系统上，使用此密钥可能会导致错误。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="F:Microsoft.Win32.Registry.DynData">
          <source>The operating system does not support dynamic data; that is, it is not Windows 98, Windows 98 Second Edition, or Windows Millennium Edition (Windows Me).</source>
          <target state="translated">操作系统不支持动态数据，即操作系统非 Windows 98、Windows 98 Second Edition 或 Windows Millennium Edition。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>The full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".</source>
          <target state="translated">以有效注册表根（如“HKEY_CURRENT_USER”）开头的键的完整注册表路径。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>The name of the name/value pair.</source>
          <target state="translated">名称/值对的名称。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>The value to return if <bpt id="p1">&lt;c&gt;</bpt>valueName<ept id="p1">&lt;/c&gt;</ept> does not exist.</source>
          <target state="translated">当 <bpt id="p1">&lt;c&gt;</bpt>valueName<ept id="p1">&lt;/c&gt;</ept> 不存在时要返回的值。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>Retrieves the value associated with the specified name, in the specified registry key.</source>
          <target state="translated">检索与指定的注册表项中的指定名称关联的值。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>If the name is not found in the specified key, returns a default value that you provide, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the specified key does not exist.</source>
          <target state="translated">如果在指定的项中未找到该名称，则返回您提供的默认值；或者，如果指定的项不存在，则返回 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> if the subkey specified by <ph id="ph2">&lt;paramref name="keyName" /&gt;</ph> does not exist; otherwise, the value associated with <ph id="ph3">&lt;paramref name="valueName" /&gt;</ph>, or <ph id="ph4">&lt;paramref name="defaultValue" /&gt;</ph> if <ph id="ph5">&lt;paramref name="valueName" /&gt;</ph> is not found.</source>
          <target state="translated">如果由 <ph id="ph2">&lt;paramref name="keyName" /&gt;</ph> 指定的子项不存在，则返回 <ph id="ph1">&lt;see langword="null" /&gt;</ph>；否则，返回与 <ph id="ph3">&lt;paramref name="valueName" /&gt;</ph> 关联的值；或者，如果未找到 <ph id="ph4">&lt;paramref name="defaultValue" /&gt;</ph>，则返回 <ph id="ph5">&lt;paramref name="valueName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>The string <ph id="ph1">`valueName`</ph> is not case-sensitive.</source>
          <target state="translated">字符串<ph id="ph1">`valueName`</ph>不区分大小写。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>A registry key can contain one value that is not associated with any name.</source>
          <target state="translated">注册表项可以包含一个值，与任何名称都不关联。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>When this unnamed value is displayed in the registry editor, the string "(Default)" appears instead of a name.</source>
          <target state="translated">在注册表编辑器中显示了此未命名的值，而不是名称将显示字符串"（默认值）"。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>To retrieve this unnamed value, specify either <ph id="ph1">`null`</ph> or the empty string ("") for <ph id="ph2">`valuName`</ph>.</source>
          <target state="translated">若要检索此未命名的值，指定<ph id="ph1">`null`</ph>或为空字符串 ("") 为<ph id="ph2">`valuName`</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>Valid root names are HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.</source>
          <target state="translated">有效的根名称是 HKEY_CURRENT_USER、 HKEY_LOCAL_MACHINE、 注册表、 HKEY_USERS、 HKEY_PERFORMANCE_DATA、 HKEY_CURRENT_CONFIG 和 HKEY_DYN_DATA。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>For example, in Visual Basic the string "HKEY_CURRENT_USER\MyTestKey" accesses key/value pairs for the subkey "MyTestKey" in the HKEY_CURRENT_USER root.</source>
          <target state="translated">例如，在 Visual Basic 中的字符串"HKEY_CURRENT_USER\MyTestKey"访问 HKEY_CURRENT_USER 根目录中的子项"MyTestKey"的键/值对。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>When the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetValue%2A&gt;</ph> method retrieves expandable string values (<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryValueKind.ExpandString?displayProperty=nameWithType&gt;</ph>), it expands environment strings using data from the local environment.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetValue%2A&gt;</ph>方法检索可扩展字符串值 (<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryValueKind.ExpandString?displayProperty=nameWithType&gt;</ph>)，它就会展开环境字符串使用本地环境中的数据。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>If a value containing expandable references to environment variables has been stored as a string (<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryValueKind.String?displayProperty=nameWithType&gt;</ph>), rather than as an expandable string (<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryValueKind.ExpandString?displayProperty=nameWithType&gt;</ph>), <ph id="ph3">&lt;xref:Microsoft.Win32.RegistryKey.GetValue%2A&gt;</ph> does not expand it.</source>
          <target state="translated">如果包含对环境变量的可展开引用的值已存储为 string (<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryValueKind.String?displayProperty=nameWithType&gt;</ph>)，而不是可扩展字符串 (<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryValueKind.ExpandString?displayProperty=nameWithType&gt;</ph>)，<ph id="ph3">&lt;xref:Microsoft.Win32.RegistryKey.GetValue%2A&gt;</ph>不展开它。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>You can expand such a string after it has been retrieved by calling the <ph id="ph1">&lt;xref:System.Environment.ExpandEnvironmentVariables%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">已检索到它通过调用后，你可以展开此类字符串<ph id="ph1">&lt;xref:System.Environment.ExpandEnvironmentVariables%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>The recommended way to retrieve data from HKEY_PERFORMANCE_DATA is to use the <ph id="ph1">&lt;xref:System.Diagnostics.PerformanceCounter&gt;</ph> class rather than the <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.GetValue%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">从 HKEY_PERFORMANCE_DATA 中检索数据的建议的方法是使用<ph id="ph1">&lt;xref:System.Diagnostics.PerformanceCounter&gt;</ph>类而不是<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.GetValue%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>The <ph id="ph1">&lt;xref:Microsoft.Win32.Registry.GetValue%2A&gt;</ph> and <ph id="ph2">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph> methods open and close registry keys each time they are used, so they do not perform as well as the methods of the <ph id="ph3">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> class if you access a large number of values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:Microsoft.Win32.Registry.GetValue%2A&gt;</ph>和<ph id="ph2">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph>方法打开和关闭注册表项的方法以及其进行使用，因此它们不会执行每次<ph id="ph3">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>类如果访问大量的值。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source><ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.</source>
          <target state="translated"><ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> 此外提供了可用于将访问控制列表 (ACL) 添加到注册表项，以进行检索之前，测试值的数据类型并删除密钥的方法。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values.</source>
          <target state="translated">下面的代码示例将多个数据类型的值存储在一个示例键中创建密钥，这样做了，以及然后检索和显示的值。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of <ph id="ph1">`defaultValue`</ph> when a name/value pair does not exist.</source>
          <target state="translated">示例演示了存储和检索默认 （无名称） 的名称/值对，以及如何使用<ph id="ph1">`defaultValue`</ph>名称/值对不存在时。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>The user does not have the permissions required to read from the registry key.</source>
          <target state="translated">该用户没有读取注册表项所需的权限。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.Win32.RegistryKey" /&gt;</ph> that contains the specified value has been marked for deletion.</source>
          <target state="translated">包含指定值的 <ph id="ph1">&lt;see cref="T:Microsoft.Win32.RegistryKey" /&gt;</ph> 已标记为删除。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source><ph id="ph1">&lt;paramref name="keyName" /&gt;</ph> does not begin with a valid registry root.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keyName" /&gt;</ph> 未以有效注册表根开头。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>to read from the registry.</source>
          <target state="translated">若要从注册表中读取。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>to read a registry key of type REG_EXPAND_SZ.</source>
          <target state="translated">若要读取的类型 REG_EXPAND_SZ 注册表项。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>Contains the configuration data for the local machine.</source>
          <target state="translated">包含本地计算机的配置数据。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>This field reads the Windows registry base key HKEY_LOCAL_MACHINE.</source>
          <target state="translated">该字段读取 Windows 注册表基项 HKEY_LOCAL_MACHINE。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source><ph id="ph1">`LocalMachine`</ph> contains five keys:</source>
          <target state="translated"><ph id="ph1">`LocalMachine`</ph> 包含五个密钥：</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>Hardware</source>
          <target state="translated">硬件</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>Describes the physical hardware in the computer, the way device drivers use that hardware, and mappings and related data that link kernel-mode drivers with user-mode code.</source>
          <target state="translated">描述计算机中的物理硬件设备驱动程序使用该硬件，和映射和链接，用户模式代码的内核模式驱动程序的相关的数据的方式。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>All data in this key is recreated each time the system is started.</source>
          <target state="translated">此密钥中的所有数据进行重新都创建每次启动系统。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>The Description subkey describes the actual computer hardware.</source>
          <target state="translated">说明子项描述的实际计算机硬件。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>The DeviceMap subkey contains miscellaneous data in formats specific to particular classes of drivers.</source>
          <target state="translated">DeviceMap 子项包含特定于特定类的驱动程序的格式的其他数据。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>The ResourceMap subkey describes which device drivers claim which hardware resources.</source>
          <target state="translated">ResourceMap 子项描述哪些设备驱动程序声明哪些硬件资源。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>The Windows NT Diagnostics program (Winmsdp.exe) can report on its contents in an easy-to-read form.</source>
          <target state="translated">Windows NT 诊断程序 (Winmsdp.exe) 可以报告其内容以易于理解的形式。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>SAM</source>
          <target state="translated">SAM</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>The directory services database of security information for user and group accounts, and for the domains in Windows 2000 Server (SAM is the Security Account Manager, known as the directory services database).</source>
          <target state="translated">目录服务数据库的用户和组帐户，以及在 Windows 2000 Server 域的安全信息 （SAM 是安全帐户管理器，称为目录服务数据库）。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>Security</source>
          <target state="translated">安全性</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>Contains the local security policy, such as specific user rights.</source>
          <target state="translated">包含本地安全策略，例如，特定的用户权限。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>This key is used only by the Windows 2000 security subsystem.</source>
          <target state="translated">只能由 Windows 2000 安全子系统使用此密钥。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>Software</source>
          <target state="translated">软件</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>The per-computer software database.</source>
          <target state="translated">每台计算机软件数据库。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>This key contains data about software installed on the local computer, along with various items of miscellaneous configuration data.</source>
          <target state="translated">此项包含有关与各种项的其他配置数据一起在本地计算机上安装软件的数据。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>System</source>
          <target state="translated">系统</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>Controls system startup, device driver loading, Windows 2000 services, and operating system behavior.</source>
          <target state="translated">控制系统启动、 设备驱动程序加载、 Windows 2000 服务和操作系统的行为。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>By convention, if similar data exists under <ph id="ph1">&lt;xref:Microsoft.Win32.Registry.CurrentUser&gt;</ph> and under <ph id="ph2">&lt;xref:Microsoft.Win32.Registry.LocalMachine&gt;</ph>, the data in <ph id="ph3">&lt;xref:Microsoft.Win32.Registry.CurrentUser&gt;</ph> takes precedence.</source>
          <target state="translated">按照约定，如果在存在相似的数据<ph id="ph1">&lt;xref:Microsoft.Win32.Registry.CurrentUser&gt;</ph>并在列表视图<ph id="ph2">&lt;xref:Microsoft.Win32.Registry.LocalMachine&gt;</ph>中的数据<ph id="ph3">&lt;xref:Microsoft.Win32.Registry.CurrentUser&gt;</ph>优先。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>However, values in this key can also extend (rather than replace) data in Registry.LocalMachine.</source>
          <target state="translated">但是，在此注册表项的值可以还扩展 （而不是替换） Registry.LocalMachine 中的数据。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>Also, some items (such as device driver loading entries) are meaningless if they occur outside of Registry.LocalMachine.</source>
          <target state="translated">此外，某些项 （例如加载项的设备驱动程序） 将毫无意义，如果它们在 Registry.LocalMachine 外部发生。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen.</source>
          <target state="translated">下面的示例演示如何检索此项的子项，并输出到屏幕其名称。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>Use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph> method to create an instance of the particular subkey of interest.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph>方法来创建感兴趣的特定子项的实例。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.LocalMachine">
          <source>You can then use other operations in <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> to manipulate that key.</source>
          <target state="translated">然后，可以使用中的其他操作<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>来操作该注册表项。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>Contains performance information for software components.</source>
          <target state="translated">包含软件组件的性能信息。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>This field reads the Windows registry base key HKEY_PERFORMANCE_DATA.</source>
          <target state="translated">该字段读取 Windows 注册表基项 HKEY_PERFORMANCE_DATA。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>Each software component creates keys for its objects, counters when it is installed, and writes counter data while it is executing.</source>
          <target state="translated">每个软件组件会创建其对象，它在已安装，并执行时将计数器数据时的计数器的键。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>You can access this data as you would access any other registry data, using the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> functions.</source>
          <target state="translated">你可以访问此数据，如像访问任何其他注册表数据，使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>函数。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>Although you use the registry to collect performance data, the data is not stored in the registry database.</source>
          <target state="translated">尽管你使用注册表收集性能数据，数据不存储在注册表数据库。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>Instead, accessing the registry with this key causes the system to collect the data from the appropriate system object managers.</source>
          <target state="translated">相反，使用此密钥访问注册表会导致系统从相应的系统对象管理器收集的数据。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>To obtain performance data from the local system, use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetValue%2A&gt;</ph> method, with the Registry.PerformanceData key.</source>
          <target state="translated">若要从本地系统中获取性能数据，请使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetValue%2A&gt;</ph>方法，与 Registry.PerformanceData 键。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>The first call opens the key (you do not need to explicitly open the key first).</source>
          <target state="translated">第一次调用将打开 （您不必显式第一次打开此项） 的密钥。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>However, be sure to use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.Close%2A&gt;</ph> method to close the handle to the key when you are finished obtaining performance data.</source>
          <target state="translated">但是，请务必使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.Close%2A&gt;</ph>方法来关闭项的句柄，在完成后获得性能数据。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>The user cannot install or remove a software component while its performance data is in use.</source>
          <target state="translated">用户无法安装或删除的软件组件，在使用其性能数据时。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>To obtain performance data from a remote system, you must use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A&gt;</ph> method, with the computer name of the remote system and the Registry.PerformanceData key.</source>
          <target state="translated">若要从远程系统获取性能数据，必须使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A&gt;</ph>方法，与远程系统和 Registry.PerformanceData 密钥的计算机名称。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>This call retrieves a key representing the performance data for the remote system.</source>
          <target state="translated">此呼叫会检索表示远程系统的性能数据的密钥。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>To retrieve the data, call <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetValue%2A&gt;</ph> using this key, rather than the Registry.PerformanceData key.</source>
          <target state="translated">若要检索的数据，调用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetValue%2A&gt;</ph>使用此密钥，而不是 Registry.PerformanceData 密钥。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>On Windows Server 2003, a user must at least belong to the Performance Monitor Users group in order to access subkeys of this base key.</source>
          <target state="translated">在 Windows Server 2003，用户必须至少属于性能监视器用户组才能访问此基项的子项。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen.</source>
          <target state="translated">下面的示例演示如何检索此项的子项，并输出到屏幕其名称。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>Use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph> method to create an instance of the particular subkey of interest.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph>方法来创建感兴趣的特定子项的实例。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>You can then use other operations in <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> to manipulate that key.</source>
          <target state="translated">然后，可以使用中的其他操作<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>来操作该注册表项。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.PerformanceData">
          <source>Note that this example can often return no results, since there might be no performance data.</source>
          <target state="translated">请注意，此示例可以通常会返回任何结果，因为可能有无性能数据。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="T:Microsoft.Win32.Registry">
          <source>Sets the value of a name/value pair in a registry key.</source>
          <target state="translated">设置注册表项中的名称/值对的值。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values.</source>
          <target state="translated">下面的代码示例将多个数据类型的值存储在一个示例键中创建密钥，这样做了，以及然后检索和显示的值。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.Win32.Registry">
          <source>The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of <ph id="ph1">`defaultValue`</ph> when a name/value pair does not exist.</source>
          <target state="translated">示例演示了存储和检索默认 （无名称） 的名称/值对，以及如何使用<ph id="ph1">`defaultValue`</ph>名称/值对不存在时。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>The full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".</source>
          <target state="translated">以有效注册表根（如“HKEY_CURRENT_USER”）开头的键的完整注册表路径。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>The name of the name/value pair.</source>
          <target state="translated">名称/值对的名称。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>The value to be stored.</source>
          <target state="translated">要存储的值。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>Sets the specified name/value pair on the specified registry key.</source>
          <target state="translated">设置指定的注册表项的指定名称/值对。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>If the specified key does not exist, it is created.</source>
          <target state="translated">如果指定的项不存在，则创建该项。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">`valueName`</ph> parameter is no longer restricted to a maximum of 255 characters; however, the <ph id="ph3">`keyName`</ph> parameter continues to have the 255-character restriction.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>、<ph id="ph2">`valueName`</ph>参数不再限制为最多为 255 个字符; 但是，<ph id="ph3">`keyName`</ph>参数继续具有 255 个字符限制。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>Because many values can be stored in each key in the registry, you must use the <ph id="ph1">`valueName`</ph> parameter to specify the particular value you want to set.</source>
          <target state="translated">由于多个值可以存储在注册表中的每个项，你必须使用<ph id="ph1">`valueName`</ph>参数来指定你想要设置的特定值。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>A registry key can contain one value that is not associated with any name.</source>
          <target state="translated">注册表项可以包含一个值，与任何名称都不关联。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>When this unnamed value is displayed in the registry editor, the string "(Default)" appears instead of a name.</source>
          <target state="translated">在注册表编辑器中显示了此未命名的值，而不是名称将显示字符串"（默认值）"。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>To set this unnamed value, specify either <ph id="ph1">`null`</ph> or the empty string ("") for <ph id="ph2">`valueName`</ph>.</source>
          <target state="translated">若要设置此未命名的值，指定<ph id="ph1">`null`</ph>或为空字符串 ("") 为<ph id="ph2">`valueName`</ph>。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>If <ph id="ph1">`valueName`</ph> does not exist in the key, it is created and the associated value is set to <ph id="ph2">`value`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`valueName`</ph>不存在的项中创建和关联的值设置为<ph id="ph2">`value`</ph>。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>If <ph id="ph1">`keyName`</ph> specifies a subkey that does not exist, the subkey is created in the specified root.</source>
          <target state="translated">如果<ph id="ph1">`keyName`</ph>指定不存在，一个子项指定的根目录中创建的子项。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>For example, in Visual Basic the string "HKEY_CURRENT_USER\MyTestKey" creates the subkey "MyTestKey" in the HKEY_CURRENT_USER root.</source>
          <target state="translated">例如，在 Visual Basic 中的字符串"HKEY_CURRENT_USER\MyTestKey"创建 HKEY_CURRENT_USER 根目录中的子项"MyTestKey"。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>The string "HKEY_CURRENT_USER\MyTestKey\Key2\Key3" creates the nested subkeys "MyTestKey", "MyTestKey\Key2", and "MyTestKey\Key2\Key3".</source>
          <target state="translated">字符串"HKEY_CURRENT_USER\MyTestKey\Key2\Key3"创建"MyTestKey"、"MyTestKey\Key2"和"MyTestKey\Key2\Key3"的嵌套的子项。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.</source>
          <target state="translated">有效的根名称包含 HKEY_CURRENT_USER、 HKEY_LOCAL_MACHINE、 注册表、 HKEY_USERS、 HKEY_PERFORMANCE_DATA、 HKEY_CURRENT_CONFIG 和 HKEY_DYN_DATA。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>The <ph id="ph1">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph> method opens a registry key, sets the value, and closes the key each time it is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph>方法打开注册表项、 设置的值，并关闭每次调用时的密钥。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>If you need to modify a large number of values, the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=nameWithType&gt;</ph> method might provide better performance.</source>
          <target state="translated">如果你需要修改大量的值，<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=nameWithType&gt;</ph>方法可能会提供更好的性能。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>The <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.</source>
          <target state="translated"><ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>类还提供了可用于将访问控制列表 (ACL) 添加到注册表项，以进行检索之前，测试值的数据类型并删除密钥的方法。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>This overload of <ph id="ph1">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph> stores 64-bit integers as strings (<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryValueKind.String?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">此重载<ph id="ph1">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph>将 64 位整数存储为字符串 (<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryValueKind.String?displayProperty=nameWithType&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>To store 64-bit numbers as <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryValueKind.QWord?displayProperty=nameWithType&gt;</ph> values, use the <ph id="ph2">&lt;xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29&gt;</ph> method overload.</source>
          <target state="translated">若要将作为 64 位数字存储<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryValueKind.QWord?displayProperty=nameWithType&gt;</ph>值，请使用<ph id="ph2">&lt;xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29&gt;</ph>方法重载。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>This overload of <ph id="ph1">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph> stores all string values as <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryValueKind.String?displayProperty=nameWithType&gt;</ph> objects, even if they contain expandable references to environment variables.</source>
          <target state="translated">此重载<ph id="ph1">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph>存储所有的字符串值作为<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryValueKind.String?displayProperty=nameWithType&gt;</ph>对象，即使它们包含对环境变量的可展开引用。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>To save string values as expandable strings (<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryValueKind.ExpandString?displayProperty=nameWithType&gt;</ph>), use the <ph id="ph2">&lt;xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29&gt;</ph> method overload.</source>
          <target state="translated">若要保存为可展开的字符串的字符串值 (<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryValueKind.ExpandString?displayProperty=nameWithType&gt;</ph>)，使用<ph id="ph2">&lt;xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29&gt;</ph>方法重载。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>This overload is equivalent to calling the <ph id="ph1">&lt;xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29&gt;</ph> method overload with <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryValueKind.Unknown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">此重载是等效于调用<ph id="ph1">&lt;xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29&gt;</ph>方法重载<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryValueKind.Unknown?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages.</source>
          <target state="translated">在 Windows 98 和 Windows Millennium Edition (Windows Me)，注册表不是 Unicode，并不是所有 Unicode 字符都是有效的所有代码页。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>A Unicode character that is invalid for the current code page is replaced by the best available match.</source>
          <target state="translated">对于当前的代码页无效的 Unicode 字符都替换为最佳的匹配项。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>No exception is thrown.</source>
          <target state="translated">不引发异常。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values.</source>
          <target state="translated">下面的代码示例将多个数据类型的值存储在一个示例键中创建密钥，这样做了，以及然后检索和显示的值。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of <ph id="ph1">`defaultValue`</ph> when a name/value pair does not exist.</source>
          <target state="translated">示例演示了存储和检索默认 （无名称） 的名称/值对，以及如何使用<ph id="ph1">`defaultValue`</ph>名称/值对不存在时。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source><ph id="ph1">&lt;paramref name="keyName" /&gt;</ph> does not begin with a valid registry root.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keyName" /&gt;</ph> 未以有效注册表根开头。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source><ph id="ph1">&lt;paramref name="keyName" /&gt;</ph> is longer than the maximum length allowed (255 characters).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keyName" /&gt;</ph> 的长度超过了允许的最大长度（255 个字符）。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.Win32.RegistryKey" /&gt;</ph> is read-only, and thus cannot be written to; for example, it is a root-level node.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.Win32.RegistryKey" /&gt;</ph> 是只读的，因此无法对其写入；例如，它是根级节点。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>The user does not have the permissions required to create or modify registry keys.</source>
          <target state="translated">用户没有创建或修改注册表项所需的权限。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>to modify the specified registry key if it exists, or to create the registry key if it does not already exist.</source>
          <target state="translated">若要修改指定的注册表项，如果存在，或创建注册表项，如果不存在。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.RegistryPermissionAccess.Write" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.RegistryPermissionAccess.Create" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.RegistryPermissionAccess.Write" /&gt;</ph>， <ph id="ph2">&lt;see cref="F:System.Security.Permissions.RegistryPermissionAccess.Create" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>The full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".</source>
          <target state="translated">以有效注册表根（如“HKEY_CURRENT_USER”）开头的键的完整注册表路径。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>The name of the name/value pair.</source>
          <target state="translated">名称/值对的名称。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>The value to be stored.</source>
          <target state="translated">要存储的值。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>The registry data type to use when storing the data.</source>
          <target state="translated">在存储数据时要使用的注册表数据类型。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>Sets the name/value pair on the specified registry key, using the specified registry data type.</source>
          <target state="translated">通过使用指定的注册表数据类型，设置该指定的注册表项的名称/值对。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>If the specified key does not exist, it is created.</source>
          <target state="translated">如果指定的项不存在，则创建该项。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">`valueName`</ph> parameter is no longer restricted to a maximum of 255 characters; however, the <ph id="ph3">`keyName`</ph> parameter continues have the 255-character restriction.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>、<ph id="ph2">`valueName`</ph>参数不再限制为最多为 255 个字符; 但是，<ph id="ph3">`keyName`</ph>参数将继续具有 255 个字符限制。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>Because many values can be stored in each key in the registry, you must use the <ph id="ph1">`valueName`</ph> parameter to specify the particular value you want to set.</source>
          <target state="translated">由于多个值可以存储在注册表中的每个项，你必须使用<ph id="ph1">`valueName`</ph>参数来指定你想要设置的特定值。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>A registry key can contain one value that is not associated with any name.</source>
          <target state="translated">注册表项可以包含一个值，与任何名称都不关联。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>When this unnamed value is displayed in the registry editor, the string "(Default)" appears instead of a name.</source>
          <target state="translated">在注册表编辑器中显示了此未命名的值，而不是名称将显示字符串"（默认值）"。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>To set this unnamed value, specify either <ph id="ph1">`null`</ph> or the empty string ("") for <ph id="ph2">`valueName`</ph>.</source>
          <target state="translated">若要设置此未命名的值，指定<ph id="ph1">`null`</ph>或为空字符串 ("") 为<ph id="ph2">`valueName`</ph>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>If <ph id="ph1">`valueName`</ph> does not exist in the key, it is created and the associated value is set to <ph id="ph2">`value`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`valueName`</ph>不存在的项中创建和关联的值设置为<ph id="ph2">`value`</ph>。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>If <ph id="ph1">`keyName`</ph> specifies a subkey that does not exist, the subkey is created in the specified root.</source>
          <target state="translated">如果<ph id="ph1">`keyName`</ph>指定不存在，一个子项指定的根目录中创建的子项。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>For example, in Visual Basic the string "HKEY_CURRENT_USER\MyTestKey" creates the subkey "MyTestKey" in the HKEY_CURRENT_USER root.</source>
          <target state="translated">例如，在 Visual Basic 中的字符串"HKEY_CURRENT_USER\MyTestKey"创建 HKEY_CURRENT_USER 根目录中的子项"MyTestKey"。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>The string "HKEY_CURRENT_USER\MyTestKey\Key2\Key3" creates the nested subkeys "MyTestKey", "MyTestKey\Key2", and "MyTestKey\Key2\Key3".</source>
          <target state="translated">字符串"HKEY_CURRENT_USER\MyTestKey\Key2\Key3"创建"MyTestKey"、"MyTestKey\Key2"和"MyTestKey\Key2\Key3"的嵌套的子项。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.</source>
          <target state="translated">有效的根名称包含 HKEY_CURRENT_USER、 HKEY_LOCAL_MACHINE、 注册表、 HKEY_USERS、 HKEY_PERFORMANCE_DATA、 HKEY_CURRENT_CONFIG 和 HKEY_DYN_DATA。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>The <ph id="ph1">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph> method opens a registry key, sets the value, and closes the key each time it is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph>方法打开注册表项、 设置的值，并关闭每次调用时的密钥。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>If you need to modify a large number of values, the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=nameWithType&gt;</ph> method might provide better performance.</source>
          <target state="translated">如果你需要修改大量的值，<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=nameWithType&gt;</ph>方法可能会提供更好的性能。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>The <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.</source>
          <target state="translated"><ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>类还提供了可用于将访问控制列表 (ACL) 添加到注册表项，以进行检索之前，测试值的数据类型并删除密钥的方法。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>If the type of the specified <ph id="ph1">`value`</ph> does not match the specified <ph id="ph2">`valueKind`</ph>, and the data cannot be converted, <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
          <target state="translated">如果指定的类型<ph id="ph1">`value`</ph>不匹配指定<ph id="ph2">`valueKind`</ph>，和数据不能转换，<ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>引发。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>For example, you can store a <ph id="ph1">&lt;xref:System.Int64?displayProperty=nameWithType&gt;</ph> as a <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryValueKind.DWord?displayProperty=nameWithType&gt;</ph>, but only if its value is less than the maximum value of a <ph id="ph3">&lt;xref:System.Int32?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">例如，你可以存储<ph id="ph1">&lt;xref:System.Int64?displayProperty=nameWithType&gt;</ph>作为<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryValueKind.DWord?displayProperty=nameWithType&gt;</ph>，但仅当其值为的最大值小于<ph id="ph3">&lt;xref:System.Int32?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>You cannot store a single string value as a <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryValueKind.MultiString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">无法将值存储在单个字符串作为<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryValueKind.MultiString?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>If boxed values are passed for <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryValueKind.DWord?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryValueKind.QWord?displayProperty=nameWithType&gt;</ph>, the conversion is done using the invariant culture.</source>
          <target state="translated">如果已装箱的值传递<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryValueKind.DWord?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryValueKind.QWord?displayProperty=nameWithType&gt;</ph>，完成转换后使用固定区域性。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages.</source>
          <target state="translated">在 Windows 98 和 Windows Millennium Edition (Windows Me)，注册表不是 Unicode，并不是所有 Unicode 字符都是有效的所有代码页。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>A Unicode character that is invalid for the current code page is replaced by the best available match.</source>
          <target state="translated">对于当前的代码页无效的 Unicode 字符都替换为最佳的匹配项。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>No exception is thrown.</source>
          <target state="translated">不引发异常。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values.</source>
          <target state="translated">下面的代码示例将多个数据类型的值存储在一个示例键中创建密钥，这样做了，以及然后检索和显示的值。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of <ph id="ph1">`defaultValue`</ph> when a name/value pair does not exist.</source>
          <target state="translated">示例演示了存储和检索默认 （无名称） 的名称/值对，以及如何使用<ph id="ph1">`defaultValue`</ph>名称/值对不存在时。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source><ph id="ph1">&lt;paramref name="keyName" /&gt;</ph> does not begin with a valid registry root.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keyName" /&gt;</ph> 未以有效注册表根开头。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source><ph id="ph1">&lt;paramref name="keyName" /&gt;</ph> is longer than the maximum length allowed (255 characters).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keyName" /&gt;</ph> 的长度超过了允许的最大长度（255 个字符）。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>The type of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> did not match the registry data type specified by <ph id="ph2">&lt;paramref name="valueKind" /&gt;</ph>, therefore the data could not be converted properly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的类型与 <ph id="ph2">&lt;paramref name="valueKind" /&gt;</ph> 指定的注册表数据类型不匹配，因此，未能正确转换该数据。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.Win32.RegistryKey" /&gt;</ph> is read-only, and thus cannot be written to; for example, it is a root-level node, or the key has not been opened with write access.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.Win32.RegistryKey" /&gt;</ph> 是只读的，因此无法对其写入（例如，它是根级节点，或者未用写访问权限打开该项）。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>The user does not have the permissions required to create or modify registry keys.</source>
          <target state="translated">用户没有创建或修改注册表项所需的权限。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>to modify the specified registry key if it exists, or to create the registry key if it does not already exist.</source>
          <target state="translated">若要修改指定的注册表项，如果存在，或创建注册表项，如果不存在。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.RegistryPermissionAccess.Write" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.RegistryPermissionAccess.Create" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.RegistryPermissionAccess.Write" /&gt;</ph>， <ph id="ph2">&lt;see cref="F:System.Security.Permissions.RegistryPermissionAccess.Create" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="F:Microsoft.Win32.Registry.Users">
          <source>Contains information about the default user configuration.</source>
          <target state="translated">包含有关默认用户配置的信息。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="F:Microsoft.Win32.Registry.Users">
          <source>This field reads the Windows registry base key HKEY_USERS.</source>
          <target state="translated">该字段读取 Windows 注册表基项 HKEY_USERS。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.Users">
          <source>This key contains a branch for each user of the computer.</source>
          <target state="translated">此项包含计算机的每个用户一个分支。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.Users">
          <source>The default configuration is supplied for new users on the local computer and for the default current user if the user has not changed preferences.</source>
          <target state="translated">如果用户未更改首选项，默认配置被提供对本地计算机上的新用户和默认当前用户。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.Users">
          <source>Because Windows 98/ME also supports Registry.Users, applications can access the user-specific information the same way they do under Windows 2000.</source>
          <target state="translated">因为 Windows 98 / 我还支持 Registry.Users，应用程序可以访问特定于用户的信息在 Windows 2000 下的相同方式。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.Users">
          <source>Each user's information is stored in a separate file, which can be stored locally or on a network server.</source>
          <target state="translated">每个用户的信息存储在单独的文件，可以将存储在本地或网络服务器上。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.Users">
          <source>Windows 98/ME can copy this file to the user's current system so that settings can move from one computer to another with the user.</source>
          <target state="translated">Windows 98 / 我可以将此文件复制到用户的当前系统，以便设置可以从一台计算机之间移动与该用户。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.Users">
          <source>The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen.</source>
          <target state="translated">下面的示例演示如何检索此项的子项，并输出到屏幕其名称。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.Users">
          <source>Use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph> method to create an instance of the particular subkey of interest.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A&gt;</ph>方法来创建感兴趣的特定子项的实例。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="F:Microsoft.Win32.Registry.Users">
          <source>You can then use other operations in <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> to manipulate that key.</source>
          <target state="translated">然后，可以使用中的其他操作<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>来操作该注册表项。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>