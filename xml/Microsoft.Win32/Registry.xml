<Type Name="Registry" FullName="Microsoft.Win32.Registry">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d3285d1e778628339c22d54f5aec6bdd96ffc281" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36725553" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Registry" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Registry extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Win32.Registry" />
  <TypeSignature Language="VB.NET" Value="Public Class Registry" />
  <TypeSignature Language="C++ CLI" Value="public ref class Registry abstract sealed" />
  <TypeSignature Language="F#" Value="type Registry = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides <see cref="T:Microsoft.Win32.RegistryKey" /> objects that represent the root keys in the Windows registry, and <see langword="static" /> methods to access key/value pairs.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类提供的一套标准的根项在运行 Windows 的计算机上的注册表中找到。 注册表是有关应用程序、 用户和默认系统设置信息的存储功能。 例如，应用程序可以使用注册表来存储需要后关闭应用程序时，保留的信息，并在重新加载应用程序时访问该相同信息。 例如，你可以存储颜色首选项、 的屏幕位置或窗口的大小。 你可以通过将信息存储在注册表中的其他位置来控制此数据用于每个用户。  
  
 基或根<xref:Microsoft.Win32.RegistryKey>实例公开的`Registry`类描述子项和注册表中的值的基本存储机制。 所有项都是只读的因为注册表依赖于它们存在。 通过公开的键`Registry`是：  
  
 <xref:Microsoft.Win32.Registry.CurrentUser>  
 存储有关用户首选项的信息。  
  
 <xref:Microsoft.Win32.Registry.LocalMachine>  
 存储为本地计算机的配置信息。  
  
 <xref:Microsoft.Win32.Registry.ClassesRoot>  
 存储有关类型 （类） 的信息和它们的属性。  
  
 <xref:Microsoft.Win32.Registry.Users>  
 存储有关默认用户配置的信息。  
  
 <xref:Microsoft.Win32.Registry.PerformanceData>  
 将存储软件组件的性能的信息。  
  
 <xref:Microsoft.Win32.Registry.CurrentConfig>  
 存储非特定于用户的硬件信息。  
  
 <xref:Microsoft.Win32.Registry.DynData>  
 将动态数据存储。  
  
 一旦你确定要在其下存储/检索注册表中的信息的根密钥，你可以使用<xref:Microsoft.Win32.RegistryKey>类来添加或删除子项，和操作给定键的值。  
  
 硬件设备可以将信息放在使用自动插接口注册表中。 安装设备驱动程序软件可以通过写入标准 Api 在注册表中放置信息。  
  
## <a name="static-methods-for-getting-and-setting-values"></a>用于获取和设置值的静态方法  
 在.NET Framework 2.0 版中，<xref:Microsoft.Win32.Registry>类还包含`static`<xref:Microsoft.Win32.Registry.GetValue%2A>和<xref:Microsoft.Win32.Registry.SetValue%2A>方法以设置，并从注册表项中检索值。 这些方法都将打开和关闭注册表项的每个其进行使用，因此它们不会执行的时间以及在类似方法<xref:Microsoft.Win32.RegistryKey>类，当你访问大量的值。  
  
 <xref:Microsoft.Win32.RegistryKey>类还提供了让你可以设置注册表项，以进行检索之前，测试值的数据类型并删除项的 Windows 访问控制安全性的方法。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个示例演示根项，第二个示例演示`static`<xref:Microsoft.Win32.Registry.GetValue%2A>和<xref:Microsoft.Win32.Registry.SetValue%2A>方法。  
  
 示例 1  
  
 下面的代码示例演示如何检索 HKEY_USERS 项中的子项和打印到屏幕其名称。 使用<xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A>方法来创建感兴趣的特定子项的实例。 然后，可以使用中的其他操作`RegistryKey`来操作该注册表项。  
  
 [!code-cpp[Classic Registry.Users Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.Users Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Registry.Users Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.Users Example/CS/source.cs#1)]
 [!code-vb[Classic Registry.Users Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.Users Example/VB/source.vb#1)]  
  
 示例 2  
  
 下面的代码示例将多个数据类型的值存储在一个示例键中创建密钥，这样做了，以及然后检索和显示的值。 示例演示了存储和检索默认 （无名称） 的名称/值对，以及如何使用`defaultValue`名称/值对不存在时。  
  
 [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/cpp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CPP/source.cpp#1)]
 [!code-csharp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/csharp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CS/source.cs#1)]
 [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.RegistryHive" />
    <altmember cref="T:Microsoft.Win32.RegistryKey" />
  </Docs>
  <Members>
    <Member MemberName="ClassesRoot">
      <MemberSignature Language="C#" Value="public static readonly Microsoft.Win32.RegistryKey ClassesRoot;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.Win32.RegistryKey ClassesRoot" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Win32.Registry.ClassesRoot" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClassesRoot As RegistryKey " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly Microsoft::Win32::RegistryKey ^ ClassesRoot;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClassesRoot : Microsoft.Win32.RegistryKey" Usage="Microsoft.Win32.Registry.ClassesRoot" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Defines the types (or classes) of documents and the properties associated with those types. This field reads the Windows registry base key HKEY_CLASSES_ROOT.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 常规应用程序和 OLE 应用程序使用此项下存储的数据。 此密钥还通过将存储 DDE 和 OLE 的支持信息提供向后的兼容性 Windows 3.1 注册数据库。 文件查看器和用户界面扩展将其 OLE 类标识符存储在此密钥，并在此注册表项注册处理服务器。  
  
   
  
## Examples  
 下面的示例演示如何检索此项的子项，并输出到屏幕其名称。 使用<xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A>方法来创建感兴趣的特定子项的实例。 然后，可以使用中的其他操作<xref:Microsoft.Win32.RegistryKey>来操作该注册表项。  
  
 [!code-cpp[Classic Registry.ClassesRoot Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.ClassesRoot Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Registry.ClassesRoot Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.ClassesRoot Example/CS/source.cs#1)]
 [!code-vb[Classic Registry.ClassesRoot Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.ClassesRoot Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentConfig">
      <MemberSignature Language="C#" Value="public static readonly Microsoft.Win32.RegistryKey CurrentConfig;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.Win32.RegistryKey CurrentConfig" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Win32.Registry.CurrentConfig" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CurrentConfig As RegistryKey " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly Microsoft::Win32::RegistryKey ^ CurrentConfig;" />
      <MemberSignature Language="F#" Value=" staticval mutable CurrentConfig : Microsoft.Win32.RegistryKey" Usage="Microsoft.Win32.Registry.CurrentConfig" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Contains configuration information pertaining to the hardware that is not specific to the user. This field reads the Windows registry base key HKEY_CURRENT_CONFIG.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员映射到中的子项<xref:Microsoft.Win32.Registry.LocalMachine>。  
  
 使用此成员的示例是存储不同的服务器名称，具体取决于是否系统连接到网络其数据的应用程序。  
  
   
  
## Examples  
 下面的示例演示如何检索此项的子项，并输出到屏幕其名称。 使用<xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A>方法来创建感兴趣的特定子项的实例。 然后，可以使用中的其他操作<xref:Microsoft.Win32.RegistryKey>来操作该注册表项。  
  
 [!code-cpp[Classic Registry.CurrentConfig Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.CurrentConfig Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Registry.CurrentConfig Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.CurrentConfig Example/CS/source.cs#1)]
 [!code-vb[Classic Registry.CurrentConfig Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.CurrentConfig Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentUser">
      <MemberSignature Language="C#" Value="public static readonly Microsoft.Win32.RegistryKey CurrentUser;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.Win32.RegistryKey CurrentUser" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Win32.Registry.CurrentUser" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CurrentUser As RegistryKey " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly Microsoft::Win32::RegistryKey ^ CurrentUser;" />
      <MemberSignature Language="F#" Value=" staticval mutable CurrentUser : Microsoft.Win32.RegistryKey" Usage="Microsoft.Win32.Registry.CurrentUser" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Contains information about the current user preferences. This field reads the Windows registry base key HKEY_CURRENT_USER</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 存储在此项的信息包括的环境变量和关于程序组、 颜色、 打印机、 网络连接和应用程序首选项的数据的设置。 此密钥，使得易于建立当前用户的设置。 此密钥，在软件供应商存储的当前的特定于用户的首选项，要在其应用程序中使用。 Microsoft，例如，创建要用于每个应用程序创建其自己的 Microsoft 密钥下的子项及其应用程序 HKEY_CURRENT_USER\Software\Microsoft 项。  
  
   
  
## Examples  
 下面的示例演示如何检索此项的子项，并输出到屏幕其名称。 使用<xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A>方法来创建感兴趣的特定子项的实例。 然后，可以使用中的其他操作<xref:Microsoft.Win32.RegistryKey>来操作该注册表项。  
  
 [!code-cpp[Classic Registry.CurrentUser Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.CurrentUser Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Registry.CurrentUser Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.CurrentUser Example/CS/source.cs#1)]
 [!code-vb[Classic Registry.CurrentUser Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.CurrentUser Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DynData">
      <MemberSignature Language="C#" Value="public static readonly Microsoft.Win32.RegistryKey DynData;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.Win32.RegistryKey DynData" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Win32.Registry.DynData" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DynData As RegistryKey " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly Microsoft::Win32::RegistryKey ^ DynData;" />
      <MemberSignature Language="F#" Value=" staticval mutable DynData : Microsoft.Win32.RegistryKey" Usage="Microsoft.Win32.Registry.DynData" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use PerformanceData instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Contains dynamic registry data. This field reads the Windows registry base key HKEY_DYN_DATA.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 98/Windows Me 注册表支持静态数据 （这存储在注册表中的磁盘） 和动态数据 （这会更改通常情况下，例如性能统计信息）。 此动态数据区域是可以远程和本地运行的 Win32 应用程序允许虚拟设备驱动程序 (VxDs) 提供实时数据的机制。 它还允许系统监视器在远程 Windows 98/Windows Me 系统上提供性能统计信息。  
  
 VxDs 并不仅限于性能数据。 它们可以提供他们想要将传递从 0 循环到最低的 3 环高效而不独占 CPU 任何的数据。 注册表支持通过将存储指向返回一个值 （或多个值） 的函数的动态数据。 当注册表调用查询值与键相关联动态，调用函数以返回所需的值。  
  
> [!NOTE]
>  动态密钥引入了在 Microsoft Windows 95 中以处理动态注册表数据。 支持仅在 Windows 98/Windows me。  
  
   
  
## Examples  
 下面的示例演示如何检索此项的子项，并输出到屏幕其名称。 使用<xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A>方法来创建感兴趣的特定子项的实例。 然后，可以使用中的其他操作<xref:Microsoft.Win32.RegistryKey>来操作该注册表项。 请注意，此示例可能不返回任何结果，因为可能没有可用的动态数据，或者你可能未运行 Windows 98 / me。 在其他系统上，使用此密钥可能会导致错误。  
  
 [!code-cpp[Classic Registry.DynData Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.DynData Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Registry.DynData Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.DynData Example/CS/source.cs#1)]
 [!code-vb[Classic Registry.DynData Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.DynData Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The operating system does not support dynamic data; that is, it is not Windows 98, Windows 98 Second Edition, or Windows Millennium Edition (Windows Me).</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public static object GetValue (string keyName, string valueName, object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetValue(string keyName, string valueName, object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValue (keyName As String, valueName As String, defaultValue As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetValue(System::String ^ keyName, System::String ^ valueName, System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="static member GetValue : string * string * obj -&gt; obj" Usage="Microsoft.Win32.Registry.GetValue (keyName, valueName, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="valueName" Type="System.String" />
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="keyName">The full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".</param>
        <param name="valueName">The name of the name/value pair.</param>
        <param name="defaultValue">The value to return if <c>valueName</c> does not exist.</param>
        <summary>Retrieves the value associated with the specified name, in the specified registry key. If the name is not found in the specified key, returns a default value that you provide, or <see langword="null" /> if the specified key does not exist.</summary>
        <returns>
          <see langword="null" /> if the subkey specified by <paramref name="keyName" /> does not exist; otherwise, the value associated with <paramref name="valueName" />, or <paramref name="defaultValue" /> if <paramref name="valueName" /> is not found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 字符串`valueName`不区分大小写。  
  
> [!NOTE]
>  注册表项可以包含一个值，与任何名称都不关联。 在注册表编辑器中显示了此未命名的值，而不是名称将显示字符串"（默认值）"。 若要检索此未命名的值，指定`null`或为空字符串 ("") 为`valuName`。  
  
 有效的根名称是 HKEY_CURRENT_USER、 HKEY_LOCAL_MACHINE、 注册表、 HKEY_USERS、 HKEY_PERFORMANCE_DATA、 HKEY_CURRENT_CONFIG 和 HKEY_DYN_DATA。 例如，在 Visual Basic 中的字符串"HKEY_CURRENT_USER\MyTestKey"访问 HKEY_CURRENT_USER 根目录中的子项"MyTestKey"的键/值对。  
  
 当<xref:Microsoft.Win32.RegistryKey.GetValue%2A>方法检索可扩展字符串值 (<xref:Microsoft.Win32.RegistryValueKind.ExpandString?displayProperty=nameWithType>)，它就会展开环境字符串使用本地环境中的数据。 如果包含对环境变量的可展开引用的值已存储为 string (<xref:Microsoft.Win32.RegistryValueKind.String?displayProperty=nameWithType>)，而不是可扩展字符串 (<xref:Microsoft.Win32.RegistryValueKind.ExpandString?displayProperty=nameWithType>)，<xref:Microsoft.Win32.RegistryKey.GetValue%2A>不展开它。 已检索到它通过调用后，你可以展开此类字符串<xref:System.Environment.ExpandEnvironmentVariables%2A?displayProperty=nameWithType>方法。  
  
> [!NOTE]
>  从 HKEY_PERFORMANCE_DATA 中检索数据的建议的方法是使用<xref:System.Diagnostics.PerformanceCounter>类而不是<xref:Microsoft.Win32.RegistryKey.GetValue%2A?displayProperty=nameWithType>方法。  
  
 <xref:Microsoft.Win32.Registry.GetValue%2A>和<xref:Microsoft.Win32.Registry.SetValue%2A>方法打开和关闭注册表项的方法以及其进行使用，因此它们不会执行每次<xref:Microsoft.Win32.RegistryKey>类如果访问大量的值。  
  
 <xref:Microsoft.Win32.RegistryKey> 此外提供了可用于将访问控制列表 (ACL) 添加到注册表项，以进行检索之前，测试值的数据类型并删除密钥的方法。  
  
   
  
## Examples  
 下面的代码示例将多个数据类型的值存储在一个示例键中创建密钥，这样做了，以及然后检索和显示的值。 示例演示了存储和检索默认 （无名称） 的名称/值对，以及如何使用`defaultValue`名称/值对不存在时。  
  
 [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/cpp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CPP/source.cpp#1)]
 [!code-csharp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/csharp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CS/source.cs#1)]
 [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key.</exception>
        <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keyName" /> does not begin with a valid registry root.</exception>
        <permission cref="T:System.Security.Permissions.RegistryPermission">若要从注册表中读取。 关联的枚举： <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read" /></permission>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">若要读取的类型 REG_EXPAND_SZ 注册表项。 关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="LocalMachine">
      <MemberSignature Language="C#" Value="public static readonly Microsoft.Win32.RegistryKey LocalMachine;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.Win32.RegistryKey LocalMachine" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Win32.Registry.LocalMachine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LocalMachine As RegistryKey " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly Microsoft::Win32::RegistryKey ^ LocalMachine;" />
      <MemberSignature Language="F#" Value=" staticval mutable LocalMachine : Microsoft.Win32.RegistryKey" Usage="Microsoft.Win32.Registry.LocalMachine" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Contains the configuration data for the local machine. This field reads the Windows registry base key HKEY_LOCAL_MACHINE.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LocalMachine` 包含五个密钥：  
  
 硬件  
 描述计算机中的物理硬件设备驱动程序使用该硬件，和映射和链接，用户模式代码的内核模式驱动程序的相关的数据的方式。 此密钥中的所有数据进行重新都创建每次启动系统。 说明子项描述的实际计算机硬件。 DeviceMap 子项包含特定于特定类的驱动程序的格式的其他数据。 ResourceMap 子项描述哪些设备驱动程序声明哪些硬件资源。 Windows NT 诊断程序 (Winmsdp.exe) 可以报告其内容以易于理解的形式。  
  
 SAM  
 目录服务数据库的用户和组帐户，以及在 Windows 2000 Server 域的安全信息 （SAM 是安全帐户管理器，称为目录服务数据库）。  
  
 安全性  
 包含本地安全策略，例如，特定的用户权限。 只能由 Windows 2000 安全子系统使用此密钥。  
  
 软件  
 每台计算机软件数据库。 此项包含有关与各种项的其他配置数据一起在本地计算机上安装软件的数据。  
  
 系统  
 控制系统启动、 设备驱动程序加载、 Windows 2000 服务和操作系统的行为。  
  
 按照约定，如果在存在相似的数据<xref:Microsoft.Win32.Registry.CurrentUser>并在列表视图<xref:Microsoft.Win32.Registry.LocalMachine>中的数据<xref:Microsoft.Win32.Registry.CurrentUser>优先。 但是，在此注册表项的值可以还扩展 （而不是替换） Registry.LocalMachine 中的数据。 此外，某些项 （例如加载项的设备驱动程序） 将毫无意义，如果它们在 Registry.LocalMachine 外部发生。  
  
   
  
## Examples  
 下面的示例演示如何检索此项的子项，并输出到屏幕其名称。 使用<xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A>方法来创建感兴趣的特定子项的实例。 然后，可以使用中的其他操作<xref:Microsoft.Win32.RegistryKey>来操作该注册表项。  
  
 [!code-cpp[Classic Registry.LocalMachine Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.LocalMachine Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Registry.LocalMachine Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.LocalMachine Example/CS/source.cs#1)]
 [!code-vb[Classic Registry.LocalMachine Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.LocalMachine Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformanceData">
      <MemberSignature Language="C#" Value="public static readonly Microsoft.Win32.RegistryKey PerformanceData;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.Win32.RegistryKey PerformanceData" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Win32.Registry.PerformanceData" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PerformanceData As RegistryKey " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly Microsoft::Win32::RegistryKey ^ PerformanceData;" />
      <MemberSignature Language="F#" Value=" staticval mutable PerformanceData : Microsoft.Win32.RegistryKey" Usage="Microsoft.Win32.Registry.PerformanceData" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Contains performance information for software components. This field reads the Windows registry base key HKEY_PERFORMANCE_DATA.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个软件组件会创建其对象，它在已安装，并执行时将计数器数据时的计数器的键。 你可以访问此数据，如像访问任何其他注册表数据，使用<xref:Microsoft.Win32.RegistryKey>函数。  
  
 尽管你使用注册表收集性能数据，数据不存储在注册表数据库。 相反，使用此密钥访问注册表会导致系统从相应的系统对象管理器收集的数据。  
  
 若要从本地系统中获取性能数据，请使用<xref:Microsoft.Win32.RegistryKey.GetValue%2A>方法，与 Registry.PerformanceData 键。 第一次调用将打开 （您不必显式第一次打开此项） 的密钥。 但是，请务必使用<xref:Microsoft.Win32.RegistryKey.Close%2A>方法来关闭项的句柄，在完成后获得性能数据。 用户无法安装或删除的软件组件，在使用其性能数据时。  
  
 若要从远程系统获取性能数据，必须使用<xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A>方法，与远程系统和 Registry.PerformanceData 密钥的计算机名称。 此呼叫会检索表示远程系统的性能数据的密钥。 若要检索的数据，调用<xref:Microsoft.Win32.RegistryKey.GetValue%2A>使用此密钥，而不是 Registry.PerformanceData 密钥。  
  
> [!NOTE]
>  在 Windows Server 2003，用户必须至少属于性能监视器用户组才能访问此基项的子项。  
  
   
  
## Examples  
 下面的示例演示如何检索此项的子项，并输出到屏幕其名称。 使用<xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A>方法来创建感兴趣的特定子项的实例。 然后，可以使用中的其他操作<xref:Microsoft.Win32.RegistryKey>来操作该注册表项。 请注意，此示例可以通常会返回任何结果，因为可能有无性能数据。  
  
 [!code-cpp[Classic Registry.PerformanceData Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.PerformanceData Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Registry.PerformanceData Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.PerformanceData Example/CS/source.cs#1)]
 [!code-vb[Classic Registry.PerformanceData Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.PerformanceData Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sets the value of a name/value pair in a registry key.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将多个数据类型的值存储在一个示例键中创建密钥，这样做了，以及然后检索和显示的值。 示例演示了存储和检索默认 （无名称） 的名称/值对，以及如何使用`defaultValue`名称/值对不存在时。  
  
 [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/cpp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CPP/source.cpp#1)]
 [!code-csharp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/csharp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CS/source.cs#1)]
 [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public static void SetValue (string keyName, string valueName, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetValue(string keyName, string valueName, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetValue (keyName As String, valueName As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetValue(System::String ^ keyName, System::String ^ valueName, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member SetValue : string * string * obj -&gt; unit" Usage="Microsoft.Win32.Registry.SetValue (keyName, valueName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="valueName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="keyName">The full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".</param>
        <param name="valueName">The name of the name/value pair.</param>
        <param name="value">The value to be stored.</param>
        <summary>Sets the specified name/value pair on the specified registry key. If the specified key does not exist, it is created.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从开始[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、`valueName`参数不再限制为最多为 255 个字符; 但是，`keyName`参数继续具有 255 个字符限制。  
  
 由于多个值可以存储在注册表中的每个项，你必须使用`valueName`参数来指定你想要设置的特定值。  
  
> [!NOTE]
>  注册表项可以包含一个值，与任何名称都不关联。 在注册表编辑器中显示了此未命名的值，而不是名称将显示字符串"（默认值）"。 若要设置此未命名的值，指定`null`或为空字符串 ("") 为`valueName`。  
  
 如果`valueName`不存在的项中创建和关联的值设置为`value`。  
  
 如果`keyName`指定不存在，一个子项指定的根目录中创建的子项。 例如，在 Visual Basic 中的字符串"HKEY_CURRENT_USER\MyTestKey"创建 HKEY_CURRENT_USER 根目录中的子项"MyTestKey"。 字符串"HKEY_CURRENT_USER\MyTestKey\Key2\Key3"创建"MyTestKey"、"MyTestKey\Key2"和"MyTestKey\Key2\Key3"的嵌套的子项。  
  
 有效的根名称包含 HKEY_CURRENT_USER、 HKEY_LOCAL_MACHINE、 注册表、 HKEY_USERS、 HKEY_PERFORMANCE_DATA、 HKEY_CURRENT_CONFIG 和 HKEY_DYN_DATA。  
  
> [!NOTE]
>  <xref:Microsoft.Win32.Registry.SetValue%2A>方法打开注册表项、 设置的值，并关闭每次调用时的密钥。 如果你需要修改大量的值，<xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=nameWithType>方法可能会提供更好的性能。 <xref:Microsoft.Win32.RegistryKey>类还提供了可用于将访问控制列表 (ACL) 添加到注册表项，以进行检索之前，测试值的数据类型并删除密钥的方法。  
  
 此重载<xref:Microsoft.Win32.Registry.SetValue%2A>将 64 位整数存储为字符串 (<xref:Microsoft.Win32.RegistryValueKind.String?displayProperty=nameWithType>)。 若要将作为 64 位数字存储<xref:Microsoft.Win32.RegistryValueKind.QWord?displayProperty=nameWithType>值，请使用<xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29>方法重载。  
  
 此重载<xref:Microsoft.Win32.Registry.SetValue%2A>存储所有的字符串值作为<xref:Microsoft.Win32.RegistryValueKind.String?displayProperty=nameWithType>对象，即使它们包含对环境变量的可展开引用。 若要保存为可展开的字符串的字符串值 (<xref:Microsoft.Win32.RegistryValueKind.ExpandString?displayProperty=nameWithType>)，使用<xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29>方法重载。  
  
 此重载是等效于调用<xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29>方法重载<xref:Microsoft.Win32.RegistryValueKind.Unknown?displayProperty=nameWithType>。  
  
> [!NOTE]
>  在 Windows 98 和 Windows Millennium Edition (Windows Me)，注册表不是 Unicode，并不是所有 Unicode 字符都是有效的所有代码页。 对于当前的代码页无效的 Unicode 字符都替换为最佳的匹配项。 不引发异常。  
  
   
  
## Examples  
 下面的代码示例将多个数据类型的值存储在一个示例键中创建密钥，这样做了，以及然后检索和显示的值。 示例演示了存储和检索默认 （无名称） 的名称/值对，以及如何使用`defaultValue`名称/值对不存在时。  
  
 [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/cpp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CPP/source.cpp#1)]
 [!code-csharp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/csharp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CS/source.cs#1)]
 [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keyName" /> does not begin with a valid registry root.  -or-  <paramref name="keyName" /> is longer than the maximum length allowed (255 characters).</exception>
        <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is read-only, and thus cannot be written to; for example, it is a root-level node.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or modify registry keys.</exception>
        <permission cref="T:System.Security.Permissions.RegistryPermission">若要修改指定的注册表项，如果存在，或创建注册表项，如果不存在。 关联的枚举： <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Write" />， <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Create" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public static void SetValue (string keyName, string valueName, object value, Microsoft.Win32.RegistryValueKind valueKind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetValue(string keyName, string valueName, object value, valuetype Microsoft.Win32.RegistryValueKind valueKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetValue (keyName As String, valueName As String, value As Object, valueKind As RegistryValueKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetValue(System::String ^ keyName, System::String ^ valueName, System::Object ^ value, Microsoft::Win32::RegistryValueKind valueKind);" />
      <MemberSignature Language="F#" Value="static member SetValue : string * string * obj * Microsoft.Win32.RegistryValueKind -&gt; unit" Usage="Microsoft.Win32.Registry.SetValue (keyName, valueName, value, valueKind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="valueName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="valueKind" Type="Microsoft.Win32.RegistryValueKind" />
      </Parameters>
      <Docs>
        <param name="keyName">The full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".</param>
        <param name="valueName">The name of the name/value pair.</param>
        <param name="value">The value to be stored.</param>
        <param name="valueKind">The registry data type to use when storing the data.</param>
        <summary>Sets the name/value pair on the specified registry key, using the specified registry data type. If the specified key does not exist, it is created.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从开始[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、`valueName`参数不再限制为最多为 255 个字符; 但是，`keyName`参数将继续具有 255 个字符限制。  
  
 由于多个值可以存储在注册表中的每个项，你必须使用`valueName`参数来指定你想要设置的特定值。  
  
> [!NOTE]
>  注册表项可以包含一个值，与任何名称都不关联。 在注册表编辑器中显示了此未命名的值，而不是名称将显示字符串"（默认值）"。 若要设置此未命名的值，指定`null`或为空字符串 ("") 为`valueName`。  
  
 如果`valueName`不存在的项中创建和关联的值设置为`value`。  
  
 如果`keyName`指定不存在，一个子项指定的根目录中创建的子项。 例如，在 Visual Basic 中的字符串"HKEY_CURRENT_USER\MyTestKey"创建 HKEY_CURRENT_USER 根目录中的子项"MyTestKey"。 字符串"HKEY_CURRENT_USER\MyTestKey\Key2\Key3"创建"MyTestKey"、"MyTestKey\Key2"和"MyTestKey\Key2\Key3"的嵌套的子项。  
  
 有效的根名称包含 HKEY_CURRENT_USER、 HKEY_LOCAL_MACHINE、 注册表、 HKEY_USERS、 HKEY_PERFORMANCE_DATA、 HKEY_CURRENT_CONFIG 和 HKEY_DYN_DATA。  
  
> [!NOTE]
>  <xref:Microsoft.Win32.Registry.SetValue%2A>方法打开注册表项、 设置的值，并关闭每次调用时的密钥。 如果你需要修改大量的值，<xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=nameWithType>方法可能会提供更好的性能。 <xref:Microsoft.Win32.RegistryKey>类还提供了可用于将访问控制列表 (ACL) 添加到注册表项，以进行检索之前，测试值的数据类型并删除密钥的方法。  
  
 如果指定的类型`value`不匹配指定`valueKind`，和数据不能转换，<xref:System.ArgumentException>引发。 例如，你可以存储<xref:System.Int64?displayProperty=nameWithType>作为<xref:Microsoft.Win32.RegistryValueKind.DWord?displayProperty=nameWithType>，但仅当其值为的最大值小于<xref:System.Int32?displayProperty=nameWithType>。 无法将值存储在单个字符串作为<xref:Microsoft.Win32.RegistryValueKind.MultiString?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果已装箱的值传递<xref:Microsoft.Win32.RegistryValueKind.DWord?displayProperty=nameWithType>或<xref:Microsoft.Win32.RegistryValueKind.QWord?displayProperty=nameWithType>，完成转换后使用固定区域性。  
  
> [!NOTE]
>  在 Windows 98 和 Windows Millennium Edition (Windows Me)，注册表不是 Unicode，并不是所有 Unicode 字符都是有效的所有代码页。 对于当前的代码页无效的 Unicode 字符都替换为最佳的匹配项。 不引发异常。  
  
   
  
## Examples  
 下面的代码示例将多个数据类型的值存储在一个示例键中创建密钥，这样做了，以及然后检索和显示的值。 示例演示了存储和检索默认 （无名称） 的名称/值对，以及如何使用`defaultValue`名称/值对不存在时。  
  
 [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/cpp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CPP/source.cpp#1)]
 [!code-csharp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/csharp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CS/source.cs#1)]
 [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keyName" /> does not begin with a valid registry root.  -or-  <paramref name="keyName" /> is longer than the maximum length allowed (255 characters).  -or-  The type of <paramref name="value" /> did not match the registry data type specified by <paramref name="valueKind" />, therefore the data could not be converted properly.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is read-only, and thus cannot be written to; for example, it is a root-level node, or the key has not been opened with write access.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or modify registry keys.</exception>
        <permission cref="T:System.Security.Permissions.RegistryPermission">若要修改指定的注册表项，如果存在，或创建注册表项，如果不存在。 关联的枚举： <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Write" />， <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Create" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Users">
      <MemberSignature Language="C#" Value="public static readonly Microsoft.Win32.RegistryKey Users;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.Win32.RegistryKey Users" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Win32.Registry.Users" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Users As RegistryKey " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly Microsoft::Win32::RegistryKey ^ Users;" />
      <MemberSignature Language="F#" Value=" staticval mutable Users : Microsoft.Win32.RegistryKey" Usage="Microsoft.Win32.Registry.Users" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Contains information about the default user configuration. This field reads the Windows registry base key HKEY_USERS.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此项包含计算机的每个用户一个分支。 如果用户未更改首选项，默认配置被提供对本地计算机上的新用户和默认当前用户。 因为 Windows 98 / 我还支持 Registry.Users，应用程序可以访问特定于用户的信息在 Windows 2000 下的相同方式。 每个用户的信息存储在单独的文件，可以将存储在本地或网络服务器上。 Windows 98 / 我可以将此文件复制到用户的当前系统，以便设置可以从一台计算机之间移动与该用户。  
  
   
  
## Examples  
 下面的示例演示如何检索此项的子项，并输出到屏幕其名称。 使用<xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A>方法来创建感兴趣的特定子项的实例。 然后，可以使用中的其他操作<xref:Microsoft.Win32.RegistryKey>来操作该注册表项。  
  
 [!code-cpp[Classic Registry.Users Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.Users Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Registry.Users Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.Users Example/CS/source.cs#1)]
 [!code-vb[Classic Registry.Users Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.Users Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>