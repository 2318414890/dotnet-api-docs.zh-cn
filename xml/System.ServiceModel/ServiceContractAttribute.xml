<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ServiceContractAttribute.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac523e56316bd9a8661f771e3708b920518208d4cbb.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23e56316bd9a8661f771e3708b920518208d4cbb</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>Indicates that an interface or a class defines a service contract in a Windows Communication Foundation (WCF) application.</source>
          <target state="translated">指示接口或类在 Windows Communication Foundation (WCF) 应用程序中定义服务协定。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> attribute on an interface (or class) to define a service contract.</source>
          <target state="translated">使用接口（或类）上的 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 属性定义服务协定。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>Then use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute on one or more of the class (or interface) methods to define the contract's service operations.</source>
          <target state="translated">然后使用一个或多个类（或接口）方法中的 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> 属性定义协定的服务操作。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>When the service contract is implemented and combined with a <bpt id="p1">[</bpt>Bindings<ept id="p1">](~/docs/framework/wcf/bindings.md)</ept> and an <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> object, the service contract is exposed for use by clients.</source>
          <target state="translated">当服务协定实现，并且结合<bpt id="p1">[</bpt>绑定<ept id="p1">](~/docs/framework/wcf/bindings.md)</ept>和<ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph>对象，服务协定将公开以供客户端。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>For an overview of the process using simple examples, see <bpt id="p1">[</bpt>Getting Started Tutorial<ept id="p1">](~/docs/framework/wcf/getting-started-tutorial.md)</ept>.</source>
          <target state="translated">使用简单的示例在过程的概述，请参阅<bpt id="p1">[</bpt>入门教程<ept id="p1">](~/docs/framework/wcf/getting-started-tutorial.md)</ept>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>For more information about creating service contracts, see <bpt id="p1">[</bpt>Designing and Implementing Services<ept id="p1">](~/docs/framework/wcf/designing-and-implementing-services.md)</ept>.</source>
          <target state="translated">有关创建服务协定的详细信息，请参阅<bpt id="p1">[</bpt>设计和实现服务<ept id="p1">](~/docs/framework/wcf/designing-and-implementing-services.md)</ept>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>The information expressed by a <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> and its interface is loosely related to the Web Services Description Language (WSDL) <ph id="ph2">`&lt;portType&gt;`</ph> element.</source>
          <target state="translated">此信息由 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 表示，其接口与 Web 服务描述语言 (WSDL) <ph id="ph2">`&lt;portType&gt;`</ph> 元素松散相关。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>A service contract is used on the service side to specify what the service’s endpoint exposes to callers.</source>
          <target state="translated">服务协定可用于服务端以指定服务终结点向调用方公开的内容。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>It is also used on the client side to specify the contract of the endpoint with which the client communicates and, in the case of duplex contracts, to specify the callback contract (using the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph> property) that the client must implement in order to participate in a duplex conversation.</source>
          <target state="translated">它也可以在客户端使用，以指定客户端与终结点通信的协定，如果是双工协定，则用于指定客户端必须实现的回调协定（使用 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph> 属性）以参与双工对话。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>An interface or class that is decorated with <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> must also have at least one method marked with the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute to expose any functionality.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 修饰的接口或类还必须至少拥有一个用 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> 属性标记的方法以公开任意功能。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>See the Examples section for a code example of the simplest use of the two attributes to define and implement a service.</source>
          <target state="translated">有关使用这两个属性定义和实现服务的最简单用法的代码示例，请参见“示例”部分。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> properties to modify the service contract.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 属性修改服务协定。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ConfigurationName%2A&gt;</ph> property specifies the name of the service element in the configuration file to use.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ConfigurationName%2A&gt;</ph> 属性指定要使用的配置文件中的服务元素的名称。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.Name%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A&gt;</ph> properties control the name and namespace of the contract in the WSDL <ph id="ph3">`&lt;portType&gt;`</ph> element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.Name%2A&gt;</ph> 和 <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A&gt;</ph> 属性控制 WSDL <ph id="ph3">`&lt;portType&gt;`</ph> 元素中的协定名称和命名空间。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph> property specifies whether the contract requires a binding that supports sessions.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph> 属性指定协定是否需要支持会话的绑定。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph> property specifies the return contract in a two-way (duplex) conversation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph> 属性指定双向（双工）对话中的返回协定。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A&gt;</ph> properties indicate whether all messages supporting the contract have a explicit <ph id="ph3">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A&gt;</ph> value, and if so, what that level is.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel%2A&gt;</ph> 和 <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A&gt;</ph> 属性指示是否所有支持协定的消息都具有一个显式 <ph id="ph3">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A&gt;</ph> 值，如果有，处于什么级别。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>Services implement service contracts, which represent the data exchange that a service type supports.</source>
          <target state="translated">服务实现服务协定，此协定表示服务类型支持的数据交换。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>A service class can implement a service contract (by implementing an interface marked with <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> that has methods marked with <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph>) or it can be marked with the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> and apply the <ph id="ph4">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute to its own methods.</source>
          <target state="translated">服务类可以实现服务协定（通过实现以 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 标记的接口，该接口具有以 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> 标记的方法），或者也可以使用 <ph id="ph3">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 标记并将 <ph id="ph4">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> 属性应用到它自己的方法中。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>(If a class implements an interface marked with <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph>, it cannot be itself marked with <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph>.) Methods on service types that are marked with the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> are treated as part of a default service contract specified by the service type itself.</source>
          <target state="translated">（如果类实现了一个以 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 标记的接口，则无法使用 <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 标记其本身。）使用 <ph id="ph3">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> 标记的服务类型中的方法将被视为由此服务类型本身指定的默认服务协定的一部分。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>For details about service operations, see <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph>.</source>
          <target state="translated">有关服务操作的详细信息，请参见 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>By default, the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.Name%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A&gt;</ph> properties are the name of the contract type and <ph id="ph3">`http://tempuri.org`</ph>, respectively, and <ph id="ph4">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A&gt;</ph> is <ph id="ph5">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">默认情况下，<ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.Name%2A&gt;</ph> 和 <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A&gt;</ph> 属性分别是协定类型的名称和 <ph id="ph3">`http://tempuri.org`</ph>，且 <ph id="ph4">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A&gt;</ph> 为 <ph id="ph5">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>It is recommended that service contracts explicitly set their names, namespaces, and protection levels using these properties.</source>
          <target state="translated">建议服务协定使用这些属性显式设置其名称、命名空间和保护级别。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>Doing so accomplishes two goals.</source>
          <target state="translated">这样做可以实现两个目的。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>First, it builds a contract that is not directly connected to the managed type information, enabling you to refactor your managed code and namespaces without breaking the contract as it is expressed in WSDL.</source>
          <target state="translated">首先，它将生成一个并不直接与托管的类型信息连接的协定，从而使您可以重构托管代码和命名空间而不破坏协定，这是因为协定使用 WSDL 表示。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>Second, explicitly requiring a certain level of protection on the contract itself enables the runtime to validate whether the binding configuration supports that level of security, preventing poor configuration from exposing sensitive information.</source>
          <target state="translated">其次，显式要求协定本身具有特定保护级别将使运行时能够验证绑定配置是否支持该安全级别，从而防止因配置不当而公开敏感信息。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>For more information about protection levels, see <bpt id="p1">[</bpt>Understanding Protection Level<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>.</source>
          <target state="translated">有关保护级别的详细信息，请参阅<bpt id="p1">[</bpt>了解保护级别<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>To expose a service for use by client applications, create a host application to register your service endpoint with <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph>.</source>
          <target state="translated">若要公开服务以供客户端应用程序使用，请创建一个宿主应用程序以向 <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 注册服务终结点。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>You can host <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> services using Windows Activation Services (WAS), in console applications, Windows Service applications, ASP.NET applications, Windows Forms applications, or any other kind of application domain.</source>
          <target state="translated">您可以使用 Windows 激活服务 (WAS) 在控制台应用程序、Windows 服务应用程序、ASP.NET 应用程序、Windows 窗体应用程序或任何其他类型的应用程序域中承载 <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 服务。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>Hosting in the WAS is very similar to creating an ASP.NET application.</source>
          <target state="translated">在 WAS 中承载与创建 ASP.NET 应用程序非常类似。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>For details, see <bpt id="p1">[</bpt>How to: Host a WCF Service in IIS<ept id="p1">](~/docs/framework/wcf/feature-details/how-to-host-a-wcf-service-in-iis.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>如何： 承载在 IIS 中的 WCF 服务<ept id="p1">](~/docs/framework/wcf/feature-details/how-to-host-a-wcf-service-in-iis.md)</ept>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>Clients either use the service contract interface (the interface marked with <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph>) to create a channel to the service or they use the client objects (which combine the type information of the service contract interface with the <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> class) to communicate with your service.</source>
          <target state="translated">客户端既可以使用服务协定接口（使用 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 标记的接口）创建服务的信道，也可以使用客户端对象（这些对象将服务协定接口的类型信息与 <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> 类相结合）与您的服务通信。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>For details on client channels to services, see the <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph> class and <bpt id="p1">[</bpt>WCF Client Overview<ept id="p1">](~/docs/framework/wcf/wcf-client-overview.md)</ept>.</source>
          <target state="translated">到服务的客户端通道的详细信息，请参阅<ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph>类和<bpt id="p1">[</bpt>WCF 客户端概述<ept id="p1">](~/docs/framework/wcf/wcf-client-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>Using a <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> class or interface to inherit from another <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> class or interface extends the parent contract.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 类或接口从另一个 <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 类或接口继承将会扩展其父协定。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>For example, if an <ph id="ph1">`IChildContract`</ph> interface is marked with <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> and inherited from another service contract interface, <ph id="ph3">`IParentContract`</ph>, the <ph id="ph4">`IChildContract`</ph> service contract contains the methods of both <ph id="ph5">`IParentContract`</ph> and <ph id="ph6">`IChildContract`</ph>.</source>
          <target state="translated">例如，如果 <ph id="ph1">`IChildContract`</ph> 接口使用 <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 标记并且是从另一个服务协定接口 <ph id="ph3">`IParentContract`</ph> 继承的，则 <ph id="ph4">`IChildContract`</ph> 服务协定将包含 <ph id="ph5">`IParentContract`</ph> 和 <ph id="ph6">`IChildContract`</ph> 的方法。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>Extending contracts (whether on classes or interfaces) is very similar to extending managed classes and interfaces.</source>
          <target state="translated">扩展协定（无论在类或接口上）与扩展托管类和接口非常类似。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>The most flexible approach to creating services is to define service contract interfaces first and then have your service class implement that interface.</source>
          <target state="translated">创建服务最灵活的方法是先定义服务协定接口，然后再让服务类实现该接口。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>(This is also the simplest way to build your services if you must implement service contracts that have been defined by others.) Building services directly by marking a class with <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> and its methods with <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> works when the service exposes only one contract (but that contract can be exposed by more than one endpoint).</source>
          <target state="translated">（这也是在您必须实现其他用户定义的服务协定的情况下生成您自己的服务的最简单方法。）当服务只公开一个协定（但是该协定可以由多个终结点公开）时，可以通过使用 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 标记类并使用 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> 标记其方法来直接生成服务。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph> property to indicate another service contract that, when bound together with the original service contract, define a message exchange that can flow in two ways independently.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph>属性以指示另一个服务协定，绑定在一起的原始服务协定时定义的消息交换的独立流两种方式。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>For details, see <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph>.</source>
          <target state="translated">有关详细信息，请参阅<ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>The following code example shows how to apply the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> to an interface to define a service contract with one service method, indicated by the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph>.</source>
          <target state="translated">下面的代码示例演示如何对接口应用 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 以使用一个由 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> 指示的服务方法来定义服务协定。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>In this case, the protection level required of bindings for all messages is <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">在这种情况下，所有消息的绑定需要的保护级别为 <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>The code example then implements that contract on the <ph id="ph1">`SampleService`</ph> class.</source>
          <target state="translated">然后，该代码示例将在 <ph id="ph1">`SampleService`</ph> 类上实现该协定。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>The following code example shows a simple configuration file for the preceding service that creates one endpoint.</source>
          <target state="translated">下面的代码示例演示了上述服务（创建一个终结点）的简单配置文件。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceContractAttribute">
          <source>The following code example shows a simple client that invokes the preceding <ph id="ph1">`SampleService`</ph>.</source>
          <target state="translated">下面的代码示例演示调用上述 <ph id="ph1">`SampleService`</ph> 的简单客户端。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceContractAttribute.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceContractAttribute" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceContractAttribute" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceContractAttribute.#ctor">
          <source>The constructor creates an instance of the attribute with no session requirements, no callback contract, and the default name and namespace.</source>
          <target state="translated">此构造函数创建无会话需求、无回调协定但具有默认名称和命名空间的属性实例。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
          <source>Gets or sets the type of callback contract when the contract is a duplex contract.</source>
          <target state="translated">获取或设置当协定为双工协定时的回调协定类型。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that indicates the callback contract.</source>
          <target state="translated">指示回调协定的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
          <source>Specify an interface in the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph> property that represents the required opposite contract in a two-way (or duplex) message exchange.</source>
          <target state="translated">在 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph> 属性中指定一个接口，该属性表示双向（双工）消息交换中所需的反向协定。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
          <source>This enables client applications to listen for inbound operation calls that the server-side service application can send independently of client activity.</source>
          <target state="translated">这使得客户端应用程序能够侦听入站操作调用，该调用可以由服务器端服务应用程序独立于客户端活动进行发送。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
          <source>Callback contracts that have one-way operations represent calls from the service that the client can handle.</source>
          <target state="translated">具有单向操作的回调协定表示从客户端可以处理的服务发出的调用。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> attribute is ignored on callback contracts.</source>
          <target state="translated">回调协定将忽略 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
          <source>To configure runtime behavior of callback objects, use the <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要配置回调对象的运行时行为，请使用 <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
          <source>The following code example shows a service that specifies a callback contract, which indicates that a service of type <ph id="ph1">`IDuplexHello`</ph> must have a correspondent that implements a service of type <ph id="ph2">`IHelloCallbackContract`</ph>.</source>
          <target state="translated">下面的代码示例演示指定回调协定的服务，该协定指示 <ph id="ph1">`IDuplexHello`</ph> 类型的服务必须具有可实现类型为 <ph id="ph2">`IHelloCallbackContract`</ph> 的服务的对应方法。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
          <source>In addition, <ph id="ph1">`IHelloCallbackContract`</ph> implements a one-way callback method, enabling the service to call the client without waiting for a reply to support a distributed, event-driven client.</source>
          <target state="translated">此外，<ph id="ph1">`IHelloCallbackContract`</ph> 还可实现单向回调方法，从而使得服务可以无需等待对事件驱动的分布式客户端的支持响应即可调用客户端。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName">
          <source>Gets or sets the name used to locate the service in an application configuration file.</source>
          <target state="translated">获取或设置用于查找应用程序配置文件中的服务的名称。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName">
          <source>The name used to locate the service element in an application configuration file.</source>
          <target state="translated">用于查找应用程序配置文件中的服务元素的名称。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName">
          <source>The default is the name of the service implementation class.</source>
          <target state="translated">默认值是服务实现类的名称。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName">
          <source>To set the value by which the configuration system locates a contract value in the configuration file, see <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.ConfigurationName%2A&gt;</ph>.</source>
          <target state="translated">若要设置一个配置系统用于在配置文件中查找协定值的值，请参见 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.ConfigurationName%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName">
          <source>The value is null.</source>
          <target state="translated">该值为 Null。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName">
          <source>The value is an empty string.</source>
          <target state="translated">该值是一个空字符串。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel">
          <source>Gets a value that indicates whether the member has a protection level assigned.</source>
          <target state="translated">获取一个值，该值指示是否对成员分配保护级别。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" /&gt;</ph> property is not <ph id="ph3">&lt;see cref="F:System.Net.Security.ProtectionLevel.None" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 属性不是 <ph id="ph2">&lt;see cref="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" /&gt;</ph>，则为 <ph id="ph3">&lt;see cref="F:System.Net.Security.ProtectionLevel.None" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel%2A&gt;</ph> property indicates whether a protection level value other than <ph id="ph2">`false`</ph> has been set for the contract.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel%2A&gt;</ph> 属性指示是否为协定设置了除 <ph id="ph2">`false`</ph> 以外的保护级别值。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceContractAttribute.Name">
          <source>Gets or sets the name for the <ph id="ph1">&lt;see langword="&amp;lt;portType&amp;gt;" /&gt;</ph> element in Web Services Description Language (WSDL).</source>
          <target state="translated">获取或设置 Web 服务描述语言 (WSDL) 中的 <ph id="ph1">&lt;see langword="&amp;lt;portType&amp;gt;" /&gt;</ph> 元素的名称。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.Name">
          <source>The default value is the name of the class or interface to which the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceContractAttribute" /&gt;</ph> is applied.</source>
          <target state="translated">默认值为应用了 <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceContractAttribute" /&gt;</ph> 的类或接口的名称。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.Name">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.Name%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A&gt;</ph> properties to control the name and namespace of the <ph id="ph3">`&lt;portType&gt;`</ph> element in WSDL.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.Name%2A&gt;</ph> 和 <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A&gt;</ph> 属性控制 WSDL 中 <ph id="ph3">`&lt;portType&gt;`</ph> 元素的名称和命名空间。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.Name">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.Name%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> to set the corresponding values in WSDL.</source>
          <target state="translated">下面的代码示例演示如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.Name%2A&gt;</ph> 的 <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A&gt;</ph> 和 <ph id="ph3">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 属性设置 WSDL 中的对应值。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.Name">
          <source>The following code example shows an <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> client for the preceding service that imported WSDL using the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph>导入 WSDL 的上述服务的客户端<bpt id="p1">[</bpt>ServiceModel 元数据实用工具 (Svcutil.exe)<ept id="p1">](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.Name">
          <source>This client uses a <ph id="ph1">`HelloWorldProxy`</ph> client rather than a <ph id="ph2">`SampleServiceProxy`</ph> client (as is the case with the sample in the Example section of <ph id="ph3">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph>).</source>
          <target state="translated">此客户端使用 <ph id="ph1">`HelloWorldProxy`</ph> 客户端，而不是 <ph id="ph2">`SampleServiceProxy`</ph> 客户端（这与 <ph id="ph3">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 的“示例”部分中的示例相同）。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceContractAttribute.Name">
          <source>The value is null.</source>
          <target state="translated">该值为 Null。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceContractAttribute.Name">
          <source>The value is an empty string.</source>
          <target state="translated">该值是一个空字符串。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceContractAttribute.Namespace">
          <source>Gets or sets the namespace of the <ph id="ph1">&lt;see langword="&amp;lt;portType&amp;gt;" /&gt;</ph> element in Web Services Description Language (WSDL).</source>
          <target state="translated">获取或设置 Web 服务描述语言 (WSDL) 中的 <ph id="ph1">&lt;see langword="&amp;lt;portType&amp;gt;" /&gt;</ph> 元素的命名空间。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.Namespace">
          <source>The WSDL namespace of the <ph id="ph1">&lt;see langword="&amp;lt;portType&amp;gt;" /&gt;</ph> element.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="&amp;lt;portType&amp;gt;" /&gt;</ph> 元素的 WSDL 命名空间。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.Namespace">
          <source>The default value is "<ph id="ph1">http://tempuri.org</ph>".</source>
          <target state="translated">默认值为“<ph id="ph1">http://tempuri.org</ph>”。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.Namespace">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.Name%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> to set the corresponding values in WSDL.</source>
          <target state="translated">下面的代码示例演示如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.Name%2A&gt;</ph> 的 <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A&gt;</ph> 和 <ph id="ph3">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 属性设置 WSDL 中的对应值。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.Namespace">
          <source>The following code example shows an <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> client for the preceding service that imported WSDL using the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph>导入 WSDL 的上述服务的客户端<bpt id="p1">[</bpt>ServiceModel 元数据实用工具 (Svcutil.exe)<ept id="p1">](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.Namespace">
          <source>This client uses a <ph id="ph1">`HelloWorldClient`</ph> client rather than a <ph id="ph2">`SampleServiceClient`</ph> client (as is the case with the sample in the Example section of <ph id="ph3">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph>).</source>
          <target state="translated">此客户端使用 <ph id="ph1">`HelloWorldClient`</ph> 客户端，而不是 <ph id="ph2">`SampleServiceClient`</ph> 客户端（这与 <ph id="ph3">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> 的“示例”部分中的示例相同）。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>Specifies whether the binding for the contract must support the value of the <ph id="ph1">&lt;see cref="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" /&gt;</ph> property.</source>
          <target state="translated">指定协定的绑定是否必须支持 <ph id="ph1">&lt;see cref="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" /&gt;</ph> 属性的值。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Net.Security.ProtectionLevel" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Security.ProtectionLevel" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Net.Security.ProtectionLevel.None" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see cref="F:System.Net.Security.ProtectionLevel.None" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A&gt;</ph> property to specify the degree to which the contract binding requires encryption, digital signatures, or both for endpoints that expose the contract.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A&gt;</ph> 属性指定协定绑定对公开协定的终结点要求的加密和/或数字签名的程度。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>The value set here is the default value for all operation messages including faults.</source>
          <target state="translated">在此设置的值是为包括错误在内的所有操作消息提供的默认值。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>It is important to remember that the protection behavior at runtime is the combination of the protection-level values set on the following properties.</source>
          <target state="translated">请记住，运行时的保护行为是在下列属性中设置的保护级别值的组合，这一点很重要。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>These properties have a hierarchical structure.</source>
          <target state="translated">这些属性具有层次结构。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>Setting the outermost value establishes the default setting for all narrower scopes unless a different value for a narrower scope is explicitly set.</source>
          <target state="translated">除非已为较窄范围显式设置了某个不同的值，否则设置最外层的值将为所有较窄的范围确定默认设置。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>In this case, the outer value remains the default for all narrower scopes with the exception of that specifically set.</source>
          <target state="translated">在这种情况下，外层的值将保持所有较窄的范围的默认设置，但特定的设置除外。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>For example, if <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph> and no other narrower scopes have protection level settings, all messages in an operation contract are encrypted and signed.</source>
          <target state="translated">例如，如果将 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> 设置为 <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>，并且其他较窄范围都没有设置保护级别，则会对操作协定中的所有消息进行加密和签名。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>If, however, one of those operations has the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> set to <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType&gt;</ph>, then the messages for that operation are signed but all other messages in the contract are encrypted and signed.</source>
          <target state="translated">但是，如果其中一个操作将 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> 设置为 <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType&gt;</ph>，那么只会对此操作的消息进行签名，而对协定中的所有其他消息进行加密和签名。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>For details about protection levels and their assumptions and scopes, see <bpt id="p1">[</bpt>Understanding Protection Level<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>.</source>
          <target state="translated">有关保护级别及其假设和范围的详细信息，请参阅<bpt id="p1">[</bpt>了解保护级别<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>The scopes at which these values are set are:</source>
          <target state="translated">这些值的设置范围是：</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> property on <ph id="ph2">&lt;xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> 上的 <ph id="ph2">&lt;xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> property on <ph id="ph2">&lt;xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> 上的 <ph id="ph2">&lt;xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>When there is no protection level explicitly specified on the contract and the underlying binding supports security (whether at the transport or message level), the effective protection level for the whole contract is <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">当协定上没有显式指定保护级别并且基础绑定支持安全性时（无论处于传输级别还是处于消息级别），整个协定的有效保护级别将为 <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>If the binding does not support security (such as <ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding&gt;</ph>), the effective <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType&gt;</ph> is <ph id="ph3">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph> for the whole contract.</source>
          <target state="translated">如果绑定不支持安全性（如 <ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding&gt;</ph>），则整个协定的有效 <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType&gt;</ph> 为 <ph id="ph3">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>The result is that depending upon the endpoint binding, clients can require different message or transport level security protection even when the contract specifies <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">因此，根据终结点绑定，即使协定指定了 <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph>，客户端也可以要求不同的消息或传输级别安全保护。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
          <source>The value is not one of the <ph id="ph1">&lt;see cref="T:System.Net.Security.ProtectionLevel" /&gt;</ph> values.</source>
          <target state="translated">该值不是 <ph id="ph1">&lt;see cref="T:System.Net.Security.ProtectionLevel" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>Gets or sets whether sessions are allowed, not allowed or required.</source>
          <target state="translated">获取或设置是否允许、不允许或要求会话。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>A <ph id="ph1">&lt;see cref="T:System.ServiceModel.SessionMode" /&gt;</ph> that indicates whether sessions are allowed, not allowed, or required.</source>
          <target state="translated">指示是否允许、不允许或要求会话的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.SessionMode" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph> property to require bindings that support sessions between endpoints.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph> 属性来要求在终结点之间支持会话的绑定。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>A session is a way of correlating a set of messages exchanged between two or more endpoints.</source>
          <target state="translated">会话就是将在两个或多个终结点之间交换的消息集相互关联的方式。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>If your service supports channel sessions, you can then use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A&gt;</ph> property to specify the relationship between instances your service contract implementation and the channel session.</source>
          <target state="translated">如果您的服务支持信道会话，则可以使用 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A&gt;</ph> 属性指定您的服务协定实现实例与信道会话实例之间的关系。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>If a binding does not support sessions, an exception is thrown.</source>
          <target state="translated">如果绑定不支持会话，则会引发异常。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>For example, if the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.ServiceModel.SessionMode.Required?displayProperty=nameWithType&gt;</ph> and the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A&gt;</ph> property is set to <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContextMode.PerSession&gt;</ph>, clients can use the same connection to make repeated calls to the same service object.</source>
          <target state="translated">例如，如果将 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph> 属性设置为 <ph id="ph2">&lt;xref:System.ServiceModel.SessionMode.Required?displayProperty=nameWithType&gt;</ph> 并将 <ph id="ph3">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A&gt;</ph> 属性设置为 <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContextMode.PerSession&gt;</ph>，则客户端将使用相同的连接重复调用同一个服务对象。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>For more information about sessions and service instances, see <bpt id="p1">[</bpt>Using Sessions<ept id="p1">](~/docs/framework/wcf/using-sessions.md)</ept> and <bpt id="p2">[</bpt>Sessions, Instancing, and Concurrency<ept id="p2">](~/docs/framework/wcf/feature-details/sessions-instancing-and-concurrency.md)</ept>.</source>
          <target state="translated">有关会话和服务实例的详细信息，请参阅<bpt id="p1">[</bpt>使用会话<ept id="p1">](~/docs/framework/wcf/using-sessions.md)</ept>和<bpt id="p2">[</bpt>会话、 实例存储功能和并发<ept id="p2">](~/docs/framework/wcf/feature-details/sessions-instancing-and-concurrency.md)</ept>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>A channel that supports sessions supports the default association of a service instance with a particular session.</source>
          <target state="translated">支持会话的信道支持服务实例与特定会话的默认关联。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>However, different session implementations support different features in addition to session-based instancing control.</source>
          <target state="translated">但是，除了基于会话的实例化控件外，不同的会话实现支持不同的功能。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source><ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> provides four types of sessions that you can use to provide sessionful application behavior; each type of session provides additional behavior specific to the type of session it is.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 提供四种类型的会话，您可以使用这些会话提供会话应用程序行为，而每一类会话还会提供特定于该类会话本身的其他行为。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement?displayProperty=nameWithType&gt;</ph> supports security sessions, in which both ends of communication have agreed upon an encryption and/or digital signature process; all messages are correlated with that specific secure conversation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement?displayProperty=nameWithType&gt;</ph> 支持安全会话，其中的两个通信端采用统一的加密和/或签名过程，并且所有消息都与此特定安全对话相关。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>For more information, see <bpt id="p1">[</bpt>Securing Services<ept id="p1">](~/docs/framework/wcf/securing-services.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>服务的安全<ept id="p1">](~/docs/framework/wcf/securing-services.md)</ept>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>For example, the <ph id="ph1">&lt;xref:System.ServiceModel.WSHttpBinding?displayProperty=nameWithType&gt;</ph>, which contains support for both security sessions and reliable sessions, by default uses only a secure session which encrypts and digitally signs messages.</source>
          <target state="translated">例如 <ph id="ph1">&lt;xref:System.ServiceModel.WSHttpBinding?displayProperty=nameWithType&gt;</ph>，它包含对安全会话和可靠会话的支持，默认情况下只使用对消息进行加密和数字签名的安全会话。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.NetTcpBinding?displayProperty=nameWithType&gt;</ph> supports the sessions exposed by the TCP/IP connections to ensure that all messages are correlated by the connection session at the socket level.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.NetTcpBinding?displayProperty=nameWithType&gt;</ph> 支持由 TCP/IP 连接公开的会话，以确保所有消息都与套接字级别的连接会话相关。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ReliableSessionBindingElement?displayProperty=nameWithType&gt;</ph>, which implements the WS-ReliableMessaging specification, provides support for reliable sessions in which messages are delivered in order and exactly once, enabling confidence even when messages travel across multiple nodes during the conversation.</source>
          <target state="translated">实现 WS-ReliableMessaging 规范的 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ReliableSessionBindingElement?displayProperty=nameWithType&gt;</ph> 提供对可靠会话的支持，可靠会话中的消息按顺序传递并且只传递一次，从而使消息在对话期间即使经过多个节点也可以确保保密性。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>For more information, see <bpt id="p1">[</bpt>Reliable Sessions<ept id="p1">](~/docs/framework/wcf/feature-details/reliable-sessions.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>可靠会话<ept id="p1">](~/docs/framework/wcf/feature-details/reliable-sessions.md)</ept>。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.NetMsmqBinding?displayProperty=nameWithType&gt;</ph> provides MSMQ datagram sessions.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.NetMsmqBinding?displayProperty=nameWithType&gt;</ph> 提供 MSMQ 数据报会话。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>For more information, see <bpt id="p1">[</bpt>Queues in WCF<ept id="p1">](~/docs/framework/wcf/feature-details/queues-in-wcf.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>WCF 中的队列<ept id="p1">](~/docs/framework/wcf/feature-details/queues-in-wcf.md)</ept>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>Remember that setting the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph> property does not specify the type of session the contract requires, only that it requires one.</source>
          <target state="translated">请记住，设置 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph> 属性并不指定协定需要的会话类型，而只是指定协定需要会话。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>The following service contract requires that configured bindings use sessions when interacting with <ph id="ph1">`SampleDuplexHello`</ph> service implementations.</source>
          <target state="translated">下面的服务协定要求所配置的绑定与 <ph id="ph1">`SampleDuplexHello`</ph> 服务实现交互时使用会话。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
          <source>The value is not one of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.SessionMode" /&gt;</ph> values.</source>
          <target state="translated">该值不是 <ph id="ph1">&lt;see cref="T:System.ServiceModel.SessionMode" /&gt;</ph> 值之一。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>