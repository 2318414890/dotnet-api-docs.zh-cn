<Type Name="ServiceAuthorizationManager" FullName="System.ServiceModel.ServiceAuthorizationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a8c7e5d1cb9b8edbf884c99c3ef030fa57b58c5b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceAuthorizationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceAuthorizationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ServiceAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceAuthorizationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceAuthorizationManager" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="d5cf6-101">提供对服务操作的授权访问检查。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d5cf6-101">Provides authorization access checking for service operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5cf6-102">此类负责评估所有策略（定义用户可进行何种操作的规则）、比较策略与客户端所作的声明、将生成的 <xref:System.IdentityModel.Policy.AuthorizationContext> 设置为 <xref:System.ServiceModel.ServiceSecurityContext>，并提供是允许还是拒绝调用方为获取给定服务操作而进行访问的授权决定。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-102">This class is responsible for evaluating all policies (rules that define what a user is allowed to do), comparing the policies to claims made by a client, setting the resulting <xref:System.IdentityModel.Policy.AuthorizationContext> to the <xref:System.ServiceModel.ServiceSecurityContext>, and providing the authorization decision whether to allow or deny access for a given service operation for a caller.</span></span>  
  
 <span data-ttu-id="d5cf6-103">每次尝试访问资源时，<xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 方法都会由 [!INCLUDE[indigo1](~/includes/indigo1-md.md)] 基础结构调用。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-103">The <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method is called by the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] infrastructure each time an attempt to access a resource is made.</span></span> <span data-ttu-id="d5cf6-104">若允许访问，则该方法返回 `true`；若拒绝访问，则返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-104">The method returns `true` or `false` to allow or deny access, respectively.</span></span>  
  
 <span data-ttu-id="d5cf6-105"><xref:System.ServiceModel.ServiceAuthorizationManager>属于[!INCLUDE[indigo2](~/includes/indigo2-md.md)]*标识模型*基础结构。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-105">The <xref:System.ServiceModel.ServiceAuthorizationManager> is part of the [!INCLUDE[indigo2](~/includes/indigo2-md.md)]*Identity Model* infrastructure.</span></span> <span data-ttu-id="d5cf6-106">通过“标识模型”，您可以创建自定义授权策略和自定义授权方案。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-106">The Identity Model enables you to create custom authorization policies and custom authorization schemes.</span></span> [!INCLUDE[crabout](~/includes/crabout-md.md)]<span data-ttu-id="d5cf6-107"> 标识模型的工作原理，请参阅[管理声明和使用标识模型的授权](~/docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md)。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-107"> how the Identity Model works, see [Managing Claims and Authorization with the Identity Model](~/docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md).</span></span>  
  
## <a name="custom-authorization"></a><span data-ttu-id="d5cf6-108">自定义授权</span><span class="sxs-lookup"><span data-stu-id="d5cf6-108">Custom Authorization</span></span>  
 <span data-ttu-id="d5cf6-109">此类不执行任何授权，因此允许用户访问所有服务操作。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-109">This class does not perform any authorization and allows users to access all service operations.</span></span> <span data-ttu-id="d5cf6-110">若要提供更多的限制性授权，请务必创建一个自定义授权管理器，以检查自定义策略。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-110">To provide more restrictive authorization, you must create a custom authorization manager that checks custom policies.</span></span> <span data-ttu-id="d5cf6-111">为此，请从此类继承并重写 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-111">To do this, inherit from this class and override the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method.</span></span> <span data-ttu-id="d5cf6-112">通过 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A> 属性指定派生类的实例。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-112">Specify the instance of the derived class through the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A> property.</span></span>  
  
 <span data-ttu-id="d5cf6-113">在 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 中，应用程序可以使用 <xref:System.ServiceModel.OperationContext> 对象来访问调用方标识 (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>)。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-113">In <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>, the application can use the <xref:System.ServiceModel.OperationContext> object to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>).</span></span>  
  
 <span data-ttu-id="d5cf6-114">通过获取返回 <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> 对象的 <xref:System.ServiceModel.Channels.MessageHeaders> 属性，应用程序可以访问服务 (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) 和操作 (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>)。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-114">By getting the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, which returns a <xref:System.ServiceModel.Channels.MessageHeaders> object, the application can access the service (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>), and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>).</span></span>  
  
 <span data-ttu-id="d5cf6-115">通过获取返回 <xref:System.ServiceModel.OperationContext.RequestContext%2A> 对象的 <xref:System.ServiceModel.Channels.RequestContext> 属性，应用程序可以访问整个请求消息 (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>)，并据此执行授权决定。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-115">By getting the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, which returns a <xref:System.ServiceModel.Channels.RequestContext> object, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>) and perform the authorization decision accordingly.</span></span>  
  
 <span data-ttu-id="d5cf6-116">有关示例，请参阅[如何： 为服务创建自定义授权管理器](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md)。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-116">For an example, see [How to: Create a Custom Authorization Manager for a Service](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md).</span></span>  
  
 <span data-ttu-id="d5cf6-117">若要创建自定义授权策略，请实现 <xref:System.IdentityModel.Policy.IAuthorizationPolicy> 类。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-117">To create custom authorization policies, implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class.</span></span>  <span data-ttu-id="d5cf6-118">有关示例，请参阅[如何： 创建自定义授权策略](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-policy.md)。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-118">For an example, see [How to: Create a Custom Authorization Policy](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-policy.md).</span></span>  
  
 <span data-ttu-id="d5cf6-119">若要创建自定义声明，请使用 <xref:System.IdentityModel.Claims.Claim> 类。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-119">To create a custom claim, use the <xref:System.IdentityModel.Claims.Claim> class.</span></span>  <span data-ttu-id="d5cf6-120">有关示例，请参阅[如何： 创建自定义声明](~/docs/framework/wcf/extending/how-to-create-a-custom-claim.md)。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-120">For an example, see [How to: Create a Custom Claim](~/docs/framework/wcf/extending/how-to-create-a-custom-claim.md).</span></span> <span data-ttu-id="d5cf6-121">若要比较的自定义声明，您必须比较声明，如中所示[如何： 比较声明](~/docs/framework/wcf/extending/how-to-compare-claims.md)。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-121">To compare custom claims, you must compare claims, as shown in [How to: Compare Claims](~/docs/framework/wcf/extending/how-to-compare-claims.md).</span></span>  
  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="d5cf6-122"> [自定义授权](~/docs/framework/wcf/extending/custom-authorization.md)。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-122"> [Custom Authorization](~/docs/framework/wcf/extending/custom-authorization.md).</span></span>  
  
 <span data-ttu-id="d5cf6-123">你可以设置使用自定义授权管理器的类型[ &lt;serviceAuthorization&gt; ](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md)客户端应用程序配置文件中。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-123">You can set the type of a custom authorization manager using the [&lt;serviceAuthorization&gt;](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md) in a client application configuration file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5cf6-124">下面示例演示一个名为 `MyServiceAuthorizationManager` 的类，该类从 <xref:System.ServiceModel.ServiceAuthorizationManager> 中继承并重写 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-124">The following example shows a class named `MyServiceAuthorizationManager` that inherits from the <xref:System.ServiceModel.ServiceAuthorizationManager> and overrides the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method.</span></span>  
  
 [!code-csharp[c_CustomAuthMgr#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#2)]
 [!code-vb[c_CustomAuthMgr#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Claims.ClaimSet" />
    <altmember cref="T:System.IdentityModel.Claims.Claim" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d5cf6-125">初始化 <see cref="T:System.ServiceModel.ServiceAuthorizationManager" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-125">Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceAuthorizationManager" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CheckAccess">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5cf6-126">检查给定操作上下文和可选消息的授权。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-126">Checks authorization for the given operation context and optional message.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <span data-ttu-id="d5cf6-127">
            <see cref="T:System.ServiceModel.OperationContext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-127">The <see cref="T:System.ServiceModel.OperationContext" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5cf6-128">检查给定操作上下文的授权。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-128">Checks authorization for the given operation context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5cf6-129">如果授予访问权限，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-129">
              <see langword="true" /> if access is granted; otherwise; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d5cf6-130">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-130">The default is <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5cf6-131">一般而言，应用程序应该重写 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 代替这个方法。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-131">In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method.</span></span>  
  
 <span data-ttu-id="d5cf6-132">如果应用程序为生成的 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccess%2A> 关联或引入一组不同的策略，或另外提供一个策略评估（链接）模型，则重写 <xref:System.ServiceModel.ServiceSecurityContext>。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-132">Override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccess%2A> if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> or provide a different policy evaluation (chaining) model.</span></span>  
  
 <span data-ttu-id="d5cf6-133">此方法负责调用 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-133">This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5cf6-134">下面的代码演示如何重写此方法，以强制执行自定义访问控制需求。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-134">The following code shows how to override this method to enforce custom access control requirements.</span></span>  
  
 [!code-csharp[c_Federation#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#1)]
 [!code-vb[c_Federation#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext, ref System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.ServiceModel.OperationContext operationContext, class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::ServiceModel::OperationContext ^ operationContext, System::ServiceModel::Channels::Message ^ % message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <span data-ttu-id="d5cf6-135">
            <see cref="T:System.ServiceModel.OperationContext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-135">The <see cref="T:System.ServiceModel.OperationContext" />.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="d5cf6-136">要接收检查以确定授权的 <see cref="T:System.ServiceModel.Channels.Message" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-136">The <see cref="T:System.ServiceModel.Channels.Message" /> to be examined to determine authorization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5cf6-137">访问所需的消息时，检查给定操作上下文的授权。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-137">Checks authorization for the given operation context when access to a message is required.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5cf6-138">如果授予访问权限，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-138">
              <see langword="true" /> if access is granted; otherwise; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d5cf6-139">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-139">The default is <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5cf6-140">一般而言，应用程序应该重写 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 取代这个方法，这仅在授权决定取决于消息正文的情况下使用。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-140">In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method, which should only be used if the authorization decision depends on the message body.</span></span> <span data-ttu-id="d5cf6-141">由于性能问题，如有可能，应重新设计应用程序，使授权决策不需要访问消息正文。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-141">Because of performance issues, if possible you should redesign your application so that the authorization decision does not require access to the message body.</span></span>  
  
 <span data-ttu-id="d5cf6-142">如果应用程序为生成的 <xref:System.ServiceModel.ServiceSecurityContext> 和 <xref:System.ServiceModel.Channels.Message>关联或引入一组不同的策略，或另外提供一个策略评估（链接）模型，则重写此方法。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-142">Override this method if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> and <xref:System.ServiceModel.Channels.Message> or provide a different policy evaluation (chaining) model.</span></span>  
  
 <span data-ttu-id="d5cf6-143">此方法负责调用 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-143">This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5cf6-144">下面的代码演示如何重写此方法，以强制执行需要访问消息正文的自定义访问控制需求。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-144">The following code shows how to override this method to enforce custom access control requirements that require access to the message body.</span></span>  
  
 [!code-csharp[c_Federation#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#6)]
 [!code-vb[c_Federation#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccessCore">
      <MemberSignature Language="C#" Value="protected virtual bool CheckAccessCore (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CheckAccessCore(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool CheckAccessCore(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <span data-ttu-id="d5cf6-145">当前授权请求的 <see cref="T:System.ServiceModel.OperationContext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-145">The <see cref="T:System.ServiceModel.OperationContext" /> for the current authorization request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5cf6-146">基于默认的策略评估，检查给定操作上下文和可选消息的授权。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-146">Checks authorization for the given operation context based on default policy evaluation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5cf6-147">如果授予访问权限，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-147">
              <see langword="true" /> if access is granted; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d5cf6-148">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-148">The default is <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5cf6-149"><xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> 通常是由默认的策略评估生成的。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-149"><xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> is generally the result from the default policy evaluation.</span></span>  
  
 <span data-ttu-id="d5cf6-150">重写此方法以提供自定义授权决定。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-150">Override this method to provide custom authorization decisions.</span></span>  
  
 <span data-ttu-id="d5cf6-151">此方法可用于根据基于传入令牌所推断的或通过外部授权策略所添加的声明集做出授权决定。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-151">This method can be used to make authorization decisions based on claim sets that are inferred based on incoming tokens, or added through external authorization policies.</span></span> <span data-ttu-id="d5cf6-152">此方法还可以根据传入消息（如操作标头）的属性做出授权决定。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-152">It can also make authorization decisions based on properties of the incoming message: for example, the action header.</span></span>  
  
 <span data-ttu-id="d5cf6-153">在此方法中，应用程序可以使用 `operationContext` 参数访问调用方标识 (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>)。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-153">In this method, the application can use the `operationContext` parameter to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>).</span></span> <span data-ttu-id="d5cf6-154">通过从 <xref:System.ServiceModel.Channels.RequestContext> 属性返回 <xref:System.ServiceModel.OperationContext.RequestContext%2A> 对象，应用程序可以访问整个请求消息 (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>)。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-154">By returning the <xref:System.ServiceModel.Channels.RequestContext> object from the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>).</span></span> <span data-ttu-id="d5cf6-155">通过从 <xref:System.ServiceModel.Channels.MessageHeaders> 属性返回 <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> 对象，应用程序可以访问服务 URL (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) 和操作 (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>)。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-155">By returning the <xref:System.ServiceModel.Channels.MessageHeaders> object from the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, the application can access the service URL (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>).</span></span> <span data-ttu-id="d5cf6-156">获取这些消息后，应用程序可以据此执行授权决定。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-156">With this information, the application can perform the authorization decision accordingly.</span></span>  
  
 <span data-ttu-id="d5cf6-157">用户做出的声明出现在由 <xref:System.IdentityModel.Claims.ClaimSet> 的 <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> 属性所返回的 `AuthorizationContext` 中。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-157">The claims made by a user are found in the <xref:System.IdentityModel.Claims.ClaimSet> returned by the <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> property of the `AuthorizationContext`.</span></span> <span data-ttu-id="d5cf6-158">当前的 `AuthorizationContext` 由 <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> 类的 <xref:System.ServiceModel.OperationContext> 属性返回。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-158">The current `AuthorizationContext` is returned by the <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> property of the <xref:System.ServiceModel.OperationContext> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5cf6-159">下面的示例演示对 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 方法的重写。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-159">The following example shows an override of the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method.</span></span>  
  
 [!code-csharp[c_CustomAuthMgr#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#6)]
 [!code-vb[c_CustomAuthMgr#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#6)]  
  
 <span data-ttu-id="d5cf6-160">另一个示例，请参阅[如何： 为服务创建自定义授权管理器](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md)。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-160">For another example, see [How to: Create a Custom Authorization Manager for a Service](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationPolicies">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt; GetAuthorizationPolicies (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.Policy.IAuthorizationPolicy&gt; GetAuthorizationPolicies(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Policy::IAuthorizationPolicy ^&gt; ^ GetAuthorizationPolicies(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <span data-ttu-id="d5cf6-161">当前授权请求的 <see cref="T:System.ServiceModel.OperationContext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-161">The <see cref="T:System.ServiceModel.OperationContext" /> of the current authorization request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5cf6-162">获取参与策略评估的策略集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-162">Gets the set of policies that participate in policy evaluation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5cf6-163">一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5cf6-163">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5cf6-164">[!INCLUDE[indigo1](~/includes/indigo1-md.md)] 实现提供一组默认的授权策略。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-164">The [!INCLUDE[indigo1](~/includes/indigo1-md.md)] implementation provides a default set of authorization policies.</span></span> <span data-ttu-id="d5cf6-165">这些策略包括含有请求方凭据的主令牌、所有支持令牌、传输令牌以及外部策略（如果有所指定）。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-165">These include the primary token that contains the credentials of the requester and all supporting tokens, transport tokens, and external policies if specified.</span></span>  
  
 <span data-ttu-id="d5cf6-166">您可以重写此实现，并提供一组不同的策略。</span><span class="sxs-lookup"><span data-stu-id="d5cf6-166">You can override this implementation and provide a different set of policies.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>