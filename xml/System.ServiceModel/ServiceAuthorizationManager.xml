<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ServiceAuthorizationManager.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae25fbb5-14a8-44f2-90c2-3c6d6fcaae7f6051cb9cb7ad9093ff1526e35c2b3d09a26dfc19.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6051cb9cb7ad9093ff1526e35c2b3d09a26dfc19</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b899505ed6d42225f2b3c9150bfdc080d0d1f9b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/28/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>Provides authorization access checking for service operations.</source>
          <target state="translated">提供对服务操作的授权访问检查。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>This class is responsible for evaluating all policies (rules that define what a user is allowed to do), comparing the policies to claims made by a client, setting the resulting <ph id="ph1">&lt;xref:System.IdentityModel.Policy.AuthorizationContext&gt;</ph> to the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceSecurityContext&gt;</ph>, and providing the authorization decision whether to allow or deny access for a given service operation for a caller.</source>
          <target state="translated">此类负责评估所有策略（定义用户可进行何种操作的规则）、比较策略与客户端所作的声明、将生成的 <ph id="ph1">&lt;xref:System.IdentityModel.Policy.AuthorizationContext&gt;</ph> 设置为 <ph id="ph2">&lt;xref:System.ServiceModel.ServiceSecurityContext&gt;</ph>，并提供是允许还是拒绝调用方为获取给定服务操作而进行访问的授权决定。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> method is called by the <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> infrastructure each time an attempt to access a resource is made.</source>
          <target state="translated">每次尝试访问资源时，<ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> 方法都会由 <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 基础结构调用。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>The method returns <ph id="ph1">`true`</ph> or <ph id="ph2">`false`</ph> to allow or deny access, respectively.</source>
          <target state="translated">若允许访问，则该方法返回 <ph id="ph1">`true`</ph>；若拒绝访问，则返回 <ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager&gt;</ph> is part of the <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph><bpt id="p1">*</bpt>Identity Model<ept id="p1">*</ept> infrastructure.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager&gt;</ph>属于<ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph><bpt id="p1">*</bpt>标识模型<ept id="p1">*</ept>基础结构。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>The Identity Model enables you to create custom authorization policies and custom authorization schemes.</source>
          <target state="translated">通过“标识模型”，您可以创建自定义授权策略和自定义授权方案。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> how the Identity Model works, see <bpt id="p1">[</bpt>Managing Claims and Authorization with the Identity Model<ept id="p1">](~/docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> 标识模型的工作原理，请参阅<bpt id="p1">[</bpt>管理声明和使用标识模型的授权<ept id="p1">](~/docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md)</ept>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>Custom Authorization</source>
          <target state="translated">自定义授权</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>This class does not perform any authorization and allows users to access all service operations.</source>
          <target state="translated">此类不执行任何授权，因此允许用户访问所有服务操作。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>To provide more restrictive authorization, you must create a custom authorization manager that checks custom policies.</source>
          <target state="translated">若要提供更多的限制性授权，请务必创建一个自定义授权管理器，以检查自定义策略。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>To do this, inherit from this class and override the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> method.</source>
          <target state="translated">为此，请从此类继承并重写 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>Specify the instance of the derived class through the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A&gt;</ph> property.</source>
          <target state="translated">通过 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A&gt;</ph> 属性指定派生类的实例。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>In <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph>, the application can use the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> object to access the caller identity (<ph id="ph3">&lt;xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A&gt;</ph>).</source>
          <target state="translated">在 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> 中，应用程序可以使用 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> 对象来访问调用方标识 (<ph id="ph3">&lt;xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>By getting the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A&gt;</ph> property, which returns a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageHeaders&gt;</ph> object, the application can access the service (<ph id="ph3">&lt;xref:System.ServiceModel.Channels.MessageHeaders.To%2A&gt;</ph>), and the operation (<ph id="ph4">&lt;xref:System.ServiceModel.Channels.MessageHeaders.Action%2A&gt;</ph>).</source>
          <target state="translated">通过获取返回 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A&gt;</ph> 对象的 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageHeaders&gt;</ph> 属性，应用程序可以访问服务 (<ph id="ph3">&lt;xref:System.ServiceModel.Channels.MessageHeaders.To%2A&gt;</ph>) 和操作 (<ph id="ph4">&lt;xref:System.ServiceModel.Channels.MessageHeaders.Action%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>By getting the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.RequestContext%2A&gt;</ph> property, which returns a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> object, the application can access the entire request message (<ph id="ph3">&lt;xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A&gt;</ph>) and perform the authorization decision accordingly.</source>
          <target state="translated">通过获取返回 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.RequestContext%2A&gt;</ph> 对象的 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> 属性，应用程序可以访问整个请求消息 (<ph id="ph3">&lt;xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A&gt;</ph>)，并据此执行授权决定。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Create a Custom Authorization Manager for a Service<ept id="p1">](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md)</ept>.</source>
          <target state="translated">有关示例，请参阅<bpt id="p1">[</bpt>如何： 为服务创建自定义授权管理器<ept id="p1">](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md)</ept>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>To create custom authorization policies, implement the <ph id="ph1">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ph> class.</source>
          <target state="translated">若要创建自定义授权策略，请实现 <ph id="ph1">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ph> 类。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Create a Custom Authorization Policy<ept id="p1">](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-policy.md)</ept>.</source>
          <target state="translated">有关示例，请参阅<bpt id="p1">[</bpt>如何： 创建自定义授权策略<ept id="p1">](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-policy.md)</ept>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>To create a custom claim, use the <ph id="ph1">&lt;xref:System.IdentityModel.Claims.Claim&gt;</ph> class.</source>
          <target state="translated">若要创建自定义声明，请使用 <ph id="ph1">&lt;xref:System.IdentityModel.Claims.Claim&gt;</ph> 类。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Create a Custom Claim<ept id="p1">](~/docs/framework/wcf/extending/how-to-create-a-custom-claim.md)</ept>.</source>
          <target state="translated">有关示例，请参阅<bpt id="p1">[</bpt>如何： 创建自定义声明<ept id="p1">](~/docs/framework/wcf/extending/how-to-create-a-custom-claim.md)</ept>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>To compare custom claims, you must compare claims, as shown in <bpt id="p1">[</bpt>How to: Compare Claims<ept id="p1">](~/docs/framework/wcf/extending/how-to-compare-claims.md)</ept>.</source>
          <target state="translated">若要比较的自定义声明，您必须比较声明，如中所示<bpt id="p1">[</bpt>如何： 比较声明<ept id="p1">](~/docs/framework/wcf/extending/how-to-compare-claims.md)</ept>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>For more information, see <bpt id="p1">[</bpt>Custom Authorization<ept id="p1">](~/docs/framework/wcf/extending/custom-authorization.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>自定义授权<ept id="p1">](~/docs/framework/wcf/extending/custom-authorization.md)</ept>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>You can set the type of a custom authorization manager using the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>serviceAuthorization<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md)</ept> in a client application configuration file.</source>
          <target state="translated">你可以设置使用自定义授权管理器的类型<bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>serviceAuthorization<ph id="ph2">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md)</ept>客户端应用程序配置文件中。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>The following example shows a class named <ph id="ph1">`MyServiceAuthorizationManager`</ph> that inherits from the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceAuthorizationManager&gt;</ph> and overrides the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> method.</source>
          <target state="translated">下面示例演示一个名为 <ph id="ph1">`MyServiceAuthorizationManager`</ph> 的类，该类从 <ph id="ph2">&lt;xref:System.ServiceModel.ServiceAuthorizationManager&gt;</ph> 中继承并重写 <ph id="ph3">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceAuthorizationManager" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceAuthorizationManager" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ServiceAuthorizationManager">
          <source>Checks authorization for the given operation context and optional message.</source>
          <target state="translated">检查给定操作上下文和可选消息的授权。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)">
          <source>Checks authorization for the given operation context.</source>
          <target state="translated">检查给定操作上下文的授权。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access is granted; otherwise; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果授予访问权限，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)">
          <source>In general, applications should override <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> instead of this method.</source>
          <target state="translated">一般而言，应用程序应该重写 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> 代替这个方法。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)">
          <source>Override <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccess%2A&gt;</ph> if the application associates or introduces a different set of policies for the resulting <ph id="ph2">&lt;xref:System.ServiceModel.ServiceSecurityContext&gt;</ph> or provide a different policy evaluation (chaining) model.</source>
          <target state="translated">如果应用程序为生成的 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccess%2A&gt;</ph> 关联或引入一组不同的策略，或另外提供一个策略评估（链接）模型，则重写 <ph id="ph2">&lt;xref:System.ServiceModel.ServiceSecurityContext&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)">
          <source>This method is responsible for calling <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph>.</source>
          <target state="translated">此方法负责调用 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)">
          <source>The following code shows how to override this method to enforce custom access control requirements.</source>
          <target state="translated">下面的代码演示如何重写此方法，以强制执行自定义访问控制需求。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> to be examined to determine authorization.</source>
          <target state="translated">要接收检查以确定授权的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)">
          <source>Checks authorization for the given operation context when access to a message is required.</source>
          <target state="translated">访问所需的消息时，检查给定操作上下文的授权。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access is granted; otherwise; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果授予访问权限，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)">
          <source>In general, applications should override <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> instead of this method, which should only be used if the authorization decision depends on the message body.</source>
          <target state="translated">一般而言，应用程序应该重写 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> 取代这个方法，这仅在授权决定取决于消息正文的情况下使用。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)">
          <source>Because of performance issues, if possible you should redesign your application so that the authorization decision does not require access to the message body.</source>
          <target state="translated">由于性能问题，如有可能，应重新设计应用程序，使授权决策不需要访问消息正文。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)">
          <source>Override this method if the application associates or introduces a different set of policies for the resulting <ph id="ph1">&lt;xref:System.ServiceModel.ServiceSecurityContext&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> or provide a different policy evaluation (chaining) model.</source>
          <target state="translated">如果应用程序为生成的 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceSecurityContext&gt;</ph> 和 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph>关联或引入一组不同的策略，或另外提供一个策略评估（链接）模型，则重写此方法。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)">
          <source>This method is responsible for calling <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph>.</source>
          <target state="translated">此方法负责调用 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)">
          <source>The following code shows how to override this method to enforce custom access control requirements that require access to the message body.</source>
          <target state="translated">下面的代码演示如何重写此方法，以强制执行需要访问消息正文的自定义访问控制需求。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> for the current authorization request.</source>
          <target state="translated">当前授权请求的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source>Checks authorization for the given operation context based on default policy evaluation.</source>
          <target state="translated">基于默认的策略评估，检查给定操作上下文和可选消息的授权。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access is granted; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果授予访问权限，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A&gt;</ph> is generally the result from the default policy evaluation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A&gt;</ph> 通常是由默认的策略评估生成的。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source>Override this method to provide custom authorization decisions.</source>
          <target state="translated">重写此方法以提供自定义授权决定。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source>This method can be used to make authorization decisions based on claim sets that are inferred based on incoming tokens, or added through external authorization policies.</source>
          <target state="translated">此方法可用于根据基于传入令牌所推断的或通过外部授权策略所添加的声明集做出授权决定。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source>It can also make authorization decisions based on properties of the incoming message: for example, the action header.</source>
          <target state="translated">此方法还可以根据传入消息（如操作标头）的属性做出授权决定。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source>In this method, the application can use the <ph id="ph1">`operationContext`</ph> parameter to access the caller identity (<ph id="ph2">&lt;xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A&gt;</ph>).</source>
          <target state="translated">在此方法中，应用程序可以使用 <ph id="ph1">`operationContext`</ph> 参数访问调用方标识 (<ph id="ph2">&lt;xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source>By returning the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> object from the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext.RequestContext%2A&gt;</ph> property, the application can access the entire request message (<ph id="ph3">&lt;xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A&gt;</ph>).</source>
          <target state="translated">通过从 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> 属性返回 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext.RequestContext%2A&gt;</ph> 对象，应用程序可以访问整个请求消息 (<ph id="ph3">&lt;xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source>By returning the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders&gt;</ph> object from the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A&gt;</ph> property, the application can access the service URL (<ph id="ph3">&lt;xref:System.ServiceModel.Channels.MessageHeaders.To%2A&gt;</ph>) and the operation (<ph id="ph4">&lt;xref:System.ServiceModel.Channels.MessageHeaders.Action%2A&gt;</ph>).</source>
          <target state="translated">通过从 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders&gt;</ph> 属性返回 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A&gt;</ph> 对象，应用程序可以访问服务 URL (<ph id="ph3">&lt;xref:System.ServiceModel.Channels.MessageHeaders.To%2A&gt;</ph>) 和操作 (<ph id="ph4">&lt;xref:System.ServiceModel.Channels.MessageHeaders.Action%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source>With this information, the application can perform the authorization decision accordingly.</source>
          <target state="translated">获取这些消息后，应用程序可以据此执行授权决定。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source>The claims made by a user are found in the <ph id="ph1">&lt;xref:System.IdentityModel.Claims.ClaimSet&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A&gt;</ph> property of the <ph id="ph3">`AuthorizationContext`</ph>.</source>
          <target state="translated">用户做出的声明出现在由 <ph id="ph1">&lt;xref:System.IdentityModel.Claims.ClaimSet&gt;</ph> 的 <ph id="ph2">&lt;xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A&gt;</ph> 属性所返回的 <ph id="ph3">`AuthorizationContext`</ph> 中。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source>The current <ph id="ph1">`AuthorizationContext`</ph> is returned by the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> class.</source>
          <target state="translated">当前的 <ph id="ph1">`AuthorizationContext`</ph> 由 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A&gt;</ph> 类的 <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> 属性返回。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source>The following example shows an override of the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示对 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> 方法的重写。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
          <source>For another example, see <bpt id="p1">[</bpt>How to: Create a Custom Authorization Manager for a Service<ept id="p1">](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md)</ept>.</source>
          <target state="translated">另一个示例，请参阅<bpt id="p1">[</bpt>如何： 为服务创建自定义授权管理器<ept id="p1">](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md)</ept>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> of the current authorization request.</source>
          <target state="translated">当前授权请求的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)">
          <source>Gets the set of policies that participate in policy evaluation.</source>
          <target state="translated">获取参与策略评估的策略集。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> of type <ph id="ph2">&lt;see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> 类型的 <ph id="ph2">&lt;see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)">
          <source>The <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> implementation provides a default set of authorization policies.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 实现提供一组默认的授权策略。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)">
          <source>These include the primary token that contains the credentials of the requester and all supporting tokens, transport tokens, and external policies if specified.</source>
          <target state="translated">这些策略包括含有请求方凭据的主令牌、所有支持令牌、传输令牌以及外部策略（如果有所指定）。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)">
          <source>You can override this implementation and provide a different set of policies.</source>
          <target state="translated">您可以重写此实现，并提供一组不同的策略。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>