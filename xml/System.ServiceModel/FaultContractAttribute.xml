<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="FaultContractAttribute.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b72580fa93e9a7d56a6e252da7977c1826741e78c93.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">580fa93e9a7d56a6e252da7977c1826741e78c93</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Specifies one or more SOAP faults that are returned when a service operation encounters processing errors.</source>
          <target state="translated">指定服务操作遇到处理错误时返回的一个或多个 SOAP 错误。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Mark an operation with the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> attribute to declare one or more specific exception conditions that are added to the Web Service Description Language (WSDL) description of the service operation as explicit SOAP fault messages returned by the operation.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> 属性标记操作以声明一个或多个特定的异常条件，这些条件可作为操作返回的显式 SOAP 错误消息添加到服务操作的 Web 服务描述语言 (WSDL) 的描述中。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>In all managed applications, processing errors are represented by <ph id="ph1">&lt;xref:System.Exception&gt;</ph> objects.</source>
          <target state="translated">在所有托管应用程序中，处理错误由 <ph id="ph1">&lt;xref:System.Exception&gt;</ph> 对象表示。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>In SOAP-based applications such as <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> applications, service methods communicate processing error information using SOAP fault messages.</source>
          <target state="translated">在基于 SOAP 的应用程序（如 <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 应用程序）中，服务方法使用 SOAP 错误消息来传递处理错误信息。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Because WCF applications execute under both types of error systems, any managed exception information that must be sent to the client must be converted from exceptions into SOAP faults.</source>
          <target state="translated">由于在两种错误系统下执行 WCF 应用程序，必须发送到客户端的任何托管的异常信息必须可从异常转换为 SOAP 错误。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>You can use the default service exception behaviors, or you can explicitly control whether -- and how -- exceptions are mapped to fault messages.</source>
          <target state="translated">您可以使用默认的服务异常行为，或者可以显式控制异常是否能被映射到错误消息，以及如何映射到错误消息。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>For an overview of exceptions and SOAP faults in WCF applications, see <bpt id="p1">[</bpt>Specifying and Handling Faults in Contracts and Services<ept id="p1">](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept>.</source>
          <target state="translated">异常和 WCF 应用程序中的 SOAP 错误的概述，请参阅<bpt id="p1">[</bpt>指定和处理在协定和服务中的错误<ept id="p1">](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>It is recommended that service operations use the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> to formally specify all SOAP faults that a client can expect to receive in the normal course of an operation.</source>
          <target state="translated">建议服务操作使用 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> 来正式指定在正常操作过程中客户端可能收到的所有 SOAP 错误。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>It is also recommended that only that information a client must know is returned in a SOAP fault to minimize information disclosure.</source>
          <target state="translated">此外，还建议在 SOAP 错误中仅返回客户端必须了解的信息，以将信息泄露风险降至最低。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.Action%2A&gt;</ph> property controls the action of the fault message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.Action%2A&gt;</ph> 属性控制错误消息的操作。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.DetailType%2A&gt;</ph> property gets the type of the detail object serialized in the fault message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.DetailType%2A&gt;</ph> 属性获取在错误消息中序列化的详细信息对象的类型。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.Name%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.Namespace%2A&gt;</ph> properties control the name and namespace, respectively, of the fault message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.Name%2A&gt;</ph> 和 <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.Namespace%2A&gt;</ph> 属性分别控制错误消息的名称和命名空间。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A&gt;</ph> indicates whether the fault message has a protection level specified, and if so, the <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> property controls that level of protection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A&gt;</ph> 指示错误消息是否具有指定的保护级别，如果有，则由 <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> 属性控制该保护级别。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>If a fault message carries information that is sensitive or can lead to security problems, it is strongly recommended that the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> property be set.</source>
          <target state="translated">如果错误消息传送的信息为敏感信息，或可能导致安全问题，则强烈建议设置 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>If you set the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> explicitly to either <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>, then you must use a binding with security enabled using the <ph id="ph4">&lt;xref:System.ServiceModel.SecurityMode?displayProperty=nameWithType&gt;</ph> property on the binding or an exception is thrown.</source>
          <target state="translated">如果将 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> 显式设置为 <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType&gt;</ph> 或 <ph id="ph3">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>，则您必须使用启用安全的绑定（通过使用绑定上的 <ph id="ph4">&lt;xref:System.ServiceModel.SecurityMode?displayProperty=nameWithType&gt;</ph> 属性启用安全），否则，就会引发异常。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>If you select a binding that enables security and you do not set the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> property anywhere on the contract, all application data will be encrypted and signed.</source>
          <target state="translated">如果您选择启用安全的绑定，并且未在协定的任何位置设置 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> 属性，则将对所有的应用程序数据进行加密或签名。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>If you select a binding that does not have security enabled (for example, the <ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding?displayProperty=nameWithType&gt;</ph> has security disabled by default), and the <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> is not explicitly set, then none of the application data will be protected.</source>
          <target state="translated">如果您选择未启用安全的绑定（例如，<ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding?displayProperty=nameWithType&gt;</ph> 在默认情况下禁用安全），并且没有显式设置 <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph>，那么所有应用程序数据都不会受到保护。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>For many scenarios setting <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph> for fault messages is sufficient.</source>
          <target state="translated">在大多数情况下，将错误消息的 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> 设置为 <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph> 已经足够了。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>For more details, see <bpt id="p1">[</bpt>Understanding Protection Level<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>.</source>
          <target state="translated">有关更多详细信息，请参阅<bpt id="p1">[</bpt>了解保护级别<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>To return a specified fault from an operation marked with <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph>, throw a <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> (where the type parameter is the serializable error information) when the managed exception occurs during the operation.</source>
          <target state="translated">若要从使用 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> 进行标记的操作返回指定的错误，则在操作过程中发生托管异常时将引发 <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph>（此处类型参数为可序列化的错误信息）。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>WCF client applications surface the SOAP fault as the same type as was thrown in the client implementation -- that is, as a <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> (where the typeparameter is the serializable error information).</source>
          <target state="translated">WCF 客户端应用程序作为相同类型呈现的 SOAP 错误，如抛出客户端实现-也就是说，作为<ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph>（其中类型参数是可序列化的错误信息）。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> can be used only to specify SOAP faults for two-way service operations and for asynchronous operation pairs; one-way operations do not support SOAP faults and therefore do not support <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> 只能用来为双向服务操作和异步操作对指定 SOAP 错误；单向操作并不支持 SOAP 错误，因而不支持 <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>You can use any serializable type to convey error information.</source>
          <target state="translated">您可以使用任意可序列化的类型来传达错误信息。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The only restriction in this version of WCF is that types specified in a <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> must be serializable by the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">在此版本的 WCF 中的唯一限制是在中指定类型<ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph>必须可由序列化<ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>For the serialization support the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> provides, see <bpt id="p1">[</bpt>Data Contract Serializer<ept id="p1">](~/docs/framework/wcf/feature-details/data-contract-serializer.md)</ept>.</source>
          <target state="translated">有关序列化支持<ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>提供，请参阅<bpt id="p1">[</bpt>数据协定序列化程序<ept id="p1">](~/docs/framework/wcf/feature-details/data-contract-serializer.md)</ept>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>For example, to specify that clients can expect a SOAP fault that contains an <ph id="ph1">&lt;xref:System.Int32&gt;</ph>, place that type parameter in the <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> on your service method.</source>
          <target state="translated">例如，若要指定客户端可能收到包含 <ph id="ph1">&lt;xref:System.Int32&gt;</ph> 的 SOAP 错误，请将该类型参数置于服务方法的 <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> 之中。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The following code examples do not set the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.Name%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.ServiceModel.FaultContractAttribute.Namespace%2A&gt;</ph> properties.</source>
          <target state="translated">下面的代码示例并未设置 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph>、<ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.Name%2A&gt;</ph> 或 <ph id="ph3">&lt;xref:System.ServiceModel.FaultContractAttribute.Namespace%2A&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Then, in your service method, throw a new <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> where the type parameter is the type that contains the error information (in the above case, a <ph id="ph2">&lt;xref:System.Int32&gt;</ph>).</source>
          <target state="translated">然后，在您的服务方法中，引发一个新的 <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph>，此处类型参数为包含错误信息（在上例中，为 <ph id="ph2">&lt;xref:System.Int32&gt;</ph>）的类型。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>For example:</source>
          <target state="translated">例如:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The preceding example is very basic; almost any information can be passed using an <ph id="ph1">&lt;xref:System.Int32?displayProperty=nameWithType&gt;</ph> code, so this detail type is not the most useful.</source>
          <target state="translated">上面的示例很基本；使用 <ph id="ph1">&lt;xref:System.Int32?displayProperty=nameWithType&gt;</ph> 代码几乎可以传递所有信息，因此该详细信息类型并非最为有用的。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Typically, WCF applications specify SOAP faults with detail types specific to the error information requirements of the client.</source>
          <target state="translated">通常情况下，WCF 应用程序使用特定于客户端错误信息要求的详细信息类型来指定 SOAP 错误。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>For a more complete example, see the Example section.</source>
          <target state="translated">有关更多的完整示例，请参见“示例”部分。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>If you specify a <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> where the type parameter is a <ph id="ph2">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph>, the string value is assigned to the Detail property in the client application; clients cannot retrieve that string by calling the <ph id="ph3">&lt;xref:System.ServiceModel.FaultException%601.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">如果指定一个类型参数为 <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph>，则该字符串值将被分配给客户端应用程序中的 Detail 属性；客户端无法通过调用 <ph id="ph3">&lt;xref:System.ServiceModel.FaultException%601.ToString%2A?displayProperty=nameWithType&gt;</ph> 方法来检索该字符串。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>To have the string value returned when the client application calls <ph id="ph1">&lt;xref:System.Exception.ToString%2A?displayProperty=nameWithType&gt;</ph>, throw a <ph id="ph2">&lt;xref:System.ServiceModel.FaultException?displayProperty=nameWithType&gt;</ph> exception inside the operation and pass the string to the constructor.</source>
          <target state="translated">若要在客户端应用程序调用 <ph id="ph1">&lt;xref:System.Exception.ToString%2A?displayProperty=nameWithType&gt;</ph> 时返回该字符串值，则将在操作内引发 <ph id="ph2">&lt;xref:System.ServiceModel.FaultException?displayProperty=nameWithType&gt;</ph> 异常，并将该字符串传递给构造函数。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>To explicitly control the behavior of the application when an exception or <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> is thrown, implement the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType&gt;</ph> interface on an <ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph> or <ph id="ph5">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> and assign it to the <ph id="ph6">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">若要在引发了异常或 <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> 时显式控制应用程序的行为，则请在 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType&gt;</ph>、<ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph> 或 <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph> 上实现 <ph id="ph5">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> 接口，并将其分配给 <ph id="ph6">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> enables you to explicitly control the SOAP fault that is generated and whether to send it back to the client.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> 您可以显式控制生成的 SOAP 错误以及是否将其发送回客户端。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>To facilitate debugging, set the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> to <ph id="ph2">`true`</ph> in code or you can use the <ph id="ph3">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> in an application configuration file.</source>
          <target state="translated">为了便于调试，设置<ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph>到<ph id="ph2">`true`</ph>代码或者您可以使用<ph id="ph3">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph>应用程序配置文件中。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>When enabled, the service automatically returns exception information to the caller.</source>
          <target state="translated">当启用时，服务会自动将异常信息返回到调用方。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>These faults appear to the client as <ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph> exceptions.</source>
          <target state="translated">这些错误在客户端显示为 <ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph> 异常。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Because managed exceptions can expose internal application information, setting <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> to <ph id="ph3">`true`</ph> can permit WCF clients to obtain information about internal service operation exceptions, including personally identifiable or other sensitive information.</source>
          <target state="translated">因为托管的异常可以公开内部应用程序信息，请设置<ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph>到<ph id="ph3">`true`</ph>可以允许 WCF 客户端获得有关内部服务操作异常，包括个人信息身份信息或其他敏感信息。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Therefore, setting <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> to <ph id="ph3">`true`</ph> is only recommended as a way of temporarily debugging a service application.</source>
          <target state="translated">因此，仅建议将 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> 或 <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> 设置为 <ph id="ph3">`true`</ph> 作为一种临时调试服务应用程序的方法。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>In addition, the WSDL for a method that returns unhandled managed exceptions in this way does not contain the contract for the <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">此外，以这种方式返回未处理的托管异常的方法的 WSDL 并不包含类型为 <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.String&gt;</ph> 的协定。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Clients must expect the possibility of an unknown SOAP fault (returned to WCF clients as <ph id="ph1">&lt;xref:System.ServiceModel.FaultException?displayProperty=nameWithType&gt;</ph> objects) to obtain the debugging information properly.</source>
          <target state="translated">客户端必须预见未知 SOAP 错误的可能性 (返回给 WCF 客户端作为<ph id="ph1">&lt;xref:System.ServiceModel.FaultException?displayProperty=nameWithType&gt;</ph>对象) 以便正确获取调试信息。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The following code example shows the use of <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> to specify that the <ph id="ph2">`SampleMethod`</ph> operation can return a SOAP fault with the detail type of <ph id="ph3">`GreetingFault`</ph>.</source>
          <target state="translated">下面的代码示例演示如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> 来指定 <ph id="ph2">`SampleMethod`</ph> 操作可以使用详细信息类型 <ph id="ph3">`GreetingFault`</ph> 返回 SOAP 错误。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The following code example shows that WCF clients of <ph id="ph1">`ISampleService`</ph> experience this SOAP fault as a <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of type <ph id="ph3">`GreetingFault`</ph>.</source>
          <target state="translated">下面的代码示例演示 WCF 客户端的<ph id="ph1">`ISampleService`</ph>作为此 SOAP 错误<ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph>类型的<ph id="ph3">`GreetingFault`</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
          <source>The serializable type that contains error information for the caller.</source>
          <target state="translated">包含调用方错误信息的可序列化类型。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.FaultContractAttribute" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.ServiceModel.FaultContractAttribute" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
          <source>The constructor is typically executed by applying the attribute to a service method and specifying a type as the argument in the attribute.</source>
          <target state="translated">通常通过将属性应用到服务方法并指定一个类型作为该属性中的自变量来执行构造函数。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
          <source>The following code example shows the use of <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> to specify that the <ph id="ph2">`SampleMethod`</ph> operation can return a SOAP fault with the detail type of <ph id="ph3">`GreetingFault`</ph>.</source>
          <target state="translated">下面的代码示例演示如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> 来指定 <ph id="ph2">`SampleMethod`</ph> 操作可以使用详细信息类型 <ph id="ph3">`GreetingFault`</ph> 返回 SOAP 错误。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
          <source>The <ph id="ph1">&lt;paramref name="detailType" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="detailType" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.FaultContractAttribute.Action">
          <source>Gets or sets the action of the SOAP fault message that is specified as part of the operation contract.</source>
          <target state="translated">获取或设置已指定作为操作协定一部分的 SOAP 错误消息的操作。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.Action">
          <source>The value of the action for the SOAP fault message.</source>
          <target state="translated">SOAP 错误消息的操作值。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.Action">
          <source>Use to control the action of the SOAP fault message.</source>
          <target state="translated">用于控制 SOAP 错误消息的操作。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.FaultContractAttribute.DetailType">
          <source>Gets the type of a serializable object that contains error information.</source>
          <target state="translated">获取包含错误信息的可序列化对象的类型。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.DetailType">
          <source>The type that represents the serializable error class.</source>
          <target state="translated">表示可序列化错误类的类型。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.DetailType">
          <source>The following code example shows the use of <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> to specify that the <ph id="ph2">`SampleMethod`</ph> operation can return a SOAP fault with the detail type of <ph id="ph3">`GreetingFault`</ph>.</source>
          <target state="translated">下面的代码示例演示如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> 来指定 <ph id="ph2">`SampleMethod`</ph> 操作可以使用详细信息类型 <ph id="ph3">`GreetingFault`</ph> 返回 SOAP 错误。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel">
          <source>Gets a value that indicates whether the SOAP fault message has a protection level assigned.</source>
          <target state="translated">获取一个值，该值指示 SOAP 错误消息是否分配有保护级别。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the fault message has a protection level; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果错误消息具有保护级别，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A&gt;</ph> property to specify whether the SOAP fault message must be encrypted, signed, or both.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A&gt;</ph> 属性指定 SOAP 错误消息是否必须加密和/或签名。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel">
          <source>See the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> property for details.</source>
          <target state="translated">有关详细信息，请参见 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.FaultContractAttribute.Name">
          <source>Gets or sets the name of the fault message in Web Services Description Language (WSDL).</source>
          <target state="translated">获取或设置 Web 服务描述语言 (WSDL) 中的错误消息的名称。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.Name">
          <source>The fault message name.</source>
          <target state="translated">错误消息名称。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.Name">
          <source>The default is the name of the type used as the fault detail.</source>
          <target state="translated">默认名称是用作错误详细信息类型的名称。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.FaultContractAttribute.Namespace">
          <source>Gets or sets the namespace of the SOAP fault.</source>
          <target state="translated">获取或设置 SOAP 错误的命名空间。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.Namespace">
          <source>The namespace of the SOAP fault.</source>
          <target state="translated">SOAP 错误的命名空间。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>Specifies the level of protection the SOAP fault requires from the binding.</source>
          <target state="translated">指定 SOAP 错误要求的绑定的保护级别。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Net.Security.ProtectionLevel" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Security.ProtectionLevel" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Net.Security.ProtectionLevel.None" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see cref="F:System.Net.Security.ProtectionLevel.None" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Description.FaultDescription.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> property to specify the degree to which the binding must encrypt, sign, or both when sending the SOAP fault.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.ServiceModel.Description.FaultDescription.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> 属性指定发送 SOAP 错误时绑定必须加密和/或签名的程度。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>It is strongly recommended that an operation's fault explicitly decide the security protection level requirements on the contract.</source>
          <target state="translated">强烈建议操作错误显式确定协定上的安全保护级别要求。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>The default protection level is <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph>, meaning that the SOAP fault message you are defining does not require encryption or a digital signature (although your binding may provide this support if it is configured to do so).</source>
          <target state="translated">默认的保护级别为 <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph>，这意味着您定义的 SOAP 错误消息并不需要加密或数字签名（虽然您的绑定在有此配置的情况下可以提供此类支持）。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>If a fault message carries information that is sensitive or can lead to security problems, it is strongly recommended that the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> property be set to <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果错误消息传送的信息为敏感信息，或可能导致安全问题，则强烈建议将 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> 属性设置为 <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>For more about security issues, see <bpt id="p1">[</bpt>Understanding Protection Level<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>.</source>
          <target state="translated">有关安全问题的详细信息，请参阅<bpt id="p1">[</bpt>了解保护级别<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>The protection behavior at runtime is the combination of the protection-level properties that have a hierarchical structure.</source>
          <target state="translated">运行时的保护行为是具有层次结构的保护级别属性的组合。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>Setting the outermost value establishes the default setting for all narrower scopes unless a different value for a narrower scope is explicitly set.</source>
          <target state="translated">除非已为较窄范围显式设置了某个不同的值，否则设置最外层的值将为所有较窄的范围确定默认设置。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>In this case, the outer value remains the default for all narrower scopes with the exception of that specifically set.</source>
          <target state="translated">在这种情况下，外层的值将保持所有较窄的范围的默认设置，但特定的设置除外。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>For example, if <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph> and no other narrower scopes have protection level settings, all messages in an operation contract are encrypted and signed, including fault messages.</source>
          <target state="translated">例如，如果 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> 设置为 <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>，并且其他较窄范围没有设置保护级别，则操作协定中的所有消息（包括错误消息）都需进行加密和签名。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>If, however, one of those operations has the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> set to <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType&gt;</ph>, then the messages for that operation are signed but all other messages in the contract are encrypted and signed, including fault messages.</source>
          <target state="translated">但是，如果其中某个操作将 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> 设置为 <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType&gt;</ph>，那么该操作的消息就需进行签名，但协定中的其他所有消息（包括错误消息）需要进行加密和签名。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>The scopes at which these values are set are:</source>
          <target state="translated">这些值的设置范围是：</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> property on <ph id="ph2">&lt;xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> 上的 <ph id="ph2">&lt;xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> property on <ph id="ph2">&lt;xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> 上的 <ph id="ph2">&lt;xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>When there is no protection level explicitly specified on the contract and the underlying binding supports security (whether at the transport or message level), the effective protection level for the whole contract is <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">当协定上没有显式指定保护级别并且基础绑定支持安全性时（无论处于传输级别还是处于消息级别），整个协定的有效保护级别将为 <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>If the binding does not support security (such as <ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding&gt;</ph>), the effective <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType&gt;</ph> is <ph id="ph3">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph> for the whole contract.</source>
          <target state="translated">如果绑定不支持安全性（如 <ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding&gt;</ph>），则整个协定的有效 <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType&gt;</ph> 为 <ph id="ph3">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>The result is that depending upon the endpoint binding, clients can require different message or transport level security protection even when the contract specifies <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">因此，根据终结点绑定，即使协定指定了 <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph>，客户端也可以要求不同的消息或传输级别安全保护。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>