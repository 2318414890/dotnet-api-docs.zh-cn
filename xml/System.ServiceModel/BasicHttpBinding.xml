<Type Name="BasicHttpBinding" FullName="System.ServiceModel.BasicHttpBinding">
  <TypeSignature Language="C#" Value="public class BasicHttpBinding : System.ServiceModel.HttpBindingBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BasicHttpBinding extends System.ServiceModel.HttpBindingBase implements class System.ServiceModel.Channels.IBindingRuntimePreferences" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.BasicHttpBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class BasicHttpBinding&#xA;Inherits HttpBindingBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class BasicHttpBinding : System::ServiceModel::HttpBindingBase" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Http</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.HttpBindingBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="99ed2-101">表示 Windows Communication Foundation (WCF)服务可用来配置和公开终结点的绑定，这些终结点将能够与基于 ASMX 的 Web 服务和客户端以及其他符合 WS-I Basic Profile 1.1 的服务进行通信。</span><span class="sxs-lookup"><span data-stu-id="99ed2-101">Represents a binding that a Windows Communication Foundation (WCF) service can use to configure and expose endpoints that are able to communicate with ASMX-based Web services and clients and other services that conform to the WS-I Basic Profile 1.1.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99ed2-102"><xref:System.ServiceModel.BasicHttpBinding> 使用 HTTP 作为传输协议用于发送 SOAP 1.1 消息。</span><span class="sxs-lookup"><span data-stu-id="99ed2-102">The <xref:System.ServiceModel.BasicHttpBinding> uses HTTP as the transport for sending SOAP 1.1 messages.</span></span> <span data-ttu-id="99ed2-103">服务可以使用此绑定来公开符合 WS-I BP 1.1 标准的终结点，如 ASMX 客户端访问的终结点。</span><span class="sxs-lookup"><span data-stu-id="99ed2-103">A service can use this binding to expose endpoints that conform to WS-I BP 1.1, such as those that ASMX clients access.</span></span> <span data-ttu-id="99ed2-104">同样，客户端可以使用 <xref:System.ServiceModel.BasicHttpBinding> 与公开符合 WS-I BP 1.1 标准的终结点的服务（如 ASMX Web 服务或采用 [!INCLUDE[indigo1](~/includes/indigo1-md.md)] 配置的 <xref:System.ServiceModel.BasicHttpBinding> 服务）进行通信。</span><span class="sxs-lookup"><span data-stu-id="99ed2-104">Similarly, a client can use the <xref:System.ServiceModel.BasicHttpBinding> to communicate with services exposing endpoints that conform to WS-I BP 1.1, such as ASMX Web services or [!INCLUDE[indigo1](~/includes/indigo1-md.md)] services configured with the <xref:System.ServiceModel.BasicHttpBinding>.</span></span>  
  
 <span data-ttu-id="99ed2-105">默认情况下，安全性处于禁用状态，但是通过在 <xref:System.ServiceModel.BasicHttpSecurityMode> 构造函数中将 <xref:System.ServiceModel.BasicHttpSecurityMode.None> 设置为不同于 <xref:System.ServiceModel.BasicHttpBinding.%23ctor%28System.ServiceModel.BasicHttpSecurityMode%29> 的值，可以添加安全性。</span><span class="sxs-lookup"><span data-stu-id="99ed2-105">Security is turned off by default, but can be added setting the <xref:System.ServiceModel.BasicHttpSecurityMode> to a value other than <xref:System.ServiceModel.BasicHttpSecurityMode.None> in the <xref:System.ServiceModel.BasicHttpBinding.%23ctor%28System.ServiceModel.BasicHttpSecurityMode%29> constructor.</span></span> <span data-ttu-id="99ed2-106">默认情况下，它使用“Text”消息编码和 UTF-8 文本编码。</span><span class="sxs-lookup"><span data-stu-id="99ed2-106">It uses a "Text" message encoding and UTF-8 text encoding by default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99ed2-107">下面的示例演示如何在应用程序配置文件中配置 <xref:System.ServiceModel.BasicHttpBinding>。</span><span class="sxs-lookup"><span data-stu-id="99ed2-107">The following example shows how to configure the <xref:System.ServiceModel.BasicHttpBinding> in an application configuration file.</span></span>  
  
  
  
 <span data-ttu-id="99ed2-108">下面的示例演示如何以编程方式配置 <xref:System.ServiceModel.BasicHttpBinding>。</span><span class="sxs-lookup"><span data-stu-id="99ed2-108">The following example shows how to programmatically configure <xref:System.ServiceModel.BasicHttpBinding>.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/service.cs#1)]
 [!code-vb[S_UEBasicHttpBinding#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uebasichttpbinding/vb/service.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="99ed2-109">初始化 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="99ed2-109">Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BasicHttpBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BasicHttpBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="99ed2-110">初始化 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="99ed2-110">Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99ed2-111">所用的 <xref:System.ServiceModel.BasicHttpSecurityMode> 的默认值为 <xref:System.ServiceModel.BasicHttpSecurityMode.None>，该值指定不保证 SOAP 消息的安全并且不对客户端进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="99ed2-111">The default value of <xref:System.ServiceModel.BasicHttpSecurityMode> used is <xref:System.ServiceModel.BasicHttpSecurityMode.None>, which specifies that the SOAP message is not secured and the client is not authenticated.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UEBasicHttpBinding#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/service.cs#2)]
 [!code-vb[S_UEBasicHttpBinding#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uebasichttpbinding/vb/service.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BasicHttpBinding (System.ServiceModel.BasicHttpSecurityMode securityMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ServiceModel.BasicHttpSecurityMode securityMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (securityMode As BasicHttpSecurityMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BasicHttpBinding(System::ServiceModel::BasicHttpSecurityMode securityMode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="securityMode" Type="System.ServiceModel.BasicHttpSecurityMode" />
      </Parameters>
      <Docs>
        <param name="securityMode"><span data-ttu-id="99ed2-112"><see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> 的值，该值指定在 SOAP 消息和客户端中使用的安全类型。</span><span class="sxs-lookup"><span data-stu-id="99ed2-112">The value of <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> that specifies the type of security that is used with the SOAP message and for the client.</span></span></param>
        <summary><span data-ttu-id="99ed2-113">通过绑定所使用的指定安全性类型初始化 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="99ed2-113">Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class with a specified type of security used by the binding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99ed2-114">所用的 <xref:System.ServiceModel.BasicHttpSecurityMode> 的默认值为 <xref:System.ServiceModel.BasicHttpSecurityMode.None>，该值指定不保证 SOAP 消息的安全并且不对客户端进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="99ed2-114">The default value of <xref:System.ServiceModel.BasicHttpSecurityMode> used is <xref:System.ServiceModel.BasicHttpSecurityMode.None>, which specifies that the SOAP message is not secured and the client is not authenticated.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UEBasicHttpBinding#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/snippets.cs#3)]
 [!code-vb[S_UEBasicHttpBinding#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uebasichttpbinding/vb/snippets.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BasicHttpBinding (string configurationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string configurationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (configurationName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BasicHttpBinding(System::String ^ configurationName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configurationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="configurationName"><span data-ttu-id="99ed2-115"><see cref="T:System.ServiceModel.Configuration.BasicHttpBindingElement" /> 的绑定配置名称。</span><span class="sxs-lookup"><span data-stu-id="99ed2-115">The binding configuration name for the <see cref="T:System.ServiceModel.Configuration.BasicHttpBindingElement" />.</span></span></param>
        <summary><span data-ttu-id="99ed2-116">使用由配置名称指定的绑定初始化 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="99ed2-116">Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class with a binding specified by its configuration name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="99ed2-117">此示例使用由配置名称“<xref:System.ServiceModel.BasicHttpBinding>”指定的绑定初始化新的 `BasicBinding` 类。</span><span class="sxs-lookup"><span data-stu-id="99ed2-117">This example initializes a new <xref:System.ServiceModel.BasicHttpBinding> class with a binding specified by the configuration name `BasicBinding`.</span></span> <span data-ttu-id="99ed2-118">可在服务的配置文件中创建绑定部分。</span><span class="sxs-lookup"><span data-stu-id="99ed2-118">You must create a bindings section in the service's configuration file.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/snippets.cs#5)]
 [!code-vb[S_UEBasicHttpBinding#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uebasichttpbinding/vb/snippets.vb#5)]  
  
 <span data-ttu-id="99ed2-119">然后，在对 <xref:System.ServiceModel.BasicHttpBinding> 构造函数的调用中指定绑定配置的名称。</span><span class="sxs-lookup"><span data-stu-id="99ed2-119">Then the name of the binding configuration is specified in the call to the <xref:System.ServiceModel.BasicHttpBinding> constructor.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/snippets.cs#4)]
 [!code-vb[S_UEBasicHttpBinding#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uebasichttpbinding/vb/snippets.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><span data-ttu-id="99ed2-120">找不到配置名称为 <paramref name="configurationName" /> 的绑定。</span><span class="sxs-lookup"><span data-stu-id="99ed2-120">The binding with the configuration name <paramref name="configurationName" /> was not found.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BuildChannelFactory&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt; BuildChannelFactory&lt;TChannel&gt; (System.ServiceModel.Channels.BindingParameterCollection parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.IChannelFactory`1&lt;!!TChannel&gt; BuildChannelFactory&lt;TChannel&gt;(class System.ServiceModel.Channels.BindingParameterCollection parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BuildChannelFactory(Of TChannel) (parameters As BindingParameterCollection) As IChannelFactory(Of TChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TChannel&gt;&#xA; override System::ServiceModel::Channels::IChannelFactory&lt;TChannel&gt; ^ BuildChannelFactory(System::ServiceModel::Channels::BindingParameterCollection ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="parameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel"><span data-ttu-id="99ed2-121">通道工厂生成的通道类型。</span><span class="sxs-lookup"><span data-stu-id="99ed2-121">The type of channel the channel factory produces.</span></span></typeparam>
        <param name="parameters"><span data-ttu-id="99ed2-122">为生成的通道工厂指定要求。</span><span class="sxs-lookup"><span data-stu-id="99ed2-122">Specifies the requirements for the channel factory built.</span></span></param>
        <summary><span data-ttu-id="99ed2-123">在客户端上生成通道工厂堆栈，此通道工厂堆栈创建具有指定类型的通道并满足绑定参数集合所指定的功能。</span><span class="sxs-lookup"><span data-stu-id="99ed2-123">Builds the channel factory stack on the client that creates a specified type of channel and that satisfies the features specified by a collection of binding parameters.</span></span></summary>
        <returns><span data-ttu-id="99ed2-124">一个类型为 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> 的 <paramref name="TChannel" />，它满足集合所指定的功能。</span><span class="sxs-lookup"><span data-stu-id="99ed2-124">An <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> that satisfies the features specified by the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBindingElements">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.CreateBindingElements" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateBindingElements () As BindingElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ServiceModel::Channels::BindingElementCollection ^ CreateBindingElements();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.BindingElementCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="99ed2-125">创建并返回一个包含在当前绑定中的已排序的绑定元素集合。</span><span class="sxs-lookup"><span data-stu-id="99ed2-125">Creates and returns an ordered collection of binding elements contained in the current binding.</span></span></summary>
        <returns><span data-ttu-id="99ed2-126">包含已排序的绑定元素堆栈的 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />，这些绑定元素由 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 描述。</span><span class="sxs-lookup"><span data-stu-id="99ed2-126">The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the ordered stack of binding elements described by the <see cref="T:System.ServiceModel.BasicHttpBinding" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99ed2-127">绑定元素的顺序很重要。</span><span class="sxs-lookup"><span data-stu-id="99ed2-127">The order of the binding elements is important.</span></span> <span data-ttu-id="99ed2-128">它反映了构造和堆栈协议以及传输通道的顺序。</span><span class="sxs-lookup"><span data-stu-id="99ed2-128">It reflects the order in which the protocol and transport channels are constructed and stacked.</span></span> <span data-ttu-id="99ed2-129">此绑定元素集合是一个新集合，可以对其进行修改并在之后用于创建 <xref:System.ServiceModel.Channels.CustomBinding>。</span><span class="sxs-lookup"><span data-stu-id="99ed2-129">This collection of binding elements is a new collection and can be modified and then used to create a <xref:System.ServiceModel.Channels.CustomBinding>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99ed2-130">下面的示例在当前绑定中创建绑定元素的有序集合。</span><span class="sxs-lookup"><span data-stu-id="99ed2-130">The following example creates an ordered collection of the binding elements in the current binding.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#26](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/client.cs#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableHttpCookieContainer">
      <MemberSignature Language="C#" Value="public bool EnableHttpCookieContainer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHttpCookieContainer" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.EnableHttpCookieContainer" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableHttpCookieContainer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableHttpCookieContainer { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. To enable Http CookieContainer, use the AllowCookies property instead.", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="99ed2-131">获取或设置一个值，该值指示是否启用 HTTP Cookie 容器。</span><span class="sxs-lookup"><span data-stu-id="99ed2-131">Gets or sets a value that indicates whether HTTP cookie container is enabled.</span></span></summary>
        <value>
          <span data-ttu-id="99ed2-132">如果启用 HTTP cookie 容器，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="99ed2-132"><see langword="true" /> if HTTP cookie container is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MessageEncoding">
      <MemberSignature Language="C#" Value="public System.ServiceModel.WSMessageEncoding MessageEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.WSMessageEncoding MessageEncoding" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.MessageEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageEncoding As WSMessageEncoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::WSMessageEncoding MessageEncoding { System::ServiceModel::WSMessageEncoding get(); void set(System::ServiceModel::WSMessageEncoding value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.WSMessageEncoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="99ed2-133">获取或设置是使用 MTOM 还是文本对 SOAP 消息进行编码。</span><span class="sxs-lookup"><span data-stu-id="99ed2-133">Gets or sets whether MTOM or Text is used to encode SOAP messages.</span></span></summary>
        <value><span data-ttu-id="99ed2-134"><see cref="T:System.ServiceModel.WSMessageEncoding" /> 的值，指示是使用 MTOM 还是文本/XML 对 SOAP 消息进行编码。</span><span class="sxs-lookup"><span data-stu-id="99ed2-134">The value of <see cref="T:System.ServiceModel.WSMessageEncoding" /> that indicates whether MTOM or Text/XML is used to encode SOAP messages.</span></span> <span data-ttu-id="99ed2-135">默认值为 <see cref="F:System.ServiceModel.WSMessageEncoding.Text" />。</span><span class="sxs-lookup"><span data-stu-id="99ed2-135">The default value is <see cref="F:System.ServiceModel.WSMessageEncoding.Text" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="99ed2-136">下面的示例将 MessageEncoding 设置为 Text。</span><span class="sxs-lookup"><span data-stu-id="99ed2-136">The following example sets MessageEncoding to Text.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#19](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/client.cs#19)]  
  
 <span data-ttu-id="99ed2-137">也可以在配置文件中设置此属性的值。</span><span class="sxs-lookup"><span data-stu-id="99ed2-137">The value of this property can also be set in the configuration file.</span></span>  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scheme">
      <MemberSignature Language="C#" Value="public override string Scheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Scheme" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.Scheme" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Scheme As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Scheme { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Security">
      <MemberSignature Language="C#" Value="public System.ServiceModel.BasicHttpSecurity Security { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.BasicHttpSecurity Security" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.Security" />
      <MemberSignature Language="VB.NET" Value="Public Property Security As BasicHttpSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::BasicHttpSecurity ^ Security { System::ServiceModel::BasicHttpSecurity ^ get(); void set(System::ServiceModel::BasicHttpSecurity ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.BasicHttpSecurity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="99ed2-138">获取与此绑定一起使用的安全类型。</span><span class="sxs-lookup"><span data-stu-id="99ed2-138">Gets the type of security used with this binding.</span></span></summary>
        <value><span data-ttu-id="99ed2-139">与此绑定一起使用的 <see cref="T:System.ServiceModel.BasicHttpSecurity" />。</span><span class="sxs-lookup"><span data-stu-id="99ed2-139">The <see cref="T:System.ServiceModel.BasicHttpSecurity" /> that is used with this binding.</span></span> <span data-ttu-id="99ed2-140">默认值为 <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />。</span><span class="sxs-lookup"><span data-stu-id="99ed2-140">The default value is <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99ed2-141">默认情况下，不会对 SOAP 消息进行保护，也不会对客户端进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="99ed2-141">By default, the SOAP message is not secured and the client is not authenticated.</span></span> <span data-ttu-id="99ed2-142">若要使用非默认的安全类型，请使用 <xref:System.ServiceModel.BasicHttpBinding.%23ctor%28System.ServiceModel.BasicHttpSecurityMode%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="99ed2-142">To use a non-default type of security, use the <xref:System.ServiceModel.BasicHttpBinding.%23ctor%28System.ServiceModel.BasicHttpSecurityMode%29> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99ed2-143">下面的示例获取 `Security` 属性。</span><span class="sxs-lookup"><span data-stu-id="99ed2-143">The following example gets the `Security` property.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#23](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/client.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeEnableHttpCookieContainer">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeEnableHttpCookieContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeEnableHttpCookieContainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.ShouldSerializeEnableHttpCookieContainer" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeEnableHttpCookieContainer () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeEnableHttpCookieContainer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="99ed2-144">指示是否 HTTP cookie 容器应启用序列化。</span><span class="sxs-lookup"><span data-stu-id="99ed2-144">Indicates whether the http cookie container should enable the serialization.</span></span></summary>
        <returns>
          <span data-ttu-id="99ed2-145"><see langword="true" />如果 HTTP cookie 容器应启用序列化，否则<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="99ed2-145"><see langword="true" /> if the http cookie container should enable the serialization; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeSecurity">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeSecurity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.ShouldSerializeSecurity" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeSecurity () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeSecurity();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="99ed2-146">返回是否应基于是否已进行序列化（例如在消息级别或传输级别）来对安全设置进行序列化。</span><span class="sxs-lookup"><span data-stu-id="99ed2-146">Returns whether security settings should be serialized based upon whether serialization already occurs, for example at the message or transport level.</span></span></summary>
        <returns>
          <span data-ttu-id="99ed2-147">如果应对安全进行序列化，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="99ed2-147"><see langword="true" /> if security should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>