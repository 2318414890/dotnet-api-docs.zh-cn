<Type Name="WorkflowServiceHost" FullName="System.ServiceModel.WorkflowServiceHost">
  <TypeSignature Language="C#" Value="public class WorkflowServiceHost : System.ServiceModel.ServiceHostBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WorkflowServiceHost extends System.ServiceModel.ServiceHostBase" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.WorkflowServiceHost" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkflowServiceHost&#xA;Inherits ServiceHostBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowServiceHost : System::ServiceModel::ServiceHostBase" />
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.ServiceHostBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="cbdae-101">为基于工作流的服务提供主机。</span><span class="sxs-lookup"><span data-stu-id="cbdae-101">Provides host for workflow-based services.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbdae-102">实现 [!INCLUDE[indigo1](~/includes/indigo1-md.md)] 服务模型编程模型所使用的主机。</span><span class="sxs-lookup"><span data-stu-id="cbdae-102">Implements the host used by the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] service model programming model.</span></span>  
  
 <span data-ttu-id="cbdae-103">当您没有使用 Internet 信息服务 (IIS) 或 Windows 激活服务 (WAS) 公开服务时，请使用 <xref:System.ServiceModel.WorkflowServiceHost> 类来配置和公开工作流作为服务以供客户端应用程序使用。</span><span class="sxs-lookup"><span data-stu-id="cbdae-103">Use the <xref:System.ServiceModel.WorkflowServiceHost> class to configure and expose a workflow as service for use by client applications when you are not using Internet Information Services (IIS) or Windows Activation Services (WAS) to expose a service.</span></span> <span data-ttu-id="cbdae-104">IIS 和 WAS 均代表您与 <xref:System.ServiceModel.WorkflowServiceHost> 对象交互。</span><span class="sxs-lookup"><span data-stu-id="cbdae-104">Both IIS and WAS interact with a <xref:System.ServiceModel.WorkflowServiceHost> object on your behalf.</span></span>  
  
 <span data-ttu-id="cbdae-105">若要公开工作流作为服务以供调用方使用，WCF 需要完整的服务说明（由 <xref:System.ServiceModel.Description.ServiceDescription> 类表示）。</span><span class="sxs-lookup"><span data-stu-id="cbdae-105">To expose a workflow as service for use by callers, WCF requires a complete service description (represented by the <xref:System.ServiceModel.Description.ServiceDescription> class).</span></span> <span data-ttu-id="cbdae-106"><xref:System.ServiceModel.WorkflowServiceHost> 类根据工作流服务类型和配置信息创建 <xref:System.ServiceModel.Description.ServiceDescription>，然后再使用该说明为说明中的每个终结点创建 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher> 对象。</span><span class="sxs-lookup"><span data-stu-id="cbdae-106">The <xref:System.ServiceModel.WorkflowServiceHost> class creates a <xref:System.ServiceModel.Description.ServiceDescription> from the workflow service type and configuration information and then uses that description to create <xref:System.ServiceModel.Dispatcher.ChannelDispatcher> objects for each endpoint in the description.</span></span>  
  
 <span data-ttu-id="cbdae-107">使用 <xref:System.ServiceModel.WorkflowServiceHost> 对象可加载工作流服务、配置终结点、应用安全设置并启动侦听器来处理传入的请求。</span><span class="sxs-lookup"><span data-stu-id="cbdae-107">Use a <xref:System.ServiceModel.WorkflowServiceHost> object to load a workflow service, configure endpoints, apply security settings, and start listeners to handle incoming requests.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cbdae-108">初始化 <see cref="T:System.ServiceModel.WorkflowServiceHost" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="cbdae-108">Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowServiceHost ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WorkflowServiceHost.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowServiceHost();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cbdae-109">初始化 <see cref="T:System.ServiceModel.WorkflowServiceHost" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="cbdae-109">Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowServiceHost (System.IO.Stream workflowDefinition, params Uri[] baseAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream workflowDefinition, class System.Uri[] baseAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflowDefinition As Stream, ParamArray baseAddress As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowServiceHost(System::IO::Stream ^ workflowDefinition, ... cli::array &lt;Uri ^&gt; ^ baseAddress);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflowDefinition" Type="System.IO.Stream" />
        <Parameter Name="baseAddress" Type="System.Uri[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="workflowDefinition">
          <span data-ttu-id="cbdae-110">包含工作流定义的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-110"><see cref="T:System.IO.Stream" /> that contains the workflow definition.</span></span></param>
        <param name="baseAddress"><span data-ttu-id="cbdae-111"><see cref="T:System.Uri" /> 类型的数组，包含承载服务的基址。</span><span class="sxs-lookup"><span data-stu-id="cbdae-111">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</span></span></param>
        <summary><span data-ttu-id="cbdae-112">使用包含工作流定义的字节流和指定的服务基址初始化 <see cref="T:System.ServiceModel.WorkflowServiceHost" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="cbdae-112">Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a byte stream that contains the workflow definition and the base addresses of the service specified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbdae-113">如果工作流定义存储在安全存储（如数据库）中，请使用此重载。</span><span class="sxs-lookup"><span data-stu-id="cbdae-113">Use this overload if the workflow definition is stored in secured storage, such as a database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowServiceHost (string workflowDefinitionPath, params Uri[] baseAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string workflowDefinitionPath, class System.Uri[] baseAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflowDefinitionPath As String, ParamArray baseAddress As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowServiceHost(System::String ^ workflowDefinitionPath, ... cli::array &lt;Uri ^&gt; ^ baseAddress);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflowDefinitionPath" Type="System.String" />
        <Parameter Name="baseAddress" Type="System.Uri[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="workflowDefinitionPath"><span data-ttu-id="cbdae-114">一个包含工作流定义文件的路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="cbdae-114">A string that contains the path to the workflow definition file.</span></span></param>
        <param name="baseAddress"><span data-ttu-id="cbdae-115"><see cref="T:System.Uri" /> 类型的数组，包含承载服务的基址。</span><span class="sxs-lookup"><span data-stu-id="cbdae-115">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</span></span></param>
        <summary><span data-ttu-id="cbdae-116">使用工作流定义的路径和指定的服务基址初始化 <see cref="T:System.ServiceModel.WorkflowServiceHost" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="cbdae-116">Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a path to the workflow definition and the base addresses of the service specified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbdae-117">当工作流定义采用 Windows 文件形式时，请使用此重载。</span><span class="sxs-lookup"><span data-stu-id="cbdae-117">Use this overload when the workflow definition is in the form of windows file.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowServiceHost (Type workflowType, params Uri[] baseAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type workflowType, class System.Uri[] baseAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.Type,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflowType As Type, ParamArray baseAddress As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowServiceHost(Type ^ workflowType, ... cli::array &lt;Uri ^&gt; ^ baseAddress);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="baseAddress" Type="System.Uri[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="workflowType"><span data-ttu-id="cbdae-118">工作流实例的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-118">The <see cref="T:System.Type" /> of the workflow instance.</span></span></param>
        <param name="baseAddress"><span data-ttu-id="cbdae-119"><see cref="T:System.Uri" /> 类型的数组，包含承载服务的基址。</span><span class="sxs-lookup"><span data-stu-id="cbdae-119">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</span></span></param>
        <summary><span data-ttu-id="cbdae-120">使用工作流类型和指定的服务基址初始化 <see cref="T:System.ServiceModel.WorkflowServiceHost" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="cbdae-120">Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a workflow type and the base addresses of the service specified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbdae-121">当工作流定义为已编译类型时，请使用此重载。</span><span class="sxs-lookup"><span data-stu-id="cbdae-121">Use this overload when the workflow is defined as compiled type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowServiceHost (System.IO.Stream workflowDefinition, System.IO.Stream ruleDefinition, params Uri[] baseAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream workflowDefinition, class System.IO.Stream ruleDefinition, class System.Uri[] baseAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.IO.Stream,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflowDefinition As Stream, ruleDefinition As Stream, ParamArray baseAddress As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowServiceHost(System::IO::Stream ^ workflowDefinition, System::IO::Stream ^ ruleDefinition, ... cli::array &lt;Uri ^&gt; ^ baseAddress);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflowDefinition" Type="System.IO.Stream" />
        <Parameter Name="ruleDefinition" Type="System.IO.Stream" />
        <Parameter Name="baseAddress" Type="System.Uri[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="workflowDefinition">
          <span data-ttu-id="cbdae-122">包含工作流定义的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-122"><see cref="T:System.IO.Stream" /> that contains the workflow definition.</span></span></param>
        <param name="ruleDefinition">
          <span data-ttu-id="cbdae-123">包含工作流规则定义的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-123"><see cref="T:System.IO.Stream" /> that contains the workflow rules definition.</span></span></param>
        <param name="baseAddress"><span data-ttu-id="cbdae-124"><see cref="T:System.Uri" /> 类型的数组，包含承载服务的基址。</span><span class="sxs-lookup"><span data-stu-id="cbdae-124">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</span></span></param>
        <summary><span data-ttu-id="cbdae-125">使用包含工作流定义的字节流、包含工作流规则定义的字节流和指定的服务基址初始化 <see cref="T:System.ServiceModel.WorkflowServiceHost" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="cbdae-125">Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a byte stream that contains the workflow definition, a byte stream that contains the workflow rules definition, and the base addresses of the service specified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbdae-126">当工作流定义和规则定义存储在安全存储（如数据库）中时，请使用此重载。</span><span class="sxs-lookup"><span data-stu-id="cbdae-126">Use this overload when the workflow definition and rules definition are stored in secured storage, such as a database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowServiceHost (string workflowDefinitionPath, string ruleDefinitionPath, params Uri[] baseAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string workflowDefinitionPath, string ruleDefinitionPath, class System.Uri[] baseAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.String,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflowDefinitionPath As String, ruleDefinitionPath As String, ParamArray baseAddress As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowServiceHost(System::String ^ workflowDefinitionPath, System::String ^ ruleDefinitionPath, ... cli::array &lt;Uri ^&gt; ^ baseAddress);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflowDefinitionPath" Type="System.String" />
        <Parameter Name="ruleDefinitionPath" Type="System.String" />
        <Parameter Name="baseAddress" Type="System.Uri[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="workflowDefinitionPath"><span data-ttu-id="cbdae-127">一个包含工作流定义文件的路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="cbdae-127">A string that contains the path to the workflow definition file.</span></span></param>
        <param name="ruleDefinitionPath"><span data-ttu-id="cbdae-128">一个包含工作流规则定义文件的路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="cbdae-128">A string that contains the path to the workflow rules definition file.</span></span></param>
        <param name="baseAddress"><span data-ttu-id="cbdae-129"><see cref="T:System.Uri" /> 类型的数组，包含承载服务的基址。</span><span class="sxs-lookup"><span data-stu-id="cbdae-129">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</span></span></param>
        <summary><span data-ttu-id="cbdae-130">使用工作流定义的路径、工作流规则定义的路径和指定的服务基址初始化 <see cref="T:System.ServiceModel.WorkflowServiceHost" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="cbdae-130">Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a path to the workflow definition, a path to the workflow rules definition, and the base addresses of the service specified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbdae-131">当工作流定义和规则定义采用 Windows 文件形式时，请使用此重载。</span><span class="sxs-lookup"><span data-stu-id="cbdae-131">Use this overload when the workflow definition and rules definition are in the form of windows files.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowServiceHost (System.IO.Stream workflowDefinition, System.IO.Stream ruleDefinition, System.Workflow.ComponentModel.Compiler.ITypeProvider typeProvider, params Uri[] baseAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream workflowDefinition, class System.IO.Stream ruleDefinition, class System.Workflow.ComponentModel.Compiler.ITypeProvider typeProvider, class System.Uri[] baseAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.IO.Stream,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflowDefinition As Stream, ruleDefinition As Stream, typeProvider As ITypeProvider, ParamArray baseAddress As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowServiceHost(System::IO::Stream ^ workflowDefinition, System::IO::Stream ^ ruleDefinition, System::Workflow::ComponentModel::Compiler::ITypeProvider ^ typeProvider, ... cli::array &lt;Uri ^&gt; ^ baseAddress);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflowDefinition" Type="System.IO.Stream" />
        <Parameter Name="ruleDefinition" Type="System.IO.Stream" />
        <Parameter Name="typeProvider" Type="System.Workflow.ComponentModel.Compiler.ITypeProvider" />
        <Parameter Name="baseAddress" Type="System.Uri[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="workflowDefinition">
          <span data-ttu-id="cbdae-132">包含工作流定义的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-132"><see cref="T:System.IO.Stream" /> that contains the workflow definition.</span></span></param>
        <param name="ruleDefinition">
          <span data-ttu-id="cbdae-133">包含工作流规则定义的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-133"><see cref="T:System.IO.Stream" /> that contains the workflow rules definition.</span></span></param>
        <param name="typeProvider"><span data-ttu-id="cbdae-134">实现 <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> 接口的类型提供程序。</span><span class="sxs-lookup"><span data-stu-id="cbdae-134">A type provider that implements the <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> interface.</span></span></param>
        <param name="baseAddress"><span data-ttu-id="cbdae-135"><see cref="T:System.Uri" /> 类型的数组，包含承载服务的基址。</span><span class="sxs-lookup"><span data-stu-id="cbdae-135">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</span></span></param>
        <summary><span data-ttu-id="cbdae-136">使用包含工作流定义的字节流、包含工作流规则定义的字节流、自定义活动类型的类型提供程序和指定的服务基址初始化 <see cref="T:System.ServiceModel.WorkflowServiceHost" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="cbdae-136">Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a byte stream that contains the workflow definition, a byte stream that contains the workflow rules definition, a type provider for custom activity types, and the base addresses of the service specified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbdae-137">当已编译的工作流引用在单独的程序集中定义的自定义类型时，请使用此重载。</span><span class="sxs-lookup"><span data-stu-id="cbdae-137">Use this overload when your compiled workflow references custom types defined in a separate assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowServiceHost (string workflowDefinitionPath, string ruleDefinitionPath, System.Workflow.ComponentModel.Compiler.ITypeProvider typeProvider, params Uri[] baseAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string workflowDefinitionPath, string ruleDefinitionPath, class System.Workflow.ComponentModel.Compiler.ITypeProvider typeProvider, class System.Uri[] baseAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.String,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflowDefinitionPath As String, ruleDefinitionPath As String, typeProvider As ITypeProvider, ParamArray baseAddress As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowServiceHost(System::String ^ workflowDefinitionPath, System::String ^ ruleDefinitionPath, System::Workflow::ComponentModel::Compiler::ITypeProvider ^ typeProvider, ... cli::array &lt;Uri ^&gt; ^ baseAddress);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflowDefinitionPath" Type="System.String" />
        <Parameter Name="ruleDefinitionPath" Type="System.String" />
        <Parameter Name="typeProvider" Type="System.Workflow.ComponentModel.Compiler.ITypeProvider" />
        <Parameter Name="baseAddress" Type="System.Uri[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="workflowDefinitionPath"><span data-ttu-id="cbdae-138">一个包含工作流定义文件的路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="cbdae-138">A string that contains the path to the workflow definition file.</span></span></param>
        <param name="ruleDefinitionPath"><span data-ttu-id="cbdae-139">一个包含工作流规则定义文件的路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="cbdae-139">A string that contains the path to the workflow rules definition file.</span></span></param>
        <param name="typeProvider"><span data-ttu-id="cbdae-140">实现 <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> 接口的类型提供程序。</span><span class="sxs-lookup"><span data-stu-id="cbdae-140">A type provider that implements the <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> interface.</span></span></param>
        <param name="baseAddress"><span data-ttu-id="cbdae-141"><see cref="T:System.Uri" /> 类型的数组，包含承载服务的基址。</span><span class="sxs-lookup"><span data-stu-id="cbdae-141">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</span></span></param>
        <summary><span data-ttu-id="cbdae-142">使用工作流定义的路径、工作流规则定义的路径、自定义活动类型的类型提供程序和指定的服务基址初始化 <see cref="T:System.ServiceModel.WorkflowServiceHost" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="cbdae-142">Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a path to the workflow definition, a path to the workflow rules definition, a type provider for custom activity types, and the base addresses of the service specified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbdae-143">当在工作流标记文件 (.xoml) 中定义工作流并且该工作流引用单独的程序集中定义的自定义类型时，请使用此重载。</span><span class="sxs-lookup"><span data-stu-id="cbdae-143">Use this overload when you have your workflow defined in a workflow markup file (.xoml) and it references custom types defined in a separate assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddServiceEndpoint">
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cbdae-144">将服务终结点添加到承载服务中。</span><span class="sxs-lookup"><span data-stu-id="cbdae-144">Adds a service endpoint to the hosted service.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddServiceEndpoint">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(class System.Type implementedContract, class System.ServiceModel.Channels.Binding binding, string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Description::ServiceEndpoint ^ AddServiceEndpoint(Type ^ implementedContract, System::ServiceModel::Channels::Binding ^ binding, System::String ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementedContract" Type="System.Type" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="implementedContract"><span data-ttu-id="cbdae-145">所添加终结点的协定的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-145">The <see cref="T:System.Type" /> of contract for the endpoint added.</span></span></param>
        <param name="binding"><span data-ttu-id="cbdae-146">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-146">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</span></span></param>
        <param name="address"><span data-ttu-id="cbdae-147">所添加终结点的地址。</span><span class="sxs-lookup"><span data-stu-id="cbdae-147">The address for the endpoint added.</span></span></param>
        <summary><span data-ttu-id="cbdae-148">使用指定的协定、绑定和终结点地址为工作流服务添加服务终结点。</span><span class="sxs-lookup"><span data-stu-id="cbdae-148">Adds a service endpoint for the workflow service using the specified contract, binding, and endpoint address.</span></span></summary>
        <returns><span data-ttu-id="cbdae-149">添加到工作流服务的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-149">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the workflow service.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cbdae-150"><paramref name="address" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-150"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cbdae-151">工作流服务不实现 <paramref name="implementedContract" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-151">The workflow service does not implement <paramref name="implementedContract" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddServiceEndpoint">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(class System.Type implementedContract, class System.ServiceModel.Channels.Binding binding, class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Description::ServiceEndpoint ^ AddServiceEndpoint(Type ^ implementedContract, System::ServiceModel::Channels::Binding ^ binding, Uri ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementedContract" Type="System.Type" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="implementedContract"><span data-ttu-id="cbdae-152">所添加终结点的协定的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-152">The <see cref="T:System.Type" /> of contract for the endpoint added.</span></span></param>
        <param name="binding"><span data-ttu-id="cbdae-153">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-153">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</span></span></param>
        <param name="address"><span data-ttu-id="cbdae-154">包含所添加终结点地址的 <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-154">The <see cref="T:System.Uri" /> that contains the address for the endpoint added.</span></span></param>
        <summary><span data-ttu-id="cbdae-155">使用指定的约定、绑定和包含终结点地址的 URI 将服务终结点添加到工作流服务中。</span><span class="sxs-lookup"><span data-stu-id="cbdae-155">Adds a service endpoint to the workflow service with a specified contract, binding, and URI that contains the endpoint address.</span></span></summary>
        <returns><span data-ttu-id="cbdae-156">添加到工作流服务的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-156">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the workflow service.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cbdae-157"><paramref name="address" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-157"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cbdae-158">工作流服务不实现 <paramref name="implementedContract" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-158">The workflow service does not implement <paramref name="implementedContract" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddServiceEndpoint">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, string address, Uri listenUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(class System.Type implementedContract, class System.ServiceModel.Channels.Binding binding, string address, class System.Uri listenUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Description::ServiceEndpoint ^ AddServiceEndpoint(Type ^ implementedContract, System::ServiceModel::Channels::Binding ^ binding, System::String ^ address, Uri ^ listenUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementedContract" Type="System.Type" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="listenUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="implementedContract"><span data-ttu-id="cbdae-159">所添加终结点的协定的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-159">The <see cref="T:System.Type" /> of contract for the endpoint added.</span></span></param>
        <param name="binding"><span data-ttu-id="cbdae-160">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-160">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</span></span></param>
        <param name="address"><span data-ttu-id="cbdae-161">服务的终结点地址。</span><span class="sxs-lookup"><span data-stu-id="cbdae-161">The endpoint address for the service.</span></span></param>
        <param name="listenUri"><span data-ttu-id="cbdae-162">服务终结点可在其上侦听的 <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-162">The <see cref="T:System.Uri" /> on which the service endpoints can listen.</span></span></param>
        <summary><span data-ttu-id="cbdae-163">使用指定的协定、绑定和终结点地址以及服务在其上侦听的 URI 将服务终结点添加到工作流服务中。</span><span class="sxs-lookup"><span data-stu-id="cbdae-163">Adds a service endpoint to the workflow service with a specified contract, a binding, an endpoint address, and a URI on which the service listens.</span></span></summary>
        <returns><span data-ttu-id="cbdae-164">添加到工作流服务的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-164">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the workflow service.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cbdae-165"><paramref name="address" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-165"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cbdae-166">没有为 <see cref="T:System.ServiceModel.ServiceContractAttribute" /> 指定 <paramref name="implementedContract" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-166"><see cref="T:System.ServiceModel.ServiceContractAttribute" /> not specified for <paramref name="implementedContract" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddServiceEndpoint">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, Uri address, Uri listenUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(class System.Type implementedContract, class System.ServiceModel.Channels.Binding binding, class System.Uri address, class System.Uri listenUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Description::ServiceEndpoint ^ AddServiceEndpoint(Type ^ implementedContract, System::ServiceModel::Channels::Binding ^ binding, Uri ^ address, Uri ^ listenUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementedContract" Type="System.Type" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="listenUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="implementedContract"><span data-ttu-id="cbdae-167">所添加终结点的协定的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-167">The <see cref="T:System.Type" /> of contract for the endpoint added.</span></span></param>
        <param name="binding"><span data-ttu-id="cbdae-168">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-168">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</span></span></param>
        <param name="address"><span data-ttu-id="cbdae-169">包含所添加终结点地址的 <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-169">The <see cref="T:System.Uri" /> that contains the address for the endpoint added.</span></span></param>
        <param name="listenUri"><span data-ttu-id="cbdae-170">服务终结点可在其上侦听的 <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-170">The <see cref="T:System.Uri" /> on which the service endpoints can listen.</span></span></param>
        <summary><span data-ttu-id="cbdae-171">使用指定的协定、绑定、包含终结点地址的 URI 以及服务在其上侦听的 URI 将服务终结点添加到工作流服务中。</span><span class="sxs-lookup"><span data-stu-id="cbdae-171">Adds a service endpoint to the workflow service with a specified contract, a binding, a URI that contains the endpoint address, and a URI on which the service listens.</span></span></summary>
        <returns><span data-ttu-id="cbdae-172">添加到工作流服务的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-172">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the workflow service.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cbdae-173"><paramref name="address" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-173"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cbdae-174">没有为 <see cref="T:System.ServiceModel.ServiceContractAttribute" /> 指定 <paramref name="implementedContract" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-174"><see cref="T:System.ServiceModel.ServiceContractAttribute" /> not specified for <paramref name="implementedContract" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDescription">
      <MemberSignature Language="C#" Value="protected override System.ServiceModel.Description.ServiceDescription CreateDescription (out System.Collections.Generic.IDictionary&lt;string,System.ServiceModel.Description.ContractDescription&gt; implementedContracts);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.ServiceModel.Description.ServiceDescription CreateDescription([out] class System.Collections.Generic.IDictionary`2&lt;string, class System.ServiceModel.Description.ContractDescription&gt;&amp; implementedContracts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WorkflowServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDescription (ByRef implementedContracts As IDictionary(Of String, ContractDescription)) As ServiceDescription" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::ServiceModel::Description::ServiceDescription ^ CreateDescription([Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::ServiceModel::Description::ContractDescription ^&gt; ^ % implementedContracts);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementedContracts" Type="System.Collections.Generic.IDictionary&lt;System.String,System.ServiceModel.Description.ContractDescription&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="implementedContracts"><span data-ttu-id="cbdae-175">当此方法返回时，<see cref="T:System.Collections.Generic.IDictionary`2" /> 对象将包含已实现的承载服务的键控协定。</span><span class="sxs-lookup"><span data-stu-id="cbdae-175">When this method returns, the <see cref="T:System.Collections.Generic.IDictionary`2" /> object contains the keyed-contracts of the hosted service that have been implemented.</span></span></param>
        <summary><span data-ttu-id="cbdae-176">创建工作流服务的说明。</span><span class="sxs-lookup"><span data-stu-id="cbdae-176">Creates a description of the workflow service.</span></span></summary>
        <returns><span data-ttu-id="cbdae-177">工作流服务的 <see cref="T:System.ServiceModel.Description.ServiceDescription" />。</span><span class="sxs-lookup"><span data-stu-id="cbdae-177">A <see cref="T:System.ServiceModel.Description.ServiceDescription" /> of the workflow service.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClosing">
      <MemberSignature Language="C#" Value="protected override void OnClosing ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnClosing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WorkflowServiceHost.OnClosing" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnClosing ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnClosing();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cbdae-178">在 <see cref="T:System.ServiceModel.WorkflowServiceHost" /> 进入关闭状态前调用此方法。</span><span class="sxs-lookup"><span data-stu-id="cbdae-178">This method is called before the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> is put into a closing state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbdae-179">在默认实现中，<xref:System.ServiceModel.WorkflowServiceHost> 将在调用 <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> 之前调用 <xref:System.ServiceModel.Channels.CommunicationObject.OnClosing%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="cbdae-179">In the default implementation, <xref:System.ServiceModel.WorkflowServiceHost> calls <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> before calling <xref:System.ServiceModel.Channels.CommunicationObject.OnClosing%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cbdae-180">这意味着工作流运行时将在服务主机关闭前关闭。</span><span class="sxs-lookup"><span data-stu-id="cbdae-180">This means the workflow runtime will shut down before the service host closes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>