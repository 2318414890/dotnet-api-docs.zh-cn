<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PersistenceProvider.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae25fbb5-14a8-44f2-90c2-3c6d6fcaae7fd817b57ce5a70dc56b9bf23d0457f5e9684d21a2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d817b57ce5a70dc56b9bf23d0457f5e9684d21a2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b899505ed6d42225f2b3c9150bfdc080d0d1f9b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/28/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>The abstract base class from which all durable service persistence providers are derived.</source>
          <target state="translated">从中派生所有持久性服务永久性提供程序的抽象基类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>Users can create classes derived from this type to create durable service persistence providers that use custom persistence stores, such as third-party databases, the file system, or storage systems accessed remotely.</source>
          <target state="translated">用户可以创建从此类型派生的类，以创建使用自定义持久性存储区（如第三方数据库、文件系统或远程访问的存储系统）的持久性服务永久性提供程序。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>To create a system-provided implementation of this type that uses Microsoft SQL Server as a persistence store, see <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory&gt;</ph>.</source>
          <target state="translated">若要创建使用 Microsoft SQL Server 作为持久性存储区的此类型的系统提供的实现，请参见 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>When creating persistence provider implementations, it is important to maintain the thread's original identity in the new provider's methods (such as <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph>.</source>
          <target state="translated">在创建永久性提供程序实现时，必须在新提供程序的方法（如 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph>）中保留线程的原始标识。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>Otherwise, security loopholes could be created, because operations would then run under the wrong identity.</source>
          <target state="translated">否则会形成安全漏洞，因为在这种情况下，操作将会在错误的标识下运行。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>For an implementation of this type that uses the file system as a persistence store, see the FilePersistenceProviderFactory.cs file in the DurableServiceFactory SDK sample.</source>
          <target state="translated">有关使用文件系统作为持久性存储区的此类型的实现，请参见 DurableServiceFactory SDK 示例中的 FilePersistenceProviderFactory.cs 文件。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
          <source>The unique identifier of the service state data being saved.</source>
          <target state="translated">要保存的服务状态数据的唯一标识符。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
          <source>When implemented in a derived class, initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /&gt;</ph> class.</source>
          <target state="translated">在派生类中实现时，初始化 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
          <source>The following code demonstrates how to use the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider&gt;</ph> constructor.</source>
          <target state="translated">下面的代码演示如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider&gt;</ph> 构造函数。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">此代码示例摘自 FilePersistenceProviderFactory.cs 文件中的 DurableServiceFactory SDK 示例。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
          <source>For more information, see the DurableServiceFactory SDK sample.</source>
          <target state="translated">有关更多信息，请参见 DurableServiceFactory SDK 示例。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The actual instance state.</source>
          <target state="translated">实际的实例状态。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">时间段，永久性提供程序在该时间段后将中止此尝试。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is completed.</source>
          <target state="translated">操作完成时将要调用的方法。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous operation from other operations.</source>
          <target state="translated">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When implemented in a derived class, represents the beginning of the Create phase.</source>
          <target state="translated">在派生类中实现时，表示“创建”阶段开始。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The Create phase occurs when service instance records are first created in the persistence store.</source>
          <target state="translated">第一次在持久性存储区中创建服务实例记录时将进入“创建”阶段。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> asynchronous method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> 异步方法调用的状态。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The actual instance state.</source>
          <target state="translated">实际的实例状态。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">时间段，永久性提供程序在该时间段后将中止此尝试。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is completed.</source>
          <target state="translated">操作完成时将要调用的方法。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous operation from other operations.</source>
          <target state="translated">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When implemented in a derived class, represents the beginning of the Delete phase.</source>
          <target state="translated">在派生类中实现时，表示“删除”阶段开始。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The Delete phase occurs when service state data is permanently deleted from the persistence store.</source>
          <target state="translated">将服务状态数据从持久性存储区中永久删除时将进入“删除”阶段。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> asynchronous method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> 异步方法调用的状态。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code demonstrates how to implement the <ph id="ph1">`BeginDelete`</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">`BeginDelete`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">此代码示例摘自 FilePersistenceProviderFactory.cs 文件中的 DurableServiceFactory SDK 示例。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>For more information, see the DurableServiceFactory SDK sample.</source>
          <target state="translated">有关更多信息，请参见 DurableServiceFactory SDK 示例。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">时间段，永久性提供程序在该时间段后将中止此尝试。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is completed.</source>
          <target state="translated">操作完成时将要调用的方法。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous operation from other operations.</source>
          <target state="translated">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When implemented in a derived class, represents the beginning of the Load phase.</source>
          <target state="translated">在派生类中实现时，表示“加载”阶段开始。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The Load phase occurs when state data is loaded into the persistence provider from the persistence store.</source>
          <target state="translated">将状态数据从持久性存储区加载到永久性提供程序中时将进入“加载”阶段。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> asynchronous method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> 异步方法调用的状态。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code demonstrates how to implement the <ph id="ph1">`BeginLoad`</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">`BeginLoad`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">此代码示例摘自 FilePersistenceProviderFactory.cs 文件中的 DurableServiceFactory SDK 示例。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>For more information, see the DurableServiceFactory SDK sample.</source>
          <target state="translated">有关更多信息，请参见 DurableServiceFactory SDK 示例。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">时间段，永久性提供程序在该时间段后将中止此尝试。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The token returned by a previous <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /&gt;</ph> that represents the current state held by the caller.</source>
          <target state="translated">先前的 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /&gt;</ph> 或 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /&gt;</ph> 返回的标记，表示调用方具有的当前状态。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is completed.</source>
          <target state="translated">操作完成时将要调用的方法。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous operation from other operations.</source>
          <target state="translated">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>When implemented in a derived class, represents the beginning of the LoadIfChanged phase.</source>
          <target state="translated">在派生类中实现时，表示“LoadIfChanged”阶段开始。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store, and the state data in the persistence store has been changed.</source>
          <target state="translated">将状态数据从持久性存储区加载到永久性提供程序中，并且持久性存储区中的状态数据已更改时，将进入“LoadIfChanged”阶段。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The state of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)" /&gt;</ph> asynchronous method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)" /&gt;</ph> 异步方法调用的状态。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The actual instance state.</source>
          <target state="translated">实际的实例状态。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">时间段，永久性提供程序在该时间段后将中止此尝试。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is completed.</source>
          <target state="translated">操作完成时将要调用的方法。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous operation from other operations.</source>
          <target state="translated">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When implemented in a derived class, represents the beginning of the Update phase.</source>
          <target state="translated">在派生类中实现时，表示“更新”阶段开始。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The Update phase occurs when service state data is updated in the persistence store.</source>
          <target state="translated">在持久性存储区中更新服务状态数据时将进入“更新”阶段。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> asynchronous method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> 异步方法调用的状态。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>The actual instance state.</source>
          <target state="translated">实际的实例状态。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">时间段，永久性提供程序在该时间段后将中止此尝试。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>When implemented in a derived class, creates a service state record in the persistence store.</source>
          <target state="translated">在派生类中实现时，在持久性存储区中创建服务状态记录。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>The instance token corresponding to the state just saved.</source>
          <target state="translated">与刚保存的状态相对应的实例标记。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>This can be passed to <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph> to determine whether the state in the persistence store differs from the state when Create was called.</source>
          <target state="translated">可以将其传递给 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph>，以确定持久性存储区中的状态是否与调用 Create 时的状态不同。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Create%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Create%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>The actual instance state.</source>
          <target state="translated">实际的实例状态。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">时间段，永久性提供程序在该时间段后将中止此尝试。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>When implemented in a derived class, permanently deletes service state information from the persistence store.</source>
          <target state="translated">在派生类中实现时，从持久性存储区中永久删除服务状态信息。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Delete%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Delete%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">此代码示例摘自 FilePersistenceProviderFactory.cs 文件中的 DurableServiceFactory SDK 示例。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>For more information, see the DurableServiceFactory SDK sample.</source>
          <target state="translated">有关更多信息，请参见 DurableServiceFactory SDK 示例。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>A reference to the result of the operation.</source>
          <target state="translated">对操作结果的引用。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>When implemented in a derived class, represents the end of the Create phase.</source>
          <target state="translated">在派生类中实现时，表示“创建”阶段结束。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>The Create phase occurs when service state records are first created in the persistence store.</source>
          <target state="translated">第一次在持久性存储区中创建服务状态记录时将进入“创建”阶段。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>The instance token corresponding to the state just saved.</source>
          <target state="translated">与刚保存的状态相对应的实例标记。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>This can be passed to <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph> to determine whether the state in the persistence store differs from the state when Create was called.</source>
          <target state="translated">可以将其传递给 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph>，以确定持久性存储区中的状态是否与调用 Create 时的状态不同。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndCreate%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndCreate%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>A reference to the result of the operation.</source>
          <target state="translated">对操作结果的引用。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>When implemented in a derived class, represents the end of the Delete phase.</source>
          <target state="translated">在派生类中实现时，表示“删除”阶段结束。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>The Delete phase occurs when state data is permanently deleted from the persistence store.</source>
          <target state="translated">将状态数据从持久性存储区中永久删除时将进入“删除”阶段。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndDelete%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndDelete%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">此代码示例摘自 FilePersistenceProviderFactory.cs 文件中的 DurableServiceFactory SDK 示例。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>For more information, see the DurableServiceFactory SDK sample.</source>
          <target state="translated">有关更多信息，请参见 DurableServiceFactory SDK 示例。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>A reference to the result of the operation.</source>
          <target state="translated">对操作结果的引用。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>When implemented in a derived class, represents the end of the Load phase.</source>
          <target state="translated">在派生类中实现时，表示“加载”阶段结束。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>The Load phase occurs when state data is loaded into the persistence provider from the persistence store.</source>
          <target state="translated">将状态数据从持久性存储区加载到永久性提供程序中时将进入“加载”阶段。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>The service state information.</source>
          <target state="translated">服务状态信息。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>The following code demonstrates how to use the <ph id="ph1">`EndLoad`</ph> method.</source>
          <target state="translated">下面的代码演示如何使用 <ph id="ph1">`EndLoad`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">此代码示例摘自 FilePersistenceProviderFactory.cs 文件中的 DurableServiceFactory SDK 示例。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>For more information, see the DurableServiceFactory SDK sample.</source>
          <target state="translated">有关更多信息，请参见 DurableServiceFactory SDK 示例。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source>A reference to the result of the operation.</source>
          <target state="translated">对操作结果的引用。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source>The actual instance state.</source>
          <target state="translated">实际的实例状态。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source>When implemented in a derived class, represents the end of the LoadIfChanged phase.</source>
          <target state="translated">在派生类中实现时，表示“LoadIfChanged”阶段结束。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source>The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store, and the state data in the persistence store has been changed.</source>
          <target state="translated">将状态数据从持久性存储区加载到永久性提供程序中，并且持久性存储区中的状态数据已更改时，将进入“LoadIfChanged”阶段。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the instance <ph id="ph2">&lt;see langword="out" /&gt;</ph> parameter has been set with the latest copy from the persistence store; <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the locally cached state is already up-to-date.</source>
          <target state="translated">如果使用持久性存储区中的最新副本设置实例 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 参数，则为 <ph id="ph2">&lt;see langword="out" /&gt;</ph>；如果本地缓存状态已经是最新的，则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>A reference to the result of the operation.</source>
          <target state="translated">对操作结果的引用。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>Represents the end of the Update phase.</source>
          <target state="translated">表示“更新”阶段结束。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>The Update phase occurs when service state records are updated in the persistence store.</source>
          <target state="translated">在持久性存储区中更新服务状态记录时将进入“更新”阶段。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>The instance token corresponding to the state just saved.</source>
          <target state="translated">与刚保存的状态相对应的实例标记。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>This can be passed to <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph> to determine whether the state in the persistence store differs from the state when Create was called.</source>
          <target state="translated">可以将其传递给 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph>，以确定持久性存储区中的状态是否与调用 Create 时的状态不同。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Persistence.PersistenceProvider.Id">
          <source>Represents the <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> associated with this instance.</source>
          <target state="translated">表示与此实例关联的 <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Persistence.PersistenceProvider.Id">
          <source>The GUID associated with this instance.</source>
          <target state="translated">与此实例关联的 GUID。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Persistence.PersistenceProvider.Id">
          <source>The following code demonstrates how to use the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Id%2A&gt;</ph> property.</source>
          <target state="translated">下面的代码演示如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Id%2A&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">时间段，永久性提供程序在该时间段后将中止此尝试。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>When implemented in a derived class, loads service state information from the persistence store.</source>
          <target state="translated">在派生类中实现时，从持久性存储区中加载服务状态信息。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>The loaded instance state.</source>
          <target state="translated">已加载的实例状态。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>Changes made to the security token in the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph> method, if not reverted, stay in effect for the remainder of that message's processing.</source>
          <target state="translated">对 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph> 方法中的安全令牌所做的更改在不进行恢复的情况下将对该消息的其余处理保持有效。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>This means that the service operation's user code, the response message path through the dispatcher, as well as any error paths, run in the changed security context.</source>
          <target state="translated">这意味着服务操作的用户代码、通过调度程序的响应消息路径以及任何错误路径都将在已更改的安全上下文中运行。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">此代码示例摘自 FilePersistenceProviderFactory.cs 文件中的 DurableServiceFactory SDK 示例。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>For more information, see the DurableServiceFactory SDK sample.</source>
          <target state="translated">有关更多信息，请参见 DurableServiceFactory SDK 示例。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">时间段，永久性提供程序在该时间段后将中止此尝试。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source>The token returned by a previous <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /&gt;</ph>, which represents the current state held by the caller.</source>
          <target state="translated">先前的 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /&gt;</ph> 或 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /&gt;</ph> 返回的标记，表示调用方具有的当前状态。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source>The actual instance state.</source>
          <target state="translated">实际的实例状态。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source>When implemented in a derived class, loads service state information from the persistence store if that data has been changed.</source>
          <target state="translated">在派生类中实现时，如果服务状态信息数据发生了更改，则从持久性存储区中加载服务状态信息。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="instance" /&gt;</ph><ph id="ph3">&lt;see langword="out" /&gt;</ph> parameter has been set with the latest copy from the persistence store; <ph id="ph4">&lt;see langword="false" /&gt;</ph> if the locally cached state is already up to date.</source>
          <target state="translated">如果使用持久性存储区中的最新副本设置 <ph id="ph2">&lt;paramref name="instance" /&gt;</ph><ph id="ph3">&lt;see langword="out" /&gt;</ph> 参数，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，如果本地缓存状态已经是最新的，则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>The actual instance state.</source>
          <target state="translated">实际的实例状态。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">时间段，永久性提供程序在该时间段后将中止此尝试。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>When implemented in a derived class, updates service state records in the persistence store.</source>
          <target state="translated">在派生类中实现时，在持久性存储区中更新服务状态记录。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>The instance token corresponding to the state just saved.</source>
          <target state="translated">与刚保存的状态相对应的实例标记。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>This can be passed to <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph> to determine whether the state in the persistence store differs from the state when Create was called.</source>
          <target state="translated">可以将其传递给 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph>，以确定持久性存储区中的状态是否与调用 Create 时的状态不同。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Update%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码演示如何实现 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Update%2A&gt;</ph> 方法。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>