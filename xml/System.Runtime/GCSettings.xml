<Type Name="GCSettings" FullName="System.Runtime.GCSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d0edeb1fd33575474eb7857b9bae22ce81e4f2e2" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51862443" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class GCSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit GCSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.GCSettings" />
  <TypeSignature Language="VB.NET" Value="Public Class GCSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class GCSettings abstract sealed" />
  <TypeSignature Language="F#" Value="type GCSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="09491-101">指定当前进程的垃圾回收设置。</span>
      <span class="sxs-lookup">
        <span data-stu-id="09491-101">Specifies the garbage collection settings for the current process.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09491-102">使用<xref:System.Runtime.GCSettings.IsServerGC%2A>属性来确定是否为当前进程启用服务器垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="09491-102">Use the <xref:System.Runtime.GCSettings.IsServerGC%2A> property to determine whether server garbage collection is enabled for the current process.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsServerGC">
      <MemberSignature Language="C#" Value="public static bool IsServerGC { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsServerGC" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.GCSettings.IsServerGC" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsServerGC As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsServerGC { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsServerGC : bool" Usage="System.Runtime.GCSettings.IsServerGC" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09491-103">获取一个值，该值指示是否启用了服务器垃圾回收。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09491-103">Gets a value that indicates whether server garbage collection is enabled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09491-104">如果启用了服务器垃圾回收，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09491-104">
              <see langword="true" /> if server garbage collection is enabled; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09491-105">有关服务器垃圾回收的信息，请参阅中的"工作站和服务器垃圾回收"一节[垃圾回收的基础](~/docs/standard/garbage-collection/fundamentals.md)。</span><span class="sxs-lookup"><span data-stu-id="09491-105">For information about server garbage collection, see the "Workstation and Server Garbage Collection" section in [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md).</span></span>  
  
 <span data-ttu-id="09491-106">如果未启用服务器垃圾回收，工作站垃圾回收实际上是 （有或没有并发集合）。</span><span class="sxs-lookup"><span data-stu-id="09491-106">If server garbage collection is not enabled, workstation garbage collection is in effect (with or without concurrent collection).</span></span> <span data-ttu-id="09491-107">服务器垃圾回收，仅在多处理器计算机上可用。</span><span class="sxs-lookup"><span data-stu-id="09491-107">Server garbage collection is available only on multiprocessor computers.</span></span>  
  
 <span data-ttu-id="09491-108">非托管的主机可以请求服务器垃圾回收，并且主机请求将替代配置文件设置。</span><span class="sxs-lookup"><span data-stu-id="09491-108">An unmanaged host can request server garbage collection, and the host request overrides configuration file settings.</span></span> <span data-ttu-id="09491-109">如果主机未指定垃圾回收的类型，可以使用配置文件设置来指定服务器垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="09491-109">If the host does not specify the type of garbage collection, you can use a configuration file setting to specify server garbage collection.</span></span> <span data-ttu-id="09491-110">此设置仅在应用程序配置文件中，计算机配置文件中不是有效 (请参阅[配置应用](~/docs/framework/configure-apps/index.md))。</span><span class="sxs-lookup"><span data-stu-id="09491-110">This setting is valid only in the application configuration file, not in the machine configuration file (see [Configuring Apps](~/docs/framework/configure-apps/index.md)).</span></span> <span data-ttu-id="09491-111">下面的示例显示了启用服务器垃圾回收的示例应用程序配置文件的内容。</span><span class="sxs-lookup"><span data-stu-id="09491-111">The following example shows the contents of a sample application configuration file that enables server garbage collection.</span></span>  
  
```  
<configuration>  
  <runtime>  
    <gcServer enabled="true" />  
  </runtime>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="09491-112">下面的示例指示主机是否正在使用服务器或工作站垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="09491-112">The following example indicates whether the host computer is using server or workstation garbage collection.</span></span>  
  
 [!code-csharp[Environment.IsServerGC#1](~/samples/snippets/csharp/VS_Snippets_CLR/environment.IsServerGC/CS/isg.cs#1)]
 [!code-vb[Environment.IsServerGC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/environment.IsServerGC/VB/isg.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LargeObjectHeapCompactionMode">
      <MemberSignature Language="C#" Value="public static System.Runtime.GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property LargeObjectHeapCompactionMode As GCLargeObjectHeapCompactionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode { System::Runtime::GCLargeObjectHeapCompactionMode get(); void set(System::Runtime::GCLargeObjectHeapCompactionMode value); };" />
      <MemberSignature Language="F#" Value="member this.LargeObjectHeapCompactionMode : System.Runtime.GCLargeObjectHeapCompactionMode with get, set" Usage="System.Runtime.GCSettings.LargeObjectHeapCompactionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;netcore-2.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLargeObjectHeapCompactionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09491-113">获取或设置指示完全阻止垃圾回收是否压缩大型对象堆 (LOH) 的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09491-113">Gets or sets a value that indicates whether a full blocking garbage collection compacts the large object heap (LOH).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09491-114">指示完全阻止垃圾回收是否压缩 LOH 的枚举值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09491-114">One of the enumeration values that indicates whether a full blocking garbage collection compacts the LOH.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09491-115">LOH 用于分配的内存需要多个 85,000 个字节的大型对象 （如数组）。</span><span class="sxs-lookup"><span data-stu-id="09491-115">The LOH is used for allocating memory for large objects (such as arrays) that require more than 85,000 bytes.</span></span> <span data-ttu-id="09491-116">由于复制较大的内存块的性能影响，垃圾回收器通常扫描 LOH，涉及到创建的内存位置的已死对象占用和，可以重复使用，以满足将来请求列表对于大型对象内存的分配。</span><span class="sxs-lookup"><span data-stu-id="09491-116">Because of the performance impact of copying large blocks of memory, the garbage collector ordinarily sweeps the   LOH, which involves creating a list of the memory locations that were occupied by dead objects and that can be reused to satisfy future requests for allocation of memory for large objects.</span></span> <span data-ttu-id="09491-117">但是，在广泛的应用程序中使用的 LOH 来存储临时对象，碎片可能会反过来会影响性能的内存。</span><span class="sxs-lookup"><span data-stu-id="09491-117">However, in apps that make extensive use of the LOH to store transient objects, memory fragmentation can also adversely impact performance.</span></span> <span data-ttu-id="09491-118">在这种情况下，则可以使用<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A>属性压缩而不是只需扫描 LOH 垃圾回收期间。</span><span class="sxs-lookup"><span data-stu-id="09491-118">In this case, it is possible to use the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property to compact rather than simply sweep the LOH during a garbage collection.</span></span>  
  
 <span data-ttu-id="09491-119">默认值<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A>属性是<xref:System.Runtime.GCLargeObjectHeapCompactionMode.Default?displayProperty=nameWithType>，指示在垃圾回收期间不会压缩 LOH。</span><span class="sxs-lookup"><span data-stu-id="09491-119">The default value of the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property is <xref:System.Runtime.GCLargeObjectHeapCompactionMode.Default?displayProperty=nameWithType>, which indicates that the LOH is not compacted during garbage collections.</span></span> <span data-ttu-id="09491-120">如果将属性分配值<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>LOH 压缩在下一步完全阻止垃圾回收，过程和属性值重置为<xref:System.Runtime.GCLargeObjectHeapCompactionMode.Default?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="09491-120">If you assign the property a value of <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>, the LOH is compacted during the next full blocking garbage collection, and the property value is reset to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.Default?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09491-121">未阻止后台垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="09491-121">Background garbage collections are not blocking.</span></span> <span data-ttu-id="09491-122">这意味着，如果您设置<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A>属性设置为<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>、 随后出现的 2 个集合不会压缩 LOH 任何后台生成。</span><span class="sxs-lookup"><span data-stu-id="09491-122">This means that, if you set the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>, any background generation 2 collections that occur subsequently do not compact the LOH.</span></span> <span data-ttu-id="09491-123">仅第一个阻止生成 2 个集合会压缩 LOH。</span><span class="sxs-lookup"><span data-stu-id="09491-123">Only the first blocking generation 2 collection compacts the LOH.</span></span>  
  
 <span data-ttu-id="09491-124">之后<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A>属性设置为<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>，在不确定的未来时间发生的下一个完整的阻碍性垃圾回收 （和 LOH 压缩）。</span><span class="sxs-lookup"><span data-stu-id="09491-124">After the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property is set to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>, the next full blocking garbage collection (and compaction of the LOH) occurs at an indeterminate future time.</span></span> <span data-ttu-id="09491-125">您可以立即压缩 LOH，通过使用如下代码：</span><span class="sxs-lookup"><span data-stu-id="09491-125">You can compact the LOH immediately by using code like the following:</span></span>  
  
 [!code-csharp[System.Runtime.GCSettings#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)]
 [!code-vb[System.Runtime.GCSettings#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.GCLargeObjectHeapCompactionMode" />
      </Docs>
    </Member>
    <Member MemberName="LatencyMode">
      <MemberSignature Language="C#" Value="public static System.Runtime.GCLatencyMode LatencyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.GCLatencyMode LatencyMode" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.GCSettings.LatencyMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property LatencyMode As GCLatencyMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::GCLatencyMode LatencyMode { System::Runtime::GCLatencyMode get(); void set(System::Runtime::GCLatencyMode value); };" />
      <MemberSignature Language="F#" Value="member this.LatencyMode : System.Runtime.GCLatencyMode with get, set" Usage="System.Runtime.GCSettings.LatencyMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;netcore-2.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLatencyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09491-126">获取或设置垃圾回收的当前滞后时间模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09491-126">Gets or sets the current latency mode for garbage collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09491-127">指定滞后时间模式的枚举值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09491-127">One of the enumeration values that specifies the latency mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09491-128">可以通过设置应用程序中减少垃圾回收的侵入性的级别<xref:System.Runtime.GCLatencyMode>到<xref:System.Runtime.GCLatencyMode.LowLatency>期间关键操作。</span><span class="sxs-lookup"><span data-stu-id="09491-128">You can reduce the level of intrusiveness of garbage collection in your application by setting the <xref:System.Runtime.GCLatencyMode> to <xref:System.Runtime.GCLatencyMode.LowLatency> during critical operations.</span></span> <span data-ttu-id="09491-129">此类操作完成后，返回到较高的延迟模式，以便可以回收更多的对象以增加内存。</span><span class="sxs-lookup"><span data-stu-id="09491-129">After such operations are completed, return to a higher latency mode so that more objects can be reclaimed to increase memory.</span></span>  
  
 <span data-ttu-id="09491-130">通常，设置的值<xref:System.Runtime.GCSettings.LatencyMode%2A>定义垃圾回收器的滞后时间模式的属性。</span><span class="sxs-lookup"><span data-stu-id="09491-130">Ordinarily, you set the value of the <xref:System.Runtime.GCSettings.LatencyMode%2A> property to define the garbage collector's latency mode.</span></span> <span data-ttu-id="09491-131">但是，不能通过将分配设置无 GC 区域延迟模式<xref:System.Runtime.GCLatencyMode.NoGCRegion?displayProperty=nameWithType>枚举值<xref:System.Runtime.GCSettings.LatencyMode%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="09491-131">However, you cannot set the no GC region latency mode by assigning the <xref:System.Runtime.GCLatencyMode.NoGCRegion?displayProperty=nameWithType> enumeration value to the <xref:System.Runtime.GCSettings.LatencyMode%2A> property.</span></span> <span data-ttu-id="09491-132">相反，您调用<xref:System.GC.TryStartNoGCRegion%2A?displayProperty=nameWithType>方法开始无 GC 区域延迟模式，并且您调用<xref:System.GC.EndNoGCRegion%2A?displayProperty=nameWithType>结束它。</span><span class="sxs-lookup"><span data-stu-id="09491-132">Instead, you call the <xref:System.GC.TryStartNoGCRegion%2A?displayProperty=nameWithType> method to begin the no GC region latency mode, and you call the <xref:System.GC.EndNoGCRegion%2A?displayProperty=nameWithType> to end it.</span></span>  
  
 <span data-ttu-id="09491-133">请参阅[滞后时间模式](~/docs/standard/garbage-collection/latency.md)有关的垃圾回收的运行时配置设置如何影响的默认值讨论<xref:System.Runtime.GCLatencyMode>枚举。</span><span class="sxs-lookup"><span data-stu-id="09491-133">See [Latency Modes](~/docs/standard/garbage-collection/latency.md) for a discussion of how the runtime configuration settings for garbage collection affect the default value of the <xref:System.Runtime.GCLatencyMode> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="09491-134">
            <see cref="P:System.Runtime.GCSettings.LatencyMode" /> 属性被设置为无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09491-134">The <see cref="P:System.Runtime.GCSettings.LatencyMode" /> property is being set to an invalid value.</span>
          </span>
          <span data-ttu-id="09491-135">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="09491-135">-or-</span>
          </span>
          <span data-ttu-id="09491-136">不能将 <see cref="P:System.Runtime.GCSettings.LatencyMode" /> 属性设置为 <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09491-136">The <see cref="P:System.Runtime.GCSettings.LatencyMode" /> property cannot be set to <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="09491-137">直接调用方需要完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09491-137">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="09491-138">不能由部分受信任的或透明的代码使用此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09491-138">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <related type="Article" href="https://msdn.microsoft.com/library/96278bb7-6eab-4612-8594-ceebfc887d81">
          <span data-ttu-id="09491-139">滞后时间模式</span>
          <span class="sxs-lookup">
            <span data-stu-id="09491-139">Latency Modes</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>