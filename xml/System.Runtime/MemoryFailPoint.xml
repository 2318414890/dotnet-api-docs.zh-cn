<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ab5da6c93b04875493fea4cbb8aac2d44e9f9060" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36628635" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="792ed-101">执行一个操作之前检查是否有足够的内存资源。</span>
      <span class="sxs-lookup">
        <span data-stu-id="792ed-101">Checks for sufficient memory resources before executing an operation.</span>
      </span>
      <span data-ttu-id="792ed-102">此类不能被继承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="792ed-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="792ed-103">此类用于高级开发。</span><span class="sxs-lookup"><span data-stu-id="792ed-103">This class is intended for use in advanced development.</span></span>  
  
 <span data-ttu-id="792ed-104">创建的实例<xref:System.Runtime.MemoryFailPoint>类创建内存入口。</span><span class="sxs-lookup"><span data-stu-id="792ed-104">Creating an instance of the <xref:System.Runtime.MemoryFailPoint> class creates a memory gate.</span></span> <span data-ttu-id="792ed-105">在启动要求大量内存的活动之前，内存入口检查有足够资源。</span><span class="sxs-lookup"><span data-stu-id="792ed-105">A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</span></span> <span data-ttu-id="792ed-106">在检查失败导致<xref:System.InsufficientMemoryException>所引发异常。</span><span class="sxs-lookup"><span data-stu-id="792ed-106">Failing the check results in an <xref:System.InsufficientMemoryException> exception being thrown.</span></span> <span data-ttu-id="792ed-107">此异常会阻止从正在启动操作，并减少由于故障的可能性资源不足。</span><span class="sxs-lookup"><span data-stu-id="792ed-107">This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</span></span> <span data-ttu-id="792ed-108">这使你降低性能，以避免<xref:System.OutOfMemoryException>异常和代码中的任意位置中的异常的处理不当，可能会导致任何状态损坏。</span><span class="sxs-lookup"><span data-stu-id="792ed-108">This enables you decrease performance to avoid an <xref:System.OutOfMemoryException> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="792ed-109">此类型实现<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="792ed-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="792ed-110">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="792ed-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="792ed-111">若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</span><span class="sxs-lookup"><span data-stu-id="792ed-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="792ed-112">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="792ed-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="792ed-113">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<xref:System.IDisposable>接口主题。</span><span class="sxs-lookup"><span data-stu-id="792ed-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="792ed-114">通过引发<xref:System.InsufficientMemoryException>异常，应用程序可以区分之间的操作将不能完成一个估计值和部分完成的操作可能已破坏的应用程序状态。</span><span class="sxs-lookup"><span data-stu-id="792ed-114">By throwing an <xref:System.InsufficientMemoryException> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</span></span> <span data-ttu-id="792ed-115">这允许应用程序的保守升级策略，这可能需要卸载当前的频率减少<xref:System.AppDomain>或回收进程。</span><span class="sxs-lookup"><span data-stu-id="792ed-115">This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <xref:System.AppDomain> or recycling the process.</span></span>  
  
 <span data-ttu-id="792ed-116"><xref:System.Runtime.MemoryFailPoint> 检查以确定是否足够的内存和连续的虚拟地址空间可用于所有垃圾回收堆，并且还可能增加交换文件的大小。</span><span class="sxs-lookup"><span data-stu-id="792ed-116"><xref:System.Runtime.MemoryFailPoint> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</span></span>  <span data-ttu-id="792ed-117"><xref:System.Runtime.MemoryFailPoint> 使任何保证长期内存可用性的入口，但调用方的生存期内，应始终使用<xref:System.Runtime.MemoryFailPoint.Dispose%2A>方法，以确保与关联的资源<xref:System.Runtime.MemoryFailPoint>发布。</span><span class="sxs-lookup"><span data-stu-id="792ed-117"><xref:System.Runtime.MemoryFailPoint> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method to ensure that resources associated with <xref:System.Runtime.MemoryFailPoint> are released.</span></span>  
  
 <span data-ttu-id="792ed-118">若要使用的内存入口，必须创建<xref:System.Runtime.MemoryFailPoint>对象，并指定兆字节 (MB) 的内存的数，下一步操作应使用。</span><span class="sxs-lookup"><span data-stu-id="792ed-118">To use a memory gate, you must create a <xref:System.Runtime.MemoryFailPoint> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</span></span> <span data-ttu-id="792ed-119">如果没有足够内存可用，<xref:System.InsufficientMemoryException>引发异常。</span><span class="sxs-lookup"><span data-stu-id="792ed-119">If enough memory is not available, an <xref:System.InsufficientMemoryException> exception is thrown.</span></span>  
  
 <span data-ttu-id="792ed-120">构造函数的参数必须是正整数。</span><span class="sxs-lookup"><span data-stu-id="792ed-120">The parameter of the constructor must be a positive integer.</span></span> <span data-ttu-id="792ed-121">负值引发<xref:System.ArgumentOutOfRangeException>异常。</span><span class="sxs-lookup"><span data-stu-id="792ed-121">A negative value raises an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 <span data-ttu-id="792ed-122"><xref:System.Runtime.MemoryFailPoint> 在 16 MB 的粒度上进行操作。</span><span class="sxs-lookup"><span data-stu-id="792ed-122"><xref:System.Runtime.MemoryFailPoint> operates at a granularity of 16 MB.</span></span> <span data-ttu-id="792ed-123">任何小于 16 MB 的值都被视为 16 MB，而其他值是被视为 16 MB 的下一个最大倍数。</span><span class="sxs-lookup"><span data-stu-id="792ed-123">Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="792ed-124"><xref:System.Runtime.MemoryFailPoint> 使应用程序缓慢本身以避免损坏方式内存不足。</span><span class="sxs-lookup"><span data-stu-id="792ed-124"><xref:System.Runtime.MemoryFailPoint> enables an application to slow itself to avoid running out of memory in a corrupting manner.</span></span>  <span data-ttu-id="792ed-125">它应词法范围内使用。</span><span class="sxs-lookup"><span data-stu-id="792ed-125">It should be used within a lexical scope.</span></span>  <span data-ttu-id="792ed-126">下面的示例将启动线程来处理工作队列中的项。</span><span class="sxs-lookup"><span data-stu-id="792ed-126">The following example launches threads to process items in a work queue.</span></span>  <span data-ttu-id="792ed-127">启动每个线程的可用内存资源进行检查，使用<xref:System.Runtime.MemoryFailPoint>。</span><span class="sxs-lookup"><span data-stu-id="792ed-127">Before each thread is launched, the available memory resources are checked using <xref:System.Runtime.MemoryFailPoint>.</span></span>  <span data-ttu-id="792ed-128">如果引发异常，main 方法等待，直到启动下一个线程前的可用内存。</span><span class="sxs-lookup"><span data-stu-id="792ed-128">If an exception is thrown, the main method waits until memory is available before launching the next thread.</span></span>  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">
      <span data-ttu-id="792ed-129">用于调用非托管的代码。</span>
      <span class="sxs-lookup">
        <span data-stu-id="792ed-129">for calling unmanaged code.</span>
      </span>
      <span data-ttu-id="792ed-130">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
      <span class="sxs-lookup">
        <span data-stu-id="792ed-130">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
      </span>
      <span data-ttu-id="792ed-131">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span>
      <span class="sxs-lookup">
        <span data-stu-id="792ed-131">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span>
      </span>
    </permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">
          <span data-ttu-id="792ed-132">需要的内存大小（以兆字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="792ed-132">The required memory size, in megabytes.</span>
          </span>
          <span data-ttu-id="792ed-133">这必须是一正值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="792ed-133">This must be a positive value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="792ed-134">初始化 <see cref="T:System.Runtime.MemoryFailPoint" /> 类的新实例，指定成功执行所需的内存量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="792ed-134">Initializes a new instance of the <see cref="T:System.Runtime.MemoryFailPoint" /> class, specifying the amount of memory required for successful execution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="792ed-135">可以根据经验确定你的应用程序用于处理工作项的内存量。</span><span class="sxs-lookup"><span data-stu-id="792ed-135">The amount of memory used by your application to process a work item can be determined empirically.</span></span>  <span data-ttu-id="792ed-136">若要估计你的应用程序需要处理的请求的内存量，请考虑使用<xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType>方法，从而确定的内存可用之前和之后调用该方法处理工作项的数量。</span><span class="sxs-lookup"><span data-stu-id="792ed-136">To estimate the amount of memory your application needs to process a request, consider using the <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> method to determine the amount of memory available before and after calling the method that processes the work item.</span></span> <span data-ttu-id="792ed-137">请参阅<xref:System.Runtime.MemoryFailPoint>有关代码示例来动态确定的值的类`sizeInMegabytes`参数。</span><span class="sxs-lookup"><span data-stu-id="792ed-137">See the <xref:System.Runtime.MemoryFailPoint> class for a code example that dynamically determines the value for the `sizeInMegabytes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="792ed-138">下面的示例演示如何确定某个方法要求在执行时的内存量。</span><span class="sxs-lookup"><span data-stu-id="792ed-138">The following example demonstrates how to determine the amount of memory a method requires when executing.</span></span> <span data-ttu-id="792ed-139">此代码示例摘自更大的示例为提供<xref:System.Runtime.MemoryFailPoint>类。</span><span class="sxs-lookup"><span data-stu-id="792ed-139">This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.</span></span>  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="792ed-140">指定的内存大小为负数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="792ed-140">The specified memory size is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.InsufficientMemoryException">
          <span data-ttu-id="792ed-141">没有足够的内存来开始执行由门保护的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="792ed-141">There is insufficient memory to begin execution of the code protected by the gate.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="792ed-142">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="792ed-142">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="792ed-143">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="792ed-143">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="792ed-144">释放由 <see cref="T:System.Runtime.MemoryFailPoint" /> 使用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="792ed-144">Releases all resources used by the <see cref="T:System.Runtime.MemoryFailPoint" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="792ed-145">在完成使用 <xref:System.Runtime.MemoryFailPoint.Dispose%2A> 后，应调用 <xref:System.Runtime.MemoryFailPoint>。</span><span class="sxs-lookup"><span data-stu-id="792ed-145">Call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> when you are finished using the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="792ed-146"><xref:System.Runtime.MemoryFailPoint.Dispose%2A> 方法使 <xref:System.Runtime.MemoryFailPoint> 处于不可用状态。</span><span class="sxs-lookup"><span data-stu-id="792ed-146">The <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method leaves the <xref:System.Runtime.MemoryFailPoint> in an unusable state.</span></span> <span data-ttu-id="792ed-147">在调用<xref:System.Runtime.MemoryFailPoint>，必须释放对所有引用<xref:System.Runtime.MemoryFailPoint>以便垃圾回收器才能回收的内存，<xref:System.Runtime.MemoryFailPoint>占用。</span><span class="sxs-lookup"><span data-stu-id="792ed-147">After calling <xref:System.Runtime.MemoryFailPoint>, you must release all references to the <xref:System.Runtime.MemoryFailPoint> so the garbage collector can reclaim the memory that the <xref:System.Runtime.MemoryFailPoint> was occupying.</span></span> <span data-ttu-id="792ed-148">有关详细信息，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="792ed-148">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="792ed-149">每次释放对 <xref:System.Runtime.MemoryFailPoint.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Runtime.MemoryFailPoint>。</span><span class="sxs-lookup"><span data-stu-id="792ed-149">Always call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> before you release your last reference to the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="792ed-150">否则，在垃圾回收器调用 <xref:System.Runtime.MemoryFailPoint> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="792ed-150">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.MemoryFailPoint> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="792ed-151">确保垃圾回收器回收 <see cref="T:System.Runtime.MemoryFailPoint" /> 对象时释放资源并执行其他清理操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="792ed-151">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.MemoryFailPoint" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="792ed-152">垃圾回收器调用<xref:System.Runtime.MemoryFailPoint.Finalize%2A>方法时的当前对象已准备好完成。</span><span class="sxs-lookup"><span data-stu-id="792ed-152">The garbage collector calls the <xref:System.Runtime.MemoryFailPoint.Finalize%2A> method when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>