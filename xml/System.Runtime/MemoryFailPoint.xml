<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0a9c2330efff55bad4b528703d46cb25d46c27bf" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58714173" /></Metadata><TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="4912a-101">执行一个操作之前检查是否有足够的内存资源。</span><span class="sxs-lookup"><span data-stu-id="4912a-101">Checks for sufficient memory resources before executing an operation.</span></span> <span data-ttu-id="4912a-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="4912a-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="4912a-103">此类用于高级开发。</span><span class="sxs-lookup"><span data-stu-id="4912a-103">This class is intended for use in advanced development.</span></span>  
  
 <span data-ttu-id="4912a-104">创建实例的<xref:System.Runtime.MemoryFailPoint>类创建内存入口。</span><span class="sxs-lookup"><span data-stu-id="4912a-104">Creating an instance of the <xref:System.Runtime.MemoryFailPoint> class creates a memory gate.</span></span> <span data-ttu-id="4912a-105">启动一个需要大量内存的活动之前，内存入口检查有足够的资源。</span><span class="sxs-lookup"><span data-stu-id="4912a-105">A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</span></span> <span data-ttu-id="4912a-106">在检查失败会导致<xref:System.InsufficientMemoryException>所引发异常。</span><span class="sxs-lookup"><span data-stu-id="4912a-106">Failing the check results in an <xref:System.InsufficientMemoryException> exception being thrown.</span></span> <span data-ttu-id="4912a-107">此异常可防止从正在启动的操作，并减少因发生故障的可能性缺少资源。</span><span class="sxs-lookup"><span data-stu-id="4912a-107">This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</span></span> <span data-ttu-id="4912a-108">利用此，您会降低性能，以避免<xref:System.OutOfMemoryException>异常并在代码中的任意位置中的异常处理不当，可能会导致任何状态损坏。</span><span class="sxs-lookup"><span data-stu-id="4912a-108">This enables you decrease performance to avoid an <xref:System.OutOfMemoryException> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4912a-109">此类型实现<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="4912a-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="4912a-110">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="4912a-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="4912a-111">若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</span><span class="sxs-lookup"><span data-stu-id="4912a-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="4912a-112">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="4912a-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="4912a-113">有关详细信息，请参阅中的"使用对象实现 IDisposable"一节<xref:System.IDisposable>接口主题。</span><span class="sxs-lookup"><span data-stu-id="4912a-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="4912a-114">通过引发<xref:System.InsufficientMemoryException>异常，应用程序可以区分操作将不能完成的评估和部分已完成的操作可能已破坏应用程序状态。</span><span class="sxs-lookup"><span data-stu-id="4912a-114">By throwing an <xref:System.InsufficientMemoryException> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</span></span> <span data-ttu-id="4912a-115">这允许应用程序在保守式升级策略，这可能需要卸载当前的频率减少<xref:System.AppDomain>或回收进程。</span><span class="sxs-lookup"><span data-stu-id="4912a-115">This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <xref:System.AppDomain> or recycling the process.</span></span>  
  
 <span data-ttu-id="4912a-116"><xref:System.Runtime.MemoryFailPoint> 检查是否有足够的内存和连续虚拟地址空间均位于所有垃圾回收堆，并且还可能增加交换文件的大小。</span><span class="sxs-lookup"><span data-stu-id="4912a-116"><xref:System.Runtime.MemoryFailPoint> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</span></span>  <span data-ttu-id="4912a-117"><xref:System.Runtime.MemoryFailPoint> 使始终应使用的入口，但调用方的生存期内长期内存可用性的任何保证<xref:System.Runtime.MemoryFailPoint.Dispose%2A>方法，以确保与关联的资源<xref:System.Runtime.MemoryFailPoint>发布。</span><span class="sxs-lookup"><span data-stu-id="4912a-117"><xref:System.Runtime.MemoryFailPoint> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method to ensure that resources associated with <xref:System.Runtime.MemoryFailPoint> are released.</span></span>  
  
 <span data-ttu-id="4912a-118">若要使用的内存入口，必须创建<xref:System.Runtime.MemoryFailPoint>对象，并指定兆字节 (MB) 的内存数量的下一步操作应使用。</span><span class="sxs-lookup"><span data-stu-id="4912a-118">To use a memory gate, you must create a <xref:System.Runtime.MemoryFailPoint> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</span></span> <span data-ttu-id="4912a-119">如果没有足够内存可用，<xref:System.InsufficientMemoryException>引发异常。</span><span class="sxs-lookup"><span data-stu-id="4912a-119">If enough memory is not available, an <xref:System.InsufficientMemoryException> exception is thrown.</span></span>  
  
 <span data-ttu-id="4912a-120">构造函数的参数必须为正整数。</span><span class="sxs-lookup"><span data-stu-id="4912a-120">The parameter of the constructor must be a positive integer.</span></span> <span data-ttu-id="4912a-121">负值引发<xref:System.ArgumentOutOfRangeException>异常。</span><span class="sxs-lookup"><span data-stu-id="4912a-121">A negative value raises an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 <span data-ttu-id="4912a-122"><xref:System.Runtime.MemoryFailPoint> 在 16 MB 的粒度进行操作。</span><span class="sxs-lookup"><span data-stu-id="4912a-122"><xref:System.Runtime.MemoryFailPoint> operates at a granularity of 16 MB.</span></span> <span data-ttu-id="4912a-123">任何小于 16 MB 的值作为 16 MB，处理和其他值被视为下一个最大 16 MB 的倍数。</span><span class="sxs-lookup"><span data-stu-id="4912a-123">Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4912a-124"><xref:System.Runtime.MemoryFailPoint> 使应用程序变慢本身以避免耗尽内存损坏的方式。</span><span class="sxs-lookup"><span data-stu-id="4912a-124"><xref:System.Runtime.MemoryFailPoint> enables an application to slow itself to avoid running out of memory in a corrupting manner.</span></span>  <span data-ttu-id="4912a-125">它应词法范围内使用。</span><span class="sxs-lookup"><span data-stu-id="4912a-125">It should be used within a lexical scope.</span></span>  <span data-ttu-id="4912a-126">下面的示例将启动线程来处理工作队列中的项。</span><span class="sxs-lookup"><span data-stu-id="4912a-126">The following example launches threads to process items in a work queue.</span></span>  <span data-ttu-id="4912a-127">每个线程启动之前，请使用检查可用的内存资源<xref:System.Runtime.MemoryFailPoint>。</span><span class="sxs-lookup"><span data-stu-id="4912a-127">Before each thread is launched, the available memory resources are checked using <xref:System.Runtime.MemoryFailPoint>.</span></span>  <span data-ttu-id="4912a-128">如果引发异常，main 方法等待，直到有可用的内存启动下一个线程之前。</span><span class="sxs-lookup"><span data-stu-id="4912a-128">If an exception is thrown, the main method waits until memory is available before launching the next thread.</span></span>  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="4912a-129">用于调用非托管的代码。</span><span class="sxs-lookup"><span data-stu-id="4912a-129">for calling unmanaged code.</span></span> <span data-ttu-id="4912a-130">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span><span class="sxs-lookup"><span data-stu-id="4912a-130">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span> <span data-ttu-id="4912a-131">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span><span class="sxs-lookup"><span data-stu-id="4912a-131">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span></span></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes"><span data-ttu-id="4912a-132">需要的内存大小（以兆字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="4912a-132">The required memory size, in megabytes.</span></span> <span data-ttu-id="4912a-133">这必须是一正值。</span><span class="sxs-lookup"><span data-stu-id="4912a-133">This must be a positive value.</span></span></param>
        <summary><span data-ttu-id="4912a-134">初始化 <see cref="T:System.Runtime.MemoryFailPoint" /> 类的新实例，指定成功执行所需的内存量。</span><span class="sxs-lookup"><span data-stu-id="4912a-134">Initializes a new instance of the <see cref="T:System.Runtime.MemoryFailPoint" /> class, specifying the amount of memory required for successful execution.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4912a-135">可以根据经验确定你的应用程序用来处理工作项的内存量。</span><span class="sxs-lookup"><span data-stu-id="4912a-135">The amount of memory used by your application to process a work item can be determined empirically.</span></span>  <span data-ttu-id="4912a-136">若要估算你的应用程序需要处理请求的内存量，请考虑使用<xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType>方法，以确定量的内存可用之前和之后调用的方法处理工作项。</span><span class="sxs-lookup"><span data-stu-id="4912a-136">To estimate the amount of memory your application needs to process a request, consider using the <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> method to determine the amount of memory available before and after calling the method that processes the work item.</span></span> <span data-ttu-id="4912a-137">请参阅<xref:System.Runtime.MemoryFailPoint>类的代码示例，动态确定的值为`sizeInMegabytes`参数。</span><span class="sxs-lookup"><span data-stu-id="4912a-137">See the <xref:System.Runtime.MemoryFailPoint> class for a code example that dynamically determines the value for the `sizeInMegabytes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4912a-138">下面的示例演示如何确定某个方法要求在执行时的内存量。</span><span class="sxs-lookup"><span data-stu-id="4912a-138">The following example demonstrates how to determine the amount of memory a method requires when executing.</span></span> <span data-ttu-id="4912a-139">此代码示例是为提供一个更大示例的一部分<xref:System.Runtime.MemoryFailPoint>类。</span><span class="sxs-lookup"><span data-stu-id="4912a-139">This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.</span></span>  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4912a-140">指定的内存大小为负数。</span><span class="sxs-lookup"><span data-stu-id="4912a-140">The specified memory size is negative.</span></span></exception>
        <exception cref="T:System.InsufficientMemoryException"><span data-ttu-id="4912a-141">没有足够的内存来开始执行由门保护的代码。</span><span class="sxs-lookup"><span data-stu-id="4912a-141">There is insufficient memory to begin execution of the code protected by the gate.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="4912a-142">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="4912a-142">requires full trust for the immediate caller.</span></span> <span data-ttu-id="4912a-143">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="4912a-143">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4912a-144">释放由 <see cref="T:System.Runtime.MemoryFailPoint" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="4912a-144">Releases all resources used by the <see cref="T:System.Runtime.MemoryFailPoint" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4912a-145">在完成使用 <xref:System.Runtime.MemoryFailPoint.Dispose%2A> 后，应调用 <xref:System.Runtime.MemoryFailPoint>。</span><span class="sxs-lookup"><span data-stu-id="4912a-145">Call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> when you are finished using the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="4912a-146"><xref:System.Runtime.MemoryFailPoint.Dispose%2A> 方法使 <xref:System.Runtime.MemoryFailPoint> 处于不可用状态。</span><span class="sxs-lookup"><span data-stu-id="4912a-146">The <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method leaves the <xref:System.Runtime.MemoryFailPoint> in an unusable state.</span></span> <span data-ttu-id="4912a-147">在调用<xref:System.Runtime.MemoryFailPoint>，必须释放对所有引用<xref:System.Runtime.MemoryFailPoint>这样垃圾回收器才能收回内存的<xref:System.Runtime.MemoryFailPoint>占用。</span><span class="sxs-lookup"><span data-stu-id="4912a-147">After calling <xref:System.Runtime.MemoryFailPoint>, you must release all references to the <xref:System.Runtime.MemoryFailPoint> so the garbage collector can reclaim the memory that the <xref:System.Runtime.MemoryFailPoint> was occupying.</span></span> <span data-ttu-id="4912a-148">有关详细信息，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)并[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="4912a-148">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4912a-149">每次释放对 <xref:System.Runtime.MemoryFailPoint.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Runtime.MemoryFailPoint>。</span><span class="sxs-lookup"><span data-stu-id="4912a-149">Always call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> before you release your last reference to the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="4912a-150">否则，在垃圾回收器调用 <xref:System.Runtime.MemoryFailPoint> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="4912a-150">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.MemoryFailPoint> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4912a-151">确保垃圾回收器回收 <see cref="T:System.Runtime.MemoryFailPoint" /> 对象时释放资源并执行其他清理操作。</span><span class="sxs-lookup"><span data-stu-id="4912a-151">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.MemoryFailPoint" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4912a-152">垃圾回收器调用<xref:System.Runtime.MemoryFailPoint.Finalize%2A>方法时当前对象是即将完成。</span><span class="sxs-lookup"><span data-stu-id="4912a-152">The garbage collector calls the <xref:System.Runtime.MemoryFailPoint.Finalize%2A> method when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>