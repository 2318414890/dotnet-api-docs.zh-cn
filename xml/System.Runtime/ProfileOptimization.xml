<Type Name="ProfileOptimization" FullName="System.Runtime.ProfileOptimization">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9354708414c54e47f133ae136ea4d54b7bf4bc94" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48692052" /></Metadata><TypeSignature Language="C#" Value="public static class ProfileOptimization" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileOptimization extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ProfileOptimization" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileOptimization" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileOptimization abstract sealed" />
  <TypeSignature Language="F#" Value="type ProfileOptimization = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提高应用程序在应用范围的启动性能需要通过 just-in-time (JIT) 编辑器根据以前版本中生成的配置文件来执行那么可能要执行的背景编辑方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  配置文件优化需要多核计算机。 方法将忽略其他计算机上。  
  
 每次启动应用程序域中的配置文件优化读取在以前的使用过程中创建的配置文件。 在配置文件中的信息用于指导通过识别最有可能在启动期间执行的方法的后台编译。 多核计算机上，这样会增加的可能性的一种方法是已编译时需要它，以便主应用程序线程不能调用 JIT 编译器。  
  
 配置文件会覆盖在每次使用，因此它始终包含在启动过程的使用方法的最新信息。  
  
 优化配置文件不会限制为应用程序域启动。 它们可以用于将需要大量使用 JIT 编译器的任何活动。 您可以维护应用程序域的多个配置文件，以便每个此类活动有自己的配置文件。  
  
 若要在应用程序域中使用优化配置文件，必须调用<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>方法并指定存储配置文件的文件夹。 文件夹必须已经存在。 若要开始使用配置文件，请调用<xref:System.Runtime.ProfileOptimization.StartProfile%2A>方法和指定的配置文件的文件的名称。 如果以前未录制该文件，它会创建第一次使用。 创建一个配置文件没有性能权益第一个时间。  
  
 配置优化不会更改方法的执行顺序。 在后台线程中; 不执行方法如果编译但永远不会调用一个方法，它只是不使用。 如果配置文件已损坏或无法写入指定的文件夹 （例如，因为该文件夹不存在），而无需优化分析继续执行程序。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetProfileRoot">
      <MemberSignature Language="C#" Value="public static void SetProfileRoot (string directoryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProfileRoot(string directoryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProfileRoot (directoryPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProfileRoot(System::String ^ directoryPath);" />
      <MemberSignature Language="F#" Value="static member SetProfileRoot : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.SetProfileRoot directoryPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryPath">到存储配置文件用于当前应用程序域的的文件夹的完整路径。</param>
        <summary>启用当前应用程序域的优化配置，并设置存储优化配置文件的文件夹。 在单核计算机上，此方法被忽略。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在调用之前，必须调用此方法<xref:System.Runtime.ProfileOptimization.StartProfile%2A>第一次当前的应用程序域中的方法。 如果调用<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>不止一次在同一个应用程序域中，第一个之后的所有调用将被都忽略。  
  
 必须已存在指定的文件夹。 如果不存在，调用此方法不会创建它，并没有分析。  
  
 不具有多个内核的计算机上，此方法将被忽略。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
      </Docs>
    </Member>
    <Member MemberName="StartProfile">
      <MemberSignature Language="C#" Value="public static void StartProfile (string profile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartProfile(string profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.StartProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartProfile (profile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartProfile(System::String ^ profile);" />
      <MemberSignature Language="F#" Value="static member StartProfile : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.StartProfile profile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="profile">要使用的配置文件的文件名。</param>
        <summary>启动方法的实时 (JIT) 编译，这些方法记录在后台线程上的指定配置文件中。 开始记录当前方法使用的过程，之后复盖指定的配置文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的配置文件中指定的文件夹存在<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>方法，它包含的信息用于确定方法在后台线程将编译的顺序。 <xref:System.Runtime.ProfileOptimization.StartProfile%2A>方法将创建该配置文件，如果它尚不存在，并启动方法使用的记录。  
  
 记录实际调用的方法，而不考虑它们是否编译后台线程上或在主应用程序的线程。 一种方法是在主应用程序线程上编译，如果应用程序需要调用它之前的后台线程已编译。  
  
 执行该录制的代码跟踪的方法将被编译，包括这两个后台线程上和在主线程上编译的方法的速率。 如果速率低于预先确定的级别，录制停止。 如果 JIT 编译的速率超过预先确定的上限，也会停止录制。  
  
 如果<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>不为当前的应用程序域中，调用方法或如果计算机不具有多个内核，<xref:System.Runtime.ProfileOptimization.StartProfile%2A>方法不起作用。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
      </Docs>
    </Member>
  </Members>
</Type>