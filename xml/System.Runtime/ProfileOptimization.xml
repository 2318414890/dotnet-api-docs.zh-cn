<Type Name="ProfileOptimization" FullName="System.Runtime.ProfileOptimization">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bd86c9e8585771817dff9c403cde415163613389" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30488271" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ProfileOptimization" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileOptimization extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ProfileOptimization" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileOptimization" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileOptimization abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="3c882-101">通过基于以前编译中创建的配置文件，执行可能执行的方法的后台编译，提高了需要实时 (JIT) 编译器的应用程序中应用程序域的启动性能。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3c882-101">Improves the startup performance of application domains in applications that require the just-in-time (JIT) compiler by performing background compilation of methods that are likely to be executed, based on profiles created during previous compilations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="3c882-102">配置文件优化需要多核计算机。</span><span class="sxs-lookup"><span data-stu-id="3c882-102">Profile optimization requires a multicore computer.</span></span> <span data-ttu-id="3c882-103">方法将忽略在其他计算机上。</span><span class="sxs-lookup"><span data-stu-id="3c882-103">The methods are ignored on other computers.</span></span>  
  
 <span data-ttu-id="3c882-104">每次启动应用程序域中的配置文件优化读取已在以前的使用过程中创建的配置文件。</span><span class="sxs-lookup"><span data-stu-id="3c882-104">Each time you initiate profile optimization in an application domain, the profile that was created during the previous use is read.</span></span> <span data-ttu-id="3c882-105">配置文件中的信息用于标识最有可能在启动期间会执行的方法来指引后台编译。</span><span class="sxs-lookup"><span data-stu-id="3c882-105">The information in the profile is used to guide background compilation by identifying the methods that are most likely to be executed during startup.</span></span> <span data-ttu-id="3c882-106">在多核计算机上这样增加了一种方法已的可能性编译的以便不需要调用 JIT 编译器的主应用程序线程，它就所需的时间。</span><span class="sxs-lookup"><span data-stu-id="3c882-106">On multicore computers, this increases the chances that a method is already compiled by the time it is needed so that the main application thread does not have to call the JIT compiler.</span></span>  
  
 <span data-ttu-id="3c882-107">每次使用的配置文件会覆盖，因此它始终包含有关哪些可以在启动过程中使用方法的最新信息。</span><span class="sxs-lookup"><span data-stu-id="3c882-107">The profile file is overwritten on each use, so it always contains the most recent information about which methods are used during startup.</span></span>  
  
 <span data-ttu-id="3c882-108">优化配置文件并不限于应用程序域启动。</span><span class="sxs-lookup"><span data-stu-id="3c882-108">Optimization profiles are not restricted to application domain startup.</span></span> <span data-ttu-id="3c882-109">它们可以用于将需要使用大量的 JIT 编译器的任何活动。</span><span class="sxs-lookup"><span data-stu-id="3c882-109">They can be used for any activity that will require heavy use of the JIT compiler.</span></span> <span data-ttu-id="3c882-110">你可以维护应用程序域的多个配置文件，以便每个此类活动具有自己的配置文件。</span><span class="sxs-lookup"><span data-stu-id="3c882-110">You can maintain multiple profiles for an application domain so that each such activity has its own profile.</span></span>  
  
 <span data-ttu-id="3c882-111">若要使用应用程序域中的优化配置文件，必须调用<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>方法并指定存储配置文件的文件夹。</span><span class="sxs-lookup"><span data-stu-id="3c882-111">To use optimization profiles in an application domain, you must call the <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> method and specify the folder where profiles are stored.</span></span> <span data-ttu-id="3c882-112">文件夹必须已存在。</span><span class="sxs-lookup"><span data-stu-id="3c882-112">The folder must already exist.</span></span> <span data-ttu-id="3c882-113">若要开始使用配置文件，调用<xref:System.Runtime.ProfileOptimization.StartProfile%2A>方法并指定配置文件的文件名称。</span><span class="sxs-lookup"><span data-stu-id="3c882-113">To begin using a profile, call the <xref:System.Runtime.ProfileOptimization.StartProfile%2A> method and specify the file name of the profile.</span></span> <span data-ttu-id="3c882-114">如果不以前记录的文件，则创建第一次使用它。</span><span class="sxs-lookup"><span data-stu-id="3c882-114">If the file was not recorded previously, it is created on first use.</span></span> <span data-ttu-id="3c882-115">创建一个配置文件没有性能优势第一个时间。</span><span class="sxs-lookup"><span data-stu-id="3c882-115">There is no performance benefit the first time a profile is created.</span></span>  
  
 <span data-ttu-id="3c882-116">配置文件优化不会更改方法的执行顺序。</span><span class="sxs-lookup"><span data-stu-id="3c882-116">Profile optimization does not change the order in which methods are executed.</span></span> <span data-ttu-id="3c882-117">在后台线程，则不执行方法如果方法是编译，但永远不会调用，它是只是不使用。</span><span class="sxs-lookup"><span data-stu-id="3c882-117">Methods are not executed on the background thread; if a method is compiled but never called, it is simply not used.</span></span> <span data-ttu-id="3c882-118">如果配置文件已损坏或无法写入指定的文件夹 （例如，因为文件夹不存在），程序继续执行不含优化分析。</span><span class="sxs-lookup"><span data-stu-id="3c882-118">If a profile file is corrupt or cannot be written to the specified folder (for example, because the folder does not exist), program execution continues without optimization profiling.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetProfileRoot">
      <MemberSignature Language="C#" Value="public static void SetProfileRoot (string directoryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProfileRoot(string directoryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProfileRoot (directoryPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProfileRoot(System::String ^ directoryPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryPath">
          <span data-ttu-id="3c882-119">指向某个文件夹的完整路径，其中存储了用于当前应用程序域的配置文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c882-119">The full path to the folder where profile files are stored for the current application domain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3c882-120">启用当前应用程序域的优化配置，并设置存储优化配置文件的文件夹。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c882-120">Enables optimization profiling for the current application domain, and sets the folder where the optimization profile files are stored.</span>
          </span>
          <span data-ttu-id="3c882-121">在单核计算机上，此方法被忽略。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c882-121">On a single-core computer, the method is ignored.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c882-122">你在调用之前，必须调用此方法<xref:System.Runtime.ProfileOptimization.StartProfile%2A>第一次当前的应用程序域中的方法。</span><span class="sxs-lookup"><span data-stu-id="3c882-122">You must call this method before you call the <xref:System.Runtime.ProfileOptimization.StartProfile%2A> method for the first time in the current application domain.</span></span> <span data-ttu-id="3c882-123">如果调用<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>不止一次在相同的应用程序域中，第一个之后的所有调用将被都忽略。</span><span class="sxs-lookup"><span data-stu-id="3c882-123">If you call <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> more than once in the same application domain, all calls after the first are ignored.</span></span>  
  
 <span data-ttu-id="3c882-124">指定的文件夹必须已存在。</span><span class="sxs-lookup"><span data-stu-id="3c882-124">The specified folder must already exist.</span></span> <span data-ttu-id="3c882-125">如果不存在，调用此方法不会创建它，也没有分析。</span><span class="sxs-lookup"><span data-stu-id="3c882-125">If it does not exist, calling this method does not create it, and no profiling occurs.</span></span>  
  
 <span data-ttu-id="3c882-126">在计算机上不具有多个内核，此方法将被忽略。</span><span class="sxs-lookup"><span data-stu-id="3c882-126">On computers that do not have multiple cores, this method is ignored.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="3c882-127">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c882-127">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="3c882-128">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c882-128">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="StartProfile">
      <MemberSignature Language="C#" Value="public static void StartProfile (string profile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartProfile(string profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.StartProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartProfile (profile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartProfile(System::String ^ profile);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="profile">
          <span data-ttu-id="3c882-129">要使用的配置文件的文件名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c882-129">The file name of the profile to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3c882-130">启动方法的实时 (JIT) 编译，这些方法记录在后台线程上的指定配置文件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c882-130">Starts just-in-time (JIT) compilation of the methods that were previously recorded in the specified profile file, on a background thread.</span>
          </span>
          <span data-ttu-id="3c882-131">开始记录当前方法的使用，此记录过程之后将覆盖指定的配置文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c882-131">Starts the process of recording current method use, which later overwrites the specified profile file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c882-132">如果指定的配置文件中指定的文件夹存在<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>方法，它包含的信息用于确定方法在后台线程将编译的顺序。</span><span class="sxs-lookup"><span data-stu-id="3c882-132">If the specified profile exists in the folder specified by the <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> method, the information it contains is used to determine the order in which methods are compiled on the background thread.</span></span> <span data-ttu-id="3c882-133"><xref:System.Runtime.ProfileOptimization.StartProfile%2A>方法创建配置文件，如果它尚不存在，并启动方法使用该录制。</span><span class="sxs-lookup"><span data-stu-id="3c882-133">The <xref:System.Runtime.ProfileOptimization.StartProfile%2A> method creates the profile if it does not already exist, and initiates the recording of method use.</span></span>  
  
 <span data-ttu-id="3c882-134">实际调用的方法将记录，而不考虑它们是否已编译的后台线程上或在主应用程序的线程。</span><span class="sxs-lookup"><span data-stu-id="3c882-134">Only methods that are actually called are recorded, regardless of whether they were compiled on the background thread or on the main application thread.</span></span> <span data-ttu-id="3c882-135">如果应用程序需要调用它之前的后台线程已编译它，方法已编译的主应用程序线程上。</span><span class="sxs-lookup"><span data-stu-id="3c882-135">A method is compiled on the main application thread if the application needs to call it before the background thread has compiled it.</span></span>  
  
 <span data-ttu-id="3c882-136">执行该录制的代码跟踪从该处进行编译的方法，包括这两个的后台线程上和主线程上进行编译的方法的速率。</span><span class="sxs-lookup"><span data-stu-id="3c882-136">The code that performs the recording tracks the rate at which methods are compiled, including methods that are compiled on both the background thread and on the main thread.</span></span> <span data-ttu-id="3c882-137">当速率低于预先确定的级别，记录将停止。</span><span class="sxs-lookup"><span data-stu-id="3c882-137">When the rate falls below a predetermined level, recording stops.</span></span> <span data-ttu-id="3c882-138">如果 JIT 编译的比率超过预先确定的上限，还将停止录制。</span><span class="sxs-lookup"><span data-stu-id="3c882-138">Recording also stops if the rate of JIT compilation exceeds a predetermined upper limit.</span></span>  
  
 <span data-ttu-id="3c882-139">如果<xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>不针对当前的应用程序域中，调用方法或如果计算机不具有多个核心，<xref:System.Runtime.ProfileOptimization.StartProfile%2A>方法不起作用。</span><span class="sxs-lookup"><span data-stu-id="3c882-139">If the <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> method has not been called for the current application domain, or if the computer does not have multiple cores, the <xref:System.Runtime.ProfileOptimization.StartProfile%2A> method has no effect.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="3c882-140">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c882-140">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="3c882-141">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c882-141">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>