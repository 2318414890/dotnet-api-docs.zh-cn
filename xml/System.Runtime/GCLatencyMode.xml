<Type Name="GCLatencyMode" FullName="System.Runtime.GCLatencyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a3fe4af8f46fdfddd1053848c7e2164d87fd06f7" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37466461" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum GCLatencyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed GCLatencyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.GCLatencyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum GCLatencyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class GCLatencyMode" />
  <TypeSignature Language="F#" Value="type GCLatencyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>调整垃圾收集器侵入应用程序的时间。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以通过设置应用程序中调整侵入性的垃圾回收<xref:System.Runtime.GCSettings.LatencyMode%2A>属性设置为任何<xref:System.Runtime.GCLatencyMode>NoGCRegion 以外的枚举值。 您还可以通过检索确定垃圾回收器的当前滞后时间模式<xref:System.Runtime.GCSettings.LatencyMode%2A?displayProperty=nameWithType>属性值。  
  
 请参阅[滞后时间模式](~/docs/standard/garbage-collection/latency.md)有关垃圾回收的运行时配置设置如何影响此枚举的默认值的讨论。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Batch">
      <MemberSignature Language="C#" Value="Batch" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.GCLatencyMode Batch = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.GCLatencyMode.Batch" />
      <MemberSignature Language="VB.NET" Value="Batch" />
      <MemberSignature Language="C++ CLI" Value="Batch" />
      <MemberSignature Language="F#" Value="Batch = 0" Usage="System.Runtime.GCLatencyMode.Batch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLatencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>在批调用中禁用垃圾回收并发，并回收对象。 这是最高级别的侵入模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此模式适用于最大吞吐量，但要牺牲响应能力。  
  
 此模式重写运行时配置设置。 如果启用，则切换为批处理模式可以防止任何进一步的并发集合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interactive">
      <MemberSignature Language="C#" Value="Interactive" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.GCLatencyMode Interactive = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.GCLatencyMode.Interactive" />
      <MemberSignature Language="VB.NET" Value="Interactive" />
      <MemberSignature Language="C++ CLI" Value="Interactive" />
      <MemberSignature Language="F#" Value="Interactive = 1" Usage="System.Runtime.GCLatencyMode.Interactive" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLatencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>在应用程序运行时启用垃圾回收并发，并回收对象。 这是工作站上垃圾回收的默认模式，并且较 <see cref="F:System.Runtime.GCLatencyMode.Batch" /> 少受侵入。 它可以平衡响应性和吞吐量。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此模式相当于将并发执行的工作站上垃圾回收。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowLatency">
      <MemberSignature Language="C#" Value="LowLatency" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.GCLatencyMode LowLatency = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.GCLatencyMode.LowLatency" />
      <MemberSignature Language="VB.NET" Value="LowLatency" />
      <MemberSignature Language="C++ CLI" Value="LowLatency" />
      <MemberSignature Language="F#" Value="LowLatency = 2" Usage="System.Runtime.GCLatencyMode.LowLatency" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLatencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>启用回收对象时比较保守的垃圾回收。 仅在系统遇到内存压力时才发生完全回收，而通常情况下发生 0 代和 1 代回收</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此模式下不可用的服务器垃圾回收器。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoGCRegion">
      <MemberSignature Language="C#" Value="NoGCRegion" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.GCLatencyMode NoGCRegion = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.GCLatencyMode.NoGCRegion" />
      <MemberSignature Language="VB.NET" Value="NoGCRegion" />
      <MemberSignature Language="C++ CLI" Value="NoGCRegion" />
      <MemberSignature Language="F#" Value="NoGCRegion = 4" Usage="System.Runtime.GCLatencyMode.NoGCRegion" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLatencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>指示当应用程序正在执行关键路径时挂起垃圾回收。  
  
 <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" /> 是一个只读值；也就是说，您不能将 <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" /> 值分配给 <see cref="P:System.Runtime.GCSettings.LatencyMode" /> 属性。 通过调用 <see cref="Overload:System.GC.TryStartNoGCRegion" /> 方法指定无 GC 区域延迟模式，并通过调用 <see cref="M:System.GC.EndNoGCRegion" /> 方法终止该模式。</summary>
      </Docs>
    </Member>
    <Member MemberName="SustainedLowLatency">
      <MemberSignature Language="C#" Value="SustainedLowLatency" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.GCLatencyMode SustainedLowLatency = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.GCLatencyMode.SustainedLowLatency" />
      <MemberSignature Language="VB.NET" Value="SustainedLowLatency" />
      <MemberSignature Language="C++ CLI" Value="SustainedLowLatency" />
      <MemberSignature Language="F#" Value="SustainedLowLatency = 3" Usage="System.Runtime.GCLatencyMode.SustainedLowLatency" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLatencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>启用尝试减少延长时期的延迟的垃圾回收。 回收器尝试只执行生成 0、生成 1，以及并发只生成 2 个集合。 如果系统处于内存压力之下，则完整的阻碍性回收还是会出现。</summary>
      </Docs>
    </Member>
  </Members>
</Type>