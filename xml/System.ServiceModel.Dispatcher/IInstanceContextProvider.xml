<Type Name="IInstanceContextProvider" FullName="System.ServiceModel.Dispatcher.IInstanceContextProvider">
  <TypeSignature Language="C#" Value="public interface IInstanceContextProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceContextProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceContextProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceContextProvider" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="36104-101">实现以参与创建或选择 <see cref="T:System.ServiceModel.InstanceContext" /> 对象，特别是启用共享会话。</span><span class="sxs-lookup"><span data-stu-id="36104-101">Implement to participate in the creation or choosing of a <see cref="T:System.ServiceModel.InstanceContext" /> object, especially to enable shared sessions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36104-102">实现 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> 接口，以向系统提供相应的 <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> 对象。</span><span class="sxs-lookup"><span data-stu-id="36104-102">Implement the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> interface to provide the appropriate <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> object to the system.</span></span> <span data-ttu-id="36104-103">通常，实现此接口是为了支持共享会话、启用服务实例池、控制服务实例的生存期或将客户端之间的上下文分组。</span><span class="sxs-lookup"><span data-stu-id="36104-103">Typically, this interface is implemented to support shared sessions, enable service instance pooling, control lifetimes of service instances, or to group contexts among clients.</span></span>  
  
 <span data-ttu-id="36104-104">例如，若要实现共享，则可插入自定义 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider>，从而确定要进行关联的来自客户端的会话或调用和 <xref:System.ServiceModel.InstanceContext> 对象。</span><span class="sxs-lookup"><span data-stu-id="36104-104">For example, to implement sharing, insert a custom <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> to decide which session or call from a client is associated with which <xref:System.ServiceModel.InstanceContext> object.</span></span> <span data-ttu-id="36104-105">有关演示共享实例上下文示例，请参阅[InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)。</span><span class="sxs-lookup"><span data-stu-id="36104-105">For an example that demonstrates the sharing of instance contexts, see [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="36104-106">如果将 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> 插入 [!INCLUDE[indigo1](~/includes/indigo1-md.md)]，则控制 <xref:System.ServiceModel.InstanceContext> 对象的创建的常规属性（<xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> 属性）将不会选中，因此不会起任何作用。</span><span class="sxs-lookup"><span data-stu-id="36104-106">When an <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> is inserted into [!INCLUDE[indigo1](~/includes/indigo1-md.md)], the normal property that controls the creation of <xref:System.ServiceModel.InstanceContext> objects (the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property) is no longer checked and has no effect.</span></span>  
  
 <span data-ttu-id="36104-107">还有一种更为常见的机制，即 <xref:System.ServiceModel.InstanceContext>，您可以在创建 <xref:System.ServiceModel.InstanceContext> 对象时，利用该机制对其进行初始化（例如，将自定义扩展附加到每个 <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>）。</span><span class="sxs-lookup"><span data-stu-id="36104-107">A more generic mechanism by which you can initialize <xref:System.ServiceModel.InstanceContext> objects when created (for example, to attach custom extensions to each <xref:System.ServiceModel.InstanceContext>) is the <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExistingInstanceContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.InstanceContext GetExistingInstanceContext(class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::InstanceContext ^ GetExistingInstanceContext(System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="36104-108">传入消息。</span><span class="sxs-lookup"><span data-stu-id="36104-108">The incoming message.</span></span></param>
        <param name="channel"><span data-ttu-id="36104-109">接收消息的通道。</span><span class="sxs-lookup"><span data-stu-id="36104-109">The channel that received the message.</span></span></param>
        <summary><span data-ttu-id="36104-110">接收新消息时调用。</span><span class="sxs-lookup"><span data-stu-id="36104-110">Called when a new message is received.</span></span></summary>
        <returns><span data-ttu-id="36104-111">用于处理消息的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象；返回 <see langword="null" />，命令 WCF 创建新的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="36104-111">The <see cref="T:System.ServiceModel.InstanceContext" /> object that is used to process the message; return <see langword="null" /> to instruct WCF to create a new <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36104-112"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> 方法是在接收消息时调用的。</span><span class="sxs-lookup"><span data-stu-id="36104-112">The <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> method is called when a message is received.</span></span> <span data-ttu-id="36104-113">返回要用于消息处理的 <xref:System.ServiceModel.InstanceContext> 对象或 `null`。</span><span class="sxs-lookup"><span data-stu-id="36104-113">Return the <xref:System.ServiceModel.InstanceContext> object that you want to process the message, or `null`.</span></span> <span data-ttu-id="36104-114">情况下`null`，WCF 创建一个新<xref:System.ServiceModel.InstanceContext>消息，然后调用对象<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="36104-114">In the case of `null`, WCF creates a new <xref:System.ServiceModel.InstanceContext> object for the message and then calls the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> method.</span></span>  
  
 <span data-ttu-id="36104-115">如果您返回 `null`，则新的 <xref:System.ServiceModel.InstanceContext> 对象将遍历调节系统，并增加 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType> 的计数值。</span><span class="sxs-lookup"><span data-stu-id="36104-115">If you return `null`, the new <xref:System.ServiceModel.InstanceContext> object goes through the throttling system and increments the count of <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeInstanceContext">
      <MemberSignature Language="C#" Value="public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeInstanceContext(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeInstanceContext(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="36104-116">新的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="36104-116">The new <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <param name="message"><span data-ttu-id="36104-117">传入消息。</span><span class="sxs-lookup"><span data-stu-id="36104-117">The incoming message.</span></span></param>
        <param name="channel"><span data-ttu-id="36104-118">接收消息的通道。</span><span class="sxs-lookup"><span data-stu-id="36104-118">The channel that received the message.</span></span></param>
        <summary><span data-ttu-id="36104-119">当 <see langword="null" /> 从 <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /> 方法返回时调用。</span><span class="sxs-lookup"><span data-stu-id="36104-119">Called when <see langword="null" /> is returned from the <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36104-120">当 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> 返回 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> 并创建了新的 `null` 对象时，调用 <xref:System.ServiceModel.InstanceContext>。</span><span class="sxs-lookup"><span data-stu-id="36104-120"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> is called when <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> returns `null` and a new <xref:System.ServiceModel.InstanceContext> object is created.</span></span> <span data-ttu-id="36104-121">调用此方法是为了通知您创建了新的 <xref:System.ServiceModel.InstanceContext>。</span><span class="sxs-lookup"><span data-stu-id="36104-121">This method is called to notify you that a new <xref:System.ServiceModel.InstanceContext> has been created.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdle(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="36104-122">被视为空闲的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="36104-122">The <see cref="T:System.ServiceModel.InstanceContext" /> object that is considered idle.</span></span></param>
        <summary><span data-ttu-id="36104-123">当 <see cref="T:System.ServiceModel.InstanceContext" /> 活动完成时调用，以使实施者能阻止 <see cref="T:System.ServiceModel.InstanceContext" /> 的回收。</span><span class="sxs-lookup"><span data-stu-id="36104-123">Called when all <see cref="T:System.ServiceModel.InstanceContext" /> activities have completed to enable implementers to prevent the <see cref="T:System.ServiceModel.InstanceContext" /> from being recycled.</span></span></summary>
        <returns>
          <span data-ttu-id="36104-124">如果要关闭 [!INCLUDE[indigo1](~/includes/indigo1-md.md)]，并回收 <see cref="T:System.ServiceModel.InstanceContext" /> 对象，且要调整 <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" /> 的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="36104-124"><see langword="true" /> if [!INCLUDE[indigo1](~/includes/indigo1-md.md)] is to close and recycle the <see cref="T:System.ServiceModel.InstanceContext" /> object and adjust the value of <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36104-125"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> 有关如何关闭和回收空闲 WCF 时调用<xref:System.ServiceModel.InstanceContext>对象，以便您能够通知运行时是否要继续执行此操作。</span><span class="sxs-lookup"><span data-stu-id="36104-125"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> is called when WCF is about to close and recycle an idle <xref:System.ServiceModel.InstanceContext> object so that you can inform the runtime whether to continue doing so.</span></span>  
  
 <span data-ttu-id="36104-126">有关演示共享实例上下文示例，请参阅[InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)。</span><span class="sxs-lookup"><span data-stu-id="36104-126">For an example that demonstrates the sharing of instance contexts, see [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyIdle">
      <MemberSignature Language="C#" Value="public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyIdle(class System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyIdle(System::ServiceModel::Dispatcher::InstanceContextIdleCallback ^ callback, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="36104-127">通知 WCF <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> 对象的关闭和回收时间的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="36104-127">The <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> object that notifies WCF when the <see cref="T:System.ServiceModel.InstanceContext" /> object is to be closed and recycled.</span></span></param>
        <param name="instanceContext"><span data-ttu-id="36104-128">当前的 <see cref="T:System.ServiceModel.InstanceContext" />。</span><span class="sxs-lookup"><span data-stu-id="36104-128">The current <see cref="T:System.ServiceModel.InstanceContext" />.</span></span></param>
        <summary><span data-ttu-id="36104-129">当 <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> 方法返回 <see langword="false" /> 时调用，以使实施者能提供回调，从而通知 WCF <see cref="T:System.ServiceModel.InstanceContext" /> 对象的完成时间。</span><span class="sxs-lookup"><span data-stu-id="36104-129">Called when the <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> method returns <see langword="false" /> to enable implementers to provide a callback to notify WCF when the <see cref="T:System.ServiceModel.InstanceContext" /> object is finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36104-130"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A>方法调用时<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>方法返回`false`以使您能够提供的 WCF<xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType>对象，用于通知运行时，<xref:System.ServiceModel.InstanceContext>已完成其工作。</span><span class="sxs-lookup"><span data-stu-id="36104-130">The <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> method is called when the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> method returns `false` to enable you to provide WCF with a <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> object that you use to inform the runtime that the <xref:System.ServiceModel.InstanceContext> has finished its work.</span></span> <span data-ttu-id="36104-131">当<xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType>对象通知运行时，<xref:System.ServiceModel.InstanceContext>已完成其工作，将 WCF 调用<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>再一次。</span><span class="sxs-lookup"><span data-stu-id="36104-131">When the <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> object notifies the runtime that the <xref:System.ServiceModel.InstanceContext> has finished its work, WCF calls <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> once again.</span></span> <span data-ttu-id="36104-132">此循环将一直继续，直到 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> 返回 `true`，然后上下文被关闭并回收。</span><span class="sxs-lookup"><span data-stu-id="36104-132">This cycle continues until <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> returns `true` and the context is closed and recycled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>