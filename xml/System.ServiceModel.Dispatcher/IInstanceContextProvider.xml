<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IInstanceContextProvider.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d0aa99f55ad7d6609f503f36a43869a0e77c65cc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0aa99f55ad7d6609f503f36a43869a0e77c65cc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>Implement to participate in the creation or choosing of a <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object, especially to enable shared sessions.</source>
          <target state="translated">实现以参与创建或选择 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 对象，特别是启用共享会话。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> interface to provide the appropriate <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType&gt;</ph> object to the system.</source>
          <target state="translated">实现 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> 接口，以向系统提供相应的 <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>Typically, this interface is implemented to support shared sessions, enable service instance pooling, control lifetimes of service instances, or to group contexts among clients.</source>
          <target state="translated">通常，实现此接口是为了支持共享会话、启用服务实例池、控制服务实例的生存期或将客户端之间的上下文分组。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>For example, to implement sharing, insert a custom <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> to decide which session or call from a client is associated with which <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object.</source>
          <target state="translated">例如，若要实现共享，则可插入自定义 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph>，从而确定要进行关联的来自客户端的会话或调用和 <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>For an example that demonstrates the sharing of instance contexts, see <bpt id="p1">[</bpt>InstanceContextSharing<ept id="p1">](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)</ept>.</source>
          <target state="translated">有关演示共享实例上下文示例，请参阅<bpt id="p1">[</bpt>InstanceContextSharing<ept id="p1">](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)</ept>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> is inserted into <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph>, the normal property that controls the creation of <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> objects (the <ph id="ph4">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> property) is no longer checked and has no effect.</source>
          <target state="translated">如果将 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> 插入 <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph>，则控制 <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 对象的创建的常规属性（<ph id="ph4">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> 属性）将不会选中，因此不会起任何作用。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>A more generic mechanism by which you can initialize <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> objects when created (for example, to attach custom extensions to each <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>) is the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">还有一种更为常见的机制，即 <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>，您可以在创建 <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 对象时，利用该机制对其进行初始化（例如，将自定义扩展附加到每个 <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType&gt;</ph>）。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The incoming message.</source>
          <target state="translated">传入消息。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The channel that received the message.</source>
          <target state="translated">接收消息的通道。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>Called when a new message is received.</source>
          <target state="translated">接收新消息时调用。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object that is used to process the message; return <ph id="ph2">&lt;see langword="null" /&gt;</ph> to instruct <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> to create a new <ph id="ph4">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">用于处理消息的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 对象；返回 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，以命令 <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 创建新的 <ph id="ph4">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A&gt;</ph> method is called when a message is received.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A&gt;</ph> 方法是在接收消息时调用的。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>Return the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object that you want to process the message, or <ph id="ph2">`null`</ph>.</source>
          <target state="translated">返回要用于消息处理的 <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 对象或 <ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>In the case of <ph id="ph1">`null`</ph>, <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> creates a new <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object for the message and then calls the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A&gt;</ph> method.</source>
          <target state="translated">如果为 <ph id="ph1">`null`</ph>，则 <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 会为消息创建新的 <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 对象，并会接着调用 <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>If you return <ph id="ph1">`null`</ph>, the new <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object goes through the throttling system and increments the count of <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果您返回 <ph id="ph1">`null`</ph>，则新的 <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 对象将遍历调节系统，并增加 <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType&gt;</ph> 的计数值。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">新的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The incoming message.</source>
          <target state="translated">传入消息。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The channel that received the message.</source>
          <target state="translated">接收消息的通道。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>Called when <ph id="ph1">&lt;see langword="null" /&gt;</ph> is returned from the <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /&gt;</ph> method.</source>
          <target state="translated">当 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 从 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /&gt;</ph> 方法返回时调用。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A&gt;</ph> is called when <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A&gt;</ph> returns <ph id="ph3">`null`</ph> and a new <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object is created.</source>
          <target state="translated">当 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A&gt;</ph> 返回 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A&gt;</ph> 并创建了新的 <ph id="ph3">`null`</ph> 对象时，调用 <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>This method is called to notify you that a new <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> has been created.</source>
          <target state="translated">调用此方法是为了通知您创建了新的 <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object that is considered idle.</source>
          <target state="translated">被视为空闲的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
          <source>Called when all <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> activities have completed to enable implementers to prevent the <ph id="ph2">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> from being recycled.</source>
          <target state="translated">当 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 活动完成时调用，以使实施者能阻止 <ph id="ph2">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 的回收。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> is to close and recycle the <ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object and adjust the value of <ph id="ph4">&lt;see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" /&gt;</ph>; otherwise, <ph id="ph5">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要关闭 <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph>，并回收 <ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 对象，且要调整 <ph id="ph4">&lt;see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" /&gt;</ph> 的值，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph5">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> is called when <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> is about to close and recycle an idle <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object so that you can inform the runtime whether to continue doing so.</source>
          <target state="translated">当 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> 即将关闭，并要回收空闲的 <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 对象时，调用 <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>，以便您能够通知运行时是否继续执行此操作。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
          <source>For an example that demonstrates the sharing of instance contexts, see <bpt id="p1">[</bpt>InstanceContextSharing<ept id="p1">](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)</ept>.</source>
          <target state="translated">有关演示共享实例上下文示例，请参阅<bpt id="p1">[</bpt>InstanceContextSharing<ept id="p1">](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)</ept>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /&gt;</ph> object that notifies <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> when the <ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object is to be closed and recycled.</source>
          <target state="translated">通知 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /&gt;</ph> <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 对象的关闭和回收时间的 <ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>.</source>
          <target state="translated">当前的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>Called when the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /&gt;</ph> method returns <ph id="ph2">&lt;see langword="false" /&gt;</ph> to enable implementers to provide a callback to notify <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> when the <ph id="ph4">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object is finished.</source>
          <target state="translated">当 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /&gt;</ph> 方法返回 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 时调用，以使实施者能提供回调，从而通知 <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph><ph id="ph4">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 对象的完成时间。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A&gt;</ph> method is called when the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> method returns <ph id="ph3">`false`</ph> to enable you to provide <ph id="ph4">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> with a <ph id="ph5">&lt;xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType&gt;</ph> object that you use to inform the runtime that the <ph id="ph6">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> has finished its work.</source>
          <target state="translated">当 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A&gt;</ph> 方法返回 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> 时调用 <ph id="ph3">`false`</ph> 方法，以使您可向 <ph id="ph4">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 提供您用于通知运行时 <ph id="ph5">&lt;xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType&gt;</ph> 已完成其任务的 <ph id="ph6">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>When the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType&gt;</ph> object notifies the runtime that the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> has finished its work, <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> calls <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> once again.</source>
          <target state="translated">当 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType&gt;</ph> 对象通知运行时 <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 已完成任务时，<ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 会再次调用 <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>This cycle continues until <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> returns <ph id="ph2">`true`</ph> and the context is closed and recycled.</source>
          <target state="translated">此循环将一直继续，直到 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> 返回 <ph id="ph2">`true`</ph>，然后上下文被关闭并回收。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>