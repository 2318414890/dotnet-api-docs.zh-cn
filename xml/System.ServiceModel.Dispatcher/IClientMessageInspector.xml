<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IClientMessageInspector.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51c72611cc7b655ebd69e6b72bf259c275567000d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c72611cc7b655ebd69e6b72bf259c275567000d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>Defines a message inspector object that can be added to the <ph id="ph1">&lt;see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /&gt;</ph> collection to view or modify messages.</source>
          <target state="translated">定义一个消息检查器对象，该对象可以添加到 <ph id="ph1">&lt;see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /&gt;</ph> 集合来查看或修改消息。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector&gt;</ph> interface and add it to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A&gt;</ph> collection to inspect or modify messages as they pass through a <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> client object.</source>
          <target state="translated">实现 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector&gt;</ph> 接口，然后将它添加到 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A&gt;</ph> 集合，当消息通过 <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 客户端对象传送时检查或修改它们。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>For details, see <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph>.</source>
          <target state="translated">有关详细信息，请参阅<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>The following code example shows an implementation that writes strings to the console when the implementation is called.</source>
          <target state="translated">下面的代码示例显示一个实现，当调用该实现时将字符串写入控制台。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>The following code example shows how to use an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> to insert the client message inspector in the client endpoint.</source>
          <target state="translated">下面的代码示例显示如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> 在客户端终结点中插入客户端消息检查器。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</source>
          <target state="translated">最后，下面的代码示例显示如何修改客户端配置文件，将终结点行为与特定的终结点一起使用。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The message to be transformed into types and handed back to the client application.</source>
          <target state="translated">要转换为类型并交回给客户端应用程序的消息。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Correlation state data.</source>
          <target state="translated">关联状态数据。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.</source>
          <target state="translated">在收到回复消息之后将它传递回客户端应用程序之前，启用消息的检查或修改。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A&gt;</ph> to inspect or modify a reply message after it has been received by the <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> client object but before it is deserialized into objects that are returned to the client application.</source>
          <target state="translated">当 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A&gt;</ph> 客户端对象已收到回复消息之后将该消息反序列化为返回给客户端应用程序的对象之前，实现 <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 来检查或修改回复消息。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The <ph id="ph1">`correlationState`</ph> is the object returned by the user when <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph> is called for this message.</source>
          <target state="translated">为此消息调用 <ph id="ph1">`correlationState`</ph> 时，<ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph> 是用户返回的对象。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The best practice is to make this a <ph id="ph1">&lt;xref:System.Guid?displayProperty=nameWithType&gt;</ph> to ensure that no two <ph id="ph2">`correlationState`</ph> objects are the same.</source>
          <target state="translated">最佳做法是将它设置为 <ph id="ph1">&lt;xref:System.Guid?displayProperty=nameWithType&gt;</ph>，以确保没有两个相同的 <ph id="ph2">`correlationState`</ph> 对象。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows an implementation that writes strings to the console when the implementation is called.</source>
          <target state="translated">下面的代码示例显示一个实现，当调用该实现时将字符串写入控制台。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows how to use an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> to insert the client message inspector in the client endpoint.</source>
          <target state="translated">下面的代码示例显示如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> 在客户端终结点中插入客户端消息检查器。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</source>
          <target state="translated">最后，下面的代码示例显示如何修改客户端配置文件，将终结点行为与特定的终结点一起使用。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The message to be sent to the service.</source>
          <target state="translated">要发送给服务的消息。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> client object channel.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 客户端对象通道。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>Enables inspection or modification of a message before a request message is sent to a service.</source>
          <target state="translated">在将请求消息发送到服务之前，启用消息的检查或修改。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The object that is returned as the <ph id="ph1">&lt;paramref name="correlationState" /&gt;</ph> argument of the <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /&gt;</ph> method.</source>
          <target state="translated">作为 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /&gt;</ph> 方法的 <ph id="ph1">&lt;paramref name="correlationState" /&gt;</ph> 参数返回的对象。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>This is <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no correlation state is used.</source>
          <target state="translated">如果不使用关联状态，则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The best practice is to make this a <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> to ensure that no two <ph id="ph2">&lt;paramref name="correlationState" /&gt;</ph> objects are the same.</source>
          <target state="translated">最佳做法是将它设置为 <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph>，以确保没有两个相同的 <ph id="ph2">&lt;paramref name="correlationState" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph> to inspect or modify a request message before it is sent.</source>
          <target state="translated">在发送请求消息之前，实现 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph> 来检查或修改请求消息。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The following code example shows an implementation that writes strings to the console when the implementation is called.</source>
          <target state="translated">下面的代码示例显示一个实现，当调用该实现时将字符串写入控制台。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The following code example shows how to use an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> to insert the client message inspector in the client endpoint.</source>
          <target state="translated">下面的代码示例显示如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> 在客户端终结点中插入客户端消息检查器。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</source>
          <target state="translated">最后，下面的代码示例显示如何修改客户端配置文件，将终结点行为与特定的终结点一起使用。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>