<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ExceptionHandler.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b72d5542b8db2be95a211477297f4b5bb3a5f284100.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5542b8db2be95a211477297f4b5bb3a5f284100</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.ExceptionHandler">
          <source>Extend the <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> class to create an exception handler for unhandled exceptions that occur within the Windows Communication Foundation (WCF) runtime.</source>
          <target state="translated">扩展 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> 类可以为 Windows Communication Foundation (WCF) 运行时内出现的未经处理的异常创建异常处理程序。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ExceptionHandler">
          <source>Extend the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> class and override the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> method to determine whether an exception should terminate the application.</source>
          <target state="translated">扩展 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> 类并重写 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> 方法可以确定异常是否应终止应用程序。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ExceptionHandler">
          <source>Then create a new instance of your custom <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> class and assign it to the static <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A&gt;</ph> property prior to creating WCF clients or services.</source>
          <target state="translated">然后创建自定义的新实例<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph>类并将其分配给静态<ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A&gt;</ph>属性，然后创建 WCF 客户端或服务。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ExceptionHandler">
          <source>The following code example shows an implementation of the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> abstract class that overrides the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示了重写 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> 方法的 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> 抽象类的实现。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ExceptionHandler">
          <source>The following code example shows how to enable the custom <ph id="ph1">`MyExceptionHandler`</ph> for unhandled exceptions that occur within the WCF runtime.</source>
          <target state="translated">下面的代码示例演示如何启用自定义<ph id="ph1">`MyExceptionHandler`</ph>的 WCF 运行时内发生的未经处理异常。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle">
          <source>Gets an instance of <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> that handles all exceptions.</source>
          <target state="translated">获取处理所有异常的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> 的实例。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle">
          <source>An <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> object that returns <ph id="ph2">&lt;see langword="true" /&gt;</ph> for all exceptions.</source>
          <target state="translated">返回所有异常的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> 的 <ph id="ph2">&lt;see langword="true" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source>Gets or sets the current <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> implementation for the application domain.</source>
          <target state="translated">获取或设置应用程序域的当前 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source>Assign a custom <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> object that receives unhandled exceptions that occur on asynchronous <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> threads.</source>
          <target state="translated">分配一个自定义 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> 对象，该对象接收异步 <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 线程上发生的未经处理的异常。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source>By default, the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A&gt;</ph> property is <ph id="ph2">`null`</ph>, and unhandled exceptions on asynchronous WCF threads terminate the application.</source>
          <target state="translated">默认情况下，<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A&gt;</ph>属性是<ph id="ph2">`null`</ph>，并在异步 WCF 线程上未经处理的异常终止应用程序。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source>Set this property to an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> object to receive and react to these exceptions.</source>
          <target state="translated">将此属性设置为 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> 对象可以接收这些异常并做出响应。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source>If an unhandled exception occurs on an asynchronous WCF thread and reaches this handler, the state of the application domain may be compromised.</source>
          <target state="translated">如果在异步 WCF 线程上发生了未经处理的异常，但到达此处理程序，也可能妥协的应用程序域的状态。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> should not return <ph id="ph2">`true`</ph> for these exceptions.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> 不应返回<ph id="ph2">`true`</ph>为这些例外。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>The exception the occurred within the <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> runtime and which may terminate the application.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 运行时内发生并且可能会终止应用程序的异常。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>When overridden in a derived class, returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the exception has been handled, or <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the exception should be rethrown and the application terminated.</source>
          <target state="translated">当在派生类中重写时，如果已经处理了异常，则返回 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；或者，如果重新引发异常并且应用程序终止，则返回 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the exception has been handled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果异常已处理，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> property returns <ph id="ph2">`true`</ph> if the exception has been handled.</source>
          <target state="translated">如果异常已处理，则 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> 属性将返回 <ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>If it returns <ph id="ph1">`false`</ph> or throws a different exception, the original exception is rethrown.</source>
          <target state="translated">如果该属性返回 <ph id="ph1">`false`</ph> 或引发其他异常，则将重新引发原始异常。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>The following code example shows an implementation of the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> abstract class that overrides the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示了重写 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> 方法的 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> 抽象类的实现。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>The following code example shows how to enable the custom <ph id="ph1">`MyExceptionHandler`</ph> for unhandled exceptions that occur within the WCF runtime.</source>
          <target state="translated">下面的代码示例演示如何启用自定义<ph id="ph1">`MyExceptionHandler`</ph>的 WCF 运行时内发生的未经处理异常。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source>Gets or sets the current transport <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> implementation for the application domain.</source>
          <target state="translated">获取或设置应用程序域的当前传输 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> 实现。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source>A custom <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> object that receives unhandled exceptions that occur within the global <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> transports.</source>
          <target state="translated">一个自定义 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> 对象，该对象接收全局 <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 传输内发生的未经处理的异常。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source>By default, the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A&gt;</ph> property is set to the value of <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A&gt;</ph>, causing unhandled exceptions within WCF transports to be ignored.</source>
          <target state="translated">默认情况下，<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A&gt;</ph>属性设置为的值<ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A&gt;</ph>，导致未经处理的异常中被忽略的 WCF 传输。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source>Set this property to an instance of <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> to receive and react to these exceptions.</source>
          <target state="translated">将此属性设置为 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> 的实例可以接受这些异常并做出响应。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source>If an unhandled exception occurs within a global WCF transport and reaches this handler, there is a possibility that the state of the application domain is compromised.</source>
          <target state="translated">如果未经处理的异常发生在全局 WCF 传输和到达此处理程序，则可能被泄露的应用程序域的状态。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> can return <ph id="ph2">`false`</ph> for these exceptions to cause the application to be terminated.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> 可以返回<ph id="ph2">`false`</ph>为这些例外，以使应用程序将被终止。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>