<Type Name="PrintJobInfoCollection" FullName="System.Printing.PrintJobInfoCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ba5af5cba00ae3732bc39d44dce465a904352304" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30469081" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PrintJobInfoCollection : System.Printing.PrintSystemObjects, IDisposable, System.Collections.Generic.IEnumerable&lt;System.Printing.PrintSystemJobInfo&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PrintJobInfoCollection extends System.Printing.PrintSystemObjects implements class System.Collections.Generic.IEnumerable`1&lt;class System.Printing.PrintSystemJobInfo&gt;, class System.Collections.IEnumerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Printing.PrintJobInfoCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class PrintJobInfoCollection&#xA;Inherits PrintSystemObjects&#xA;Implements IDisposable, IEnumerable(Of PrintSystemJobInfo)" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrintJobInfoCollection : System::Printing::PrintSystemObjects, IDisposable, System::Collections::Generic::IEnumerable&lt;System::Printing::PrintSystemJobInfo ^&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Printing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Printing.PrintSystemObjects</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Printing.PrintSystemJobInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示一个或多个 <see cref="T:System.Printing.PrintSystemJobInfo" /> 对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  类中<xref:System.Printing>命名空间不支持的 Windows 服务或 ASP.NET 应用程序或服务中的使用。 尝试使用这些应用程序类型之一中的这些类可能会产生意外的问题，如降低服务性能和运行时异常。  
  
 如果你想要从 Windows 窗体应用程序打印，请参阅<xref:System.Drawing.Printing>命名空间。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintJobInfoCollection (System.Printing.PrintQueue printQueue, string[] propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintQueue printQueue, string[] propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintJobInfoCollection.#ctor(System.Printing.PrintQueue,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintJobInfoCollection(System::Printing::PrintQueue ^ printQueue, cli::array &lt;System::String ^&gt; ^ propertyFilter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="printQueue" Type="System.Printing.PrintQueue" />
        <Parameter Name="propertyFilter" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="printQueue">其打印作业将要填充集合的打印队列。</param>
        <param name="propertyFilter">
          <see cref="T:System.Printing.PrintSystemJobInfo" /> 对象属性的子集的列表。</param>
        <summary>初始化包含每一项作业（这些作业在指定的 <see cref="T:System.Printing.PrintJobInfoCollection" /> 中）的 <see cref="T:System.Printing.PrintSystemJobInfo" /> 对象的 <see cref="T:System.Printing.PrintQueue" /> 类的一个新实例，并仅初始化那些其属性在指定的属性筛选器中列出的对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintSystemJobInfo>集合中的对象初始化仅在中列出了这些属性中`propertyFilter`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Printing.PrintSystemJobInfo printObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Printing.PrintSystemJobInfo printObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintJobInfoCollection.Add(System.Printing.PrintSystemJobInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (printObject As PrintSystemJobInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Printing::PrintSystemJobInfo ^ printObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printObject" Type="System.Printing.PrintSystemJobInfo" />
      </Parameters>
      <Docs>
        <param name="printObject">已添加的对象。</param>
        <summary>向 <see cref="T:System.Printing.PrintJobInfoCollection" /> 中添加一个成员。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool A_0);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool A_0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintJobInfoCollection.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (A_0 As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool A_0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="A_0" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="A_0">To be added.</param>
        <summary>释放正在由 <see cref="T:System.Printing.PrintJobInfoCollection" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法称为由公共`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。 `Dispose()` 调用受保护`Dispose(Boolean)`方法未命名的布尔参数设置为`true`。 <xref:System.Object.Finalize%2A> 调用`Dispose`参数设置为`false`。  
  
 如果布尔型参数为 true，此方法释放由任何托管对象持有的全部资源此<xref:System.Printing.PrintJobInfoCollection>引用。 此方法调用每个引用对象的 `Dispose()` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> 可以由其他对象多次调用。 重写 <see langword="Dispose(Boolean)" /> 时，请注意不要引用在以前调用 <see langword="Dispose" /> 时已释放的对象。 有关如何实现详细信息<see langword="Dispose(Boolean)" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
 有关详细信息<see langword="Dispose" />和<see cref="M:System.Object.Finalize" />，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[重写 Finalize 方法](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerator&lt;System.Printing.PrintSystemJobInfo&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Printing.PrintSystemJobInfo&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintJobInfoCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator(Of PrintSystemJobInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::Printing::PrintSystemJobInfo ^&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Printing.PrintSystemJobInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取一个对象，该对象用于实现使用 <see cref="T:System.Collections.IEnumerator" /> 关闭的泛型 <see cref="T:System.Printing.PrintSystemJobInfo" /> 接口。</summary>
        <returns>实现泛型 <see cref="T:System.Collections.IEnumerator" /> 接口的对象，该对象可以循环访问 <see cref="T:System.Printing.PrintSystemJobInfo" /> 所包含的 <see cref="T:System.Printing.PrintJobInfoCollection" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 我们建议你使用`foreach`语句来循环访问集合的所有成员。 使用<xref:System.Printing.PrintJobInfoCollection.GetEnumerator%2A>仅需要自定义迭代，如跳过所有其他成员。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNonGenericEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetNonGenericEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetNonGenericEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintJobInfoCollection.GetNonGenericEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNonGenericEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetNonGenericEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取实现非泛型 <see cref="T:System.Collections.IEnumerator" /> 接口的对象。</summary>
        <returns>实现非泛型 <see cref="T:System.Collections.IEnumerator" /> 接口的对象，该对象可以循环访问 <see cref="T:System.Printing.PrintSystemJobInfo" /> 所包含的 <see cref="T:System.Printing.PrintJobInfoCollection" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 我们建议你使用`foreach`语句来循环访问集合的所有成员。 只有当你需要自定义迭代，如跳过所有其他成员时，请使用你自己的枚举器对象。  
  
 如果你需要你自己的枚举器，我们建议你使用泛型、 类型安全函数<xref:System.Printing.PrintJobInfoCollection.GetEnumerator%2A>而不是<xref:System.Printing.PrintJobInfoCollection.GetNonGenericEnumerator%2A>。 <xref:System.Printing.PrintJobInfoCollection.GetNonGenericEnumerator%2A>是公共的只是为了满足的要求<xref:System.Collections.IEnumerable>接口，该实现此集合的接口。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>