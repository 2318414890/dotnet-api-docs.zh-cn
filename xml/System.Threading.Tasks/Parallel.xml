<Type Name="Parallel" FullName="System.Threading.Tasks.Parallel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="53ac17ab6443b9650b8e9acf8ee50cc6bf4113af" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58683073" /></Metadata><TypeSignature Language="C#" Value="public static class Parallel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Parallel extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Parallel" />
  <TypeSignature Language="VB.NET" Value="Public Class Parallel" />
  <TypeSignature Language="C++ CLI" Value="public ref class Parallel abstract sealed" />
  <TypeSignature Language="F#" Value="type Parallel = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c8fa3-101">提供对并行循环和区域的支持。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-101">Provides support for parallel loops and regions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-102"><xref:System.Threading.Tasks.Parallel>类提供了用于常见操作这样的循环，为每个循环和执行的一组语句基于库的数据并行替换。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-102">The <xref:System.Threading.Tasks.Parallel> class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8fa3-103">此示例演示如何实现使用多个语言构造一个并行循环的几种方法。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-103">This example demonstrates several approaches to implementing a parallel loop using multiple language constructs.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#07](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelintro.cs#07)]
 [!code-vb[System.Threading.Tasks.Parallel#07](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelintro.vb#07)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="c8fa3-104">所有公共和受保护成员<see cref="T:System.Threading.Tasks.Parallel" />是线程安全的可能从多个线程同时使用。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-104">All public and protected members of <see cref="T:System.Threading.Tasks.Parallel" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="c8fa3-105">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="c8fa3-105">Data Parallelism (Task Parallel Library)</span></span></related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="c8fa3-106">使用.NET Framework 进行并行编程示例</span><span class="sxs-lookup"><span data-stu-id="c8fa3-106">Samples for Parallel Programming with the .NET Framework</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="For">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c8fa3-107">执行 <see langword="for" /> 循环，其中可能会并行运行迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-107">Executes a <see langword="for" /> loop in which iterations may run in parallel.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="c8fa3-108">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-108">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="c8fa3-109">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-109">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-110">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-110">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-111">执行 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-111">Executes a <see langword="for" /> loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-112">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-112">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-113">`body`委托会调用一次迭代范围中每个值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-113">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="c8fa3-114">它提供两个参数：</span><span class="sxs-lookup"><span data-stu-id="c8fa3-114">It is provided with two arguments:</span></span>  
  
-   <span data-ttu-id="c8fa3-115"><xref:System.Int32>值，该值表示迭代次数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-115">An <xref:System.Int32> value that represents the iteration count.</span></span>  
  
-   <span data-ttu-id="c8fa3-116">一个<xref:System.Threading.Tasks.ParallelLoopState>可用于中断循环过早的实例。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-116">A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely.</span></span> <span data-ttu-id="c8fa3-117"><xref:System.Threading.Tasks.ParallelLoopState>由编译器创建对象; 它不能在用户代码中实例化。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-117">The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code.</span></span>  
  
 <span data-ttu-id="c8fa3-118">调用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法将通知`for`迭代后当前无需执行的操作。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-118">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to execute.</span></span> <span data-ttu-id="c8fa3-119">但是，早于当前的所有迭代一个仍都将需要如果它们尚未准备好执行。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-119">However, all iterations before the current one will still have to be executed if they haven't already.</span></span>  
  
 <span data-ttu-id="c8fa3-120">因此，调用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>类似于使用中断操作的传统`for`等语言中的循环C#，但并不是理想的替代：例如，就不能保证该迭代后当前都不会执行。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-120">Therefore, calling <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="c8fa3-121">如果当前没有必要之前执行所有迭代，使用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法而不是使用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-121">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="c8fa3-122">调用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>通知`for`循环，它可能会放弃所有剩余迭代，而不考虑是否它们之前或之后的当前迭代，因为所有所需的工作将已完成。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-122">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="c8fa3-123">但是，作为与<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>，不有哪些其他迭代不会执行任何保证。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-123">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="c8fa3-124">如果循环已提前结束<xref:System.Threading.Tasks.ParallelLoopResult>返回结构将包含循环的完成的相关信息。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-124">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="c8fa3-125">如果`fromInclusive`大于或等于`toExclusive`，方法将立即返回而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-125">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8fa3-126">下面的示例以并行方式执行最多 100 个循环迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-126">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="c8fa3-127">从 1 到 1000 毫秒的随机间隔暂停每次迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-127">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="c8fa3-128">随机生成的值确定哪次循环迭代上<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>调用方法。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-128">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="c8fa3-129">如示例所示，前者的索引大于任何迭代中的输出<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType>属性值开始后调用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-129">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="c8fa3-130">因为迭代循环的执行时仍可能<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>方法调用时，每次迭代都会调用<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType>属性来检查是否已调用另一个迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-130">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c8fa3-131">如果属性值为`true`，在迭代检查的值<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType>属性以及它是否大于当前迭代索引值，将立即返回。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-131">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-132"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-132">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-133">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-133">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <altmember cref="T:System.Threading.Tasks.ParallelLoopState" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-134">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-134">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="c8fa3-135">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-135">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="c8fa3-136">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-136">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-137">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-137">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-138">执行 <see langword="for" /> 循环，其中可能会并行运行迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-138">Executes a <see langword="for" /> loop in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-139">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-139">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-140">`body`委托会调用一次迭代范围中每个值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-140">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="c8fa3-141">提供使用迭代计数 (<xref:System.Int32>) 作为参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-141">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="c8fa3-142">如果`fromInclusive`大于或等于`toExclusive`，方法将立即返回而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-142">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8fa3-143">下面的示例使用<xref:System.Threading.Tasks.Parallel.For%2A>方法 100 调用的委托的生成随机字节值，并计算其总和。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-143">The following example uses the <xref:System.Threading.Tasks.Parallel.For%2A> method for 100 invocations of a delegate that generates random byte values and computes their sum.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/cs/for1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/vb/for1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-144"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-144">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-145">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-145">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-146">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-146">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="c8fa3-147">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-147">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="c8fa3-148">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-148">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-149">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-149">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-150">执行具有 64 位索引的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-150">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-151">一个 <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> 结构，其中包含有关已完成的循环部分的信息。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-151">A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-152">`body`委托会调用一次迭代范围中每个值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-152">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="c8fa3-153">提供使用以下参数： 迭代次数 (<xref:System.Int64>)，和一个<xref:System.Threading.Tasks.ParallelLoopState>可能用于过早中断该循环的实例。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-153">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="c8fa3-154">调用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法将通知`for`迭代后当前无需执行，但在当前数据表之前的所有迭代都执行的操作。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-154">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to be executed, but all iterations before the current one do.</span></span>  
  
 <span data-ttu-id="c8fa3-155">因此，调用中断是类似于使用中断操作的传统`for`等语言中的循环C#，但并不是理想的替代：例如，就不能保证该迭代后当前都不会执行。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-155">Therefore, calling Break is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="c8fa3-156">如果当前没有必要之前执行所有迭代，使用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法而不是使用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-156">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="c8fa3-157">调用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>通知`for`循环，它可能会放弃所有剩余迭代，而不考虑是否它们之前或之后的当前迭代，因为所有所需的工作将已完成。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-157">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="c8fa3-158">但是，作为与<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>，不有哪些其他迭代不会执行任何保证。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-158">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="c8fa3-159">如果循环已提前结束<xref:System.Threading.Tasks.ParallelLoopResult>返回结构将包含循环的完成的相关信息。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-159">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="c8fa3-160">如果`fromInclusive`大于或等于`toExclusive`，则该方法立即返回而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-160">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-161"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-161">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-162">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-162">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-163">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-163">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="c8fa3-164">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-164">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="c8fa3-165">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-165">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-166">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-166">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-167">执行具有 64 位索引的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-167">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-168">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-168">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-169">`body`委托会调用一次迭代范围中每个值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-169">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="c8fa3-170">提供使用迭代计数 (<xref:System.Int64>) 作为参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-170">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="c8fa3-171">如果`fromInclusive`大于或等于`toExclusive`，方法将立即返回而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-171">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-172"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-172">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-173">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-173">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-174">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-174">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="c8fa3-175">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-175">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="c8fa3-176">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-176">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-177">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-177">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-178">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-178">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-179">执行 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-179">Executes a <see langword="for" /> loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-180">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-180">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-181">`body`委托会调用一次迭代范围中每个值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-181">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="c8fa3-182">提供使用以下参数： 迭代次数 (<xref:System.Int32>)，和一个<xref:System.Threading.Tasks.ParallelLoopState>可能用于过早中断该循环的实例。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-182">It is provided with the following parameters: the iteration count (<xref:System.Int32>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="c8fa3-183">如果`fromInclusive`大于或等于`toExclusive`，方法将立即返回而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-183">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-184">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-184">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-185"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-185">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-186">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-186">-or-</span></span> 
<span data-ttu-id="c8fa3-187"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-187">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-188">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-188">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-189">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-189">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-190">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-190">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="c8fa3-191">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-191">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="c8fa3-192">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-192">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-193">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-193">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-194">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-194">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-195">执行 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以配置循环选项。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-195">Executes a <see langword="for" /> loop in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-196">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-196">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-197">`body`委托会调用一次迭代范围中每个值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-197">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="c8fa3-198">提供使用迭代计数 (<xref:System.Int32>) 作为参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-198">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="c8fa3-199">如果`fromInclusive`大于或等于`toExclusive`，则该方法立即返回而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-199">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8fa3-200">下面的示例演示如何取消并行循环：</span><span class="sxs-lookup"><span data-stu-id="c8fa3-200">The following example shows how to cancel a parallel loop:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforcancel.cs#05)]
 [!code-vb[System.Threading.Tasks.Parallel#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforcancel.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-201">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-201">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-202"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-202">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-203">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-203">-or-</span></span> 
<span data-ttu-id="c8fa3-204"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-204">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-205">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-205">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-206">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-206">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-207">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-207">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="c8fa3-208">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-208">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="c8fa3-209">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-209">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-210">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-210">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-211">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-211">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-212">执行具有 64 位索引的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-212">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-213">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-213">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-214">`body`委托会调用一次迭代范围中每个值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-214">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="c8fa3-215">提供使用以下参数： 迭代次数 (<xref:System.Int64>)，和一个<xref:System.Threading.Tasks.ParallelLoopState>可能用于过早中断该循环的实例。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-215">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="c8fa3-216">如果`fromInclusive`大于或等于`toExclusive`，方法将立即返回而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-216">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8fa3-217">下面的示例演示如何使用<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法替换<xref:System.Threading.Tasks.ParallelOptions>对象：</span><span class="sxs-lookup"><span data-stu-id="c8fa3-217">The following example shows how to use the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method with a <xref:System.Threading.Tasks.ParallelOptions> object:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelfor.cs#03)]
 [!code-vb[System.Threading.Tasks.Parallel#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelfor.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-218">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-218">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-219"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-219">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-220">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-220">-or-</span></span> 
<span data-ttu-id="c8fa3-221"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-221">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-222">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-222">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-223">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-223">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-224">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-224">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="c8fa3-225">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-225">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="c8fa3-226">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-226">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-227">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-227">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-228">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-228">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-229">执行具有 64 位索引的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以配置循环选项。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-229">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-230">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-230">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-231">支持 64 位索引。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-231">Supports 64-bit indexes.</span></span> <span data-ttu-id="c8fa3-232">`body`委托会调用一次迭代范围中每个值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-232">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="c8fa3-233">提供使用迭代计数 (<xref:System.Int64>) 作为参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-233">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="c8fa3-234">如果`fromInclusive`大于或等于`toExclusive`，则该方法立即返回而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-234">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8fa3-235">下面的示例演示如何使用<xref:System.Threading.Tasks.ParallelOptions>若要指定自定义任务计划程序：</span><span class="sxs-lookup"><span data-stu-id="c8fa3-235">The following example shows how to use <xref:System.Threading.Tasks.ParallelOptions> to specify a custom task scheduler:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#06](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforwithscheduler.cs#06)]
 [!code-vb[System.Threading.Tasks.Parallel#06](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforwithscheduler.vb#06)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-236">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-236">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-237"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-237">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-238">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-238">-or-</span></span> 
<span data-ttu-id="c8fa3-239"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-239">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-240">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-240">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-241">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-241">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-242">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-242">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="c8fa3-243">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-243">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="c8fa3-244">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-244">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="c8fa3-245">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-245">The end index, exclusive.</span></span></param>
        <param name="localInit"><span data-ttu-id="c8fa3-246">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-246">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-247">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-247">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="c8fa3-248">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-248">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="c8fa3-249">执行具有线程本地数据的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-249">Executes a <see langword="for" /> loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-250">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-250">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-251">`body`委托会调用一次迭代范围中每个值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-251">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="c8fa3-252">提供使用以下参数： 迭代次数 (<xref:System.Int32>)、 一个<xref:System.Threading.Tasks.ParallelLoopState>实例可用于中断循环过早，并可能在同一线程执行的迭代之间共享某些本地状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-252">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="c8fa3-253">`localInit`参与循环的执行，这些任务的每个返回初始本地状态的每个任务一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-253">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="c8fa3-254">这些初始状态传递给第一个`body`上每个任务的调用。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-254">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="c8fa3-255">然后，每个后续正文调用返回传递给下一个正文调用一个可能已修改的状态值。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-255">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="c8fa3-256">最后，每个任务上的最后一个正文调用返回传递给的州值`localFinally`委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-256">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="c8fa3-257">`localFinally`每个任务，每个任务的本地状态执行一个最终操作一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-257">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="c8fa3-258">在多个任务; 可能会同时调用此委托因此，必须同步对共享的任何变量的访问。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-258">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="c8fa3-259"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法可能的现有任务完成其执行生存期内使用多于线程数的更多任务，并替换为新的任务。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-259">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="c8fa3-260">这样，基础<xref:System.Threading.Tasks.TaskScheduler>对象机会添加，请更改或删除服务循环的线程。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-260">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="c8fa3-261">如果`fromInclusive`大于或等于`toExclusive`，则该方法立即返回而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-261">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="c8fa3-262">使用此方法的示例，请参阅[如何：编写具有线程局部变量的 Parallel.For 循环](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-262">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-263"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-263">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-264">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-264">-or-</span></span> 
<span data-ttu-id="c8fa3-265"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-265">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-266">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-266">-or-</span></span> 
<span data-ttu-id="c8fa3-267"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-267">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-268">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-268">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-269">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-269">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="c8fa3-270">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-270">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="c8fa3-271">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-271">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="c8fa3-272">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-272">The end index, exclusive.</span></span></param>
        <param name="localInit"><span data-ttu-id="c8fa3-273">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-273">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-274">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-274">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="c8fa3-275">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-275">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="c8fa3-276">执行具有 64 位索引和线程本地数据的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-276">Executes a <see langword="for" /> loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-277">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-277">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-278">`body`委托会调用一次迭代范围中每个值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-278">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="c8fa3-279">提供使用以下参数： 迭代次数 (<xref:System.Int64>)、 一个<xref:System.Threading.Tasks.ParallelLoopState>实例可用于中断循环过早，并可能在相同的任务执行的迭代之间共享某些本地状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-279">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="c8fa3-280">`localInit`参与循环的执行，这些任务的每个返回初始本地状态的每个任务一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-280">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="c8fa3-281">这些初始状态传递给第一个`body`上每个任务的调用。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-281">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="c8fa3-282">然后，每个后续正文调用返回传递给下一个正文调用一个可能已修改的状态值。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-282">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="c8fa3-283">最后，每个任务上的最后一个正文调用返回传递给的州值`localFinally`委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-283">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="c8fa3-284">`localFinally`每个任务，每个任务的本地状态执行一个最终操作一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-284">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="c8fa3-285">在多个任务; 可能会同时调用此委托因此，必须同步对共享的任何变量的访问。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-285">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="c8fa3-286"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法可能的现有任务完成其执行生存期内使用多于线程数的更多任务，并替换为新的任务。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-286">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="c8fa3-287">这样，基础<xref:System.Threading.Tasks.TaskScheduler>对象机会添加，请更改或删除服务循环的线程。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-287">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="c8fa3-288">如果`fromInclusive`大于或等于`toExclusive`，则该方法立即返回而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-288">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="c8fa3-289">使用此方法的示例，请参阅[如何：编写具有线程局部变量的 Parallel.For 循环](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-289">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-290"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-290">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-291">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-291">-or-</span></span> 
<span data-ttu-id="c8fa3-292"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-292">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-293">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-293">-or-</span></span> 
<span data-ttu-id="c8fa3-294"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-294">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-295">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-295">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-296">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-296">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="c8fa3-297">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-297">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="c8fa3-298">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-298">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="c8fa3-299">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-299">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-300">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-300">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="c8fa3-301">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-301">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-302">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-302">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="c8fa3-303">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-303">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="c8fa3-304">执行具有线程本地数据的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-304">Executes a <see langword="for" /> loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-305">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-305">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-306">`body`委托会调用一次迭代范围中每个值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-306">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="c8fa3-307">提供使用以下参数： 迭代次数 (<xref:System.Int32>)、 一个<xref:System.Threading.Tasks.ParallelLoopState>实例可用于中断循环过早，并可能在相同的任务执行的迭代之间共享某些本地状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-307">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="c8fa3-308">`localInit`参与循环的执行，这些任务的每个返回初始本地状态的每个任务一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-308">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="c8fa3-309">这些初始状态传递给第一个`body`上每个任务的调用。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-309">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="c8fa3-310">然后，每个后续正文调用返回传递给下一个正文调用一个可能已修改的状态值。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-310">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="c8fa3-311">最后，每个任务上的最后一个正文调用返回传递给的州值`localFinally`委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-311">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="c8fa3-312">`localFinally`每个任务，每个任务的本地状态执行一个最终操作一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-312">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="c8fa3-313">可能在多个线程; 同时调用此委托因此，必须同步对共享的任何变量的访问。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-313">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="c8fa3-314"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法可能的现有任务完成其执行生存期内使用多于线程数的更多任务，并替换为新的任务。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-314">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="c8fa3-315">这样，基础<xref:System.Threading.Tasks.TaskScheduler>对象机会添加，请更改或删除服务循环的线程。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-315">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="c8fa3-316">如果`fromInclusive`大于或等于`toExclusive`，则该方法立即返回而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-316">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8fa3-317">以下示例使用线程本地变量来计算的很多长时间的操作的结果的总和。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-317">The following example uses thread-local variables to compute the sum of the results of many lengthy operations.</span></span> <span data-ttu-id="c8fa3-318">此示例将限制的并行度为 4。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-318">This example limits the degree of parallelism to four.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/threadlocalforwithoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Parallel#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/threadlocalforwithoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-319"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-319">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-320">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-320">-or-</span></span> 
<span data-ttu-id="c8fa3-321"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-321">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-322">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-322">-or-</span></span> 
<span data-ttu-id="c8fa3-323"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-323">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-324">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-324">-or-</span></span> 
<span data-ttu-id="c8fa3-325"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-325">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-326">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-326">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-327">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-327">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-328">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-328">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-329">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-329">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="c8fa3-330">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-330">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="c8fa3-331">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-331">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="c8fa3-332">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-332">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-333">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-333">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="c8fa3-334">用于返回每个线程的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-334">The function delegate that returns the initial state of the local data for each thread.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-335">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-335">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="c8fa3-336">用于对每个线程的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-336">The delegate that performs a final action on the local state of each thread.</span></span></param>
        <summary><span data-ttu-id="c8fa3-337">执行具有 64 位索引和线程本地数据的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-337">Executes a <see langword="for" /> loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-338">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-338">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-339">`body`委托会调用一次迭代范围中每个值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-339">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="c8fa3-340">提供使用以下参数： 迭代次数 (<xref:System.Int64>)、 一个<xref:System.Threading.Tasks.ParallelLoopState>实例可用于中断循环过早，并可能在同一线程执行的迭代之间共享某些本地状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-340">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="c8fa3-341">`localInit`委托会调用一次为每个线程都参与循环的执行，并为每个这些线程返回初始本地状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-341">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads.</span></span> <span data-ttu-id="c8fa3-342">这些初始状态传递给第一个`body`上每个线程的调用。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-342">These initial states are passed to the first `body` invocations on each thread.</span></span> <span data-ttu-id="c8fa3-343">然后，每个后续正文调用返回传递给下一个正文调用一个可能已修改的状态值。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-343">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="c8fa3-344">最后，每个线程上的最后一个正文调用返回传递给的州值`localFinally`委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-344">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="c8fa3-345">`localFinally`每个线程上每个线程本地状态执行一个最终操作一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-345">The `localFinally` delegate is invoked once per thread to perform a final action on each thread's local state.</span></span> <span data-ttu-id="c8fa3-346">可能在多个线程; 同时调用此委托因此，必须同步对共享的任何变量的访问。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-346">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="c8fa3-347"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法可能的现有任务完成其执行生存期内使用多于线程数的更多任务，并替换为新的任务。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-347">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="c8fa3-348">这样，基础<xref:System.Threading.Tasks.TaskScheduler>对象机会添加，请更改或删除服务循环的线程。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-348">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="c8fa3-349">如果`fromInclusive`大于或等于`toExclusive`，则该方法立即返回而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-349">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-350"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-350">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-351">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-351">-or-</span></span> 
<span data-ttu-id="c8fa3-352"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-352">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-353">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-353">-or-</span></span> 
<span data-ttu-id="c8fa3-354"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-354">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-355">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-355">-or-</span></span> 
<span data-ttu-id="c8fa3-356"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-356">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-357">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-357">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-358">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-358">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-359">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-359">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-360">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-360">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ForEach&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c8fa3-361">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each " />）操作，其中可能会并行运行迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-361">Executes a <see langword="foreach" /> (<see langword="For Each " /> in Visual Basic) operation in which iterations may run in parallel.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-362"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-362">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-363">包含原始数据源的可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-363">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-364">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-364">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-365">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-365">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-366">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-366">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-367">对于想要重写默认分区方案的方案提供了此重载。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-367">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="c8fa3-368">例如，小型循环体可能受益于分区范围。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-368">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="c8fa3-369"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法需要自定义分区程序来支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-369">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="c8fa3-370">有关详细信息，请参阅[PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何：实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-370">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-371"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-371">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-372">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-372">-or-</span></span> 
<span data-ttu-id="c8fa3-373"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-373">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c8fa3-374">在 <paramref name="source" /> 可排序的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-374">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="c8fa3-375">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-375">-or-</span></span> 
<span data-ttu-id="c8fa3-376">在 <see langword="false" /> 可排序的分区程序的 <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> 属性返回 。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-376">The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the source orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="c8fa3-377">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-377">-or-</span></span> 
<span data-ttu-id="c8fa3-378">在源可排序的分区程序的所有方法都返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-378">Any methods in the source orderable partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-379">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-379">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-380"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-380">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-381">包含原始数据源的分区程序。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-381">The partitioner that contains the original data source.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-382">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-382">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-383">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-383">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-384">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-384">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-385">对于想要重写默认分区方案的方案提供了此重载。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-385">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="c8fa3-386">例如，小型循环体可能受益于分区范围。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-386">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="c8fa3-387"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法需要自定义分区程序来支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-387">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="c8fa3-388">有关详细信息，请参阅[PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何：实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-388">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-389"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-389">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-390">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-390">-or-</span></span> 
<span data-ttu-id="c8fa3-391"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-391">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c8fa3-392">在 <paramref name="source" /> 的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-392">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="c8fa3-393">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-393">-or-</span></span> 
<span data-ttu-id="c8fa3-394"><paramref name="source" /> 分区程序中的方法返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-394">A method in the <paramref name="source" /> partitioner returns <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-395">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-395">-or-</span></span> 
<span data-ttu-id="c8fa3-396"><paramref name="source" /> 分区程序中的 <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> 方法未返回正确的分区数时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-396">The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-397">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-397">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-398"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-398">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-399">包含原始数据源的分区程序。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-399">The partitioner that contains the original data source.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-400">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-400">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-401">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上可能会并行运行迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-401">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-402">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-402">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-403">对于想要重写默认分区方案的方案提供了此重载。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-403">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="c8fa3-404">例如，小型循环体可能受益于分区范围。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-404">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="c8fa3-405"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法需要自定义分区程序来支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-405">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="c8fa3-406">有关详细信息，请参阅[PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何：实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-406">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8fa3-407">下面的示例演示如何实现用于范围分区程序<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="c8fa3-407">The following example shows how to implement a range partitioner for use with <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/cs/rangepartitioner.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/vb/rangepart.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-408"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-408">The <paramref name="source" /> argument is  <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-409">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-409">-or-</span></span> 
<span data-ttu-id="c8fa3-410"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-410">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c8fa3-411">在 <paramref name="source" /> 的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-411">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="c8fa3-412">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-412">-or-</span></span> 
<span data-ttu-id="c8fa3-413">在 <paramref name="source" /> 分区程序中的任何方法返回 <see langword="null" /> 时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-413">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-414">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-414">-or-</span></span> 
<span data-ttu-id="c8fa3-415"><paramref name="source" /> 分区程序中的 <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> 方法未返回正确的分区数时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-415">The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-416">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-416">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-417">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-417">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-418">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-418">An enumerable data source.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-419">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-419">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-420">执行具有 64 位索引的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-420">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-421">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-421">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-422">`body`委托中每个元素调用一次`source`可枚举。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-422">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="c8fa3-423">提供使用以下参数： 当前元素，<xref:System.Threading.Tasks.ParallelLoopState>可用于中断循环过早，实例和当前元素的索引 (<xref:System.Int64>)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-423">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-424"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-424">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-425">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-425">-or-</span></span> 
<span data-ttu-id="c8fa3-426"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-426">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-427">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-427">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-428">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-428">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-429">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-429">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-430">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-430">An enumerable data source.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-431">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-431">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-432">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-432">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-433">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-433">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-434">`body`委托中每个元素调用一次`source`可枚举。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-434">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="c8fa3-435">提供使用以下参数： 当前元素和一个<xref:System.Threading.Tasks.ParallelLoopState>可能用于过早中断该循环的实例。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-435">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-436"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-436">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-437">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-437">-or-</span></span> 
<span data-ttu-id="c8fa3-438"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-438">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-439">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-439">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-440">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-440">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-441">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-441">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-442">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-442">An enumerable data source.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-443">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-443">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-444">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-444">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-445">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-445">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-446">`body`委托中每个元素调用一次`source`可枚举。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-446">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="c8fa3-447">它提供当前元素作为参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-447">It is provided with the current element as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8fa3-448">下面的示例使用<xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29>方法以计算元音和在文本文件中的非空白字符的数目。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-448">The following example uses the <xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> method to count the number of vowels and non-white-space characters in a text file.</span></span> <span data-ttu-id="c8fa3-449">在这种情况下，<xref:System.Threading.Tasks.ParallelLoopResult>方法返回的值将被忽略。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-449">In this case, the <xref:System.Threading.Tasks.ParallelLoopResult> value returned by the method is ignored.</span></span> <span data-ttu-id="c8fa3-450">请注意，因为操作可以并行运行，必须确保，递增的计数器变量是原子操作，并且多个线程未尝试同时访问计数器变量。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-450">Note that, because operations can run in parallel, you must ensure that incrementing the counter variables is an atomic operation, and that multiple threads do not attempt to access the counter variables simultaneously.</span></span> <span data-ttu-id="c8fa3-451">为此，该示例使用`lock`（在 C#) 语句和`SyncLock`（在 Visual Basic) 语句。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-451">For this purpose, the example uses the `lock` statement (in C#) and the `SyncLock` statement (in Visual Basic).</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/cs/foreach1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/vb/foreach1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-452"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-452">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-453">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-453">-or-</span></span> 
<span data-ttu-id="c8fa3-454"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-454">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-455">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-455">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-456">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-456">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-457"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-457">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-458">包含原始数据源的可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-458">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-459">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-459">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-460">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-460">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-461">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-461">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-462">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-462">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-463">对于想要重写默认分区方案的方案提供了此重载。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-463">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="c8fa3-464">例如，小型循环体可能受益于分区范围。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-464">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="c8fa3-465"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法需要自定义分区程序来支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-465">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="c8fa3-466">有关详细信息，请参阅[PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何：实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-466">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-467">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" />参数。 </span><span class="sxs-lookup"><span data-stu-id="c8fa3-467">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-468"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-468">The <paramref name="source" /> argument is  <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-469">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-469">-or-</span></span> 
<span data-ttu-id="c8fa3-470"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-470">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-471">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-471">-or-</span></span> 
<span data-ttu-id="c8fa3-472"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-472">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-473">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-473">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c8fa3-474">在 <paramref name="source" /> 可排序的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-474">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="c8fa3-475">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-475">-or-</span></span> 
<span data-ttu-id="c8fa3-476">在 <paramref name="source" /> 可排序的分区程序的 <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> 属性返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-476">The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="c8fa3-477">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-477">-or-</span></span> 
<span data-ttu-id="c8fa3-478">当 <paramref name="source" /> 可排序分区程序中的任何方法返回 <see langword="null" /> 时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-478">The exception that is thrown when any methods in the <paramref name="source" /> orderable partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-479">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-479">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-480"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-480">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-481">包含原始数据源的分区程序。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-481">The partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-482">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-482">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-483">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-483">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-484">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-484">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-485">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-485">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-486">对于想要重写默认分区方案的方案提供了此重载。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-486">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="c8fa3-487">例如，小型循环体可能受益于分区范围。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-487">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="c8fa3-488"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法需要自定义分区程序来支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-488">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="c8fa3-489">有关详细信息，请参阅[PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何：实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-489">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-490">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-490">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-491">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-491">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-492"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-492">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-493">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-493">-or-</span></span> 
<span data-ttu-id="c8fa3-494"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-494">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-495">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-495">-or-</span></span> 
<span data-ttu-id="c8fa3-496"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-496">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c8fa3-497">在 <paramref name="source" /> 的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-497">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="c8fa3-498">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-498">-or-</span></span> 
<span data-ttu-id="c8fa3-499">在 <paramref name="source" /> 分区程序中的任何方法返回 <see langword="null" /> 时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-499">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-500">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-500">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-501"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-501">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-502">包含原始数据源的分区程序。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-502">The partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-503">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-503">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-504">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-504">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-505">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 中可能会并行运行迭代，而且可以配置循环选项。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-505">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-506">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-506">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-507">对于想要重写默认分区方案的方案提供了此重载。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-507">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="c8fa3-508">例如，小型循环体可能受益于分区范围。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-508">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="c8fa3-509"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法需要自定义分区程序来支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-509">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="c8fa3-510">有关详细信息，请参阅[PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何：实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-510">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-511">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-511">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-512">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-512">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-513"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-513">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-514">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-514">-or-</span></span> 
<span data-ttu-id="c8fa3-515"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-515">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-516">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-516">-or-</span></span> 
<span data-ttu-id="c8fa3-517"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-517">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c8fa3-518">在 <paramref name="source" /> 的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-518">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="c8fa3-519">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-519">-or-</span></span> 
<span data-ttu-id="c8fa3-520">在 <paramref name="source" /> 分区程序中的任何方法返回 <see langword="null" /> 时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-520">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-521">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-521">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-522">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-522">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-523">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-523">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-524">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-524">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-525">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-525">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-526">执行具有 64 位索引的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-526">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-527">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-527">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-528">`body`委托中每个元素调用一次`source`可枚举。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-528">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="c8fa3-529">提供使用以下参数： 当前元素，<xref:System.Threading.Tasks.ParallelLoopState>可用于中断循环过早，实例和当前元素的索引 (<xref:System.Int64>)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-529">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-530">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" />参数。 </span><span class="sxs-lookup"><span data-stu-id="c8fa3-530">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-531"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-531">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-532">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-532">-or-</span></span> 
<span data-ttu-id="c8fa3-533"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-533">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-534">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-534">-or-</span></span> 
<span data-ttu-id="c8fa3-535"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-535">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-536">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-536">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-537">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-537">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-538">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-538">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-539">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-539">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-540">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-540">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-541">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-541">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-542">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-542">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-543">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-543">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-544">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-544">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-545">`body`委托中每个元素调用一次`source`可枚举。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-545">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="c8fa3-546">提供使用以下参数： 当前元素和一个<xref:System.Threading.Tasks.ParallelLoopState>可能用于过早中断该循环的实例。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-546">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-547">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" />参数。 </span><span class="sxs-lookup"><span data-stu-id="c8fa3-547">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-548"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-548">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-549">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-549">-or-</span></span> 
<span data-ttu-id="c8fa3-550"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-550">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-551">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-551">-or-</span></span> 
<span data-ttu-id="c8fa3-552"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-552">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-553">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-553">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-554">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-554">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-555">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-555">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-556">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-556">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-557">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-557">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-558">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-558">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-559">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-559">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="c8fa3-560">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 中可能会并行运行迭代，而且可以匹配配置循环选项。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-560">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-561">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-561">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-562">`body`委托中每个元素调用一次`source`可枚举。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-562">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="c8fa3-563">它提供当前元素作为参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-563">It is provided with the current element as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-564">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" />参数。 </span><span class="sxs-lookup"><span data-stu-id="c8fa3-564">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-565"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-565">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-566">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-566">-or-</span></span> 
<span data-ttu-id="c8fa3-567"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-567">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-568">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-568">-or-</span></span> 
<span data-ttu-id="c8fa3-569"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-569">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-570">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-570">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-571">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-571">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-572">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-572">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-573"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-573">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="c8fa3-574">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-574">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-575">包含原始数据源的可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-575">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="c8fa3-576">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-576">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-577">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-577">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="c8fa3-578">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-578">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="c8fa3-579">执行具有线程本地数据的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-579">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-580">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-580">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-581">对于想要重写默认分区方案的方案提供了此重载。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-581">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="c8fa3-582">例如，小型循环体可能受益于分区范围。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-582">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="c8fa3-583"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法需要自定义分区程序来支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-583">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="c8fa3-584">有关详细信息，请参阅[PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何：实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-584">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="c8fa3-585">`localInit`参与循环的执行，这些任务的每个返回初始本地状态的每个任务一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-585">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="c8fa3-586">这些初始状态传递给第一个`body`上每个任务的调用。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-586">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="c8fa3-587">然后，每个后续正文调用返回传递给下一个正文调用一个可能已修改的状态值。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-587">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="c8fa3-588">最后，每个任务上的最后一个正文调用返回传递给的州值`localFinally`委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-588">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="c8fa3-589">`localFinally`每个任务，每个任务的本地状态执行一个最终操作一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-589">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="c8fa3-590">在多个任务; 可能会同时调用此委托因此，必须同步对共享的任何变量的访问。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-590">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="c8fa3-591"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能的现有任务完成其执行生存期内使用多于线程数的更多任务，并替换为新的任务。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-591">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="c8fa3-592">这样，基础<xref:System.Threading.Tasks.TaskScheduler>对象机会添加，请更改或删除服务循环的线程。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-592">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-593"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-593">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-594">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-594">-or-</span></span> 
<span data-ttu-id="c8fa3-595"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-595">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-596">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-596">-or-</span></span> 
<span data-ttu-id="c8fa3-597"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-597">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-598">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-598">-or-</span></span> 
<span data-ttu-id="c8fa3-599"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-599">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c8fa3-600"><paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />，或者分区程序返回 <see langword="null" /> 分区。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-600">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-601">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-601">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-602">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-602">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-603"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-603">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="c8fa3-604">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-604">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-605">包含原始数据源的分区程序。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-605">The partitioner that contains the original data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="c8fa3-606">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-606">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-607">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-607">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="c8fa3-608">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-608">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="c8fa3-609">执行具有线程本地数据的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-609">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-610">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-610">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-611">对于想要重写默认分区方案的方案提供了此重载。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-611">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="c8fa3-612">例如，小型循环体可能受益于分区范围。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-612">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="c8fa3-613"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法需要自定义分区程序来支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-613">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="c8fa3-614">有关详细信息，请参阅[PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何：实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-614">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="c8fa3-615">`localInit`委托会调用一次为每个线程都参与循环的执行，这些任务的每个返回初始本地状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-615">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="c8fa3-616">这些初始状态传递给第一个`body`上每个任务的调用。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-616">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="c8fa3-617">然后，每个后续正文调用返回传递给下一个正文调用一个可能已修改的状态值。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-617">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="c8fa3-618">最后，每个任务上的最后一个正文调用返回传递给的州值`localFinally`委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-618">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="c8fa3-619">`localFinally`每个任务，每个任务的本地状态执行一个最终操作一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-619">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="c8fa3-620">在多个任务; 可能会同时调用此委托因此，必须同步对共享的任何变量的访问。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-620">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="c8fa3-621"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能的现有任务完成其执行生存期内使用多于线程数的更多任务，并替换为新的任务。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-621">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="c8fa3-622">这样，基础<xref:System.Threading.Tasks.TaskScheduler>对象机会添加，请更改或删除服务循环的线程。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-622">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-623"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-623">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-624">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-624">-or-</span></span> 
<span data-ttu-id="c8fa3-625"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-625">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-626">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-626">-or-</span></span> 
<span data-ttu-id="c8fa3-627"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-627">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-628">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-628">-or-</span></span> 
<span data-ttu-id="c8fa3-629"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-629">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c8fa3-630"><paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />，或者分区程序返回 <see langword="null" /> 分区。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-630">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-631">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-631">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-632">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-632">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-633">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-633">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="c8fa3-634">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-634">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-635">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-635">An enumerable data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="c8fa3-636">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-636">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-637">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-637">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="c8fa3-638">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-638">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="c8fa3-639">执行具有线程本地数据的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-639">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-640">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-640">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-641">`body`委托中每个元素调用一次`source`可枚举。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-641">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="c8fa3-642">提供使用以下参数： 当前元素，<xref:System.Threading.Tasks.ParallelLoopState>可用于中断循环过早的实例、 当前元素的索引 (<xref:System.Int64>)，以及可能执行的迭代之间共享某些本地状态在同一线程中。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-642">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="c8fa3-643">`localInit`参与循环的执行，这些任务的每个返回初始本地状态的每个任务一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-643">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="c8fa3-644">这些初始状态传递给第一个`body`上每个任务的调用。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-644">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="c8fa3-645">然后，每个后续正文调用返回传递给下一个正文调用一个可能已修改的状态值。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-645">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="c8fa3-646">最后，每个任务上的最后一个正文调用返回传递给的州值`localFinally`委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-646">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="c8fa3-647">`localFinally`每个任务，每个任务的本地状态执行一个最终操作一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-647">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="c8fa3-648">在多个任务; 可能会同时调用此委托因此，必须同步对共享的任何变量的访问。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-648">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="c8fa3-649"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能的现有任务完成其执行生存期内使用多于线程数的更多任务，并替换为新的任务。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-649">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="c8fa3-650">这样，基础<xref:System.Threading.Tasks.TaskScheduler>对象机会添加，请更改或删除服务循环的线程。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-650">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-651"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-651">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-652">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-652">-or-</span></span> 
<span data-ttu-id="c8fa3-653"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-653">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-654">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-654">-or-</span></span> 
<span data-ttu-id="c8fa3-655"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-655">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-656">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-656">-or-</span></span> 
<span data-ttu-id="c8fa3-657"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-657">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-658">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-658">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-659">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-659">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-660">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-660">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="c8fa3-661">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-661">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-662">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-662">An enumerable data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="c8fa3-663">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-663">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-664">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-664">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="c8fa3-665">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-665">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="c8fa3-666">执行具有线程本地数据的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-666">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-667">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-667">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-668">`body`委托中每个元素调用一次`source`可枚举。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-668">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="c8fa3-669">提供使用以下参数： 当前元素，<xref:System.Threading.Tasks.ParallelLoopState>实例可用于中断循环过早，并可能在同一线程执行的迭代之间共享某些本地状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-669">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="c8fa3-670">`localInit`参与循环的执行，这些任务的每个返回初始本地状态的每个任务一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-670">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="c8fa3-671">这些初始状态传递给第一个`body`上每个任务的调用。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-671">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="c8fa3-672">然后，每个后续正文调用返回传递给下一个正文调用一个可能已修改的状态值。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-672">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="c8fa3-673">最后，每个任务上的最后一个正文调用返回传递给的州值`localFinally`委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-673">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="c8fa3-674">`localFinally`每个线程上每个任务的本地状态执行一个最终操作一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-674">The `localFinally` delegate is invoked once per thread to perform a final action on each task's local state.</span></span> <span data-ttu-id="c8fa3-675">在多个任务; 可能会同时调用此委托因此，必须同步对共享的任何变量的访问。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-675">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="c8fa3-676"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能的现有任务完成其执行生存期内使用多于线程数的更多任务，并替换为新的任务。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-676">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="c8fa3-677">这样，基础<xref:System.Threading.Tasks.TaskScheduler>对象机会添加，请更改或删除服务循环的线程。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-677">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8fa3-678">下面的示例演示如何使用<xref:System.Threading.Tasks.Parallel.ForEach%2A>与本地状态的方法：</span><span class="sxs-lookup"><span data-stu-id="c8fa3-678">The following example shows how to use a <xref:System.Threading.Tasks.Parallel.ForEach%2A> method with local state:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforeach.cs#02)]
 [!code-vb[System.Threading.Tasks.Parallel#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforeach.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-679"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-679">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-680">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-680">-or-</span></span> 
<span data-ttu-id="c8fa3-681"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-681">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-682">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-682">-or-</span></span> 
<span data-ttu-id="c8fa3-683"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-683">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-684">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-684">-or-</span></span> 
<span data-ttu-id="c8fa3-685"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-685">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-686">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-686">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-687">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-687">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-688"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-688">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="c8fa3-689">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-689">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-690">包含原始数据源的可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-690">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-691">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-691">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="c8fa3-692">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-692">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-693">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-693">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="c8fa3-694">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-694">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="c8fa3-695">执行具有 64 位索引和线程本地数据的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-695">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-696">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-696">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-697">对于想要重写默认分区方案的方案提供了此重载。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-697">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="c8fa3-698">例如，小型循环体可能受益于分区范围。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-698">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="c8fa3-699"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法需要自定义分区程序来支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-699">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="c8fa3-700">有关详细信息，请参阅[PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何：实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-700">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="c8fa3-701">`localInit`参与循环的执行，这些任务的每个返回初始本地状态的每个任务一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-701">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="c8fa3-702">这些初始状态传递给第一个`body`上每个任务的调用。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-702">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="c8fa3-703">然后，每个后续正文调用返回传递给下一个正文调用一个可能已修改的状态值。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-703">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="c8fa3-704">最后，每个线程上的最后一个正文调用返回传递给的州值`localFinally`委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-704">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="c8fa3-705">`localFinally`每个任务，每个任务的本地状态执行一个最终操作一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-705">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="c8fa3-706">在多个任务; 可能会同时调用此委托因此，必须同步对共享的任何变量的访问。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-706">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="c8fa3-707"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能的现有任务完成其执行生存期内使用多于线程数的更多任务，并替换为新的任务。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-707">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="c8fa3-708">这样，基础<xref:System.Threading.Tasks.TaskScheduler>对象机会添加，请更改或删除服务循环的线程。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-708">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-709"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-709">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-710">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-710">-or-</span></span> 
<span data-ttu-id="c8fa3-711"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-711">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-712">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-712">-or-</span></span> 
<span data-ttu-id="c8fa3-713"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-713">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-714">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-714">-or-</span></span> 
<span data-ttu-id="c8fa3-715"><paramref name="localInit" /> 或 <paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-715">The <paramref name="localInit" /> or <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c8fa3-716"><paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />，或者分区程序返回 <see langword="null" /> 分区。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-716">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-717">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-717">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-718">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-718">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-719">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-719">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-720">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-720">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-721"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-721">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="c8fa3-722">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-722">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-723">包含原始数据源的分区程序。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-723">The partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-724">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-724">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="c8fa3-725">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-725">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-726">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-726">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="c8fa3-727">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-727">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="c8fa3-728">执行具有线程本地数据的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-728">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation  with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-729">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-729">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-730">对于想要重写默认分区方案的方案提供了此重载。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-730">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="c8fa3-731">例如，小型循环体可能受益于分区范围。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-731">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="c8fa3-732"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法需要自定义分区程序来支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-732">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="c8fa3-733">对于使用小型循环体可能会受益于静态范围分区方案提供了此重载。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-733">This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning.</span></span> <span data-ttu-id="c8fa3-734">分区程序必须支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-734">Partitioners must support dynamic partitions.</span></span>  <span data-ttu-id="c8fa3-735">有关详细信息，请参阅[PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何：实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-735">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="c8fa3-736">`localInit`参与循环的执行，这些任务的每个返回初始本地状态的每个任务一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-736">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="c8fa3-737">这些初始状态传递给第一个`body`上每个任务的调用。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-737">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="c8fa3-738">然后，每个后续正文调用返回传递给下一个正文调用一个可能已修改的状态值。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-738">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="c8fa3-739">最后，每个任务上的最后一个正文调用返回传递给的州值`localFinally`委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-739">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="c8fa3-740">`localFinally`每个任务，每个任务的本地状态执行一个最终操作一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-740">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="c8fa3-741">在多个任务; 可能会同时调用此委托因此，必须同步对共享的任何变量的访问。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-741">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="c8fa3-742"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能的现有任务完成其执行生存期内使用多于线程数的更多任务，并替换为新的任务。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-742">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="c8fa3-743">这样，基础<xref:System.Threading.Tasks.TaskScheduler>对象机会添加，请更改或删除服务循环的线程。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-743">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-744"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-744">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-745">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-745">-or-</span></span> 
<span data-ttu-id="c8fa3-746"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-746">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-747">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-747">-or-</span></span> 
<span data-ttu-id="c8fa3-748"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-748">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-749">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-749">-or-</span></span> 
<span data-ttu-id="c8fa3-750"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-750">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-751">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-751">-or-</span></span> 
<span data-ttu-id="c8fa3-752"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-752">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c8fa3-753"><paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />，或者分区程序返回 <see langword="null" /> 分区。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-753">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-754">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-754">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-755">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-755">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-756">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-756">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-757">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-757">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-758">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-758">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="c8fa3-759">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-759">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-760">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-760">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-761">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-761">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="c8fa3-762">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-762">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-763">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-763">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="c8fa3-764">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-764">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="c8fa3-765">执行具有线程本地数据和 64 位索引的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-765">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data and 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-766">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-766">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-767">`body`委托中每个元素调用一次`source`可枚举。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-767">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="c8fa3-768">提供使用以下参数： 当前元素，<xref:System.Threading.Tasks.ParallelLoopState>可用于中断循环过早的实例、 当前元素的索引 (<xref:System.Int64>)，以及可能执行的迭代之间共享某些本地状态在同一线程中。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-768">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="c8fa3-769">`localInit`参与循环的执行，这些任务的每个返回初始本地状态的每个任务一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-769">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="c8fa3-770">这些初始状态传递给第一个`body`上每个任务的调用。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-770">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="c8fa3-771">然后，每个后续正文调用返回传递给下一个正文调用一个可能已修改的状态值。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-771">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="c8fa3-772">最后，每个任务上的最后一个正文调用返回传递给的州值`localFinally`委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-772">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="c8fa3-773">`localFinally`每个线程上每个任务的本地状态执行一个最终操作一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-773">The `localFinally` delegate is invoked once per thread to perform a final action on each task's local state.</span></span> <span data-ttu-id="c8fa3-774">在多个任务; 可能会同时调用此委托因此，必须同步对共享的任何变量的访问。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-774">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="c8fa3-775"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能的现有任务完成其执行生存期内使用多于线程数的更多任务，并替换为新的任务。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-775">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="c8fa3-776">这样，基础<xref:System.Threading.Tasks.TaskScheduler>对象机会添加，请更改或删除服务循环的线程。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-776">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-777"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-777">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-778">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-778">-or-</span></span> 
<span data-ttu-id="c8fa3-779"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-779">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-780">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-780">-or-</span></span> 
<span data-ttu-id="c8fa3-781"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-781">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-782">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-782">-or-</span></span> 
<span data-ttu-id="c8fa3-783"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-783">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-784">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-784">-or-</span></span> 
<span data-ttu-id="c8fa3-785"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-785">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-786">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-786">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-787">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-787">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-788">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-788">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-789">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-789">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="c8fa3-790">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-790">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="c8fa3-791">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-791">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="c8fa3-792">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-792">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-793">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-793">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="c8fa3-794">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-794">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="c8fa3-795">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-795">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="c8fa3-796">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-796">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="c8fa3-797">执行具有线程本地数据的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-797">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="c8fa3-798">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-798">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-799">`body`委托中每个元素调用一次`source`可枚举。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-799">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="c8fa3-800">提供使用以下参数： 当前元素，<xref:System.Threading.Tasks.ParallelLoopState>实例可用于中断循环过早，并可能在同一线程执行的迭代之间共享某些本地状态。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-800">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="c8fa3-801">`localInit`参与循环的执行，这些任务的每个返回初始本地状态的每个任务一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-801">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="c8fa3-802">这些初始状态传递给第一个`body`上每个任务的调用。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-802">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="c8fa3-803">然后，每个后续正文调用返回传递给下一个正文调用一个可能已修改的状态值。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-803">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="c8fa3-804">最后，每个任务上的最后一个正文调用返回传递给的州值`localFinally`委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-804">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="c8fa3-805">`localFinally`每个线程上每个任务的本地状态执行一个最终操作一次调用委托。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-805">The `localFinally` delegate is invoked once per thread to perform a final action on each task's local state.</span></span> <span data-ttu-id="c8fa3-806">在多个任务; 可能会同时调用此委托因此，必须同步对共享的任何变量的访问。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-806">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="c8fa3-807"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能的现有任务完成其执行生存期内使用多于线程数的更多任务，并替换为新的任务。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-807">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="c8fa3-808">这样，基础<xref:System.Threading.Tasks.TaskScheduler>对象机会添加，请更改或删除服务循环的线程。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-808">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-809"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-809">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-810">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-810">-or-</span></span> 
<span data-ttu-id="c8fa3-811"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-811">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-812">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-812">-or-</span></span> 
<span data-ttu-id="c8fa3-813"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-813">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-814">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-814">-or-</span></span> 
<span data-ttu-id="c8fa3-815"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-815">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-816">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-816">-or-</span></span> 
<span data-ttu-id="c8fa3-817"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-817">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-818">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-818">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-819">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-819">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-820">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-820">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="c8fa3-821">并行循环</span><span class="sxs-lookup"><span data-stu-id="c8fa3-821">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c8fa3-822">尽可能并行执行提供的每个操作。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-822">Executes each of the provided actions, possibly in parallel.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Action[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Invoke (ParamArray actions As Action())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke actions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actions"><span data-ttu-id="c8fa3-823">要执行的 <see cref="T:System.Action" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-823">An array of <see cref="T:System.Action" /> to execute.</span></span></param>
        <summary><span data-ttu-id="c8fa3-824">尽可能并行执行提供的每个操作。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-824">Executes each of the provided actions, possibly in parallel.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-825">此方法可以用于执行的一组操作，可能会并行。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-825">This method can be used to execute a set of operations, potentially in parallel.</span></span>  
  
 <span data-ttu-id="c8fa3-826">有关在操作执行或它们是否并行执行的顺序不作任何保证。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-826">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="c8fa3-827">此方法不返回每个提供操作完成之前，而不考虑是否在完成出现正常或异常终止。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-827">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="c8fa3-828">有关详细信息，请参阅[如何：使用 Parallel.Invoke 执行并行操作](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-828">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8fa3-829">此示例演示如何使用<xref:System.Threading.Tasks.Parallel.Invoke%2A>与其他方法、 匿名委托和 lambda 表达式的方法。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-829">This example demonstrates how to use the <xref:System.Threading.Tasks.Parallel.Invoke%2A> method with other methods, anonymous delegates, and lambda expressions.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelinvoke.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelinvoke.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-830"><paramref name="actions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-830">The <paramref name="actions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-831">当 <paramref name="actions" /> 数组中的任何操作引发异常时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-831">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c8fa3-832"><paramref name="actions" />数组包含 <see langword="null" /> 个元素。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-832">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (System.Threading.Tasks.ParallelOptions parallelOptions, params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(System::Threading::Tasks::ParallelOptions ^ parallelOptions, ... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Threading.Tasks.ParallelOptions * Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke (parallelOptions, actions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parallelOptions"><span data-ttu-id="c8fa3-833">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-833">An object that configures the behavior of this operation.</span></span></param>
        <param name="actions"><span data-ttu-id="c8fa3-834">要执行的操作数组。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-834">An array of actions to execute.</span></span></param>
        <summary><span data-ttu-id="c8fa3-835">执行所提供的每个操作，而且尽可能并行运行，除非用户取消了操作。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-835">Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8fa3-836">此方法可以用于执行的一组操作，可能会并行。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-836">This method can be used to execute a set of operations, potentially in parallel.</span></span> <span data-ttu-id="c8fa3-837">中的取消标记传递<xref:System.Threading.Tasks.ParallelOptions>结构使调用方取消整个操作。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-837">The cancellation token passed in with the <xref:System.Threading.Tasks.ParallelOptions> structure enables the caller to cancel the entire operation.</span></span> <span data-ttu-id="c8fa3-838">有关详细信息，请参阅[托管线程中的取消](~/docs/standard/threading/cancellation-in-managed-threads.md)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-838">For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
 <span data-ttu-id="c8fa3-839">有关在操作执行或它们是否并行执行的顺序不作任何保证。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-839">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="c8fa3-840">此方法不返回每个提供操作完成之前，而不考虑是否在完成出现正常或异常终止。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-840">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="c8fa3-841">有关详细信息，请参阅[如何：使用 Parallel.Invoke 执行并行操作](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-841">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c8fa3-842"><see cref="T:System.Threading.CancellationToken" /> 处于 <paramref name="parallelOptions" /> 设置。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-842">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> is set.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c8fa3-843"><paramref name="actions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-843">The <paramref name="actions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c8fa3-844">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c8fa3-844">-or-</span></span> 
<span data-ttu-id="c8fa3-845"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-845">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="c8fa3-846">当 <paramref name="actions" /> 数组中的任何操作引发异常时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-846">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c8fa3-847"><paramref name="actions" />数组包含 <see langword="null" /> 个元素。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-847">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c8fa3-848">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="c8fa3-848">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>