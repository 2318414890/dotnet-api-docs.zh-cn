<Type Name="Task" FullName="System.Threading.Tasks.Task">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d920b17ab80db20fab0e3101b745858eade81dd1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Task : IAsyncResult, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Task extends System.Object implements class System.IAsyncResult, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Task" />
  <TypeSignature Language="VB.NET" Value="Public Class Task&#xA;Implements IAsyncResult, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Task : IAsyncResult, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.SystemThreadingTasks_TaskDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c0057-101">表示一个异步操作。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c0057-101">Represents an asynchronous operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
   
## Remarks  
 <span data-ttu-id="c0057-102"><xref:System.Threading.Tasks.Task>类的表示单个操作不会返回一个值，通常以异步方式执行。</span><span class="sxs-lookup"><span data-stu-id="c0057-102">The <xref:System.Threading.Tasks.Task> class represents a single operation that does not return a value and that usually executes asynchronously.</span></span> <span data-ttu-id="c0057-103"><xref:System.Threading.Tasks.Task> 对象是一种的中心组件[基于任务的异步模式](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)首次在.NET Framework 4 中引入。</span><span class="sxs-lookup"><span data-stu-id="c0057-103"><xref:System.Threading.Tasks.Task> objects are one of the central components of the  [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) first introduced in the .NET Framework 4.</span></span> <span data-ttu-id="c0057-104">由于由执行工作<xref:System.Threading.Tasks.Task>对象通常以异步方式执行线程池线程上而不是以同步方式主应用程序线程，因此你可以使用<xref:System.Threading.Tasks.Task.Status%2A>属性，以及<xref:System.Threading.Tasks.Task.IsCanceled%2A>， <xref:System.Threading.Tasks.Task.IsCompleted%2A>，和<xref:System.Threading.Tasks.Task.IsFaulted%2A>属性，以确定任务的状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-104">Because the work performed by a <xref:System.Threading.Tasks.Task> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task.</span></span> <span data-ttu-id="c0057-105">通常情况下，lambda 表达式用于指定的任务是执行的工作。</span><span class="sxs-lookup"><span data-stu-id="c0057-105">Most commonly, a lambda expression is used to specify the work that the task is to perform.</span></span>  
  
 <span data-ttu-id="c0057-106">对于返回值的操作，你使用<xref:System.Threading.Tasks.Task%601>类。</span><span class="sxs-lookup"><span data-stu-id="c0057-106">For operations that return values, you use the <xref:System.Threading.Tasks.Task%601> class.</span></span>  
  
 <span data-ttu-id="c0057-107">本节内容：</span><span class="sxs-lookup"><span data-stu-id="c0057-107">In this section:</span></span>  
  
 <span data-ttu-id="c0057-108">[任务实例化示例](#Instant) </span><span class="sxs-lookup"><span data-stu-id="c0057-108">[Task instantiation examples](#Instant) </span></span>  
 <span data-ttu-id="c0057-109">[创建和执行任务](#Creating) </span><span class="sxs-lookup"><span data-stu-id="c0057-109">[Creating and executing a task](#Creating) </span></span>  
 <span data-ttu-id="c0057-110">[分隔开来将任务创建和执行](#Separating) </span><span class="sxs-lookup"><span data-stu-id="c0057-110">[Separating task creation and execution](#Separating) </span></span>  
 <span data-ttu-id="c0057-111">[等待一个或多个任务完成](#WaitingForOne) </span><span class="sxs-lookup"><span data-stu-id="c0057-111">[Waiting for one or more tasks to complete](#WaitingForOne) </span></span>  
 <span data-ttu-id="c0057-112">[任务和区域性](#Culture) </span><span class="sxs-lookup"><span data-stu-id="c0057-112">[Tasks and culture](#Culture) </span></span>  
 [<span data-ttu-id="c0057-113">对于调试器开发人员</span><span class="sxs-lookup"><span data-stu-id="c0057-113">For debugger developers</span></span>](#Debugger)  

 <a name="Instant"></a>     
## <a name="task-instantiation"></a><span data-ttu-id="c0057-114">任务实例化</span><span class="sxs-lookup"><span data-stu-id="c0057-114">Task instantiation</span></span>  
 <span data-ttu-id="c0057-115">下面的示例创建并执行四个任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-115">The following example creates and executes four tasks.</span></span> <span data-ttu-id="c0057-116">三个任务执行<xref:System.Action%601>委托名为`action`，这样便可以接受类型的自变量<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="c0057-116">Three tasks execute an <xref:System.Action%601> delegate named `action`, which accepts an argument of type <xref:System.Object>.</span></span> <span data-ttu-id="c0057-117">第四个任务执行 lambda 表达式 (<xref:System.Action>委托)，它是以内联方式定义的任务创建方法的调用中。</span><span class="sxs-lookup"><span data-stu-id="c0057-117">A fourth task executes a lambda expression (an <xref:System.Action> delegate) that is defined inline in the call to the task creation method.</span></span> <span data-ttu-id="c0057-118">每个任务是实例化并运行以不同的方式：</span><span class="sxs-lookup"><span data-stu-id="c0057-118">Each task is instantiated and run in a different way:</span></span>  
  
-   <span data-ttu-id="c0057-119">任务`t1`调用任务类构造函数，通过实例化，但通过调用会启动其<xref:System.Threading.Tasks.Task.Start>任务后，才方法`t2`已开始。</span><span class="sxs-lookup"><span data-stu-id="c0057-119">Task `t1` is instantiated by calling a Task class constructor, but is started by calling its <xref:System.Threading.Tasks.Task.Start> method only after task `t2` has started.</span></span>  
  
-   <span data-ttu-id="c0057-120">任务`t2`实例化并通过调用在单个方法调用中启动<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-120">Task `t2` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="c0057-121">任务`t3`实例化并通过调用在单个方法调用中启动<xref:System.Threading.Tasks.Task.Run%28System.Action%29>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-121">Task `t3` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span>  
  
-   <span data-ttu-id="c0057-122">任务`t4`上同步执行主线程通过调用<xref:System.Threading.Tasks.Task.RunSynchronously>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-122">Task `t4` is executed synchronously on the main thread by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method.</span></span>  
  
 <span data-ttu-id="c0057-123">因为任务`t4`以同步方式，执行它在主应用程序线程上执行。</span><span class="sxs-lookup"><span data-stu-id="c0057-123">Because task `t4` executes synchronously, it executes on the main application thread.</span></span> <span data-ttu-id="c0057-124">剩余的任务执行异步通常在一个或多个线程池线程上。</span><span class="sxs-lookup"><span data-stu-id="c0057-124">The remaining tasks execute asynchronously typically on one or more thread pool threads.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew.cs#01)]
 [!code-vb[System.Threading.Tasks.Task#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew.vb#01)] 
    
<a name="Creating"></a>   
## <a name="creating-and-executing-a-task"></a><span data-ttu-id="c0057-125">创建和执行任务</span><span class="sxs-lookup"><span data-stu-id="c0057-125">Creating and executing a task</span></span>  
 <span data-ttu-id="c0057-126"><xref:System.Threading.Tasks.Task> 实例可能会创建各种不同的方式。</span><span class="sxs-lookup"><span data-stu-id="c0057-126"><xref:System.Threading.Tasks.Task> instances may be created in a variety of ways.</span></span> <span data-ttu-id="c0057-127">最常用的方法，即从开始提供[!INCLUDE[net_v45](~/includes/net-v45-md.md)]，是调用静态<xref:System.Threading.Tasks.Task.Run%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-127">The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%2A> method.</span></span> <span data-ttu-id="c0057-128"><xref:System.Threading.Tasks.Task.Run%2A>方法提供了一种简单的方法启动任务使用默认值，而无需其他参数。</span><span class="sxs-lookup"><span data-stu-id="c0057-128">The <xref:System.Threading.Tasks.Task.Run%2A> method provides a simple way to start a task using default values and without requiring additional parameters.</span></span> <span data-ttu-id="c0057-129">下面的示例使用<xref:System.Threading.Tasks.Task.Run%28System.Action%29>方法以启动循环，然后显示的循环迭代数的任务：</span><span class="sxs-lookup"><span data-stu-id="c0057-129">The following example uses the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to start a task that loops and then displays the number of loop iterations:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/run1.cs#6)]
 [!code-vb[System.Threading.Tasks.Task#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/run1.vb#6)]  
  
 <span data-ttu-id="c0057-130">一种替代方法，并启动任务的最常见方法[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，是静态<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-130">An alternative, and the most common method to start a task in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c0057-131"><xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType>属性返回<xref:System.Threading.Tasks.TaskFactory>对象。</span><span class="sxs-lookup"><span data-stu-id="c0057-131">The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> property returns a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="c0057-132">重载的<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType>方法，你可以指定要传递给任务创建选项和任务计划程序参数。</span><span class="sxs-lookup"><span data-stu-id="c0057-132">Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method let you specify parameters to pass to the task creation options and a task scheduler.</span></span> <span data-ttu-id="c0057-133">下面的示例使用<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType>方法启动任务来。</span><span class="sxs-lookup"><span data-stu-id="c0057-133">The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method to start a task.</span></span> <span data-ttu-id="c0057-134">它在功能上等效于在前面的示例代码。</span><span class="sxs-lookup"><span data-stu-id="c0057-134">It is functionally equivalent to the code in the previous example.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew1.cs#7)]
 [!code-vb[System.Threading.Tasks.Task#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew1.vb#7)]  
  
 <span data-ttu-id="c0057-135">有关更完整示例，请参阅[基于任务的异步编程](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-135">For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).</span></span>  
  
<a name="Separating"></a>   
## <a name="separating-task-creation-and-execution"></a><span data-ttu-id="c0057-136">分隔开来将任务创建和执行</span><span class="sxs-lookup"><span data-stu-id="c0057-136">Separating task creation and execution</span></span>  
 <span data-ttu-id="c0057-137"><xref:System.Threading.Tasks.Task>类还提供了构造函数对任务进行初始化，但的未计划的执行。</span><span class="sxs-lookup"><span data-stu-id="c0057-137">The <xref:System.Threading.Tasks.Task> class also provides constructors that initialize the task but that do not schedule it for execution.</span></span> <span data-ttu-id="c0057-138">出于性能原因，<xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType>或<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType>方法是用于创建和计划计算的任务的首选的机制，但对于创建和计划必须分开的方案，你可以使用的构造函数，然后调用<xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType>方法来计划在以后执行的任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-138">For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> method to schedule the task for execution at a later time.</span></span>  
  
<a name="WaitingForOne"></a>   
## <a name="waiting-for-one-or-more-tasks-to-complete"></a><span data-ttu-id="c0057-139">等待一个或多个任务完成</span><span class="sxs-lookup"><span data-stu-id="c0057-139">Waiting for one or more tasks to complete</span></span>  
 <span data-ttu-id="c0057-140">因为任务通常运行以异步方式在线程池线程上，创建和启动任务的线程将继续执行，一旦该任务已实例化。</span><span class="sxs-lookup"><span data-stu-id="c0057-140">Because tasks typically run asynchronously on a thread pool thread, the thread that creates and starts the task continues execution as soon as the task has been instantiated.</span></span> <span data-ttu-id="c0057-141">在某些情况下，当调用的线程的主应用程序线程，应用程序可能会终止任何之前任务操作实际开始执行。</span><span class="sxs-lookup"><span data-stu-id="c0057-141">In some cases, when the calling thread is the main application thread, the app may terminate before any the task actually begins execution.</span></span> <span data-ttu-id="c0057-142">其他情况下，你的应用程序逻辑可能需要调用线程继续执行，仅在一个或多个任务已完成执行时。</span><span class="sxs-lookup"><span data-stu-id="c0057-142">In others,   your application's logic may require that the calling thread continue execution only when one or more tasks has completed execution.</span></span> <span data-ttu-id="c0057-143">你可以同步调用线程的执行异步任务和它将启动通过调用`Wait`方法来等待一个或多个任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-143">You can synchronize the execution of the calling thread and the asynchronous tasks it launches by calling a `Wait` method to wait for one or more tasks to complete.</span></span>  
  
 <span data-ttu-id="c0057-144">若要等待完成单个任务，你可以调用其<xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-144">To wait for a single task to complete, you can call its <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c0057-145">调用<xref:System.Threading.Tasks.Task.Wait%2A>方法阻止调用线程，直到已完成执行的单个类实例。</span><span class="sxs-lookup"><span data-stu-id="c0057-145">A call to the  <xref:System.Threading.Tasks.Task.Wait%2A> method blocks the calling thread until the single class instance has completed execution.</span></span>  
  
 <span data-ttu-id="c0057-146">下面的示例调用的无参数<xref:System.Threading.Tasks.Task.Wait>无条件地等待，直到任务完成的方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-146">The following example calls the parameterless <xref:System.Threading.Tasks.Task.Wait> method to wait unconditionally until a task completes.</span></span> <span data-ttu-id="c0057-147">该任务通过调用来模拟工作<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>两秒钟进入睡眠状态的方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-147">The task simulates work by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to sleep for two seconds.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait1.cs#8)]
 [!code-vb[System.Threading.Tasks.Task#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait1.vb#8)]  
  
 <span data-ttu-id="c0057-148">你可以有条件地等待任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-148">You can also conditionally wait for a task to complete.</span></span> <span data-ttu-id="c0057-149"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29>和<xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29>方法阻止调用线程，直到任务完成或超时间隔结束，不管先满足。</span><span class="sxs-lookup"><span data-stu-id="c0057-149">The  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> and <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first.</span></span> <span data-ttu-id="c0057-150">由于下面的示例将启动两秒钟休眠但定义了一秒超时值，调用线程受到阻止，直到在超时到期的任务之前, 已完成执行的任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-150">Since the following example launches a task that sleeps for two seconds but defines a one-second timeout value, the calling thread blocks until the timeout expires and before the task has completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait2.cs#9)]
 [!code-vb[System.Threading.Tasks.Task#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait2.vb#9)]  
  
 <span data-ttu-id="c0057-151">你也可以通过调用提供一个取消标记<xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29>和<xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-151">You can also supply a cancellation token by calling the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> and  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> methods.</span></span> <span data-ttu-id="c0057-152">如果令牌的<xref:System.Threading.CancellationToken.IsCancellationRequested%2A>属性是`true`，取消等待; 如果为真时<xref:System.Threading.Tasks.Task.Wait%2A>方法终止。</span><span class="sxs-lookup"><span data-stu-id="c0057-152">If the  token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`, the wait is cancelled; if it becomes true while the <xref:System.Threading.Tasks.Task.Wait%2A> method terminates.</span></span>  
  
 <span data-ttu-id="c0057-153">在某些情况下，你可能想要等待的执行的任务序列的第一个完成，但不是任务它的小心。</span><span class="sxs-lookup"><span data-stu-id="c0057-153">In some cases, you may want to wait for the first of a series of executing tasks to complete, but don't care which task it is.</span></span>  <span data-ttu-id="c0057-154">出于此目的，您可以调用的重载之一<xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-154">For this purpose, you can call one of the overloads of the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="c0057-155">下面的示例创建三个任务，其中每个休眠时间间隔确定由随机数生成器。</span><span class="sxs-lookup"><span data-stu-id="c0057-155">The following example creates three tasks, each of which sleeps for an interval determine by a random number generator.</span></span> <span data-ttu-id="c0057-156"><xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29>方法等待第一个任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-156">The <xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> method waits for the first task to complete.</span></span> <span data-ttu-id="c0057-157">然后，此示例显示所有三个任务的状态的信息。</span><span class="sxs-lookup"><span data-stu-id="c0057-157">The example then displays information about the status of all three tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WhenAny1.cs#10)]
 [!code-vb[System.Threading.Tasks.Task#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAny1.vb#10)]  
  
 <span data-ttu-id="c0057-158">你也可以等待所有任务完成通过调用一系列<xref:System.Threading.Tasks.Task.WaitAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-158">You can also wait for all of a series of tasks to complete by calling the <xref:System.Threading.Tasks.Task.WaitAll%2A> method.</span></span> <span data-ttu-id="c0057-159">下面的示例创建十个任务、 等待所有 10 个若要完成，然后显示其状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-159">The following example creates ten tasks, waits for all ten to complete, and then displays their status.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll1.cs#11)]
 [!code-vb[System.Threading.Tasks.Task#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll1.vb#11)]  
  
 <span data-ttu-id="c0057-160">请注意在等待一个或多个任务完成时，任何正在运行的任务中引发的异常会传播调用的线程上`Wait`方法，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="c0057-160">Note that when you wait for one or more tasks to complete, any exceptions thrown in the running tasks are propagated on the thread that calls the `Wait` method, as the following example shows.</span></span> <span data-ttu-id="c0057-161">它将启动 12 任务，其中的三种正常方式完成和三个异常的引发。</span><span class="sxs-lookup"><span data-stu-id="c0057-161">It launches 12 tasks, three of which complete normally and three of which throw an exception.</span></span> <span data-ttu-id="c0057-162">剩余的六项任务，三个早于开始日期，取消和三个将被取消时执行它们。</span><span class="sxs-lookup"><span data-stu-id="c0057-162">Of the remaining six tasks, three are cancelled before the start, and three are cancelled while they executing.</span></span> <span data-ttu-id="c0057-163">在中引发异常<xref:System.Threading.Tasks.Task.WaitAll%2A>方法调用和是否由处理`try` / `catch`块。</span><span class="sxs-lookup"><span data-stu-id="c0057-163">Exceptions are thrown in the <xref:System.Threading.Tasks.Task.WaitAll%2A> method call and are handled by a `try`/`catch` block.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll2.cs#12)]
 [!code-vb[System.Threading.Tasks.Task#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll2.vb#12)]  
  
 <span data-ttu-id="c0057-164">有关基于任务的异步操作中的异常处理的详细信息，请参阅[异常处理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-164">For more information on exception handling in task-based asynchronous operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
<a name="Culture"></a>   
## <a name="tasks-and-culture"></a><span data-ttu-id="c0057-165">任务和区域性</span><span class="sxs-lookup"><span data-stu-id="c0057-165">Tasks and culture</span></span>  
 <span data-ttu-id="c0057-166">从桌面应用程序面向[!INCLUDE[net_v46](~/includes/net-v46-md.md)]，创建和调用任务的线程的区域性将成为线程的上下文的一部分。</span><span class="sxs-lookup"><span data-stu-id="c0057-166">Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context.</span></span> <span data-ttu-id="c0057-167">也就是说，无论当前区域性执行该任务时的线程，任务的当前区域性为调用线程的区域性。</span><span class="sxs-lookup"><span data-stu-id="c0057-167">That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread.</span></span> <span data-ttu-id="c0057-168">对于面向.NET Framework，之前版本的应用， [!INCLUDE[net_v46](~/includes/net-v46-md.md)]，任务的区域性为执行该任务时的线程的区域性。</span><span class="sxs-lookup"><span data-stu-id="c0057-168">For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes.</span></span> <span data-ttu-id="c0057-169">有关详细信息，请参阅中的"区域性和基于任务的异步操作"部分<xref:System.Globalization.CultureInfo>主题。</span><span class="sxs-lookup"><span data-stu-id="c0057-169">For more information, see the "Culture and task-based asynchronous operations" section in the <xref:System.Globalization.CultureInfo> topic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0057-170">应用商店应用程序按照 Windows 运行时中设置和获取的默认区域性。</span><span class="sxs-lookup"><span data-stu-id="c0057-170">Store apps follow the Windows Runtime in setting and getting the default culture.</span></span>  
  
<a name="Debugger"></a>   
## <a name="for-debugger-developers"></a><span data-ttu-id="c0057-171">对于调试器开发人员</span><span class="sxs-lookup"><span data-stu-id="c0057-171">For debugger developers</span></span>  
 <span data-ttu-id="c0057-172">实现自定义调试器的开发人员而言，对于多个任务的内部和私有成员会很有用 （这些可能会更改从发行版本而异）。</span><span class="sxs-lookup"><span data-stu-id="c0057-172">For developers implementing custom debuggers, several internal and private members of task may be useful (these may change from release to release).</span></span> <span data-ttu-id="c0057-173">`m_taskId`字段用作后备存储<xref:System.Threading.Tasks.Task.Id%2A>属性，但是访问直接从调试器的此字段可能比通过属性的 getter 方法访问相同的值更高效 (`s_taskIdCounter`计数器是用于检索一项任务的下一个可用 ID）。</span><span class="sxs-lookup"><span data-stu-id="c0057-173">The `m_taskId` field serves as the backing store for the <xref:System.Threading.Tasks.Task.Id%2A> property, however accessing this field directly from a debugger may be more efficient than accessing the same value through the property's getter method (the `s_taskIdCounter` counter is used to retrieve the next available ID for a task).</span></span> <span data-ttu-id="c0057-174">同样，`m_stateFlags`字段存储有关当前的生命周期阶段的任务，还可通过访问信息的信息<xref:System.Threading.Tasks.Task.Status%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="c0057-174">Similarly, the `m_stateFlags` field stores information about the current lifecycle stage of the task, information also accessible through the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span> <span data-ttu-id="c0057-175">`m_action`字段存储对该任务的委托的引用和`m_stateObject`字段存储由开发人员传递给任务的异步状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-175">The `m_action` field stores a reference to the task's delegate, and the `m_stateObject` field stores the async state passed to the task by the developer.</span></span> <span data-ttu-id="c0057-176">最后，为分析堆栈帧的调试器`InternalWait`方法处理任务时输入等待操作的潜在标记。</span><span class="sxs-lookup"><span data-stu-id="c0057-176">Finally, for debuggers that parse stack frames, the `InternalWait` method serves a potential marker for when a task is entering a wait operation.</span></span>   
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="c0057-177">所有成员<see cref="T:System.Threading.Tasks.Task" />，除<see cref="M:System.Threading.Tasks.Task.Dispose" />，都是线程安全，而且可能从多个线程同时使用。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c0057-177">All members of <see cref="T:System.Threading.Tasks.Task" />, except for <see cref="M:System.Threading.Tasks.Task.Dispose" />, are thread-safe and may be used from multiple threads concurrently.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Tasks.Task`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-178">初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-178">Initializes a new <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="c0057-179">表示要在任务中执行的代码的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-179">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-180">使用指定的操作初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-180">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-181">而不是最常见的方法调用此构造函数来实例化<xref:System.Threading.Tasks.Task>对象并启动任务是通过调用静态<xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType>或<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-181">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c0057-182">此构造函数提供的唯一好处是它允许对象实例化分离，从而可从任务调用。</span><span class="sxs-lookup"><span data-stu-id="c0057-182">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-183">下面的示例使用<xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29>构造函数来创建检索中的文件名的任务指定目录。</span><span class="sxs-lookup"><span data-stu-id="c0057-183">The following example uses the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to create tasks that retrieve the filenames in specified directories.</span></span> <span data-ttu-id="c0057-184">所有任务都写入到单个文件名称<xref:System.Collections.Concurrent.ConcurrentBag%601>对象。</span><span class="sxs-lookup"><span data-stu-id="c0057-184">All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span> <span data-ttu-id="c0057-185">该示例然后调用<xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29>方法，以确保所有的任务已完成，并且然后显示文件名写入的总数的计数<xref:System.Collections.Concurrent.ConcurrentBag%601>对象。</span><span class="sxs-lookup"><span data-stu-id="c0057-185">The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/ctor1.vb#1)]  
  
 <span data-ttu-id="c0057-186">下面的示例是完全相同，只不过它使用<xref:System.Threading.Tasks.Task.Run%28System.Action%29>方法来实例化并在单个操作中运行任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-186">The following example is identical, except that it used the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to instantiate and run the task in a single operation.</span></span> <span data-ttu-id="c0057-187">该方法返回<xref:System.Threading.Tasks.Task>表示任务的对象。</span><span class="sxs-lookup"><span data-stu-id="c0057-187">The method returns the <xref:System.Threading.Tasks.Task> object that represents the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-188">
            <paramref name="action" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-188">The <paramref name="action" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Threading.Tasks.Task.Run(System.Action)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="c0057-189">表示要在任务中执行的代码的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-189">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-190">新任务将观察的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-190">The <see cref="T:System.Threading.CancellationToken" /> that the new  task will observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-191">使用指定的操作和 <see cref="T:System.Threading.Tasks.Task" /> 初始化新的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-191">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-192">而不是最常见的方法调用此构造函数来实例化<xref:System.Threading.Tasks.Task>对象并启动任务是通过调用静态<xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>和<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-192">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> and <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="c0057-193">此构造函数提供的唯一好处是它允许对象实例化分离，从而可从任务调用。</span><span class="sxs-lookup"><span data-stu-id="c0057-193">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 <span data-ttu-id="c0057-194">有关详细信息，请参阅[任务并行 （任务并行库）](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)和[托管线程中的取消](~/docs/standard/threading/cancellation-in-managed-threads.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-194">For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-195">下面的示例调用<xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29>构造函数来创建一个任务，它循环 C:\Windows\System32 目录中的文件。</span><span class="sxs-lookup"><span data-stu-id="c0057-195">The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29> constructor to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="c0057-196">Lambda 表达式调用<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法将添加到每个文件的信息<xref:System.Collections.Generic.List%601>对象。</span><span class="sxs-lookup"><span data-stu-id="c0057-196">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="c0057-197">每个分离的嵌套的任务由调用<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>循环检查取消标记的状态，并且如果已请求取消，将调用<xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-197">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c0057-198"><xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType>方法抛出异常<xref:System.OperationCanceledException>中处理的异常`catch`时调用的线程调用阻止<xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-198">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="c0057-199"><xref:System.Threading.Tasks.Task.Start%2A>然后调用方法来启动任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-199">The <xref:System.Threading.Tasks.Task.Start%2A> method is then called to start the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/run4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/run4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-200">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-200">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-201">
            <paramref name="action" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-201">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="c0057-202">表示要在任务中执行的代码的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-202">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="c0057-203">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-203">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-204">使用指定的操作和创建选项初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-204">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-205">而不是最常见的方法调用此构造函数来实例化<xref:System.Threading.Tasks.Task>对象并启动任务是通过调用静态<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-205">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c0057-206">此构造函数提供的唯一好处是它允许对象实例化分离，从而可从任务调用。</span><span class="sxs-lookup"><span data-stu-id="c0057-206">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-207">
            <paramref name="action" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-207">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-208">
            <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-208">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of Object), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="c0057-209">表示要在任务中执行的代码的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-209">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="c0057-210">一个表示由该操作使用的数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-210">An object representing data to be used by the action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-211">使用指定的操作和状态初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-211">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-212">而不是最常见的方法调用此构造函数来实例化<xref:System.Threading.Tasks.Task>对象并启动任务是通过调用静态<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-212">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c0057-213">此构造函数提供的唯一好处是它允许对象实例化分离，从而可从任务调用。</span><span class="sxs-lookup"><span data-stu-id="c0057-213">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-214">下面的示例定义 6 字母单词的数组。</span><span class="sxs-lookup"><span data-stu-id="c0057-214">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="c0057-215">每个单词然后作为的自变量传递<xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29>构造函数，其<xref:System.Action%601>委托进行加密在 word 中的字符，则将显示原始 word 和其经过编码的版本。</span><span class="sxs-lookup"><span data-stu-id="c0057-215">Each word is then passed as an argument to the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29> constructor, whose <xref:System.Action%601> delegate scrambles the characters in the word, then displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/startnew3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/startnew3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-216">
            <paramref name="action" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-216">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <altmember cref="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="c0057-217">表示要在任务中执行的代码的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-217">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-218">新任务将观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-218">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that the new task will observe.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="c0057-219">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-219">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-220">使用指定的操作和创建选项初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-220">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-221">而不是最常见的方法调用此构造函数来实例化<xref:System.Threading.Tasks.Task>对象并启动任务是通过调用静态<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-221">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c0057-222">此构造函数提供的唯一好处是它允许对象实例化分离，从而可从任务调用。</span><span class="sxs-lookup"><span data-stu-id="c0057-222">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 <span data-ttu-id="c0057-223">有关详细信息，请参阅[任务并行 （任务并行库）](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)和[任务取消](~/docs/standard/parallel-programming/task-cancellation.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-223">For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Task Cancellation](~/docs/standard/parallel-programming/task-cancellation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-224">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-224">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-225">
            <paramref name="action" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-225">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-226">
            <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-226">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="c0057-227">表示要在任务中执行的代码的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-227">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="c0057-228">一个表示由该操作使用的数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-228">An object representing data to be used by the action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-229">新任务将观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-229">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that that the new task will observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-230">使用指定的操作、状态和选项初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-230">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-231">而不是最常见的方法调用此构造函数来实例化<xref:System.Threading.Tasks.Task>对象并启动任务是通过调用静态<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-231">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c0057-232">此构造函数提供的唯一好处是它允许对象实例化分离，从而可从任务调用。</span><span class="sxs-lookup"><span data-stu-id="c0057-232">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-233">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-233">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-234">
            <paramref name="action" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-234">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="c0057-235">表示要在任务中执行的代码的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-235">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="c0057-236">一个表示由该操作使用的数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-236">An object representing data to be used by the action.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="c0057-237">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-237">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-238">使用指定的操作、状态和选项初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-238">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-239">而不是最常见的方法调用此构造函数来实例化<xref:System.Threading.Tasks.Task>对象并启动任务是通过调用静态<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-239">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c0057-240">此构造函数提供的唯一好处是它允许对象实例化分离，从而可从任务调用。</span><span class="sxs-lookup"><span data-stu-id="c0057-240">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-241">
            <paramref name="action" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-241">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-242">
            <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-242">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="c0057-243">表示要在任务中执行的代码的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-243">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="c0057-244">一个表示由该操作使用的数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-244">An object representing data to be used by the action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-245">新任务将观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-245">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that that the new task will observe..</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="c0057-246">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-246">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-247">使用指定的操作、状态和选项初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-247">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-248">而不是最常见的方法调用此构造函数来实例化<xref:System.Threading.Tasks.Task>对象并启动任务是通过调用静态<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-248">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c0057-249">此构造函数提供的唯一好处是它允许对象实例化分离，从而可从任务调用。</span><span class="sxs-lookup"><span data-stu-id="c0057-249">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-250">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-250">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-251">
            <paramref name="action" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-251">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-252">
            <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-252">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-253">获取在创建 <see cref="T:System.Threading.Tasks.Task" /> 时提供的状态对象，如果未提供，则为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-253">Gets the state object supplied when the <see cref="T:System.Threading.Tasks.Task" /> was created, or null if none was supplied.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0057-254">一个 <see cref="T:System.Object" />，表示在创建任务时传递给该任务的状态数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-254">An <see cref="T:System.Object" /> that represents the state data that was passed in to the task when it was created.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-255">强制转换回要检索其数据的原始类型的对象。</span><span class="sxs-lookup"><span data-stu-id="c0057-255">Cast the object back to the original type to retrieve its data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletedTask">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CompletedTask { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.Task CompletedTask" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CompletedTask" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CompletedTask As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::Task ^ CompletedTask { System::Threading::Tasks::Task ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-256">获取一个已成功完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-256">Gets a task that has already completed successfully.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0057-257">已成功完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-257">The successfully completed task.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-258">此属性返回一个任务其<xref:System.Threading.Tasks.Task.Status%2A>属性设置为<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>。</span><span class="sxs-lookup"><span data-stu-id="c0057-258">This property returns a task whose <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span></span> <span data-ttu-id="c0057-259">若要创建任务，返回一个值，并会运行直至完成时，调用<xref:System.Threading.Tasks.Task.FromResult%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-259">To create task that returns a value and runs to completion, call the <xref:System.Threading.Tasks.Task.FromResult%2A> method.</span></span>  
  
 <span data-ttu-id="c0057-260">检索此属性的值的重复的尝试可能不会始终返回同一个实例。</span><span class="sxs-lookup"><span data-stu-id="c0057-260">Repeated attempts to retrieve this property value may not always return the same instance.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="ConfigureAwait">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait (bool continueOnCapturedContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConfigureAwait (continueOnCapturedContext As Boolean) As ConfiguredTaskAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredTaskAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continueOnCapturedContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="continueOnCapturedContext">
          <span data-ttu-id="c0057-261">尝试将延续任务封送回原始上下文，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-261">
              <see langword="true" /> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-262">配置用于等待此 <see cref="T:System.Threading.Tasks.Task" />的 awaiter。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-262">Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-263">用于的等待此任务的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-263">An object used to await this task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWith">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-264">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-264">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="c0057-265">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-265">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-266">在运行时，委托将作为一个自变量传递给完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-266">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-267">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-267">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-268">一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-268">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-269">返回<xref:System.Threading.Tasks.Task>将不会计划执行当前的任务已完成，直到是否由于运行到成功完成、 出错由于未经处理的异常，或提前退出由于被取消而完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-269">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-270">下面的示例定义一个任务，它使用来填充数组 100 随机的日期和时间值。</span><span class="sxs-lookup"><span data-stu-id="c0057-270">The following example defines a task that populates an array with 100 random date and time values.</span></span> <span data-ttu-id="c0057-271">它使用<xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29>方法来选择最早和最新的日期值后完全填充数组。</span><span class="sxs-lookup"><span data-stu-id="c0057-271">It uses the <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29> method to select the earliest and the latest date values once the array is fully populated.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/cs/continuewith1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/vb/continuewith1.vb#1)]  
  
 <span data-ttu-id="c0057-272">一个控制台应用程序可能会终止之前执行的延续任务，因为<xref:System.Threading.Tasks.Task.Wait>调用方法来确保延续任务完成之前在示例结束执行。</span><span class="sxs-lookup"><span data-stu-id="c0057-272">Because a console application may terminate before the continuation task executes, the <xref:System.Threading.Tasks.Task.Wait> method is called to ensure that the continuation finishes executing before the example ends.</span></span>  
  
 <span data-ttu-id="c0057-273">有关其他示例，请参阅[使用延续任务来链接任务](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-273">For an additional example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-274">
            <paramref name="continuationAction" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-274">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="c0057-275">在任务完成时要运行的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-275">An action to run when the task completes.</span>
          </span>
          <span data-ttu-id="c0057-276">运行时，委托作为一个自变量传递给完成的任务和调用方提供的状态对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-276">When run, the delegate is passed the completed task and a caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="c0057-277">一个表示由该延续操作使用的数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-277">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-278">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时接收调用方提供的状态信息并执行的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-278">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-279">一个新的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-279">A new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-280">返回<xref:System.Threading.Tasks.Task>将不会计划执行直到当前的任务已完成，无论是由于运行到成功完成、 出错由于未经处理的异常，或由于取消尽早退出。</span><span class="sxs-lookup"><span data-stu-id="c0057-280">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to cancellation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-281">
            <paramref name="continuationAction" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-281">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="c0057-282">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-282">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-283">在运行时，委托将作为一个自变量传递给完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-283">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-284">将指派给新的延续任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-284">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-285">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时可接收取消标记并以异步方式执行的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-285">Creates a continuation that receives a cancellation token and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-286">一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-286">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-287">返回<xref:System.Threading.Tasks.Task>将不会计划执行当前的任务已完成，直到是否由于运行到成功完成、 出错由于未经处理的异常，或提前退出由于被取消而完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-287">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-288">创建了该标记的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-288">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-289">
            <paramref name="continuationAction" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-289">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="c0057-290">根据指定 <c>continuationOptions</c> 运行的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-290">An action to run according to the specified <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="c0057-291">在运行时，委托将作为一个自变量传递给完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-291">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="c0057-292">用于设置计划延续任务的时间以及延续任务的工作方式的选项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-292">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="c0057-293">这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-293">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-294">创建一个在目标任务完成时按照指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 执行的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-294">Creates a continuation that executes when the target task completes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-295">一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-295">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-296">返回<xref:System.Threading.Tasks.Task>当前任务完成之前不将执行计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-296">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="c0057-297">如果通过指定延续条件`continuationOptions`参数未满足，则将取消延续任务而不是计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-297">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-298">下面的示例演示如何使用<xref:System.Threading.Tasks.TaskContinuationOptions>指定，当一个延续任务前面的任务完成时，应以同步方式运行。</span><span class="sxs-lookup"><span data-stu-id="c0057-298">The following example demonstrates using <xref:System.Threading.Tasks.TaskContinuationOptions> to specify that a continuation task should run synchronously when the antecedent task completes.</span></span> <span data-ttu-id="c0057-299">(如果指定的任务已完成时<xref:System.Threading.Tasks.Task.ContinueWith%2A>调用时，同步延续任务将运行的线程调用上<xref:System.Threading.Tasks.Task.ContinueWith%2A>。)</span><span class="sxs-lookup"><span data-stu-id="c0057-299">(If the specified task has already completed by the time <xref:System.Threading.Tasks.Task.ContinueWith%2A> is called, the synchronous continuation will run on the thread calling <xref:System.Threading.Tasks.Task.ContinueWith%2A>.)</span></span>  
  
```csharp  
  
public class TaskCounter  
{  
   private volatile int _count;  
  
   public void Track(Task t)  
   {  
      if (t == null) throw new ArgumentNullException("t");  
      Interlocked.Increment(ref _count);  
      t.ContinueWith(ct => Interlocked.Decrement(ref _count), TaskContinuationOptions.ExecuteSynchronously);  
   }  
  
   public int NumberOfActiveTasks { get { return _count; } }  
}  
  
```  
  
```vb  
  
Public Class TaskCounter  
   Private _count as Integer  
  
   Public Sub Track(ByVal t as Task)  
      If t is Nothing Then Throw New ArgumentNullException("t")  
      Interlocked.Increment(_count)  
      t.ContinueWith(Sub(ct)  
                        Interlocked.Decrement(_count)  
                     End Sub,  
                     TaskContinuationOptions.ExecuteSynchronously)  
   End Sub  
  
   Public ReadOnly Property NumberOfActiveTasks As Integer  
      Get  
         Return _count  
      End Get  
   End Property  
End Class  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-300">
            <paramref name="continuationAction" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-300">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-301">
            <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-301">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task), scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="c0057-302">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-302">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-303">在运行时，委托将作为一个自变量传递给完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-303">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="c0057-304">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-304">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-305">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-305">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-306">延续任务使用指定计划程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-306">The continuation uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-307">一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-307">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-308">返回<xref:System.Threading.Tasks.Task>将不会计划执行当前的任务已完成，直到是否由于运行到成功完成、 出错由于未经处理的异常，或提前退出由于被取消而完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-308">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-309">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-309">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-310">
            <paramref name="continuationAction" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-310">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c0057-311">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-311">-or-</span>
          </span>
          <span data-ttu-id="c0057-312">
            <paramref name="scheduler" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-312">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="c0057-313">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-313">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-314">运行时，将传递委托，如完成的任务一样，调用方提供的状态对象（如参数）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-314">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="c0057-315">一个表示由该延续操作使用的数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-315">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-316">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-316">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-317">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时接收调用方提供的状态信息和取消标记，并以异步方式执行的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-317">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-318">一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-318">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-319">返回<xref:System.Threading.Tasks.Task>将不会计划执行当前的任务已完成，直到是否由于运行到成功完成、 出错由于未经处理的异常，或提前退出由于被取消而完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-319">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-320">
            <paramref name="continuationAction" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-320">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-321">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-321">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object, continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="c0057-322">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-322">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-323">运行时，将传递委托，如完成的任务一样，调用方提供的状态对象（如自变量）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-323">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="c0057-324">一个表示由该延续操作使用的数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-324">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="c0057-325">用于设置计划延续任务的时间以及延续任务的工作方式的选项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-325">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="c0057-326">这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-326">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-327">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时接收调用方提供的状态信息并执行的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-327">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-328">延续任务根据一组指定的条件执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-328">The continuation executes based on a set of specified conditions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-329">一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-329">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-330">返回<xref:System.Threading.Tasks.Task>当前任务完成之前不将执行计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-330">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="c0057-331">如果通过指定延续条件`continuationOptions`参数未满足，则将取消延续任务而不是计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-331">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-332">
            <paramref name="continuationAction" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-332">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-333">
            <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-333">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object, scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="c0057-334">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-334">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-335">运行时，将传递委托，如完成的任务一样，调用方提供的状态对象（如自变量）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-335">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="c0057-336">一个表示由该延续操作使用的数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-336">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="c0057-337">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-337">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-338">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时接收调用方提供的状态信息并以异步方式执行的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-338">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-339">延续任务使用指定计划程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-339">The continuation uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-340">一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-340">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-341">返回<xref:System.Threading.Tasks.Task>将不会计划执行当前的任务已完成，直到是否由于运行到成功完成、 出错由于未经处理的异常，或提前退出由于被取消而完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-341">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-342">
            <paramref name="scheduler" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-342">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="c0057-343">根据指定 <c>continuationOptions</c> 运行的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-343">An action to run according to the specified <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="c0057-344">在运行时，委托将作为一个自变量传递给完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-344">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-345">将指派给新的延续任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-345">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="c0057-346">用于设置计划延续任务的时间以及延续任务的工作方式的选项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-346">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="c0057-347">这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-347">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="c0057-348">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-348">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-349">创建一个在目标任务完成时按照指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 执行的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-349">Creates a continuation that executes when the target task competes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
          <span data-ttu-id="c0057-350">延续任务会收到一个取消标记，并使用指定计划程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-350">The continuation receives a cancellation token and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-351">一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-351">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-352">返回<xref:System.Threading.Tasks.Task>当前任务完成之前不将执行计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-352">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="c0057-353">如果通过指定条件`continuationOptions`参数未满足，则将取消延续任务而不是计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-353">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-354">下面是使用 ContinueWith 来运行工作，在后台和用户界面线程的示例。</span><span class="sxs-lookup"><span data-stu-id="c0057-354">The following is an example of using ContinueWith to run work both in the background and on the user interface threads.</span></span>  
  
```csharp  
  
private void Button1_Click(object sender, EventArgs e)  
{  
   var backgroundScheduler = TaskScheduler.Default;  
   var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();  
   Task.Factory.StartNew(delegate { DoBackgroundComputation(); },  
                         backgroundScheduler).  
   ContinueWith(delegate { UpdateUI(); }, uiScheduler).  
                ContinueWith(delegate { DoAnotherBackgroundComputation(); },  
                             backgroundScheduler).  
                ContinueWith(delegate { UpdateUIAgain(); }, uiScheduler);  
}  
  
```  
  
```vb  
  
Private Sub Button1_Click(ByVal sender As System.Object,   
                          ByVal e As System.EventArgs) Handles Button1.Click  
   Dim backgroundScheduler = TaskScheduler.Default  
   Dim uiScheduler = TaskScheduler.FromCurrentSynchronizationContext()  
  
   Task.Factory.StartNew(Sub()  
                           DoBackgroundComputation()  
                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  
                            UpdateUI()  
                         End Sub, uiScheduler).ContinueWith(Sub(t)  
                            DoAnotherBackgroundComputation()  
                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  
                            UpdateUIAgain()  
                         End Sub, uiScheduler)  
End Sub  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-355">创建了该标记的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-355">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-356">
            <paramref name="continuationAction" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-356">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
          <span data-ttu-id="c0057-357">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-357">-or-</span>
          </span>
          <span data-ttu-id="c0057-358">
            <paramref name="scheduler" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-358">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-359">
            <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-359">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="c0057-360">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-360">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-361">运行时，将传递委托，如完成的任务一样，调用方提供的状态对象（如自变量）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-361">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="c0057-362">一个表示由该延续操作使用的数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-362">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-363">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-363">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="c0057-364">用于设置计划延续任务的时间以及延续任务的工作方式的选项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-364">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="c0057-365">这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-365">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="c0057-366">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-366">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-367">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时接收调用方提供的状态信息和取消标记并执行的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-367">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-368">延续任务根据一组指定的条件执行，并使用指定的计划程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-368">The continuation executes based on a set of specified conditions and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-369">一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-369">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-370">返回<xref:System.Threading.Tasks.Task>当前任务完成之前不将执行计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-370">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="c0057-371">如果通过指定条件`continuationOptions`参数未满足，则将取消延续任务而不是计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-371">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-372">
            <paramref name="scheduler" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-372">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-373">
            <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-373">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-374">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-374">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-375">延续任务生成的结果的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-375">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="c0057-376">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-376">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-377">在运行时，委托将作为一个自变量传递给完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-377">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-378">创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时异步执行并返回一个值的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-378">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes and returns a value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-379">一个新的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-379">A new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-380">返回<xref:System.Threading.Tasks.Task%601>将不会计划执行当前的任务已完成，直到是否由于运行到成功完成、 出错由于未经处理的异常，或提前退出由于被取消而完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-380">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-381">下面的示例演示如何使用 ContinueWith 方法：</span><span class="sxs-lookup"><span data-stu-id="c0057-381">The following example shows how to use the ContinueWith method:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationsimple.cs#03)]
 [!code-vb[System.Threading.Tasks.Task#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationsimple.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-382">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-382">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-383">
            <paramref name="continuationFunction" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-383">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-384">延续任务生成的结果的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-384">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="c0057-385">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-385">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-386">运行时，将传递委托，如完成的任务一样，调用方提供的状态对象（如参数）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-386">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="c0057-387">一个表示由该延续功能使用的数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-387">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-388">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成并返回一个值时接收调用方提供的状态信息并以异步方式执行的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-388">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-389">一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-389">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-390">返回<xref:System.Threading.Tasks.Task%601>将不会计划执行当前的任务已完成，直到是否由于运行到成功完成、 出错由于未经处理的异常，或提前退出由于被取消而完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-390">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-391">
            <paramref name="continuationFunction" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-391">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-392">延续任务生成的结果的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-392">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="c0057-393">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-393">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-394">在运行时，委托将作为一个自变量传递给完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-394">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-395">将指派给新的延续任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-395">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-396">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行并返回一个值的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-396">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="c0057-397">延续任务收到取消标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-397">The continuation receives a cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-398">一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-398">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-399">返回<xref:System.Threading.Tasks.Task%601>将不会计划执行当前的任务已完成，直到是否由于运行到成功完成、 出错由于未经处理的异常，或提前退出由于被取消而完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-399">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-400">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-400">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
          <span data-ttu-id="c0057-401">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-401">-or-</span>
          </span>
          <span data-ttu-id="c0057-402">创建了该标记的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-402">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-403">
            <paramref name="continuationFunction" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-403">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-404">延续任务生成的结果的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-404">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="c0057-405">根据在 <c>continuationOptions</c> 中指定的条件运行的函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-405">A function to run according to the condition specified in <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="c0057-406">在运行时，委托将作为一个自变量传递给完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-406">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="c0057-407">用于设置计划延续任务的时间以及延续任务的工作方式的选项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-407">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="c0057-408">这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-408">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-409">创建一个按照指定延续任务选项执行并返回一个值的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-409">Creates a continuation that executes according to the specified continuation options and returns a value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-410">一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-410">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-411">返回<xref:System.Threading.Tasks.Task%601>当前任务完成之前不将执行计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-411">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="c0057-412">如果通过指定延续条件`continuationOptions`参数未满足，则将取消延续任务而不是计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-412">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-413">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-413">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-414">
            <paramref name="continuationFunction" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-414">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-415">
            <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-415">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult), scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-416">延续任务生成的结果的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-416">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="c0057-417">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-417">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-418">在运行时，委托将作为一个自变量传递给完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-418">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="c0057-419">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-419">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-420">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行并返回一个值的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-420">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="c0057-421">延续任务使用指定计划程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-421">The continuation uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-422">一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-422">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-423">返回<xref:System.Threading.Tasks.Task%601>将不会计划执行当前的任务已完成，直到是否由于运行到成功完成、 出错由于未经处理的异常，或提前退出由于被取消而完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-423">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-424">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-424">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-425">
            <paramref name="continuationFunction" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-425">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="c0057-426">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-426">-or-</span>
          </span>
          <span data-ttu-id="c0057-427">
            <paramref name="scheduler" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-427">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-428">延续任务生成的结果的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-428">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="c0057-429">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-429">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-430">运行时，将传递委托，如完成的任务一样，调用方提供的状态对象（如参数）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-430">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="c0057-431">一个表示由该延续功能使用的数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-431">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-432">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-432">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-433">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行并返回一个值的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-433">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="c0057-434">延续任务接收调用方提供的状态信息和取消标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-434">The continuation receives caller-supplied state information and a cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-435">一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-435">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-436">返回<xref:System.Threading.Tasks.Task%601>将不会计划执行当前的任务已完成，直到是否由于运行到成功完成、 出错由于未经处理的异常，或提前退出由于被取消而完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-436">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-437">
            <paramref name="continuationFunction" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-437">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-438">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-438">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object, continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-439">延续任务生成的结果的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-439">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="c0057-440">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-440">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-441">运行时，将传递委托，如完成的任务一样，调用方提供的状态对象（如参数）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-441">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="c0057-442">一个表示由该延续功能使用的数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-442">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="c0057-443">用于设置计划延续任务的时间以及延续任务的工作方式的选项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-443">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="c0057-444">这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-444">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-445">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时根据指定的任务延续选项执行的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-445">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-446">延续任务接收调用方提供的状态信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-446">The continuation receives caller-supplied state information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-447">一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-447">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-448">返回<xref:System.Threading.Tasks.Task%601>当前任务完成之前不将执行计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-448">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="c0057-449">如果通过指定延续条件`continuationOptions`参数未满足，则将取消延续任务而不是计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-449">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-450">
            <paramref name="continuationFunction" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-450">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-451">
            <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-451">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-452">延续任务生成的结果的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-452">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="c0057-453">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-453">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-454">运行时，将传递委托，如完成的任务一样，调用方提供的状态对象（如参数）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-454">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="c0057-455">一个表示由该延续功能使用的数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-455">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="c0057-456">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-456">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-457">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-457">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-458">延续任务接收调用方提供的状态信息，并使用指定计划程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-458">The continuation receives caller-supplied state information and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-459">一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-459">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-460">返回<xref:System.Threading.Tasks.Task%601>将不会计划执行当前的任务已完成，直到是否由于运行到成功完成、 出错由于未经处理的异常，或提前退出由于被取消而完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-460">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-461">
            <paramref name="scheduler" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-461">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-462">延续任务生成的结果的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-462">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="c0057-463">根据指定 <c>continuationOptions.</c> 运行的函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-463">A function to run according to the specified <c>continuationOptions.</c></span>
          </span>
          <span data-ttu-id="c0057-464">在运行时，委托将作为一个自变量传递给完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-464">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-465">将指派给新的延续任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-465">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="c0057-466">用于设置计划延续任务的时间以及延续任务的工作方式的选项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-466">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="c0057-467">这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-467">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="c0057-468">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-468">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-469">创建一个按照指定延续任务选项执行并返回一个值的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-469">Creates a continuation that executes according to the specified continuation options and returns a value.</span>
          </span>
          <span data-ttu-id="c0057-470">延续任务被传入一个取消标记，并使用指定计划程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-470">The continuation is passed a cancellation token and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-471">一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-471">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-472">返回<xref:System.Threading.Tasks.Task%601>当前任务完成之前不将执行计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-472">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="c0057-473">如果通过指定条件`continuationOptions`参数未满足，则将取消延续任务而不是计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-473">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-474">下面的示例演示如何使用带延续选项的 ContinueWith 方法：</span><span class="sxs-lookup"><span data-stu-id="c0057-474">The following example shows how to use the ContinueWith method with continuation options:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Task#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-475">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-475">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
          <span data-ttu-id="c0057-476">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-476">-or-</span>
          </span>
          <span data-ttu-id="c0057-477">创建了该标记的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-477">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-478">
            <paramref name="continuationFunction" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-478">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="c0057-479">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-479">-or-</span>
          </span>
          <span data-ttu-id="c0057-480">
            <paramref name="scheduler" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-480">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-481">
            <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-481">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-482">延续任务生成的结果的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-482">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="c0057-483">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-483">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="c0057-484">运行时，将传递委托，如完成的任务一样，调用方提供的状态对象（如参数）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-484">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="c0057-485">一个表示由该延续功能使用的数据的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-485">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-486">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-486">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="c0057-487">用于设置计划延续任务的时间以及延续任务的工作方式的选项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-487">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="c0057-488">这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-488">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="c0057-489">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-489">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-490">创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成并返回一个值时根据指定的任务延续选项执行的延续任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-490">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="c0057-491">延续任务接收调用方提供的状态信息和取消标记，并使用指定计划程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-491">The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-492">一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-492">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-493">返回<xref:System.Threading.Tasks.Task%601>当前任务完成之前不将执行计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-493">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="c0057-494">如果通过指定条件`continuationOptions`参数未满足，则将取消延续任务而不是计划。</span><span class="sxs-lookup"><span data-stu-id="c0057-494">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-495">
            <paramref name="scheduler" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-495">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-496">
            <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-496">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-497">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-497">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-498">获取用于创建此任务的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-498">Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0057-499">用于创建此任务的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-499">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentId">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; CurrentId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Nullable`1&lt;int32&gt; CurrentId" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CurrentId" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentId As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Nullable&lt;int&gt; CurrentId { Nullable&lt;int&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-500">返回当前正在执行 <see cref="T:System.Threading.Tasks.Task" /> 的 ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-500">Returns the ID of the currently executing <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0057-501">系统分配给当前正在执行的任务的一个整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-501">An integer that was assigned by the system to the currently-executing task.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-502"><xref:System.Threading.Tasks.Task.CurrentId%2A> 是`static`(`Shared`在 Visual Basic 中) 属性，用于执行任务的代码从获取当前正在执行的任务的标识符。</span><span class="sxs-lookup"><span data-stu-id="c0057-502"><xref:System.Threading.Tasks.Task.CurrentId%2A> is a `static` (`Shared` in Visual Basic) property that is used to get the identifier of the currently executing task from the code that the task is executing.</span></span> <span data-ttu-id="c0057-503">它不同于<xref:System.Threading.Tasks.Task.Id%2A>属性，它返回特定的标识符<xref:System.Threading.Tasks.Task>实例。</span><span class="sxs-lookup"><span data-stu-id="c0057-503">It differs from the <xref:System.Threading.Tasks.Task.Id%2A> property, which returns the identifier of a particular <xref:System.Threading.Tasks.Task> instance.</span></span> <span data-ttu-id="c0057-504">如果你尝试检索<xref:System.Threading.Tasks.Task.CurrentId%2A>值的范围是从超出了执行任务的代码，该属性返回`null`。</span><span class="sxs-lookup"><span data-stu-id="c0057-504">If you attempt to retrieve the <xref:System.Threading.Tasks.Task.CurrentId%2A> value from outside the code that a task is executing, the property returns `null`.</span></span>  
  
 <span data-ttu-id="c0057-505">请注意，虽然冲突非常少见，但任务不能保证标识符是唯一的。</span><span class="sxs-lookup"><span data-stu-id="c0057-505">Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.Id" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Delay">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-506">创建将在时间延迟后完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-506">Creates a task that will complete after a time delay.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (int millisecondsDelay);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(int32 millisecondsDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Delay (millisecondsDelay As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(int millisecondsDelay);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay">
          <span data-ttu-id="c0057-507">在完成返回的任务前要等待的毫秒数；如果无限期等待，则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-507">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-508">创建将在时间延迟后完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-508">Creates a task that completes after a time delay.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-509">表示时间延迟的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-509">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-510"><xref:System.Threading.Tasks.Task.Delay%2A>方法通常用于延迟指定的时间间隔内的所有操作或任务的一部分。</span><span class="sxs-lookup"><span data-stu-id="c0057-510">The <xref:System.Threading.Tasks.Task.Delay%2A> method is typically used to delay the operation of all or part of a task for a specified time interval.</span></span> <span data-ttu-id="c0057-511">通常情况下，引入的时间延迟：</span><span class="sxs-lookup"><span data-stu-id="c0057-511">Most commonly, the time delay is introduced:</span></span>  
  
-   <span data-ttu-id="c0057-512">At 开头的任务，如下面的示例演示。</span><span class="sxs-lookup"><span data-stu-id="c0057-512">At the beginning of the task, as the following example shows.</span></span>  
  
     [!code-csharp[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#5)]
     [!code-vb[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#5)]  
  
-   <span data-ttu-id="c0057-513">一段时间时正在执行任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-513">Sometime while the task is executing.</span></span> <span data-ttu-id="c0057-514">在此情况下，调用<xref:System.Threading.Tasks.Task.Delay%2A>如以下示例所示为任务中的子任务执行方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-514">In this case, the call to the <xref:System.Threading.Tasks.Task.Delay%2A> method executes as a child task within a task, as the following example shows.</span></span> <span data-ttu-id="c0057-515">请注意，因为该任务调用<xref:System.Threading.Tasks.Task.Delay%2A>方法以异步方式执行，父任务必须等待它完成通过使用`await`关键字。</span><span class="sxs-lookup"><span data-stu-id="c0057-515">Note that since the task that calls the <xref:System.Threading.Tasks.Task.Delay%2A> method executes asynchronously, the parent task must wait for it to complete by using the `await` keyword.</span></span>  
  
     [!code-csharp[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#7)]
     [!code-vb[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#7)]  
  
 <span data-ttu-id="c0057-516">指定的时间延迟后，将在任务完成中<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-516">After the specified time delay, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="c0057-517">此方法取决于系统时钟。</span><span class="sxs-lookup"><span data-stu-id="c0057-517">This method depends on the system clock.</span></span> <span data-ttu-id="c0057-518">这意味着在时间延迟将大约等于系统时钟的分辨率，如果`millisecondsDelay`参数小于系统时钟，这是在 Windows 系统上的大约 15 毫秒的分辨率。</span><span class="sxs-lookup"><span data-stu-id="c0057-518">This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-519">下面的示例演示使用简单的<xref:System.Threading.Tasks.Task.Delay%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-519">The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-520">
            <paramref name="millisecondsDelay" /> 参数小于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-520">The <paramref name="millisecondsDelay" /> argument is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (TimeSpan delay);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(valuetype System.TimeSpan delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Delay (delay As TimeSpan) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(TimeSpan delay);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="delay">
          <span data-ttu-id="c0057-521">在完成返回的任务前等待的时间跨度；如果无限期等待，则为 <see langword="TimeSpan.FromMilliseconds(-1)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-521">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-522">创建一个在指定的时间间隔后完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-522">Creates a task that completes after a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-523">表示时间延迟的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-523">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-524">指定的时间延迟后，将在任务完成中<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-524">After the specified time delay, the task is completed in <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="c0057-525">有关使用方案和其他示例，请参阅的文档<xref:System.Threading.Tasks.Task.Delay%28System.Int32%29>重载。</span><span class="sxs-lookup"><span data-stu-id="c0057-525">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="c0057-526">此方法取决于系统时钟。</span><span class="sxs-lookup"><span data-stu-id="c0057-526">This method depends on the system clock.</span></span> <span data-ttu-id="c0057-527">这意味着在时间延迟将大约等于系统时钟的分辨率，如果`delay`参数小于系统时钟，这是在 Windows 系统上的大约 15 毫秒的分辨率。</span><span class="sxs-lookup"><span data-stu-id="c0057-527">This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-528">下面的示例演示使用简单的<xref:System.Threading.Tasks.Task.Delay%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-528">The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-529">
            <paramref name="delay" /> 表示除 <see langword="TimeSpan.FromMillseconds(-1)" /> 以外的负时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-529">
              <paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          </span>
          <span data-ttu-id="c0057-530">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-530">-or-</span>
          </span>
          <span data-ttu-id="c0057-531">
            <paramref name="delay" /> 参数的 <see cref="P:System.TimeSpan.TotalMilliseconds" /> 属性大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-531">The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (int millisecondsDelay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(int32 millisecondsDelay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(int millisecondsDelay, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay">
          <span data-ttu-id="c0057-532">在完成返回的任务前要等待的毫秒数；如果无限期等待，则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-532">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-533">将在完成返回的任务之前选中的取消标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-533">The cancellation token that will be checked prior to completing the returned task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-534">创建将在时间延迟后完成的可取消任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-534">Creates a cancellable task that completes after a time delay.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-535">表示时间延迟的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-535">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-536">如果之前指定的时间延迟，发出信号的取消标记<xref:System.Threading.Tasks.TaskCanceledException>异常结果和任务中完成<xref:System.Threading.Tasks.TaskStatus.Canceled>状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-536">If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  <span data-ttu-id="c0057-537">否则，在完成此任务时<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状态后经过指定的时间延迟。</span><span class="sxs-lookup"><span data-stu-id="c0057-537">Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state once the specified time delay has elapsed.</span></span>  
  
 <span data-ttu-id="c0057-538">有关使用方案和其他示例，请参阅的文档<xref:System.Threading.Tasks.Task.Delay%28System.Int32%29>重载。</span><span class="sxs-lookup"><span data-stu-id="c0057-538">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="c0057-539">此方法取决于系统时钟。</span><span class="sxs-lookup"><span data-stu-id="c0057-539">This method depends on the system clock.</span></span> <span data-ttu-id="c0057-540">这意味着在时间延迟将大约等于系统时钟的分辨率，如果`millisecondsDelay`参数小于系统时钟，这是在 Windows 系统上的大约 15 毫秒的分辨率。</span><span class="sxs-lookup"><span data-stu-id="c0057-540">This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-541">下面的示例将启动一个任务，它包括对的调用<xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29>方法与一个秒延迟。</span><span class="sxs-lookup"><span data-stu-id="c0057-541">The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29> method with a one second delay.</span></span> <span data-ttu-id="c0057-542">延迟间隔已过之前，标记被取消。</span><span class="sxs-lookup"><span data-stu-id="c0057-542">Before the delay interval elapses, the token is cancelled.</span></span> <span data-ttu-id="c0057-543">示例输出显示，因此，<xref:System.Threading.Tasks.TaskCanceledException>引发，和任务的<xref:System.Threading.Tasks.Task.Status%2A>属性设置为<xref:System.Threading.Tasks.TaskStatus.Canceled>。</span><span class="sxs-lookup"><span data-stu-id="c0057-543">The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-544">
            <paramref name="millisecondsDelay" /> 参数小于 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-544">The <paramref name="millisecondsDelay" /> argument is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="c0057-545">该任务已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-545">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-546">提供的 <paramref name="cancellationToken" /> 已被释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-546">The provided <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (TimeSpan delay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(valuetype System.TimeSpan delay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(TimeSpan delay, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="delay">
          <span data-ttu-id="c0057-547">在完成返回的任务前等待的时间跨度；如果无限期等待，则为 <see langword="TimeSpan.FromMilliseconds(-1)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-547">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-548">将在完成返回的任务之前选中的取消标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-548">The cancellation token that will be checked prior to completing the returned task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-549">创建一个在指定的时间间隔后完成的可取消任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-549">Creates a cancellable task that completes after a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-550">表示时间延迟的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-550">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-551">如果之前指定的时间延迟，发出信号的取消标记<xref:System.Threading.Tasks.TaskCanceledException>异常结果和任务中完成<xref:System.Threading.Tasks.TaskStatus.Canceled>状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-551">If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  <span data-ttu-id="c0057-552">否则，在完成此任务时<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状态后经过指定的时间延迟。</span><span class="sxs-lookup"><span data-stu-id="c0057-552">Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state once the specified time delay has elapsed.</span></span>  
  
 <span data-ttu-id="c0057-553">有关使用方案和其他示例，请参阅的文档<xref:System.Threading.Tasks.Task.Delay%28System.Int32%29>重载。</span><span class="sxs-lookup"><span data-stu-id="c0057-553">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="c0057-554">此方法取决于系统时钟。</span><span class="sxs-lookup"><span data-stu-id="c0057-554">This method depends on the system clock.</span></span> <span data-ttu-id="c0057-555">这意味着在时间延迟将大约等于系统时钟的分辨率，如果`delay`参数小于系统时钟，这是在 Windows 系统上的大约 15 毫秒的分辨率。</span><span class="sxs-lookup"><span data-stu-id="c0057-555">This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-556">下面的示例将启动一个任务，它包括对的调用<xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29>方法替换-a-1.5 秒延迟。</span><span class="sxs-lookup"><span data-stu-id="c0057-556">The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method with a one-and-a-half second delay.</span></span> <span data-ttu-id="c0057-557">延迟间隔已过之前，标记被取消。</span><span class="sxs-lookup"><span data-stu-id="c0057-557">Before the delay interval elapses, the token is cancelled.</span></span> <span data-ttu-id="c0057-558">示例输出显示，因此，<xref:System.Threading.Tasks.TaskCanceledException>引发，和任务的<xref:System.Threading.Tasks.Task.Status%2A>属性设置为<xref:System.Threading.Tasks.TaskStatus.Canceled>。</span><span class="sxs-lookup"><span data-stu-id="c0057-558">The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay4.vb#4)]  
  
 <span data-ttu-id="c0057-559">请注意此示例，包括潜在的争用条件： 它依赖于以异步方式执行延迟，在标记被取消的任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-559">Note that this example includes a potential race condition: it depends on the task asynchronously executing the delay when the token is cancelled.</span></span> <span data-ttu-id="c0057-560">尽管 1.5 的秒的延迟与调用<xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29>方法进行该假设有可能，不过可以，调用<xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29>方法无法返回之前取消了标记。</span><span class="sxs-lookup"><span data-stu-id="c0057-560">Although the 1.5 second delay from the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method makes that assumption likely, it is nevertheless possible that the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method could return before the token is cancelled.</span></span> <span data-ttu-id="c0057-561">在这种情况下，该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c0057-561">In that case, the example produces the following output:</span></span>  
  
```  
Task t Status: RanToCompletion, Result: 42  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-562">
            <paramref name="delay" /> 表示除 <see langword="TimeSpan.FromMillseconds(-1)" /> 以外的负时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-562">
              <paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          </span>
          <span data-ttu-id="c0057-563">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-563">-or-</span>
          </span>
          <span data-ttu-id="c0057-564">
            <paramref name="delay" /> 参数的 <see cref="P:System.TimeSpan.TotalMilliseconds" /> 属性大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-564">The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="c0057-565">该任务已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-565">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-566">提供的 <paramref name="cancellationToken" /> 已被释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-566">The provided <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-567">释放 <see cref="T:System.Threading.Tasks.Task" /> 类的当前实例所使用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-567">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c0057-568">释放 <see cref="T:System.Threading.Tasks.Task" /> 类的当前实例所使用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-568">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-569"><xref:System.Threading.Tasks.Task>类实现<xref:System.IDisposable>接口，因为它在内部使用还实现的资源<xref:System.IDisposable>。</span><span class="sxs-lookup"><span data-stu-id="c0057-569">The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>.</span></span> <span data-ttu-id="c0057-570">但是，尤其是当你的应用面向[!INCLUDE[net_v45](~/includes/net-v45-md.md)]或更高版本，没有无需调用<xref:System.Threading.Tasks.Task.Dispose%2A>除非性能或可伸缩性测试表明，根据您的使用模式，您的应用程序将会提高性能释放任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-570">However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</span></span> <span data-ttu-id="c0057-571">有关详细信息，请参阅[是否需要释放任务？](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx)中使用.NET 博客进行并行编程。</span><span class="sxs-lookup"><span data-stu-id="c0057-571">For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c0057-572">任务的最终状态不是一下值之一：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-572">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="c0057-573">一个布尔值，该值指示是否由于调用 <see cref="M:System.Threading.Tasks.Task.Dispose" /> 的原因而调用此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-573">A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.Tasks.Task.Dispose" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-574">释放 <see cref="T:System.Threading.Tasks.Task" />，同时释放其所有非托管资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-574">Disposes the <see cref="T:System.Threading.Tasks.Task" />, releasing all of its unmanaged resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-575"><xref:System.Threading.Tasks.Task>类实现<xref:System.IDisposable>接口，因为它在内部使用还实现的资源<xref:System.IDisposable>。</span><span class="sxs-lookup"><span data-stu-id="c0057-575">The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>.</span></span> <span data-ttu-id="c0057-576">但是，尤其是当你的应用面向[!INCLUDE[net_v45](~/includes/net-v45-md.md)]或更高版本，没有无需调用<xref:System.Threading.Tasks.Task.Dispose%2A>除非性能或可伸缩性测试表明，根据您的使用模式，您的应用程序将会提高性能释放任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-576">However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</span></span> <span data-ttu-id="c0057-577">有关详细信息，请参阅[是否需要释放任务？](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx)中使用.NET 博客进行并行编程。</span><span class="sxs-lookup"><span data-stu-id="c0057-577">For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c0057-578">任务的最终状态不是一下值之一：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-578">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          </span>
        </exception>
        <threadsafe>
          <span data-ttu-id="c0057-579">与大多数的成员不同<see cref="T:System.Threading.Tasks.Task" />类，此方法不是线程安全。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-579">Unlike most of the members of the <see cref="T:System.Threading.Tasks.Task" /> class, this method is not thread-safe.</span>
          </span>
        </threadsafe>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public AggregateException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AggregateException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As AggregateException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AggregateException ^ Exception { AggregateException ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AggregateException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-580">获取导致 <see cref="T:System.AggregateException" /> 提前结束的 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-580">Gets the <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</span>
          </span>
          <span data-ttu-id="c0057-581">如果 <see cref="T:System.Threading.Tasks.Task" /> 成功完成或尚未引发任何异常，这将返回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-581">If the <see cref="T:System.Threading.Tasks.Task" /> completed successfully or has not yet thrown any exceptions, this will return <see langword="null" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0057-582">导致 <see cref="T:System.AggregateException" /> 提前结束的 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-582">The <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-583">引发未经处理的异常的任务存储生成的异常，并将其包装在传播<xref:System.AggregateException>调用<xref:System.Threading.Tasks.Task.Wait%2A>或访问中<xref:System.Threading.Tasks.Task.Exception%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="c0057-583">Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a <xref:System.AggregateException> in calls to <xref:System.Threading.Tasks.Task.Wait%2A> or in accesses to the <xref:System.Threading.Tasks.Task.Exception%2A> property.</span></span> <span data-ttu-id="c0057-584">按任务实例进行垃圾回收时间未观察到任何异常将在终结器线程上传播。</span><span class="sxs-lookup"><span data-stu-id="c0057-584">Any exceptions not observed by the time the task instance is garbage collected will be propagated on the finalizer thread.</span></span> <span data-ttu-id="c0057-585">有关详细信息及示例，请参阅[异常处理 （任务并行库）](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-585">For more information and an example, see [Exception Handling (Task Parallel Library)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Factory">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.TaskFactory Factory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.TaskFactory Factory" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Factory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Factory As TaskFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::TaskFactory ^ Factory { System::Threading::Tasks::TaskFactory ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-586">提供对用于创建 <see cref="T:System.Threading.Tasks.Task" /> 和 <see cref="T:System.Threading.Tasks.Task`1" /> 的工厂方法的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-586">Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> instances.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0057-587">一个工厂对象，可创建多种 <see cref="T:System.Threading.Tasks.Task" /> 和 <see cref="T:System.Threading.Tasks.Task`1" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-587">A factory object that can create a variety of <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-588">此属性返回的默认实例<xref:System.Threading.Tasks.TaskFactory>等同于通过调用的无参数创建的类<xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType>构造函数。</span><span class="sxs-lookup"><span data-stu-id="c0057-588">This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="c0057-589">它具有以下属性值：</span><span class="sxs-lookup"><span data-stu-id="c0057-589">It has the following property values:</span></span>  
  
|<span data-ttu-id="c0057-590">Property</span><span class="sxs-lookup"><span data-stu-id="c0057-590">Property</span></span>|<span data-ttu-id="c0057-591">“值”</span><span class="sxs-lookup"><span data-stu-id="c0057-591">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A?displayProperty=nameWithType>|<xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.ContinuationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskContinuationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.CreationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskCreationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.Scheduler%2A?displayProperty=nameWithType>|<span data-ttu-id="c0057-592">`null`或 <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c0057-592">`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span></span>|  
  
 <span data-ttu-id="c0057-593">此属性的最常见用途是创建并启动新任务以一次对<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-593">The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0057-594">从开始[!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType>方法提供的最简单的方法来创建<xref:System.Threading.Tasks.Task>默认配置值的对象。</span><span class="sxs-lookup"><span data-stu-id="c0057-594">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a <xref:System.Threading.Tasks.Task> object with default configuration values.</span></span>  
  
 <span data-ttu-id="c0057-595">下面的示例使用静态<xref:System.Threading.Tasks.Task.Factory%2A>属性以使两次调用<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-595">The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c0057-596">第一个使用来填充数组的用户的我的文档目录中的文件的名称，而第二个使用来填充数组的用户的我的文档目录的子目录的名称。</span><span class="sxs-lookup"><span data-stu-id="c0057-596">The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="c0057-597">然后，它调用<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType>方法，其中的前两个任务已完成执行后显示两个数组中的数量的文件和目录信息。</span><span class="sxs-lookup"><span data-stu-id="c0057-597">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskFactory" />
      </Docs>
    </Member>
    <Member MemberName="FromCanceled">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task FromCanceled (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task FromCanceled(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ FromCanceled(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-598">完成任务的取消标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-598">The cancellation token with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-599">创建 <see cref="T:System.Threading.Tasks.Task" />，它因指定的取消标记进行的取消操作而完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-599">Creates a <see cref="T:System.Threading.Tasks.Task" /> that's completed due to cancellation with a specified cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-600">取消的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-600">The canceled task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-601">尚未对 <paramref name="cancellationToken" /> 请求取消；其 <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> 属性为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-601">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FromCanceled&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromCanceled&lt;TResult&gt; (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromCanceled&lt;TResult&gt;(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromCanceled(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-602">任务返回的结果的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-602">The type of the result returned by the task.</span>
          </span>
        </typeparam>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-603">完成任务的取消标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-603">The cancellation token with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-604">创建 <see cref="T:System.Threading.Tasks.Task`1" />，它因指定的取消标记进行的取消操作而完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-604">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed due to cancellation with a specified cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-605">取消的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-605">The canceled task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-606">尚未对 <paramref name="cancellationToken" /> 请求取消；其 <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> 属性为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-606">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FromException">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task FromException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task FromException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ FromException(Exception ^ exception);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">
          <span data-ttu-id="c0057-607">完成任务的异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-607">The exception with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-608">创建 <see cref="T:System.Threading.Tasks.Task" />，它是以指定的异常来完成的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-608">Creates a <see cref="T:System.Threading.Tasks.Task" /> that has completed with a specified exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-609">出错的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-609">The faulted task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-610">此方法创建<xref:System.Threading.Tasks.Task>对象，其<xref:System.Threading.Tasks.Task.Status%2A>属性是<xref:System.Threading.Tasks.TaskStatus.Faulted>并且其<xref:System.Threading.Tasks.Task.Exception%2A>属性包含`exception`。</span><span class="sxs-lookup"><span data-stu-id="c0057-610">This method creates a <xref:System.Threading.Tasks.Task> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.Faulted> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`.</span></span> <span data-ttu-id="c0057-611">当你立即知道任务执行的工作，将引发异常，然后执行较长的代码路径时，通常使用方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-611">The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</span></span> <span data-ttu-id="c0057-612">有关示例，请参阅<xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29>重载。</span><span class="sxs-lookup"><span data-stu-id="c0057-612">For an example, see the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromException&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromException&lt;TResult&gt; (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromException&lt;TResult&gt;(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromException``1(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromException(Exception ^ exception);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-613">任务返回的结果的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-613">The type of the result returned by the task.</span>
          </span>
        </typeparam>
        <param name="exception">
          <span data-ttu-id="c0057-614">完成任务的异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-614">The exception with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-615">创建 <see cref="T:System.Threading.Tasks.Task`1" />，它是以指定的异常来完成的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-615">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed with a specified exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-616">出错的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-616">The faulted task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-617">此方法创建<xref:System.Threading.Tasks.Task%601>对象，其<xref:System.Threading.Tasks.Task.Status%2A>属性是<xref:System.Threading.Tasks.TaskStatus.Faulted>并且其<xref:System.Threading.Tasks.Task.Exception%2A>属性包含`exception`。</span><span class="sxs-lookup"><span data-stu-id="c0057-617">This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.Faulted> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`.</span></span> <span data-ttu-id="c0057-618">当你立即知道任务执行的工作，将引发异常，然后执行较长的代码路径时，通常使用方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-618">The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</span></span> <span data-ttu-id="c0057-619">说明如示例所示。</span><span class="sxs-lookup"><span data-stu-id="c0057-619">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-620">下面的示例是命令行实用工具，用于计算作为命令行自变量传递其名称，则每个目录中的文件中的字节数。</span><span class="sxs-lookup"><span data-stu-id="c0057-620">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="c0057-621">而不是执行较长的代码路径实例化<xref:System.IO.FileInfo>对象并检索的值其<xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType>目录中每个文件的属性，该示例只需调用<xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29>方法来创建出错的任务，如果特定子目录不存在。</span><span class="sxs-lookup"><span data-stu-id="c0057-621">Rather than executing a longer code path that instantiates a <xref:System.IO.FileInfo> object and retrieves the value of its <xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> method to create a faulted task if a particular subdirectory does not exist.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromResult&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromResult&lt;TResult&gt; (TResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromResult&lt;TResult&gt;(!!TResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromResult(Of TResult) (result As TResult) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromResult(TResult result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="result" Type="TResult" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-622">任务返回的结果的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-622">The type of the result returned by the task.</span>
          </span>
        </typeparam>
        <param name="result">
          <span data-ttu-id="c0057-623">存储入已完成任务的结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-623">The result to store into the completed task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-624">创建指定结果的、成功完成的 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-624">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed successfully with the specified result.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-625">已成功完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-625">The successfully completed task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-626">此方法创建<xref:System.Threading.Tasks.Task%601>对象，其<xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType>属性是`result`并且其<xref:System.Threading.Tasks.Task.Status%2A>属性是<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>。</span><span class="sxs-lookup"><span data-stu-id="c0057-626">This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is `result` and whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span></span> <span data-ttu-id="c0057-627">无需执行较长的代码路径立即知道任务的返回值时，通常使用方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-627">The method is commonly used when the return value of a task is immediately known without executing a longer code path.</span></span> <span data-ttu-id="c0057-628">说明如示例所示。</span><span class="sxs-lookup"><span data-stu-id="c0057-628">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="c0057-629">若要创建的任务对象不会返回一个值，检索中的任务对象<xref:System.Threading.Tasks.Task.CompletedTask%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="c0057-629">To create a Task object that does not return a value, retrieve the Task object from the <xref:System.Threading.Tasks.Task.CompletedTask%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-630">下面的示例是命令行实用工具，用于计算作为命令行自变量传递其名称，则每个目录中的文件中的字节数。</span><span class="sxs-lookup"><span data-stu-id="c0057-630">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="c0057-631">而不是执行较长的代码路径实例化<xref:System.IO.FileStream>对象并检索的值其<xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType>目录中每个文件的属性，该示例只需调用<xref:System.Threading.Tasks.Task.FromResult%2A>方法创建的任务其<xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType>如果目录不有任何文件，则属性为零 (0)。</span><span class="sxs-lookup"><span data-stu-id="c0057-631">Rather than executing a longer code path that instantiates a <xref:System.IO.FileStream> object and retrieves the value of its <xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromResult%2A> method to create a task whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is zero (0) if a directory has no files.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.CompletedTask" />
      </Docs>
    </Member>
    <Member MemberName="GetAwaiter">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.TaskAwaiter GetAwaiter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.GetAwaiter" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAwaiter () As TaskAwaiter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::TaskAwaiter GetAwaiter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.TaskAwaiter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c0057-632">获取用于等待此 <see cref="T:System.Threading.Tasks.Task" /> 的 awaiter。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-632">Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-633">一个 awaiter 实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-633">An awaiter instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-634">此方法旨在供编译器使用而不是在应用程序代码中使用。</span><span class="sxs-lookup"><span data-stu-id="c0057-634">This method is intended for compiler use rather than for use in application code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-635">获取此 <see cref="T:System.Threading.Tasks.Task" /> 实例的 ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-635">Gets an ID for this <see cref="T:System.Threading.Tasks.Task" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0057-636">系统分配到此 <see cref="T:System.Threading.Tasks.Task" /> 实例的标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-636">The identifier that is assigned by the system to this <see cref="T:System.Threading.Tasks.Task" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-637">任务 Id 分配按需并不一定表示的任务中创建实例的顺序。</span><span class="sxs-lookup"><span data-stu-id="c0057-637">Task IDs are assigned on-demand and do not necessarily represent the order in which task instances are created.</span></span> <span data-ttu-id="c0057-638">请注意，虽然冲突非常少见，但任务不能保证标识符是唯一的。</span><span class="sxs-lookup"><span data-stu-id="c0057-638">Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</span></span>  
  
 <span data-ttu-id="c0057-639">若要获取当前正在执行的任务，可从执行该任务的代码中的任务 ID，请使用<xref:System.Threading.Tasks.Task.CurrentId%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="c0057-639">To get the task ID of the currently executing task from within code that that task is executing, use the <xref:System.Threading.Tasks.Task.CurrentId%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.CurrentId" />
      </Docs>
    </Member>
    <Member MemberName="IsCanceled">
      <MemberSignature Language="C#" Value="public bool IsCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCanceled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-640">获取此 <see cref="T:System.Threading.Tasks.Task" /> 实例是否由于被取消的原因而已完成执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-640">Gets whether this <see cref="T:System.Threading.Tasks.Task" /> instance has completed execution due to being canceled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0057-641">如果任务由于被取消而完成，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-641">
              <see langword="true" /> if the task has completed due to being canceled; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-642">A<xref:System.Threading.Tasks.Task>将完成处于<xref:System.Threading.Tasks.TaskStatus.Canceled>任何以下条件下状态：</span><span class="sxs-lookup"><span data-stu-id="c0057-642">A <xref:System.Threading.Tasks.Task> will complete in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="c0057-643">其<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A>已标记为要取消该任务开始执行时之前,</span><span class="sxs-lookup"><span data-stu-id="c0057-643">Its <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> was marked for cancellation before the task started executing,</span></span>  
  
-   <span data-ttu-id="c0057-644">该任务已取消请求对其已终止<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A>通过引发<xref:System.OperationCanceledException>，具有相同<xref:System.Threading.CancellationToken>。</span><span class="sxs-lookup"><span data-stu-id="c0057-644">The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by throwing an <xref:System.OperationCanceledException> that bears the same <xref:System.Threading.CancellationToken>.</span></span>  
  
-   <span data-ttu-id="c0057-645">该任务已取消请求对其已终止<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A>通过调用<xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A>方法<xref:System.Threading.CancellationToken>。</span><span class="sxs-lookup"><span data-stu-id="c0057-645">The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by calling the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> method on the <xref:System.Threading.CancellationToken>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c0057-646">检索的值的<xref:System.Threading.Tasks.Task.IsCanceled%2A>属性不会阻止调用线程，直到任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-646">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCanceled%2A> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.IsCompleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-647">获取此 <see cref="T:System.Threading.Tasks.Task" /> 是否已完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-647">Gets whether this <see cref="T:System.Threading.Tasks.Task" /> has completed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0057-648">如果该任务已完成，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-648">
              <see langword="true" /> if the task has completed; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-649"><xref:System.Threading.Tasks.Task.IsCompleted%2A> 将返回`true`当任务处于三种的最终状态之一： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>。</span><span class="sxs-lookup"><span data-stu-id="c0057-649"><xref:System.Threading.Tasks.Task.IsCompleted%2A> will return `true` when the task is in one of the three final states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c0057-650">检索的值的<xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType>属性不会阻止调用线程，直到任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-650">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompletedSuccessfully">
      <MemberSignature Language="C#" Value="public bool IsCompletedSuccessfully { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompletedSuccessfully" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCompletedSuccessfully" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompletedSuccessfully As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompletedSuccessfully { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFaulted">
      <MemberSignature Language="C#" Value="public bool IsFaulted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFaulted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsFaulted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFaulted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFaulted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-651">获取 <see cref="T:System.Threading.Tasks.Task" /> 是否由于未经处理异常的原因而完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-651">Gets whether the <see cref="T:System.Threading.Tasks.Task" /> completed due to an unhandled exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0057-652">如果任务引发了未经处理的异常，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-652">
              <see langword="true" /> if the task has thrown an unhandled exception; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-653">如果<xref:System.Threading.Tasks.Task.IsFaulted%2A>是`true`，该任务的<xref:System.Threading.Tasks.Task.Status%2A>等同于<xref:System.Threading.Tasks.TaskStatus.Faulted>，并将其<xref:System.Threading.Tasks.Task.Exception%2A>属性将为非 null。</span><span class="sxs-lookup"><span data-stu-id="c0057-653">If <xref:System.Threading.Tasks.Task.IsFaulted%2A> is `true`, the task's <xref:System.Threading.Tasks.Task.Status%2A> is equal to <xref:System.Threading.Tasks.TaskStatus.Faulted>, and its <xref:System.Threading.Tasks.Task.Exception%2A> property will be non-null.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c0057-654">检索的值的<xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType>属性不会阻止调用线程，直到任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-654">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-655">将在线程池上运行的指定工作排队，并返回该工作的任务或 <see cref="T:System.Threading.Tasks.Task`1" /> 句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-655">Queues the specified work to run on the ThreadPool and returns a task or <see cref="T:System.Threading.Tasks.Task`1" /> handle for that work.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-656"><xref:System.Threading.Tasks.Task.Run%2A>方法提供了一套方便地启动任务通过使用默认值的重载。</span><span class="sxs-lookup"><span data-stu-id="c0057-656">The <xref:System.Threading.Tasks.Task.Run%2A> method provides a set of overloads that make it easy to start a task by using default values.</span></span> <span data-ttu-id="c0057-657">它是轻量替代<xref:System.Threading.Tasks.TaskFactory.StartNew%2A>重载。</span><span class="sxs-lookup"><span data-stu-id="c0057-657">It is a lightweight alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overloads.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Action ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="c0057-658">以异步方式执行的工作量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-658">The work to execute asynchronously</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-659">将在线程池上运行的指定工作排队，并返回代表该工作的 <see cref="T:System.Threading.Tasks.Task" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-659">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-660">表示在线程池执行的队列的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-660">A task that represents the work queued to execute in the ThreadPool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-661"><xref:System.Threading.Tasks.Task.Run%2A>方法允许你创建和执行任务，在单个方法调用，并为一个更简单的替代方法<xref:System.Threading.Tasks.TaskFactory.StartNew%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-661">The <xref:System.Threading.Tasks.Task.Run%2A> method allows you to create and execute a task in a single method call and is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="c0057-662">使用以下默认值，它创建一个任务：</span><span class="sxs-lookup"><span data-stu-id="c0057-662">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="c0057-663">其取消标记是<xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c0057-663">Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="c0057-664">其<xref:System.Threading.Tasks.Task.CreationOptions%2A>属性值是<xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c0057-664">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="c0057-665">它使用默认任务计划程序。</span><span class="sxs-lookup"><span data-stu-id="c0057-665">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="c0057-666">有关处理由任务操作引发的异常的信息，请参阅[异常处理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-666">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-667">下面的示例定义`ShowThreadInfo`方法，用于显示<xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType>当前线程。</span><span class="sxs-lookup"><span data-stu-id="c0057-667">The following example defines a `ShowThreadInfo` method  that displays the <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> of the current thread.</span></span> <span data-ttu-id="c0057-668">它称为直接从应用程序线程，并从调用<xref:System.Action>委托传递给<xref:System.Threading.Tasks.Task.Run%28System.Action%29>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-668">It is called directly from the application thread, and is called from the <xref:System.Action> delegate passed to the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run11.cs#11)]
 [!code-vb[System.Threading.Tasks.Task.Run#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run11.vb#11)]  
  
 <span data-ttu-id="c0057-669">下面的示例等同于前一个，只不过它使用 lambda 表达式定义的任务是执行代码。</span><span class="sxs-lookup"><span data-stu-id="c0057-669">The following example is similar to the previous one, except that it uses a lambda expression to define the code that the task is to execute.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run6.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Run#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run6.vb#3)]  
  
 <span data-ttu-id="c0057-670">示例说明在与主应用程序线程不同的线程上执行异步任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-670">The examples show that the asynchronous task executes on a different thread than the main application thread.</span></span>  
  
 <span data-ttu-id="c0057-671">调用<xref:System.Threading.Tasks.Task.Wait%2A>方法可确保在任务完成，并且显示在应用程序结束之前其输出。</span><span class="sxs-lookup"><span data-stu-id="c0057-671">The call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that the task completes and displays its output before the application ends.</span></span> <span data-ttu-id="c0057-672">否则，它是可能的`Main`方法将在任务完成之前完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-672">Otherwise, it is possible that the `Main` method will complete before the task finishes.</span></span>  
  
 <span data-ttu-id="c0057-673">下面的示例演示<xref:System.Threading.Tasks.Task.Run%28System.Action%29>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-673">The following example illustrates the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span> <span data-ttu-id="c0057-674">它定义目录名的数组，并启动单独的任务来检索每个目录中的文件名称。</span><span class="sxs-lookup"><span data-stu-id="c0057-674">It defines an array of directory names and starts a separate task to retrieve the file names in each directory.</span></span> <span data-ttu-id="c0057-675">所有任务都写入到单个文件名称<xref:System.Collections.Concurrent.ConcurrentBag%601>对象。</span><span class="sxs-lookup"><span data-stu-id="c0057-675">All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span> <span data-ttu-id="c0057-676">该示例然后调用<xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29>方法，以确保所有的任务已完成，并且然后显示文件名写入的总数的计数<xref:System.Collections.Concurrent.ConcurrentBag%601>对象。</span><span class="sxs-lookup"><span data-stu-id="c0057-676">The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-677">
            <paramref name="action" /> 参数是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-677">The <paramref name="action" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run (function As Func(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Func&lt;System::Threading::Tasks::Task ^&gt; ^ function);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="c0057-678">以异步方式执行的工作量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-678">The work to execute asynchronously</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-679">将在线程池上运行的指定工作排队，并返回 <paramref name="function" /> 所返回的任务的代理项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-679">Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-680">表示由 <paramref name="function" /> 返回的任务代理的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-680">A task that represents a proxy for the task returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-681">有关处理由任务操作引发的异常的信息，请参阅[异常处理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-681">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-682">
            <paramref name="function" /> 参数是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-682">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="c0057-683">以异步方式执行的工作量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-683">The work to execute asynchronously</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-684">可用于取消工作的取消标记</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-684">A cancellation token that can be used to cancel the work</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-685">将在线程池上运行的指定工作排队，并返回代表该工作的 <see cref="T:System.Threading.Tasks.Task" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-685">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span>
          </span>
          <span data-ttu-id="c0057-686">借助取消标记，可取消工作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-686">A cancellation token allows the work to be cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-687">一个任务，它表示在线程池中排队等待执行的工作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-687">A task that represents the work queued to execute in the thread pool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-688">如果该任务开始执行之前，已请求取消，才会执行该任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-688">If cancellation is requested before the task begins execution, the task does not execute.</span></span> <span data-ttu-id="c0057-689">改为设置为<xref:System.Threading.Tasks.TaskStatus.Canceled>状态，则将引发<xref:System.Threading.Tasks.TaskCanceledException>异常。</span><span class="sxs-lookup"><span data-stu-id="c0057-689">Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.</span></span>  
  
 <span data-ttu-id="c0057-690"><xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29>方法是一个更简单的替代方法<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-690">The <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c0057-691">使用以下默认值，它创建一个任务：</span><span class="sxs-lookup"><span data-stu-id="c0057-691">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="c0057-692">其<xref:System.Threading.Tasks.Task.CreationOptions%2A>属性值是<xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c0057-692">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="c0057-693">它使用默认任务计划程序。</span><span class="sxs-lookup"><span data-stu-id="c0057-693">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="c0057-694">有关处理由任务操作引发的异常的信息，请参阅[异常处理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-694">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-695">下面的示例调用<xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29>方法来创建一个任务，它循环 C:\Windows\System32 目录中的文件。</span><span class="sxs-lookup"><span data-stu-id="c0057-695">The following example calls the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="c0057-696">Lambda 表达式调用<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法将添加到每个文件的信息<xref:System.Collections.Generic.List%601>对象。</span><span class="sxs-lookup"><span data-stu-id="c0057-696">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="c0057-697">每个分离的嵌套的任务由调用<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>循环检查取消标记的状态，并且如果已请求取消，将调用<xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-697">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c0057-698"><xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType>方法抛出异常<xref:System.OperationCanceledException>中处理的异常`catch`时调用的线程调用阻止<xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-698">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Run#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-699">
            <paramref name="action" /> 参数是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-699">The <paramref name="action" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="c0057-700">该任务已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-700">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-701">与 <paramref name="cancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-701">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Func&lt;System::Threading::Tasks::Task ^&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="c0057-702">以异步方式执行的工作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-702">The work to execute asynchronously.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-703">应用以取消工作的取消标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-703">A cancellation token that should be used to cancel the work.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-704">将在线程池上运行的指定工作排队，并返回 <paramref name="function" /> 所返回的任务的代理项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-704">Queues the specified work to run on the thread pool and returns a proxy for the task returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-705">表示由 <paramref name="function" /> 返回的任务代理的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-705">A task that represents a proxy for the task returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-706">有关处理由任务操作引发的异常的信息，请参阅[异常处理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-706">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-707">
            <paramref name="function" /> 参数是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-707">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="c0057-708">该任务已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-708">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-709">与 <paramref name="cancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-709">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run(Of TResult) (function As Func(Of Task(Of TResult))) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ function);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-710">代理任务返回的结果的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-710">The type of the result returned by the proxy task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="c0057-711">以异步方式执行的工作量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-711">The work to execute asynchronously</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-712">将指定的工作排成队列在线程池上运行，并返回由 <paramref name="function" /> 返回的 <see langword="Task(TResult)" /> 的代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-712">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-713">表示由 <see langword="Task(TResult)" /> 返回的 <see langword="Task(TResult)" /> 的代理的 <paramref name="function" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-713">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-714">有关处理由任务操作引发的异常的信息，请参阅[异常处理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-714">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-715">
            <paramref name="function" /> 参数是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-715">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run(Of TResult) (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;TResult&gt; ^ function);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-716">任务的返回类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-716">The return type of the task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="c0057-717">以异步方式执行的工作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-717">The work to execute asynchronously.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-718">将在线程池上运行的指定工作排队，并返回代表该工作的 <see cref="T:System.Threading.Tasks.Task`1" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-718">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task`1" /> object that represents that work.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-719">表示在线程池中排队执行的工作的任务对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-719">A task object that represents the work queued to execute in the thread pool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-720"><xref:System.Threading.Tasks.Task.Run%2A>方法是一个更简单的替代方法<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-720">The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c0057-721">使用以下默认值，它创建一个任务：</span><span class="sxs-lookup"><span data-stu-id="c0057-721">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="c0057-722">其取消标记是<xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c0057-722">Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="c0057-723">其<xref:System.Threading.Tasks.Task.CreationOptions%2A>属性值是<xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c0057-723">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="c0057-724">它使用默认任务计划程序。</span><span class="sxs-lookup"><span data-stu-id="c0057-724">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="c0057-725">有关处理由任务操作引发的异常的信息，请参阅[异常处理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-725">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-726">下面的示例计算表示已发布的丛书的文本文件中单词的大致数目。</span><span class="sxs-lookup"><span data-stu-id="c0057-726">The following example counts the approximate number of words in text files that represent published books.</span></span> <span data-ttu-id="c0057-727">每个任务负责打开的文件，以异步方式读取其整个内容并通过使用正则表达式计算字数统计。</span><span class="sxs-lookup"><span data-stu-id="c0057-727">Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression.</span></span> <span data-ttu-id="c0057-728"><xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29>调用方法以确保显示到控制台的每本书的字数前已完成所有任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-728">The <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method is called to ensure that all tasks have completed before  displaying the word count of each book to the console.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run3.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Run#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run3.vb#2)]  
  
 <span data-ttu-id="c0057-729">正则表达式`\p{P}*\s+`匹配零个、 一个或多个标点字符后跟一个或多个空白字符。</span><span class="sxs-lookup"><span data-stu-id="c0057-729">The regular expression `\p{P}*\s+` matches zero, one, or more punctuation characters followed by one or more whitespace characters.</span></span> <span data-ttu-id="c0057-730">它假定匹配项的总数等于近似字数统计。</span><span class="sxs-lookup"><span data-stu-id="c0057-730">It assumes that the total number of matches equals the approximate word count.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-731">
            <paramref name="function" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-731">The <paramref name="function" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-732">代理任务返回的结果的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-732">The type of the result returned by the proxy task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="c0057-733">以异步方式执行的工作量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-733">The work to execute asynchronously</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-734">应用以取消工作的取消标记</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-734">A cancellation token that should be used to cancel the work</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-735">将指定的工作排成队列在线程池上运行，并返回由 <paramref name="function" /> 返回的 <see langword="Task(TResult)" /> 的代理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-735">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-736">表示由 <see langword="Task(TResult)" /> 返回的 <see langword="Task(TResult)" /> 的代理的 <paramref name="function" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-736">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-737">有关处理由任务操作引发的异常的信息，请参阅[异常处理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-737">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-738">
            <paramref name="function" /> 参数是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-738">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="c0057-739">该任务已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-739">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-740">与 <paramref name="cancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-740">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-741">任务的结果类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-741">The result type of the task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="c0057-742">以异步方式执行的工作量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-742">The work to execute asynchronously</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-743">应用以取消工作的取消标记</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-743">A cancellation token that should be used to cancel the work</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-744">将在线程池上运行的指定工作排队，并返回代表该工作的 <see langword="Task(TResult)" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-744">Queues the specified work to run on the thread pool and returns a <see langword="Task(TResult)" /> object that represents that work.</span>
          </span>
          <span data-ttu-id="c0057-745">借助取消标记，可取消工作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-745">A cancellation token allows the work to be cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-746">一个 <see langword="Task(TResult)" />，它表示在线程池中排队等待执行的工作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-746">A <see langword="Task(TResult)" /> that represents the work queued to execute in the thread pool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-747">如果该任务开始执行之前，已请求取消，才会执行该任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-747">If cancellation is requested before the task begins execution, the task does not execute.</span></span> <span data-ttu-id="c0057-748">改为设置为<xref:System.Threading.Tasks.TaskStatus.Canceled>状态，则将引发<xref:System.Threading.Tasks.TaskCanceledException>异常。</span><span class="sxs-lookup"><span data-stu-id="c0057-748">Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.</span></span>  
  
 <span data-ttu-id="c0057-749"><xref:System.Threading.Tasks.Task.Run%2A>方法是一个更简单的替代方法<xref:System.Threading.Tasks.TaskFactory.StartNew%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-749">The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="c0057-750">使用以下默认值，它创建一个任务：</span><span class="sxs-lookup"><span data-stu-id="c0057-750">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="c0057-751">其<xref:System.Threading.Tasks.Task.CreationOptions%2A>属性值是<xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c0057-751">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="c0057-752">它使用默认任务计划程序。</span><span class="sxs-lookup"><span data-stu-id="c0057-752">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="c0057-753">有关处理由任务操作引发的异常的信息，请参阅[异常处理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-753">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-754">下面的示例创建 20 个将循环执行，直到计数器就会增加到 200 万个值的任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-754">The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</span></span> <span data-ttu-id="c0057-755">前 10 个任务进入 2000000，取消标记被取消，并其计数器未达到 200 万个的任何任务将被取消。</span><span class="sxs-lookup"><span data-stu-id="c0057-755">When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</span></span> <span data-ttu-id="c0057-756">该示例演示了可能的输出。</span><span class="sxs-lookup"><span data-stu-id="c0057-756">The example shows possible output.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]
 [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]  
  
 <span data-ttu-id="c0057-757">而不是使用<xref:System.AggregateException.InnerExceptions%2A>属性可以检查异常，该示例循环访问所有任务，以确定其成功完成，然后其已取消。</span><span class="sxs-lookup"><span data-stu-id="c0057-757">Instead of using the <xref:System.AggregateException.InnerExceptions%2A> property to   examine exceptions, the example iterates all tasks to determine which have completed successfully and which have been cancelled.</span></span> <span data-ttu-id="c0057-758">对于那些已完成，它将显示任务返回的值。</span><span class="sxs-lookup"><span data-stu-id="c0057-758">For those that have completed, it displays the value returned by the task.</span></span>  
  
 <span data-ttu-id="c0057-759">取消是协作性的因为每个任务可以决定如何响应取消。</span><span class="sxs-lookup"><span data-stu-id="c0057-759">Because cancellation is cooperative, each task can decide how to respond to cancellation.</span></span> <span data-ttu-id="c0057-760">下面的示例是类似的第，只不过任务后取消了令牌，则返回它们需要完成而不是引发异常的迭代数。</span><span class="sxs-lookup"><span data-stu-id="c0057-760">The following example is like the first, except that, once the token is cancelled, tasks return the number of iterations they've completed rather than throw an exception.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run28.cs#28)]
 [!code-vb[System.Threading.Tasks.Task.Run#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run28.vb#28)]  
  
 <span data-ttu-id="c0057-761">该示例仍必须处理<xref:System.AggregateException>异常，因为请求取消时未启动任何任务仍会引发异常。</span><span class="sxs-lookup"><span data-stu-id="c0057-761">The example still must handle the <xref:System.AggregateException> exception,   since any tasks that have not started when cancellation is requested still throw an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-762">
            <paramref name="function" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-762">The <paramref name="function" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="c0057-763">该任务已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-763">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-764">与 <paramref name="cancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-764">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RunSynchronously">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-765">对当前的 <see cref="T:System.Threading.Tasks.Task" /> 同步运行 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-765">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RunSynchronously">
      <MemberSignature Language="C#" Value="public void RunSynchronously ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunSynchronously() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.RunSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunSynchronously ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunSynchronously();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c0057-766">对当前的 <see cref="T:System.Threading.Tasks.Task" /> 同步运行 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-766">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-767">通常，任务在线程池线程上异步执行，并且不会阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="c0057-767">Ordinarily, tasks are executed asynchronously on a thread pool thread and do not block the calling thread.</span></span> <span data-ttu-id="c0057-768">通过调用执行的任务<xref:System.Threading.Tasks.Task.RunSynchronously>方法了与当前<xref:System.Threading.Tasks.TaskScheduler>并在调用线程上运行。</span><span class="sxs-lookup"><span data-stu-id="c0057-768">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method are associated with the current <xref:System.Threading.Tasks.TaskScheduler> and are run on the calling thread.</span></span> <span data-ttu-id="c0057-769">如果目标计划程序不支持在调用线程上运行此任务，在计划程序，执行将安排任务和调用线程将受阻，直到任务完成执行。</span><span class="sxs-lookup"><span data-stu-id="c0057-769">If the target scheduler does not support running this task on the calling thread, the task will be scheduled for execution on the scheduler, and the calling thread will block until the task has completed execution.</span></span> <span data-ttu-id="c0057-770">即使任务以同步方式运行，调用线程仍应调用<xref:System.Threading.Tasks.Task.Wait%2A>来处理该任务可能会引发任何异常。</span><span class="sxs-lookup"><span data-stu-id="c0057-770">Even though the task runs synchronously, the calling thread should still call <xref:System.Threading.Tasks.Task.Wait%2A> to handle any exceptions that the task might throw.</span></span>  <span data-ttu-id="c0057-771">异常处理的详细信息，请参阅[异常处理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-771">For more information on exception handling, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 <span data-ttu-id="c0057-772">通过调用执行的任务<xref:System.Threading.Tasks.Task.RunSynchronously%2A>方法通过调用实例化<xref:System.Threading.Tasks.Task>或<xref:System.Threading.Tasks.Task%601>类构造函数。</span><span class="sxs-lookup"><span data-stu-id="c0057-772">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor.</span></span> <span data-ttu-id="c0057-773">以同步方式运行的任务必须在<xref:System.Threading.Tasks.TaskStatus.Created>状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-773">The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus.Created> state.</span></span> <span data-ttu-id="c0057-774">可以启动任务，并将其只运行一次。</span><span class="sxs-lookup"><span data-stu-id="c0057-774">A task may be started and run only once.</span></span> <span data-ttu-id="c0057-775">任何尝试计划任务引发异常的第二个时间结果。</span><span class="sxs-lookup"><span data-stu-id="c0057-775">Any attempts to schedule a task a second time results in an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-776">下面的示例将通过调用执行的任务进行比较<xref:System.Threading.Tasks.Task.RunSynchronously%2A>方法和一个以异步方式执行。</span><span class="sxs-lookup"><span data-stu-id="c0057-776">The following example compares a task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method with one executed asynchronously.</span></span> <span data-ttu-id="c0057-777">在这两种情况下，任务执行相同的 lambda 表达式，它显示的任务 ID 和的线程 ID 上运行任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-777">In both cases, the tasks execute identical lambda expressions that display the task ID and the ID of the thread on which the task is running.</span></span> <span data-ttu-id="c0057-778">此任务计算介于 1 和 1000000 之间的整数的总和。</span><span class="sxs-lookup"><span data-stu-id="c0057-778">The task calculates the sum of the integers between 1 and 1,000,000.</span></span> <span data-ttu-id="c0057-779">如示例输出所示，通过调用执行该任务<xref:System.Threading.Tasks.Task.RunSynchronously%2A>方法而异步任务不在应用程序的线程上运行。</span><span class="sxs-lookup"><span data-stu-id="c0057-779">As the output from the example shows, the task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method runs on the application thread, while the asynchronous task does not.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/cs/runsynchronously1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/vb/runsynchronously1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-780">已释放了 <see cref="T:System.Threading.Tasks.Task" /> 实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-780">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c0057-781">
            <see cref="T:System.Threading.Tasks.Task" /> 并非要启动的有效状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-781">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="c0057-782">它可能已启动、执行或取消，或者它可能是以不支持直接计划的方式创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-782">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RunSynchronously">
      <MemberSignature Language="C#" Value="public void RunSynchronously (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunSynchronously(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunSynchronously (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunSynchronously(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler">
          <span data-ttu-id="c0057-783">尝试对其以内联方式运行此任务的计划程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-783">The scheduler on which to attempt to run this task inline.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-784">对提供的 <see cref="T:System.Threading.Tasks.Task" /> 同步运行 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-784">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the <see cref="T:System.Threading.Tasks.TaskScheduler" /> provided.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-785">通过调用执行的任务<xref:System.Threading.Tasks.Task.RunSynchronously%2A>方法通过调用实例化<xref:System.Threading.Tasks.Task>或<xref:System.Threading.Tasks.Task%601>类构造函数。</span><span class="sxs-lookup"><span data-stu-id="c0057-785">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor.</span></span> <span data-ttu-id="c0057-786">以同步方式运行的任务必须在<xref:System.Threading.Tasks.TaskStatus.Created>状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-786">The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus.Created> state.</span></span> <span data-ttu-id="c0057-787">可以启动任务，并将其只运行一次。</span><span class="sxs-lookup"><span data-stu-id="c0057-787">A task may be started and run only once.</span></span> <span data-ttu-id="c0057-788">任何尝试计划任务引发异常的第二个时间结果。</span><span class="sxs-lookup"><span data-stu-id="c0057-788">Any attempts to schedule a task a second time results in an exception.</span></span>  
  
 <span data-ttu-id="c0057-789">如果目标计划程序不支持当前线程上运行此任务，该任务将安排执行在计划程序，并且当前线程将受阻，直到任务完成执行。</span><span class="sxs-lookup"><span data-stu-id="c0057-789">If the target scheduler does not support running this task on the current thread, the task will be scheduled for execution on the scheduler, and the current thread will block until the task has completed execution.</span></span> <span data-ttu-id="c0057-790">因此，调用线程不需要调用的方法，如<xref:System.Threading.Tasks.Task.Wait%2A>以确保任务已完成执行。</span><span class="sxs-lookup"><span data-stu-id="c0057-790">Because of this, the calling thread does not need to call a method such as <xref:System.Threading.Tasks.Task.Wait%2A> to ensure that the task has completed execution.</span></span> <span data-ttu-id="c0057-791">任务操作的异常处理的详细信息，请参阅[异常处理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-791">For more information on exception handling for task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-792">已释放了 <see cref="T:System.Threading.Tasks.Task" /> 实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-792">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-793">
            <paramref name="scheduler" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-793">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c0057-794">
            <see cref="T:System.Threading.Tasks.Task" /> 并非要启动的有效状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-794">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="c0057-795">它可能已启动、执行或取消，或者它可能是以不支持直接计划的方式创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-795">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-796">启动 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-796">Starts the <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c0057-797">启动 <see cref="T:System.Threading.Tasks.Task" />，并将它安排到当前的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 中执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-797">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-798">可以启动任务，并将其只运行一次。</span><span class="sxs-lookup"><span data-stu-id="c0057-798">A task may be started and run only once.</span></span> <span data-ttu-id="c0057-799">第二次计划任务的任何尝试都将导致异常。</span><span class="sxs-lookup"><span data-stu-id="c0057-799">Any attempts to schedule a task a second time will result in an exception.</span></span>  
  
 <span data-ttu-id="c0057-800"><xref:System.Threading.Tasks.Task.Start%2A>用于执行的任务已通过调用之一创建<xref:System.Threading.Tasks.Task>构造函数。</span><span class="sxs-lookup"><span data-stu-id="c0057-800">The <xref:System.Threading.Tasks.Task.Start%2A> is used to execute a task that has been created by calling one of the <xref:System.Threading.Tasks.Task> constructors.</span></span> <span data-ttu-id="c0057-801">通常情况下，你执行此操作时需要将从其执行，如有条件地执行你已创建的任务的任务的创建。</span><span class="sxs-lookup"><span data-stu-id="c0057-801">Typically, you do this when you need to separate the task's creation from its execution, such as when you conditionally execute tasks that you've created.</span></span> <span data-ttu-id="c0057-802">对于更常见的情况，你不需要单独执行的任务实例化，我们建议你调用的重载<xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType>或<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-802">For the more common case in which you don't need to separate  task instantiation from execution, we recommend that you call an overload of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="c0057-803">有关处理由任务操作引发的异常的信息，请参阅[异常处理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-803">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-804">下面的示例调用<xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29>构造函数实例化一个新<xref:System.Threading.Tasks.Task>对象，它显示其任务 ID 和托管的线程 ID，然后执行一个循环。</span><span class="sxs-lookup"><span data-stu-id="c0057-804">The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to instantiate a new <xref:System.Threading.Tasks.Task> object that displays its task ID and managed thread ID and then executes a loop.</span></span> <span data-ttu-id="c0057-805">然后，它调用<xref:System.Threading.Tasks.Task.Start%2A>方法用于执行任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-805">It then calls the <xref:System.Threading.Tasks.Task.Start%2A> method to execute the task.</span></span>  <span data-ttu-id="c0057-806">由于这是一个控制台应用程序，调用<xref:System.Threading.Tasks.Task.Wait%2A>方法有必要阻止该应用程序终止之前在任务完成执行。</span><span class="sxs-lookup"><span data-stu-id="c0057-806">Since this is a console app, the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method is necessary to prevent the app from terminating before the task finishes execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Start#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.start/cs/Start1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Start#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.start/vb/Start1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-807">已释放了 <see cref="T:System.Threading.Tasks.Task" /> 实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-807">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c0057-808">
            <see cref="T:System.Threading.Tasks.Task" /> 并非要启动的有效状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-808">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="c0057-809">它可能已启动、执行或取消，或者它可能是以不支持直接计划的方式创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-809">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler">
          <span data-ttu-id="c0057-810">要与之关联并执行此任务的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-810">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> with which to associate and execute this task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-811">启动 <see cref="T:System.Threading.Tasks.Task" />，并将它安排到指定的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 中执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-811">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the specified <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-812">可以仅启动任务，并为其只运行一次。</span><span class="sxs-lookup"><span data-stu-id="c0057-812">A task may only be started and run only once.</span></span> <span data-ttu-id="c0057-813">第二次计划任务的任何尝试都将导致异常。</span><span class="sxs-lookup"><span data-stu-id="c0057-813">Any attempts to schedule a task a second time will result in an exception.</span></span>  
  
 <span data-ttu-id="c0057-814">有关处理由任务操作引发的异常的信息，请参阅[异常处理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-814">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-815">
            <paramref name="scheduler" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-815">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c0057-816">
            <see cref="T:System.Threading.Tasks.Task" /> 并非要启动的有效状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-816">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="c0057-817">它可能已启动、执行或取消，或者它可能是以不支持直接计划的方式创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-817">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-818">已释放了 <see cref="T:System.Threading.Tasks.Task" /> 实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-818">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskSchedulerException">
          <span data-ttu-id="c0057-819">计划程序无法将此任务排入队列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-819">The scheduler was unable to queue this task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As TaskStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskStatus Status { System::Threading::Tasks::TaskStatus get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-820">获取此任务的 <see cref="T:System.Threading.Tasks.TaskStatus" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-820">Gets the <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0057-821">此任务实例的当前 <see cref="T:System.Threading.Tasks.TaskStatus" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-821">The current <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-822">检索的值的<xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType>属性不会阻止调用线程，直到任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-822">Retrieving the value of the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 <span data-ttu-id="c0057-823">有关详细信息及示例，请参阅[使用延续任务来链接任务](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)和[如何： 取消任务及其子](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-823">For more information and an example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md) and [How to: Cancel a Task and Its Children](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-824">下面的示例创建 20 个将循环执行，直到计数器就会增加到 200 万个值的任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-824">The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</span></span> <span data-ttu-id="c0057-825">前 10 个任务进入 2000000，取消标记被取消，并其计数器未达到 200 万个的任何任务将被取消。</span><span class="sxs-lookup"><span data-stu-id="c0057-825">When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</span></span> <span data-ttu-id="c0057-826">该示例然后检查<xref:System.Threading.Tasks.Task.Status%2A>属性的每个任务以指示它是否已成功完成或已被取消。</span><span class="sxs-lookup"><span data-stu-id="c0057-826">The example then examines the <xref:System.Threading.Tasks.Task.Status%2A> property of each task to indicate whether it completed successfully or was cancelled.</span></span> <span data-ttu-id="c0057-827">对于那些已完成，它将显示任务返回的值。</span><span class="sxs-lookup"><span data-stu-id="c0057-827">For those that completed, it displays the value returned by the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]
 [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.AsyncWaitHandle">
      <MemberSignature Language="C#" Value="System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property AsyncWaitHandle As WaitHandle Implements IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="property System::Threading::WaitHandle ^ System.IAsyncResult.AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncWaitHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-828">获取可用于等待任务完成的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-828">Gets a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0057-829">可用于等待任务完成的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-829">A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-830">使用提供的等待功能<xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType>最好是使用<xref:System.IAsyncResult.AsyncWaitHandle%2A>类似的功能。</span><span class="sxs-lookup"><span data-stu-id="c0057-830">Using the wait functionality provided by <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> is preferable to using <xref:System.IAsyncResult.AsyncWaitHandle%2A> for similar functionality.</span></span> <span data-ttu-id="c0057-831">有关详细信息，请参阅中的"任务时等待"一节[基于任务的异步编程](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)和[与其他异步模式一起使用 TPL](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md)。</span><span class="sxs-lookup"><span data-stu-id="c0057-831">For more information, see the "Waiting on Tasks" section in [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Using TPL with Other Asynchronous Patterns](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-832">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-832">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.CompletedSynchronously">
      <MemberSignature Language="C#" Value="bool System.IAsyncResult.CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property CompletedSynchronously As Boolean Implements IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="C++ CLI" Value="property bool System.IAsyncResult.CompletedSynchronously { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.CompletedSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-833">获取操作是否已同步完成的指示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-833">Gets an indication of whether the operation completed synchronously.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0057-834">如果操作同步完成，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-834">
              <see langword="true" /> if the operation completed synchronously; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-835">等待 <see cref="T:System.Threading.Tasks.Task" /> 完成执行过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-835">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c0057-836">等待 <see cref="T:System.Threading.Tasks.Task" /> 完成执行过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-836">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-837"><xref:System.Threading.Tasks.Task.Wait%2A> 是一种同步方法，导致调用线程等待，直到完成当前任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-837"><xref:System.Threading.Tasks.Task.Wait%2A> is a synchronization method that causes the calling thread to wait until the current task has completed.</span></span> <span data-ttu-id="c0057-838">如果当前任务尚未开始执行，等待方法尝试从调度器删除任务并在当前线程上执行它内联。</span><span class="sxs-lookup"><span data-stu-id="c0057-838">If the current task has not started execution, the Wait method attempts to remove the task from the scheduler and execute it inline on the current thread.</span></span> <span data-ttu-id="c0057-839">如果无法做到这一点，或当前的任务已开始执行，它会阻止调用线程，直到任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-839">If it is unable to do that, or if the current task has already started execution, it blocks the calling thread until the task completes.</span></span> <span data-ttu-id="c0057-840">有关详细信息，请参阅[Task.Wait 和"内联"](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx)中使用.NET 博客进行并行编程。</span><span class="sxs-lookup"><span data-stu-id="c0057-840">For more information, see [Task.Wait and "Inlining"](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 <span data-ttu-id="c0057-841">有关详细信息及示例，请参阅[如何： 等待一个或多个任务完成](http://msdn.microsoft.com/library/79cb522b-9c93-46ed-b23a-c06908f3a374)。</span><span class="sxs-lookup"><span data-stu-id="c0057-841">For more information and an example, see [How to: Wait on One or More Tasks to Complete](http://msdn.microsoft.com/library/79cb522b-9c93-46ed-b23a-c06908f3a374).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-842">下面的示例启动生成介于 0 和 100 之间的一百万个随机整数，并计算其平均值的任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-842">The following example starts a task that generates one million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="c0057-843">该示例使用<xref:System.Threading.Tasks.Task.Wait%2A>方法，以确保在任务完成之前在应用程序终止。</span><span class="sxs-lookup"><span data-stu-id="c0057-843">The example uses the <xref:System.Threading.Tasks.Task.Wait%2A> method to ensure that the task completes before the application terminates.</span></span> <span data-ttu-id="c0057-844">否则，由于这是一个控制台应用程序，该示例将终止之前任务可以计算并显示平均值。</span><span class="sxs-lookup"><span data-stu-id="c0057-844">Otherwise, because this is a console application, the example would terminate before the task can compute and display the mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-845">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-845">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="c0057-846">已取消任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-846">The task was canceled.</span>
          </span>
          <span data-ttu-id="c0057-847">
            <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-847">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="c0057-848">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-848">-or-</span>
          </span>
          <span data-ttu-id="c0057-849">执行任务期间引发了一个异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-849">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="c0057-850">
            <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含一个或多个异常的相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-850">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="c0057-851">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-851">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-852">等待 <see cref="T:System.Threading.Tasks.Task" /> 在指定的毫秒数内完成执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-852">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-853">如果在分配的时间内 <see langword="true" /> 完成执行，则为 <see cref="T:System.Threading.Tasks.Task" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-853">
              <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-854"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> 是一种同步方法，导致调用线程等待当前的任务实例，以完成为止以下项之一：</span><span class="sxs-lookup"><span data-stu-id="c0057-854"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="c0057-855">任务成功完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-855">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="c0057-856">任务本身被取消或引发异常。</span><span class="sxs-lookup"><span data-stu-id="c0057-856">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="c0057-857">在这种情况下，处理<xref:System.AggregateException>异常。</span><span class="sxs-lookup"><span data-stu-id="c0057-857">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="c0057-858"><xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType>属性包含有关异常或异常的详细信息。</span><span class="sxs-lookup"><span data-stu-id="c0057-858">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="c0057-859">通过定义的间隔`millisecondsTimeout`间隔。</span><span class="sxs-lookup"><span data-stu-id="c0057-859">The interval defined by `millisecondsTimeout` elapses.</span></span> <span data-ttu-id="c0057-860">在这种情况下，当前线程继续执行，并且该方法返回`false`。</span><span class="sxs-lookup"><span data-stu-id="c0057-860">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-861">下面的示例启动生成 5000000，介于 0 和 100 之间的随机整数，并计算其平均值的任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-861">The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="c0057-862">该示例使用<xref:System.Threading.Tasks.Task.Wait%28System.Int32%29>方法来等待应用程序在 150 毫秒内完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-862">The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> method to wait for the application to complete within 150 milliseconds.</span></span> <span data-ttu-id="c0057-863">如果应用程序正常完成，该任务将显示的总和和平均值的已生成随机数字。</span><span class="sxs-lookup"><span data-stu-id="c0057-863">If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</span></span> <span data-ttu-id="c0057-864">如果超时间隔已过去，此示例将显示一条消息，在终止前。</span><span class="sxs-lookup"><span data-stu-id="c0057-864">If the timeout interval has elapsed, the example displays a message before it terminates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait5.cs#5)]
 [!code-vb[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-865">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-865">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-866">
            <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-866">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="c0057-867">已取消任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-867">The task was canceled.</span>
          </span>
          <span data-ttu-id="c0057-868">
            <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-868">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="c0057-869">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-869">-or-</span>
          </span>
          <span data-ttu-id="c0057-870">执行任务期间引发了一个异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-870">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="c0057-871">
            <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含一个或多个异常的相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-871">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-872">等待任务完成期间要观察的取消标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-872">A cancellation token to observe while waiting for the task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-873">等待 <see cref="T:System.Threading.Tasks.Task" /> 完成执行过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-873">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
          <span data-ttu-id="c0057-874">如果在任务完成之前取消标记已取消，等待将终止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-874">The wait terminates if a cancellation token is canceled before the task completes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-875"><xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29>方法创建可取消的等待; 也就是说，它会导致当前线程等待，直到出现以下之一：</span><span class="sxs-lookup"><span data-stu-id="c0057-875">The <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method creates a cancelable wait; that is, it causes the current thread to wait until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="c0057-876">在任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-876">The task completes.</span></span>  
  
-   <span data-ttu-id="c0057-877">取消标记被取消。</span><span class="sxs-lookup"><span data-stu-id="c0057-877">The cancellation token is canceled.</span></span> <span data-ttu-id="c0057-878">在此情况下，调用<xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29>方法抛出异常<xref:System.OperationCanceledException>。</span><span class="sxs-lookup"><span data-stu-id="c0057-878">In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0057-879">取消`cancellationToken`取消标记具有不会影响正在运行的任务，除非它还具有已通过的取消标记，并且准备好处理取消。</span><span class="sxs-lookup"><span data-stu-id="c0057-879">Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</span></span> <span data-ttu-id="c0057-880">传递`cancellationToken`对象对此方法只是让要取消等待。</span><span class="sxs-lookup"><span data-stu-id="c0057-880">Passing the `cancellationToken` object to this method simply allows the wait to be canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-881">下面的示例演示如何取消标记来取消等待完成任务的简单的使用。</span><span class="sxs-lookup"><span data-stu-id="c0057-881">The following example illustrates the simple use of a cancellation token to cancel waiting for a task's completion.</span></span> <span data-ttu-id="c0057-882">任务启动、 调用<xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>方法来取消标记源的取消标记，然后延迟任一五秒内。</span><span class="sxs-lookup"><span data-stu-id="c0057-882">A task is launched, calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to cancel any of the token source's cancellation tokens, and then delays for five seconds.</span></span> <span data-ttu-id="c0057-883">请注意任务本身尚未过去的取消标记，并且无法被取消。</span><span class="sxs-lookup"><span data-stu-id="c0057-883">Note that the task itself has not been passed the cancellation token and is not cancelable.</span></span> <span data-ttu-id="c0057-884">应用程序线程调用该任务的<xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType>后取消标记被取消并取消方法来等待任务完成，但在等待<xref:System.OperationCanceledException>引发。</span><span class="sxs-lookup"><span data-stu-id="c0057-884">The application thread calls the task's <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method to wait for the task to complete, but the wait is canceled once the cancellation token is cancelled and an <xref:System.OperationCanceledException> is thrown.</span></span> <span data-ttu-id="c0057-885">异常处理程序将异常报告，然后休眠为六秒。</span><span class="sxs-lookup"><span data-stu-id="c0057-885">The exception handler reports the exception and then sleeps for six seconds.</span></span> <span data-ttu-id="c0057-886">如示例输出所示，这种延迟使任务可以在完成<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-886">As the output from the example shows, that delay allows the task to complete in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="c0057-887">已取消 <paramref name="cancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-887">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-888">已释放该任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-888">The task has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="c0057-889">已取消任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-889">The task was canceled.</span>
          </span>
          <span data-ttu-id="c0057-890">
            <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-890">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="c0057-891">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-891">-or-</span>
          </span>
          <span data-ttu-id="c0057-892">执行任务期间引发了一个异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-892">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="c0057-893">
            <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含一个或多个异常的相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-893">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="c0057-894">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-894">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-895">等待 <see cref="T:System.Threading.Tasks.Task" /> 在指定的时间间隔内完成执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-895">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-896">如果在分配的时间内 <see langword="true" /> 完成执行，则为 <see cref="T:System.Threading.Tasks.Task" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-896">
              <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-897"><xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> 是一种同步方法，导致调用线程等待当前的任务实例，以完成为止以下项之一：</span><span class="sxs-lookup"><span data-stu-id="c0057-897"><xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="c0057-898">任务成功完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-898">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="c0057-899">任务本身被取消或引发异常。</span><span class="sxs-lookup"><span data-stu-id="c0057-899">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="c0057-900">在这种情况下，处理<xref:System.AggregateException>异常。</span><span class="sxs-lookup"><span data-stu-id="c0057-900">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="c0057-901"><xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType>属性包含有关异常或异常的详细信息。</span><span class="sxs-lookup"><span data-stu-id="c0057-901">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="c0057-902">通过定义的间隔`timeout`间隔。</span><span class="sxs-lookup"><span data-stu-id="c0057-902">The interval defined by `timeout` elapses.</span></span> <span data-ttu-id="c0057-903">在这种情况下，当前线程继续执行，并且该方法返回`false`。</span><span class="sxs-lookup"><span data-stu-id="c0057-903">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-904">下面的示例启动生成 5000000，介于 0 和 100 之间的随机整数，并计算其平均值的任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-904">The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="c0057-905">该示例使用<xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29>方法来等待应用程序在 150 毫秒内完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-905">The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> method to wait for the application to complete within 150 milliseconds.</span></span> <span data-ttu-id="c0057-906">如果应用程序正常完成，该任务将显示的总和和平均值的已生成随机数字。</span><span class="sxs-lookup"><span data-stu-id="c0057-906">If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</span></span> <span data-ttu-id="c0057-907">如果超时间隔已过去，此示例将显示一条消息，在终止前。</span><span class="sxs-lookup"><span data-stu-id="c0057-907">If the timeout interval has elapsed, the example displays a message before it terminates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait6.cs#6)]
 [!code-vb[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-908">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-908">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-909">
            <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-909">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="c0057-910">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-910">-or-</span>
          </span>
          <span data-ttu-id="c0057-911">
            <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-911">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="c0057-912">已取消任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-912">The task was canceled.</span>
          </span>
          <span data-ttu-id="c0057-913">
            <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-913">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="c0057-914">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-914">-or-</span>
          </span>
          <span data-ttu-id="c0057-915">执行任务期间引发了一个异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-915">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="c0057-916">
            <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含一个或多个异常的相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-916">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="c0057-917">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-917">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-918">等待任务完成期间要观察的取消标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-918">A cancellation token to observe while waiting for the task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-919">等待 <see cref="T:System.Threading.Tasks.Task" /> 完成执行过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-919">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
          <span data-ttu-id="c0057-920">如果在任务完成之前超时间隔结束或取消标记已取消，等待将终止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-920">The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-921">如果在分配的时间内 <see langword="true" /> 完成执行，则为 <see cref="T:System.Threading.Tasks.Task" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-921">
              <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-922"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> 是一种同步方法，导致调用线程等待当前的任务实例，以完成为止以下项之一：</span><span class="sxs-lookup"><span data-stu-id="c0057-922"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="c0057-923">任务成功完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-923">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="c0057-924">任务本身被取消或引发异常。</span><span class="sxs-lookup"><span data-stu-id="c0057-924">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="c0057-925">在这种情况下，处理<xref:System.AggregateException>异常。</span><span class="sxs-lookup"><span data-stu-id="c0057-925">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="c0057-926"><xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType>属性包含有关异常或异常的详细信息。</span><span class="sxs-lookup"><span data-stu-id="c0057-926">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="c0057-927">`cancellationToken`取消标记被取消。</span><span class="sxs-lookup"><span data-stu-id="c0057-927">The `cancellationToken` cancellation token is canceled.</span></span> <span data-ttu-id="c0057-928">在此情况下，调用<xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29>方法抛出异常<xref:System.OperationCanceledException>。</span><span class="sxs-lookup"><span data-stu-id="c0057-928">In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.</span></span>  
  
-   <span data-ttu-id="c0057-929">通过定义的间隔`millisecondsTimeout`间隔。</span><span class="sxs-lookup"><span data-stu-id="c0057-929">The interval defined by `millisecondsTimeout` elapses.</span></span> <span data-ttu-id="c0057-930">在这种情况下，当前线程继续执行，并且该方法返回`false`。</span><span class="sxs-lookup"><span data-stu-id="c0057-930">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0057-931">取消`cancellationToken`取消标记具有不会影响正在运行的任务，除非它还具有已通过的取消标记，并且准备好处理取消。</span><span class="sxs-lookup"><span data-stu-id="c0057-931">Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</span></span> <span data-ttu-id="c0057-932">传递`cancellationToken`对象对此方法只允许等待要取消基于某些条件下，在。</span><span class="sxs-lookup"><span data-stu-id="c0057-932">Passing the `cancellationToken` object to this method simply allows the wait to be canceled based on some condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-933">下面的示例调用<xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29>方法以提供一个超时值和取消令牌，可以结束等待的任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-933">The following example calls the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method to provide both a timeout value and a cancellation token that can end the wait for a task's completion.</span></span> <span data-ttu-id="c0057-934">新线程已启动并执行`CancelToken`方法，其中暂停，随后调用<xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>方法来取消取消标记。</span><span class="sxs-lookup"><span data-stu-id="c0057-934">A new thread is started and executes the `CancelToken` method, which pauses and then calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to cancel the cancellation tokens.</span></span> <span data-ttu-id="c0057-935">任务启动，然后为 5 秒延迟。</span><span class="sxs-lookup"><span data-stu-id="c0057-935">A task is then launched and delays for 5 seconds.</span></span> <span data-ttu-id="c0057-936"><xref:System.Threading.Tasks.Task.Wait%2A>方法然后调用来等待任务完成，并且提供了简要超时值和取消标记。</span><span class="sxs-lookup"><span data-stu-id="c0057-936">The <xref:System.Threading.Tasks.Task.Wait%2A> method is then called to wait for the task's completion and is provided both a brief timeout value and a cancellation token.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait4.vb#4)]  
  
 <span data-ttu-id="c0057-937">请注意，该示例的精确输出取决于是否在等待已取消的取消标记由于或因为超时间隔结束。</span><span class="sxs-lookup"><span data-stu-id="c0057-937">Note that the precise output from the example depends on whether the wait was canceled because of the cancellation token or because the timeout interval elapsed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="c0057-938">已取消 <paramref name="cancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-938">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-939">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-939">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-940">
            <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-940">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="c0057-941">已取消任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-941">The task was canceled.</span>
          </span>
          <span data-ttu-id="c0057-942">
            <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-942">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="c0057-943">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-943">-or-</span>
          </span>
          <span data-ttu-id="c0057-944">执行任务期间引发了一个异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-944">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="c0057-945">
            <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含一个或多个异常的相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-945">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-946">等待提供的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-946">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static void WaitAll (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitAll(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WaitAll (ParamArray tasks As Task())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitAll(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="c0057-947">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-947">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-948">等待提供的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-948">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c0057-949">下面的示例启动 10 的任务，其中每个状态对象作为传递索引。</span><span class="sxs-lookup"><span data-stu-id="c0057-949">The following example starts 10 tasks, each of which is passed an index as a state object.</span></span> <span data-ttu-id="c0057-950">使用索引从两个到五个任务引发异常。</span><span class="sxs-lookup"><span data-stu-id="c0057-950">Tasks with an index from two to five throw exceptions.</span></span> <span data-ttu-id="c0057-951">调用<xref:System.Threading.Tasks.Task.WaitAll%2A>方法包装中的所有异常<xref:System.AggregateException>对象，并将其传播到调用的线程。</span><span class="sxs-lookup"><span data-stu-id="c0057-951">The call to the <xref:System.Threading.Tasks.Task.WaitAll%2A> method wraps all exceptions in an <xref:System.AggregateException> object and propagates it to the calling thread.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/waitall.cs#02)]
 [!code-vb[System.Threading.Tasks.Task#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/waitall.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-952">
            <paramref name="tasks" /> 中的一个或多个 <see cref="T:System.Threading.Tasks.Task" /> 对象已释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-952">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-953">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-953">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-954">
            <paramref name="tasks" /> 参数包含一个 null 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-954">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="c0057-955">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-955">-or-</span>
          </span>
          <span data-ttu-id="c0057-956">
            <paramref name="tasks" /> 参数为空数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-956">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="c0057-957">至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-957">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="c0057-958">如果任务取消，则 <see cref="T:System.AggregateException" /> 异常在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中包含 <see cref="T:System.OperationCanceledException" /> 异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-958">If a task was canceled, the <see cref="T:System.AggregateException" /> exception contains an <see cref="T:System.OperationCanceledException" /> exception in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="c0057-959">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-959">-or-</span>
          </span>
          <span data-ttu-id="c0057-960">在至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例的执行过程中引发了异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-960">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (tasks As Task(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="c0057-961">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-961">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="c0057-962">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-962">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-963">等待所有提供的 <see cref="T:System.Threading.Tasks.Task" /> 在指定的毫秒数内完成执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-963">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-964">如果在分配的时间内所有 <see langword="true" /> 实例都已完成执行，则为 <see cref="T:System.Threading.Tasks.Task" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-964">
              <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-965">
            <paramref name="tasks" /> 中的一个或多个 <see cref="T:System.Threading.Tasks.Task" /> 对象已释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-965">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-966">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-966">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="c0057-967">至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-967">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="c0057-968">如果任务已取消，则 <see cref="T:System.AggregateException" /> 在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中包含 <see cref="T:System.OperationCanceledException" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-968">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="c0057-969">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-969">-or-</span>
          </span>
          <span data-ttu-id="c0057-970">在至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例的执行过程中引发了异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-970">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-971">
            <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-971">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-972">
            <paramref name="tasks" /> 参数包含一个 null 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-972">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="c0057-973">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-973">-or-</span>
          </span>
          <span data-ttu-id="c0057-974">
            <paramref name="tasks" /> 参数为空数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-974">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static void WaitAll (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitAll(class System.Threading.Tasks.Task[] tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="c0057-975">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-975">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-976">等待任务完成期间要观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-976">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-977">等待提供的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程（除非取消等待）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-977">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-978">`cancellationToken`自变量用于取消的等待操作。</span><span class="sxs-lookup"><span data-stu-id="c0057-978">The `cancellationToken` argument is used to cancel the wait operation.</span></span> <span data-ttu-id="c0057-979">任务的取消是不同的操作，并由发送信号<xref:System.AggregateException>如上所示。</span><span class="sxs-lookup"><span data-stu-id="c0057-979">Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> as noted above.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="c0057-980">已取消 <paramref name="cancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-980">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-981">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-981">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="c0057-982">至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-982">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="c0057-983">如果任务已取消，则 <see cref="T:System.AggregateException" /> 在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中包含 <see cref="T:System.OperationCanceledException" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-983">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="c0057-984">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-984">-or-</span>
          </span>
          <span data-ttu-id="c0057-985">在至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例的执行过程中引发了异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-985">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-986">
            <paramref name="tasks" /> 参数包含一个 null 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-986">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="c0057-987">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-987">-or-</span>
          </span>
          <span data-ttu-id="c0057-988">
            <paramref name="tasks" /> 参数为空数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-988">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-989">
            <paramref name="tasks" /> 中的一个或多个 <see cref="T:System.Threading.Tasks.Task" /> 对象已释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-989">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (tasks As Task(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="c0057-990">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-990">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="c0057-991">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-991">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-992">等待所有提供的可取消 <see cref="T:System.Threading.Tasks.Task" /> 对象在指定的时间间隔内完成执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-992">Waits for all of the provided cancellable <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-993">如果在分配的时间内所有 <see langword="true" /> 实例都已完成执行，则为 <see cref="T:System.Threading.Tasks.Task" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-993">
              <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-994">
            <paramref name="tasks" /> 中的一个或多个 <see cref="T:System.Threading.Tasks.Task" /> 对象已释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-994">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-995">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-995">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="c0057-996">至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-996">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="c0057-997">如果任务已取消，则 <see cref="T:System.AggregateException" /> 在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中包含 <see cref="T:System.OperationCanceledException" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-997">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="c0057-998">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-998">-or-</span>
          </span>
          <span data-ttu-id="c0057-999">在至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例的执行过程中引发了异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-999">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-1000">
            <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1000">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="c0057-1001">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1001">-or-</span>
          </span>
          <span data-ttu-id="c0057-1002">
            <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1002">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-1003">
            <paramref name="tasks" /> 参数包含一个 null 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1003">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="c0057-1004">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1004">-or-</span>
          </span>
          <span data-ttu-id="c0057-1005">
            <paramref name="tasks" /> 参数为空数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1005">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="c0057-1006">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1006">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="c0057-1007">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1007">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-1008">等待任务完成期间要观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1008">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-1009">等待提供的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象在指定的毫秒数内完成执行，或等到取消等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1009">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-1010">如果在分配的时间内所有 <see langword="true" /> 实例都已完成执行，则为 <see cref="T:System.Threading.Tasks.Task" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1010">
              <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-1011">`cancellationToken`自变量用于取消的等待操作。</span><span class="sxs-lookup"><span data-stu-id="c0057-1011">The `cancellationToken` argument is used to cancel the wait operation.</span></span> <span data-ttu-id="c0057-1012">任务的取消是不同的操作，并由发送信号<xref:System.AggregateException>如上所示。</span><span class="sxs-lookup"><span data-stu-id="c0057-1012">Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> noted above.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-1013">
            <paramref name="tasks" /> 中的一个或多个 <see cref="T:System.Threading.Tasks.Task" /> 对象已释放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1013">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-1014">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1014">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="c0057-1015">至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1015">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="c0057-1016">如果任务已取消，则 <see cref="T:System.AggregateException" /> 在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中包含 <see cref="T:System.OperationCanceledException" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1016">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="c0057-1017">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1017">-or-</span>
          </span>
          <span data-ttu-id="c0057-1018">在至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例的执行过程中引发了异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1018">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-1019">
            <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1019">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-1020">
            <paramref name="tasks" /> 参数包含一个 null 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1020">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="c0057-1021">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1021">-or-</span>
          </span>
          <span data-ttu-id="c0057-1022">
            <paramref name="tasks" /> 参数为空数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1022">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="c0057-1023">已取消 <paramref name="cancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1023">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-1024">等待提供的任一 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1024">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (ParamArray tasks As Task()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="c0057-1025">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1025">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-1026">等待提供的任一 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1026">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-1027">
            <paramref name="tasks" /> 数组中已完成的 <see cref="T:System.Threading.Tasks.Task" /> 对象的所有。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1027">The index of the completed <see cref="T:System.Threading.Tasks.Task" /> object in the <paramref name="tasks" /> array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c0057-1028">下面的示例将启动五个任务，其中每个休眠 50 毫秒的最小值或最多的 1,050 毫秒。</span><span class="sxs-lookup"><span data-stu-id="c0057-1028">The following example launches five tasks, each of which sleeps for a minimum of 50 milliseconds or a maximum of 1,050 milliseconds.</span></span> <span data-ttu-id="c0057-1029"><xref:System.Threading.Tasks.Task.WaitAny%2A>方法然后等待任何任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-1029">The <xref:System.Threading.Tasks.Task.WaitAny%2A> method then waits for any of the tasks to complete.</span></span> <span data-ttu-id="c0057-1030">此示例显示已在等待结束任务的任务 ID，以及所有的任务的当前状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-1030">The example displays the task ID of the task that ended the wait, as well as the current status of all the tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/cs/WaitAny1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/vb/WaitAny1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-1031">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1031">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-1032">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1032">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-1033">
            <paramref name="tasks" /> 参数包含一个 null 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1033">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (tasks As Task(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="c0057-1034">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1034">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="c0057-1035">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1035">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-1036">等待任何提供的 <see cref="T:System.Threading.Tasks.Task" /> 对象在指定的毫秒数内完成执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1036">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-1037">已完成的任务在 <paramref name="tasks" /> 数组参数中的索引，如果发生超时，则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1037">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-1038">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1038">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-1039">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1039">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-1040">
            <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1040">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-1041">
            <paramref name="tasks" /> 参数包含一个 null 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1041">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="c0057-1042">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1042">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-1043">等待任务完成期间要观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1043">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-1044">等待提供的任何 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程（除非取消等待）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1044">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-1045">已完成的任务在 <paramref name="tasks" /> 数组参数中的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1045">The index of the completed task in the <paramref name="tasks" /> array argument.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-1046">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1046">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-1047">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1047">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-1048">
            <paramref name="tasks" /> 参数包含一个 null 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1048">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="c0057-1049">已取消 <paramref name="cancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1049">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (tasks As Task(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="c0057-1050">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1050">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="c0057-1051">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1051">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-1052">等待任何提供的 <see cref="T:System.Threading.Tasks.Task" /> 对象在指定的时间间隔内完成执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1052">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-1053">已完成的任务在 <paramref name="tasks" /> 数组参数中的索引，如果发生超时，则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1053">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-1054">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1054">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-1055">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1055">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-1056">
            <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1056">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="c0057-1057">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1057">-or-</span>
          </span>
          <span data-ttu-id="c0057-1058">
            <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1058">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-1059">
            <paramref name="tasks" /> 参数包含一个 null 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1059">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="c0057-1060">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1060">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="c0057-1061">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1061">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c0057-1062">等待任务完成期间要观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1062">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-1063">等待提供的任何 <see cref="T:System.Threading.Tasks.Task" /> 对象在指定的毫秒数内完成执行，或等到取消标记取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1063">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-1064">已完成的任务在 <paramref name="tasks" /> 数组参数中的索引，如果发生超时，则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1064">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0057-1065">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1065">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-1066">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1066">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c0057-1067">
            <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1067">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-1068">
            <paramref name="tasks" /> 参数包含一个 null 元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1068">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="c0057-1069">已取消 <paramref name="cancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1069">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-1070">所有提供的任务已完成时，创建将完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1070">Creates a task that will complete when all of the supplied tasks have completed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WhenAll">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WhenAll (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WhenAll(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll (tasks As IEnumerable(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ WhenAll(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="c0057-1071">等待完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1071">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-1072">创建一个任务，该任务将在可枚举集合中的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象都完成时完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1072">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an enumerable collection have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-1073">表示所有提供的任务的完成情况的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1073">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-1074">重载<xref:System.Threading.Tasks.Task.WhenAll%2A>返回方法<xref:System.Threading.Tasks.Task>对象通常称为时您感兴趣或由一组任务引发的异常中的一组任务的状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-1074">The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0057-1075">调用<xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29>方法不会阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="c0057-1075">The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method does not block the calling thread.</span></span>  
  
 <span data-ttu-id="c0057-1076">如果处于错误状态的任何提供的任务完成后，返回的任务还将在完成<xref:System.Threading.Tasks.TaskStatus.Faulted>状态，其中延续的异常将包含的解包异常从每个提供的任务集的聚合。</span><span class="sxs-lookup"><span data-stu-id="c0057-1076">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state,  where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="c0057-1077">如果没有提供的任务出错，但至少一个已取消，则返回的任务将以结束<xref:System.Threading.Tasks.TaskStatus.Canceled>状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-1077">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="c0057-1078">如果没有任务错误状态，并且没有任务已取消，该结果任务将以结束<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-1078">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="c0057-1079">如果提供数组/可枚举不包含任何任务，则返回的任务将立即转换为<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状态，然后返回到调用方。</span><span class="sxs-lookup"><span data-stu-id="c0057-1079">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-1080">下面的示例创建一组数组中的 Url 进行 ping 操作的任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-1080">The following example creates a set of tasks that ping the URLs in an array.</span></span> <span data-ttu-id="c0057-1081">这些任务存储在`List<Task>`集合传递给<xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-1081">The tasks are stored in a `List<Task>` collection that is passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method.</span></span> <span data-ttu-id="c0057-1082">在调用后<xref:System.Threading.Tasks.Task.Wait%2A>方法可确保所有线程均已都完成，该示例检查<xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType>属性来确定是否有出现故障的任何任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-1082">After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property to determine whether any tasks have faulted.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-1083">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1083">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-1084">
            <paramref name="tasks" /> 收集包含 <see langword="null" /> 任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1084">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WhenAll (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WhenAll(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll (ParamArray tasks As Task()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ WhenAll(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="c0057-1085">等待完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1085">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-1086">创建一个任务，该任务将在数组中的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象都完成时完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1086">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an array have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-1087">表示所有提供的任务的完成情况的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1087">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-1088">重载<xref:System.Threading.Tasks.Task.WhenAll%2A>返回方法<xref:System.Threading.Tasks.Task>对象通常称为时您感兴趣或由一组任务引发的异常中的一组任务的状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-1088">The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0057-1089">调用<xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29>方法不会阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="c0057-1089">The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> method does not block the calling thread.</span></span>  
  
 <span data-ttu-id="c0057-1090">如果处于错误状态的任何提供的任务完成后，返回的任务还将在完成<xref:System.Threading.Tasks.TaskStatus.Faulted>状态，其中延续的异常将包含的解包异常从每个提供的任务集的聚合。</span><span class="sxs-lookup"><span data-stu-id="c0057-1090">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="c0057-1091">如果没有提供的任务出错，但至少一个已取消，则返回的任务将以结束<xref:System.Threading.Tasks.TaskStatus.Canceled>状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-1091">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="c0057-1092">如果没有任务错误状态，并且没有任务已取消，该结果任务将以结束<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-1092">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="c0057-1093">如果提供数组/可枚举不包含任何任务，则返回的任务将立即转换为<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状态，然后返回到调用方。</span><span class="sxs-lookup"><span data-stu-id="c0057-1093">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-1094">下面的示例创建一组数组中的 Url 进行 ping 操作的任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-1094">The following example creates a set of tasks that ping the URLs in an array.</span></span> <span data-ttu-id="c0057-1095">这些任务存储在`List<Task>`集合转换为数组并传递给<xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="c0057-1095">The tasks are stored in a `List<Task>` collection that is converted to an array and passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method.</span></span> <span data-ttu-id="c0057-1096">在调用后<xref:System.Threading.Tasks.Task.Wait%2A>方法可确保所有线程均已都完成，该示例检查<xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType>属性来确定是否有出现故障的任何任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-1096">After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property to determine whether any tasks have faulted.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-1097">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1097">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-1098">
            <paramref name="tasks" /> 数组包含 <see langword="null" /> 任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1098">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult[]&gt; WhenAll&lt;TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll(Of TResult) (tasks As IEnumerable(Of Task(Of TResult))) As Task(Of TResult())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;TResult&gt; ^&gt; ^ WhenAll(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-1099">已完成任务的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1099">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="c0057-1100">等待完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1100">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-1101">创建一个任务，该任务将在可枚举集合中的所有 <see cref="T:System.Threading.Tasks.Task`1" /> 对象都完成时完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1101">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an enumerable collection have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-1102">表示所有提供的任务的完成情况的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1102">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-1103">调用<xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29>方法不会阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="c0057-1103">The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> method does not block the calling thread.</span></span> <span data-ttu-id="c0057-1104">但是，对返回的调用<xref:System.Threading.Tasks.Task%601.Result%2A>属性不会阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="c0057-1104">However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.</span></span>  
  
 <span data-ttu-id="c0057-1105">如果处于错误状态的任何提供的任务完成后，返回的任务还将在完成<xref:System.Threading.Tasks.TaskStatus.Faulted>状态，其中延续的异常将包含的解包异常从每个提供的任务集的聚合。</span><span class="sxs-lookup"><span data-stu-id="c0057-1105">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="c0057-1106">如果没有提供的任务出错，但至少一个已取消，则返回的任务将以结束<xref:System.Threading.Tasks.TaskStatus.Canceled>状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-1106">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="c0057-1107">如果没有任务错误状态，并且没有任务已取消，该结果任务将以结束<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-1107">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  <span data-ttu-id="c0057-1108"><xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType>返回任务的属性将设置为在已提供包含所有相同顺序提供的任务的结果的数组 (例如如果输入任务包含的数组 t1、 t2、 t3，则输出任务<xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType>属性将返回`TResult[]`其中`arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`。</span><span class="sxs-lookup"><span data-stu-id="c0057-1108">The <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output task's <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span></span>  
  
 <span data-ttu-id="c0057-1109">如果`tasks`自变量包含任何任务，则返回的任务将立即转换为<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状态，然后返回到调用方。</span><span class="sxs-lookup"><span data-stu-id="c0057-1109">If the `tasks` argument contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span> <span data-ttu-id="c0057-1110">返回`TResult[]`将 0 个元素的数组。</span><span class="sxs-lookup"><span data-stu-id="c0057-1110">The returned `TResult[]` will be an array of 0 elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-1111">下面的示例创建十个任务，其中每个实例化的随机数生成器创建 1,000 个介于 1 和 1000 之间的随机数，并计算其平均值。</span><span class="sxs-lookup"><span data-stu-id="c0057-1111">The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</span></span> <span data-ttu-id="c0057-1112"><xref:System.Threading.Tasks.Task.Delay%28System.Int32%29>方法使用延迟的随机数生成器的实例化，以便不会创建具有相同的种子值。</span><span class="sxs-lookup"><span data-stu-id="c0057-1112">The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</span></span> <span data-ttu-id="c0057-1113">调用<xref:System.Threading.Tasks.Task.WhenAll%2A>方法然后返回<xref:System.Int64>数组，其中包含平均值计算通过每个任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-1113">The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task.</span></span> <span data-ttu-id="c0057-1114">这些然后用于计算的总体平均值。</span><span class="sxs-lookup"><span data-stu-id="c0057-1114">These are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall1.vb#1)]  
  
 <span data-ttu-id="c0057-1115">在这种情况下，十个单个任务存储在<xref:System.Collections.Generic.List%601>对象。</span><span class="sxs-lookup"><span data-stu-id="c0057-1115">In this case, the ten individual tasks are stored in a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="c0057-1116"><xref:System.Collections.Generic.List%601> 实现 <xref:System.Collections.Generic.IEnumerable%601> 接口。</span><span class="sxs-lookup"><span data-stu-id="c0057-1116"><xref:System.Collections.Generic.List%601> implements the <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-1117">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1117">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-1118">
            <paramref name="tasks" /> 收集包含 <see langword="null" /> 任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1118">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (params System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult[]&gt; WhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt;[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll(Of TResult) (ParamArray tasks As Task(Of TResult)()) As Task(Of TResult())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;TResult&gt; ^&gt; ^ WhenAll(... cli::array &lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TResult&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-1119">已完成任务的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1119">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="c0057-1120">等待完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1120">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-1121">创建一个任务，该任务将在数组中的所有 <see cref="T:System.Threading.Tasks.Task`1" /> 对象都完成时完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1121">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an array have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-1122">表示所有提供的任务的完成情况的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1122">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-1123">调用<xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29>方法不会阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="c0057-1123">The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> method does not block the calling thread.</span></span> <span data-ttu-id="c0057-1124">但是，对返回的调用<xref:System.Threading.Tasks.Task%601.Result%2A>属性不会阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="c0057-1124">However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.</span></span>  
  
 <span data-ttu-id="c0057-1125">如果处于错误状态的任何提供的任务完成后，返回的任务还将在完成<xref:System.Threading.Tasks.TaskStatus.Faulted>状态，其中延续的异常将包含的解包异常从每个提供的任务集的聚合。</span><span class="sxs-lookup"><span data-stu-id="c0057-1125">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="c0057-1126">如果没有提供的任务出错，但至少一个已取消，则返回的任务将以结束<xref:System.Threading.Tasks.TaskStatus.Canceled>状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-1126">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="c0057-1127">如果没有任务错误状态，并且没有任务已取消，该结果任务将以结束<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-1127">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  <span data-ttu-id="c0057-1128"><xref:System.Threading.Tasks.Task%601.Result%2A>返回任务将设置为在已提供包含所有相同顺序提供的任务的结果的数组 (例如如果输入任务包含的数组 t1、 t2、 t3，则输出任务<xref:System.Threading.Tasks.Task%601.Result%2A>将返回`TResult[]`其中`arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`。</span><span class="sxs-lookup"><span data-stu-id="c0057-1128">The <xref:System.Threading.Tasks.Task%601.Result%2A> of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output   task's <xref:System.Threading.Tasks.Task%601.Result%2A> will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span></span>  
  
 <span data-ttu-id="c0057-1129">如果提供数组/可枚举不包含任何任务，则返回的任务将立即转换为<xref:System.Threading.Tasks.TaskStatus.RanToCompletion>状态，然后返回到调用方。</span><span class="sxs-lookup"><span data-stu-id="c0057-1129">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  <span data-ttu-id="c0057-1130">返回`TResult[]`将 0 个元素的数组。</span><span class="sxs-lookup"><span data-stu-id="c0057-1130">The returned `TResult[]` will be an array of 0 elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0057-1131">下面的示例创建十个任务，其中每个实例化的随机数生成器创建 1,000 个介于 1 和 1000 之间的随机数，并计算其平均值。</span><span class="sxs-lookup"><span data-stu-id="c0057-1131">The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</span></span> <span data-ttu-id="c0057-1132">在这种情况下，十个单个任务存储在`Task<Int64>`数组。</span><span class="sxs-lookup"><span data-stu-id="c0057-1132">In this case, the ten individual tasks are stored in a `Task<Int64>` array.</span></span>  <span data-ttu-id="c0057-1133"><xref:System.Threading.Tasks.Task.Delay%28System.Int32%29>方法使用延迟的随机数生成器的实例化，以便不会创建具有相同的种子值。</span><span class="sxs-lookup"><span data-stu-id="c0057-1133">The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</span></span> <span data-ttu-id="c0057-1134">调用<xref:System.Threading.Tasks.Task.WhenAll%2A>方法然后返回<xref:System.Int64>数组，其中包含平均值计算通过每个任务。</span><span class="sxs-lookup"><span data-stu-id="c0057-1134">The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task.</span></span> <span data-ttu-id="c0057-1135">这些然后用于计算的总体平均值。</span><span class="sxs-lookup"><span data-stu-id="c0057-1135">These are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-1136">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1136">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-1137">
            <paramref name="tasks" /> 数组包含 <see langword="null" /> 任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1137">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c0057-1138">任何提供的任务已完成时，创建将完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1138">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WhenAny">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; WhenAny(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny (tasks As IEnumerable(Of Task)) As Task(Of Task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ WhenAny(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="c0057-1139">等待完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1139">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-1140">任何提供的任务已完成时，创建将完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1140">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-1141">表示提供的任务之一已完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1141">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="c0057-1142">返回任务的结果是完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1142">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-1143">返回的任务都完成时提供的任务的任意任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-1143">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="c0057-1144">返回的任务将始终以结束`RanToCompletion`状态设置为第一个任务以完成其结果。</span><span class="sxs-lookup"><span data-stu-id="c0057-1144">The returned task will always end in the `RanToCompletion` state  with its Result set to the first task to complete.</span></span>  <span data-ttu-id="c0057-1145">这是 true，即使在中的第一个任务完成结束`Canceled`或`Faulted`状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-1145">This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-1146">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1146">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-1147">
            <paramref name="tasks" /> 数组包含了 null 任务，或为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1147">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; WhenAny(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny (ParamArray tasks As Task()) As Task(Of Task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ WhenAny(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="c0057-1148">等待完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1148">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-1149">任何提供的任务已完成时，创建将完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1149">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-1150">表示提供的任务之一已完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1150">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="c0057-1151">返回任务的结果是完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1151">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-1152">返回的任务都完成时提供的任务的任意任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-1152">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="c0057-1153">返回的任务将始终以结束`RanToCompletion`状态，其`Result`设置为第一个任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-1153">The returned task will always end in the `RanToCompletion` state   with its `Result` set to the first task to complete.</span></span>  <span data-ttu-id="c0057-1154">这是 true，即使在中的第一个任务完成结束`Canceled`或`Faulted`状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-1154">This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-1155">
            <paramref name="tasks" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1155">The <paramref name="tasks" /> argument was null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-1156">
            <paramref name="tasks" /> 数组包含了 null 任务，或为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1156">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; WhenAny&lt;TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny(Of TResult) (tasks As IEnumerable(Of Task(Of TResult))) As Task(Of Task(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ WhenAny(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-1157">已完成任务的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1157">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="c0057-1158">等待完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1158">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-1159">任何提供的任务已完成时，创建将完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1159">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-1160">表示提供的任务之一已完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1160">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="c0057-1161">返回任务的结果是完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1161">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-1162">返回的任务都完成时提供的任务的任意任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-1162">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="c0057-1163">返回的任务将始终在结束 RanToCompletion 状态设置为第一个任务以完成其结果。</span><span class="sxs-lookup"><span data-stu-id="c0057-1163">The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</span></span> <span data-ttu-id="c0057-1164">即使处于已取消或出错状态结束第一个任务完成，也是如此。</span><span class="sxs-lookup"><span data-stu-id="c0057-1164">This is true even if the first task to complete ended in the Canceled or Faulted state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-1165">
            <paramref name="tasks" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1165">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-1166">
            <paramref name="tasks" /> 数组包含了 null 任务，或为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1166">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (params System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; WhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt;[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny(Of TResult) (ParamArray tasks As Task(Of TResult)()) As Task(Of Task(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ WhenAny(... cli::array &lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TResult&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="c0057-1167">已完成任务的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1167">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="c0057-1168">等待完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1168">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0057-1169">任何提供的任务已完成时，创建将完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1169">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-1170">表示提供的任务之一已完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1170">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="c0057-1171">返回任务的结果是完成的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1171">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-1172">返回的任务都完成时提供的任务的任意任务完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-1172">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="c0057-1173">返回的任务将始终在结束 RanToCompletion 状态设置为第一个任务以完成其结果。</span><span class="sxs-lookup"><span data-stu-id="c0057-1173">The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</span></span> <span data-ttu-id="c0057-1174">即使处于已取消或出错状态结束第一个任务完成，也是如此。</span><span class="sxs-lookup"><span data-stu-id="c0057-1174">This is true even if the first task to complete ended in the Canceled or Faulted state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0057-1175">
            <paramref name="tasks" /> 参数为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1175">The <paramref name="tasks" /> argument was null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0057-1176">
            <paramref name="tasks" /> 数组包含了 null 任务，或为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1176">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.YieldAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.YieldAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As YieldAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::CompilerServices::YieldAwaitable Yield();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.YieldAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c0057-1177">创建异步产生当前上下文的等待任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1177">Creates an awaitable task that asynchronously yields back to the current context when awaited.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0057-1178">等待时，上下文将异步转换回等待时的当前上下文。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1178">A context that, when awaited, will asynchronously transition back into the current context at the time of the await.</span>
          </span>
          <span data-ttu-id="c0057-1179">如果当前 <see cref="T:System.Threading.SynchronizationContext" /> 不为 null，则将其视为当前上下文。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1179">If the current <see cref="T:System.Threading.SynchronizationContext" /> is non-null, it is treated as the current context.</span>
          </span>
          <span data-ttu-id="c0057-1180">否则，与当前执行任务关联的任务计划程序将视为当前上下文。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0057-1180">Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0057-1181">你可以使用`await Task.Yield();`在异步方法以强制方法以异步方式完成。</span><span class="sxs-lookup"><span data-stu-id="c0057-1181">You can use `await Task.Yield();` in an asynchronous method to force the method to complete asynchronously.</span></span> <span data-ttu-id="c0057-1182">如果没有当前同步上下文 (<xref:System.Threading.SynchronizationContext>对象)，这会将发布回该上下文的方法的执行的其余部分。</span><span class="sxs-lookup"><span data-stu-id="c0057-1182">If there is a current synchronization context (<xref:System.Threading.SynchronizationContext> object), this will post the remainder of the method’s execution back to that context.</span></span> <span data-ttu-id="c0057-1183">但是，上下文将确定如何设置相对于其他工作可能处于挂起状态，此工作优先级。</span><span class="sxs-lookup"><span data-stu-id="c0057-1183">However, the context will decide how to prioritize this work relative to other work that may be pending.</span></span> <span data-ttu-id="c0057-1184">在大多数 UI 环境出现在 UI 线程上的同步上下文将设置发布到高于输入和呈现工作上下文的工作通常优先级。</span><span class="sxs-lookup"><span data-stu-id="c0057-1184">The synchronization context that is present on a UI thread in most UI environments will often prioritize work posted to the context higher than input and rendering work.</span></span> <span data-ttu-id="c0057-1185">因此，不要依赖于`await Task.Yield();`以使 UI 保持响应状态。</span><span class="sxs-lookup"><span data-stu-id="c0057-1185">For this reason, do not rely on `await Task.Yield();` to keep a UI responsive.</span></span>  <span data-ttu-id="c0057-1186">有关详细信息，请参阅文章[抽象启用有用 ContinueWith](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx)中使用.NET 博客进行并行编程。</span><span class="sxs-lookup"><span data-stu-id="c0057-1186">For more information, see the entry [Useful Abstractions Enabled with ContinueWith](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>