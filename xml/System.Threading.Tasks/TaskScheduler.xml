<Type Name="TaskScheduler" FullName="System.Threading.Tasks.TaskScheduler">
  <TypeSignature Language="C#" Value="public abstract class TaskScheduler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TaskScheduler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskScheduler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TaskScheduler" />
  <TypeSignature Language="C++ CLI" Value="public ref class TaskScheduler abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Id={Id}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.TaskScheduler/SystemThreadingTasks_TaskSchedulerDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="28a6b-101">表示一个处理将任务排队到线程中的低级工作的对象。</span><span class="sxs-lookup"><span data-stu-id="28a6b-101">Represents an object that handles the low-level work of queuing tasks onto threads.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28a6b-102">实例<xref:System.Threading.Tasks.TaskScheduler>类表示任务计划程序。</span><span class="sxs-lookup"><span data-stu-id="28a6b-102">An instance of the <xref:System.Threading.Tasks.TaskScheduler> class represents a task scheduler.</span></span> <span data-ttu-id="28a6b-103">任务计划程序确保最终执行任务作业。</span><span class="sxs-lookup"><span data-stu-id="28a6b-103">A task scheduler ensures that the work of a task is eventually executed.</span></span>  
  
 <span data-ttu-id="28a6b-104">默认的任务计划程序基于 .NET Framework 4 线程池，提供工作窃取实现负载平衡、线程注入/退出以实现最大吞吐量，并提供整体卓越性能。</span><span class="sxs-lookup"><span data-stu-id="28a6b-104">The default task scheduler is based on the .NET Framework 4 thread pool, which provides work-stealing for load-balancing, thread injection/retirement for maximum throughput, and overall good performance.</span></span> <span data-ttu-id="28a6b-105">它应足以满足大多数方案。</span><span class="sxs-lookup"><span data-stu-id="28a6b-105">It should be sufficient for most scenarios.</span></span>  
  
 <span data-ttu-id="28a6b-106"><xref:System.Threading.Tasks.TaskScheduler>类也可作为所有可自定义计划逻辑的扩展点。</span><span class="sxs-lookup"><span data-stu-id="28a6b-106">The <xref:System.Threading.Tasks.TaskScheduler> class also serves as the extension point for all customizable scheduling logic.</span></span>  <span data-ttu-id="28a6b-107">这包括机制，如 逼的执行，任务和如何计划的任务应公开给调试器。</span><span class="sxs-lookup"><span data-stu-id="28a6b-107">This includes mechanisms such as how to schedule a task for execution, and how scheduled tasks should be exposed to debuggers.</span></span> <span data-ttu-id="28a6b-108">如果需要特殊功能，你可以创建自定义计划程序和启用以执行特定任务或查询。</span><span class="sxs-lookup"><span data-stu-id="28a6b-108">If you require special functionality, you can create a custom scheduler and enable it for specific tasks or queries.</span></span>  
  
 <span data-ttu-id="28a6b-109">本主题内容：</span><span class="sxs-lookup"><span data-stu-id="28a6b-109">In this topic:</span></span>  
[<span data-ttu-id="28a6b-110">默认任务计划程序和线程池</span><span class="sxs-lookup"><span data-stu-id="28a6b-110">The default task scheduler and the thread pool</span></span>](#Default)  
 [<span data-ttu-id="28a6b-111">全局队列与本地队列</span><span class="sxs-lookup"><span data-stu-id="28a6b-111">The global queue vs. local queues</span></span>](#Queues)  
 [<span data-ttu-id="28a6b-112">工作窃取</span><span class="sxs-lookup"><span data-stu-id="28a6b-112">Work stealing</span></span>](#Stealing)  
 [<span data-ttu-id="28a6b-113">长时间运行的任务</span><span class="sxs-lookup"><span data-stu-id="28a6b-113">Long-running tasks</span></span>](#LongRunning)  
 [<span data-ttu-id="28a6b-114">任务内联</span><span class="sxs-lookup"><span data-stu-id="28a6b-114">Task inlining</span></span>](#Inlining)  
[<span data-ttu-id="28a6b-115">指定同步上下文</span><span class="sxs-lookup"><span data-stu-id="28a6b-115">Specifying a synchronization context</span></span>](#Sync)  
  
<a name="Default"></a>   
## <a name="the-default-task-scheduler-and-the-thread-pool"></a><span data-ttu-id="28a6b-116">默认任务计划程序和线程池</span><span class="sxs-lookup"><span data-stu-id="28a6b-116">The default task scheduler and the thread pool</span></span>  
 <span data-ttu-id="28a6b-117">任务并行库和 PLINQ 的默认计划程序使用.NET Framework 线程池，由表示<xref:System.Threading.ThreadPool>类进行排队并执行工作。</span><span class="sxs-lookup"><span data-stu-id="28a6b-117">The default scheduler for the Task Parallel Library and PLINQ uses the .NET Framework thread pool, which is represented by the <xref:System.Threading.ThreadPool> class, to queue and execute work.</span></span> <span data-ttu-id="28a6b-118">线程池使用由提供的信息<xref:System.Threading.Tasks.Task>类型有效支持并行任务和查询通常表示的细化并行 （生存期较短的工作单位）。</span><span class="sxs-lookup"><span data-stu-id="28a6b-118">The thread pool uses the information that is provided by the <xref:System.Threading.Tasks.Task> type to efficiently     support the fine-grained parallelism (short-lived units of work) that parallel tasks and queries often represent.</span></span>  
  
<a name="Queues"></a>   
### <a name="the-global-queue-vs-local-queues"></a><span data-ttu-id="28a6b-119">全局队列与本地队列</span><span class="sxs-lookup"><span data-stu-id="28a6b-119">The global queue vs. local queues</span></span>  
 <span data-ttu-id="28a6b-120">该线程池保持全局的 FIFO （先进先出） 工作队列中的每个应用程序域中的线程。</span><span class="sxs-lookup"><span data-stu-id="28a6b-120">The thread pool maintains a global FIFO (first-in, first-out) work queue for threads in each application domain.</span></span> <span data-ttu-id="28a6b-121">每当程序调用<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType>(或<xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A?displayProperty=nameWithType>) 方法，工作均放在此共享队列上并最终取消排队变得可用的下一个线程。</span><span class="sxs-lookup"><span data-stu-id="28a6b-121">Whenever a program calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType> (or <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A?displayProperty=nameWithType>) method, the work is put on this shared queue and eventually de-queued onto the next thread that becomes available.</span></span> <span data-ttu-id="28a6b-122">从.NET Framework 4 开始，此队列已经得到改进以使用类似于无锁算法<xref:System.Collections.Concurrent.ConcurrentQueue%601>类。</span><span class="sxs-lookup"><span data-stu-id="28a6b-122">Starting with the .NET Framework 4, this queue has been improved to use a lock-free algorithm that resembles the <xref:System.Collections.Concurrent.ConcurrentQueue%601> class.</span></span> <span data-ttu-id="28a6b-123">通过使用此无锁实现，线程池消耗较少的时间时它排队和离队工作项。</span><span class="sxs-lookup"><span data-stu-id="28a6b-123">By using this lock-free implementation, the thread pool spends less time when it queues and de-queues work items.</span></span> <span data-ttu-id="28a6b-124">此性能优势可供使用线程池的所有程序。</span><span class="sxs-lookup"><span data-stu-id="28a6b-124">This performance benefit is available to all programs that use the thread pool.</span></span>  
  
 <span data-ttu-id="28a6b-125">最高级任务（即不在其他任务的上下文中创建的任务）与任何其他工作项一样放在全局队列上。</span><span class="sxs-lookup"><span data-stu-id="28a6b-125">Top-level tasks, which are tasks that are not created in the context of another task, are put on the global queue just like any other work item.</span></span> <span data-ttu-id="28a6b-126">但是，嵌套任务或子任务（在其他任务的上下文中创建）的处理方式大不相同。</span><span class="sxs-lookup"><span data-stu-id="28a6b-126">However, nested or child tasks, which are created in the context of another task, are handled quite differently.</span></span> <span data-ttu-id="28a6b-127">子任务或嵌套任务放置在特定于执行父任务的线程的本地队列上。</span><span class="sxs-lookup"><span data-stu-id="28a6b-127">A child or nested task is put on a local queue that is specific to the thread on which the parent task is executing.</span></span> <span data-ttu-id="28a6b-128">父任务可能是最高级任务，也可能是其他任务的子任务。</span><span class="sxs-lookup"><span data-stu-id="28a6b-128">The parent task may be a top-level task or it also may be the child of another task.</span></span> <span data-ttu-id="28a6b-129">当此线程准备好执行更多工作时，首先查看本地队列。</span><span class="sxs-lookup"><span data-stu-id="28a6b-129">When this thread is ready for more work, it first looks in the local queue.</span></span> <span data-ttu-id="28a6b-130">如果工作项在此处等待，即可快速访问它们。</span><span class="sxs-lookup"><span data-stu-id="28a6b-130">If work items are waiting there, they can be accessed quickly.</span></span> <span data-ttu-id="28a6b-131">在上一次在先进先出顺序 (LIFO) 保留缓存区域并减少争用访问本地队列。</span><span class="sxs-lookup"><span data-stu-id="28a6b-131">The local queues are accessed in last-in, first-out order (LIFO) to preserve cache locality and reduce contention.</span></span> <span data-ttu-id="28a6b-132">有关子任务和嵌套的任务的详细信息，请参阅[附加和分离的子任务](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="28a6b-132">For more information about child tasks and nested tasks, see [Attached and Detached Child Tasks](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md).</span></span>  
  
 <span data-ttu-id="28a6b-133">使用本地队列不仅可减少全局队列上的压力，而且还可利用数据位置。</span><span class="sxs-lookup"><span data-stu-id="28a6b-133">The use of local queues not only reduces pressure on the global queue, but also takes advantage of data locality.</span></span> <span data-ttu-id="28a6b-134">工作项的本地队列经常引用以物理方式靠近另一个是在内存中的数据结构。</span><span class="sxs-lookup"><span data-stu-id="28a6b-134">Work items in the local queue frequently reference data structures that are physically near one another in memory.</span></span> <span data-ttu-id="28a6b-135">在这些情况下，数据后已在缓存中的第一个任务已运行并可以快速访问。</span><span class="sxs-lookup"><span data-stu-id="28a6b-135">In these cases, the data is already in the cache after the first task has run and can be accessed quickly.</span></span> <span data-ttu-id="28a6b-136">同时[并行 LINQ (PLINQ)](~/docs/standard/parallel-programming/parallel-linq-plinq.md)和<xref:System.Threading.Tasks.Parallel>类广泛使用嵌套任务和子任务，并通过使用本地工作队列实现显著的加速。</span><span class="sxs-lookup"><span data-stu-id="28a6b-136">Both [Parallel LINQ (PLINQ)](~/docs/standard/parallel-programming/parallel-linq-plinq.md) and the <xref:System.Threading.Tasks.Parallel> class use nested tasks and child tasks extensively, and achieve significant speedups by using the local work queues.</span></span>  
  
<a name="Stealing"></a>   
### <a name="work-stealing"></a><span data-ttu-id="28a6b-137">工作窃取</span><span class="sxs-lookup"><span data-stu-id="28a6b-137">Work stealing</span></span>  
 <span data-ttu-id="28a6b-138">从.NET Framework 4 开始，线程池还提供了工作窃取算法，帮助确保没有线程处于空闲其他仍在各自队列中工作时。</span><span class="sxs-lookup"><span data-stu-id="28a6b-138">Starting with the .NET Framework 4, the thread pool also features a work-stealing algorithm to help make sure that no threads are sitting idle while others still have work in their queues.</span></span> <span data-ttu-id="28a6b-139">当线程池线程准备好执更多工作时，首先查看其本地队列的开头，再查看全局队列，然后查看其他线程的本地队列。</span><span class="sxs-lookup"><span data-stu-id="28a6b-139">When a thread-pool thread is ready for more work, it first looks at the head of its local queue, then in the global queue, and then in the local queues of other threads.</span></span> <span data-ttu-id="28a6b-140">如果在其他线程的本地队列中找到工作项，它会先应用试探法以确保可有效运行工作。</span><span class="sxs-lookup"><span data-stu-id="28a6b-140">If it finds a work item in the local queue of another thread, it first applies heuristics to make sure that it can run the work efficiently.</span></span> <span data-ttu-id="28a6b-141">如果它知道如何操作，则取消排队工作项 （按 FIFO 顺序） 从结尾。</span><span class="sxs-lookup"><span data-stu-id="28a6b-141">If it can, it de-queues the work item from the tail (in FIFO order).</span></span> <span data-ttu-id="28a6b-142">这样可以减少每个本地队列上的争用并保留数据位置。</span><span class="sxs-lookup"><span data-stu-id="28a6b-142">This reduces contention on each local queue and preserves data locality.</span></span> <span data-ttu-id="28a6b-143">此体系结构可帮助线程池负载平衡比以前版本更有效地工作。</span><span class="sxs-lookup"><span data-stu-id="28a6b-143">This architecture helps the  thread pool load-balance work more efficiently than past versions did.</span></span>  
  
<a name="LongRunning"></a>   
### <a name="long-running-tasks"></a><span data-ttu-id="28a6b-144">长时间运行的任务</span><span class="sxs-lookup"><span data-stu-id="28a6b-144">Long-running tasks</span></span>  
 <span data-ttu-id="28a6b-145">可能想要显式防止将任务放到本地队列上。</span><span class="sxs-lookup"><span data-stu-id="28a6b-145">You may want to explicitly prevent a task from being put on a local queue.</span></span> <span data-ttu-id="28a6b-146">例如，你可能知道特定工作项将运行相对长的时间并可能阻塞本地队列中的所有其他工作项。</span><span class="sxs-lookup"><span data-stu-id="28a6b-146">For example, you may know that a particular work item will run for a relatively long time and is likely to block all other work items on the local queue.</span></span> <span data-ttu-id="28a6b-147">在这种情况下，可指定 <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=nameWithType> 选项，它提示附加线程执行任务时可能需要计划程序，以使此任务不阻塞本地队列中其他线程或工作项的向前推动。</span><span class="sxs-lookup"><span data-stu-id="28a6b-147">In this case, you can specify the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=nameWithType> option, which provides a hint to the scheduler that an additional thread might be required for the task so that it does not block the forward progress of other threads or work items on the local queue.</span></span> <span data-ttu-id="28a6b-148">通过使用此选项可以避免线程池完全，包括全局和本地队列。</span><span class="sxs-lookup"><span data-stu-id="28a6b-148">By using this option you avoid the thread pool completely, including the global and local queues.</span></span>  
  
<a name="Inlining"></a>   
### <a name="task-inlining"></a><span data-ttu-id="28a6b-149">任务内联</span><span class="sxs-lookup"><span data-stu-id="28a6b-149">Task inlining</span></span>  
 <span data-ttu-id="28a6b-150">在某些情况下当<xref:System.Threading.Tasks.Task>处于等待状态，可能会在同步执行它正在执行等待操作的线程上。</span><span class="sxs-lookup"><span data-stu-id="28a6b-150">In some cases when a <xref:System.Threading.Tasks.Task> is waited on, it may be executed synchronously on the thread that is performing the wait operation.</span></span> <span data-ttu-id="28a6b-151">这可通过阻止其他线程的需求，并改为使用的现有线程，否则本会被阻塞提高性能。</span><span class="sxs-lookup"><span data-stu-id="28a6b-151">This enhances performance by preventing the need for an additional thread and instead using the existing thread, which would have blocked otherwise.</span></span> <span data-ttu-id="28a6b-152">若要防止造成的错误，才出现任务内联在相关线程的本地队列中找到等待目标时。</span><span class="sxs-lookup"><span data-stu-id="28a6b-152">To prevent errors due to re-entrancy, task inlining only occurs when the wait target is found in the relevant thread's local queue.</span></span>  
  
<a name="Sync"></a>   
## <a name="specifying-a-synchronization-context"></a><span data-ttu-id="28a6b-153">指定同步上下文</span><span class="sxs-lookup"><span data-stu-id="28a6b-153">Specifying a synchronization context</span></span>  
 <span data-ttu-id="28a6b-154">可使用 <xref:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext%2A?displayProperty=nameWithType> 方法指定任务应计划在特定线程上运行。</span><span class="sxs-lookup"><span data-stu-id="28a6b-154">You can use the <xref:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext%2A?displayProperty=nameWithType> method to specify that a task should be scheduled to run on a particular thread.</span></span> <span data-ttu-id="28a6b-155">在 Windows 窗体和 Windows Presentation Foundation 等框架中此操作非常有用，在此类框架中对用户界面对象的访问限制为只可访问在创建 UI 对象的同一线程上运行的代码。</span><span class="sxs-lookup"><span data-stu-id="28a6b-155">This is useful in frameworks such as Windows Forms and Windows Presentation Foundation where access to user interface objects is often restricted to code that is running on the same thread on which the UI object was created.</span></span>  
  
 <span data-ttu-id="28a6b-156">下面的示例使用<xref:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext%2A?displayProperty=nameWithType>用于计划任务在创建用户界面 (UI) 控件所在的同一线程上的 Windows Presentation Foundation (WPF) 应用中的方法。</span><span class="sxs-lookup"><span data-stu-id="28a6b-156">The following example uses the <xref:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext%2A?displayProperty=nameWithType> method in a Windows Presentation Foundation (WPF) app to schedule a task on the same thread that the user interface (UI) control was created on.</span></span>   <span data-ttu-id="28a6b-157">该示例创建马赛克从指定的目录中随机选择的映像。</span><span class="sxs-lookup"><span data-stu-id="28a6b-157">The example creates a mosaic of images that are randomly selected from a specified directory.</span></span> <span data-ttu-id="28a6b-158">WPF 对象用于加载和调整图像的大小。</span><span class="sxs-lookup"><span data-stu-id="28a6b-158">The WPF objects are used to load and resize the images.</span></span> <span data-ttu-id="28a6b-159">原始像素然后传递给使用的任务<xref:System.Threading.Tasks.Parallel.For%2A>循环像素数据写入一个大型的单字节数组。</span><span class="sxs-lookup"><span data-stu-id="28a6b-159">The raw pixels are then passed to a task that uses a <xref:System.Threading.Tasks.Parallel.For%2A> loop to write the pixel data into a large single-byte array.</span></span> <span data-ttu-id="28a6b-160">因为没有两个磁贴占用相同的数组元素，不需要进行同步。</span><span class="sxs-lookup"><span data-stu-id="28a6b-160">No synchronization is required because no two tiles occupy the same array elements.</span></span> <span data-ttu-id="28a6b-161">因为它们的位置计算独立于任何其他磁贴，也可以按任意顺序写入磁贴。</span><span class="sxs-lookup"><span data-stu-id="28a6b-161">The tiles can also be written in any order because their position is calculated independently of any other tile.</span></span> <span data-ttu-id="28a6b-162">大型数组然后传递给其中像素数据加载到图像控件在 UI 线程运行的任务。</span><span class="sxs-lookup"><span data-stu-id="28a6b-162">The large array is then passed to a task that runs on the UI thread, where the pixel data is loaded into an Image control.</span></span>  
  
 <span data-ttu-id="28a6b-163">上面的示例将出 UI 线程的数据移动，对其进行修改通过使用并行循环和<xref:System.Threading.Tasks.Task>对象，然后将其传递回 UI 线程运行的任务。</span><span class="sxs-lookup"><span data-stu-id="28a6b-163">The example moves data off the UI thread, modifies it by using parallel loops and <xref:System.Threading.Tasks.Task> objects, and then passes it back to a task that runs on the UI thread.</span></span> <span data-ttu-id="28a6b-164">当您必须使用任务并行库执行 WPF API 中，不支持或不足够快的操作时，此方法非常有用。</span><span class="sxs-lookup"><span data-stu-id="28a6b-164">This approach is useful when you have to use the Task Parallel Library to perform operations that either are not supported by the WPF API, or are not sufficiently fast.</span></span> <span data-ttu-id="28a6b-165">在 WPF 中创建映像马赛克另一种方法是使用<xref:System.Windows.Controls.WrapPanel?displayProperty=nameWithType>控件并将映像添加到它。</span><span class="sxs-lookup"><span data-stu-id="28a6b-165">Another way to create an image mosaic in WPF is to use a <xref:System.Windows.Controls.WrapPanel?displayProperty=nameWithType> control and add images to it.</span></span> <span data-ttu-id="28a6b-166"><xref:System.Windows.Controls.WrapPanel>处理的工作的定位磁贴。</span><span class="sxs-lookup"><span data-stu-id="28a6b-166">The <xref:System.Windows.Controls.WrapPanel> handles the work of positioning the tiles.</span></span> <span data-ttu-id="28a6b-167">但是，仅可以在 UI 线程上执行此工作。</span><span class="sxs-lookup"><span data-stu-id="28a6b-167">However, this work can only be performed on the UI thread.</span></span>  
  
 [!code-csharp[TPL_SyncContext#01](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_synccontext/cs/mainwindow.xaml.cs#01)]
 [!code-vb[TPL_SyncContext#01](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_synccontext/vb/MainWindow.xaml.vb#01)]  
  
 <span data-ttu-id="28a6b-168">若要创建此示例，在 Visual Studio 中创建一个 WPF 应用程序项目，并将其分配一个你选择的名称。</span><span class="sxs-lookup"><span data-stu-id="28a6b-168">To create the example, create a WPF application project in Visual Studio and assign it a name of your choice.</span></span> <span data-ttu-id="28a6b-169">然后执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="28a6b-169">Then do the following:</span></span>  
  
1.  <span data-ttu-id="28a6b-170">在设计视图中，将拖动<xref:System.Windows.Controls.Image>控件从**工具箱**到设计图面。</span><span class="sxs-lookup"><span data-stu-id="28a6b-170">In design view, drag an <xref:System.Windows.Controls.Image> control from the **Toolbox** to the design surface.</span></span> <span data-ttu-id="28a6b-171">在 XAML 视图中，指定为"Left。"的水平对齐方式</span><span class="sxs-lookup"><span data-stu-id="28a6b-171">In XAML view, specify the horizontal alignment as "Left."</span></span> <span data-ttu-id="28a6b-172">因为在运行时动态调整控件大小并不重要。</span><span class="sxs-lookup"><span data-stu-id="28a6b-172">The size does not matter because the control is be dynamically resized at run time.</span></span> <span data-ttu-id="28a6b-173">接受默认名称，"映像"。</span><span class="sxs-lookup"><span data-stu-id="28a6b-173">Accept the default name, "image".</span></span>  
  
2.  <span data-ttu-id="28a6b-174">拖动<xref:System.Windows.Controls.Button>控件从**工具箱**到应用程序窗口的左下角。</span><span class="sxs-lookup"><span data-stu-id="28a6b-174">Drag a <xref:System.Windows.Controls.Button> control from the **Toolbox** to the lower left part of the application window.</span></span> <span data-ttu-id="28a6b-175">双击按钮以添加<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="28a6b-175">Double-click the button to add a <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler.</span></span> <span data-ttu-id="28a6b-176">在 XAML 视图中，指定<xref:System.Windows.Controls.ContentControl.Content%2A>"使马赛克"以及指定"Left"作为其水平对齐方式，该按钮的属性。</span><span class="sxs-lookup"><span data-stu-id="28a6b-176">In XAML view, specify the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the button as "Make a Mosaic" and specify its horizontal alignment as "Left".</span></span> <span data-ttu-id="28a6b-177">接受默认名称，"button"。</span><span class="sxs-lookup"><span data-stu-id="28a6b-177">Accept the default name, "button".</span></span>  
  
3.  <span data-ttu-id="28a6b-178">将 MainWindow.xaml.cs 或 MainWindow.xaml.vb 文件的全部内容替换此示例中的代码。</span><span class="sxs-lookup"><span data-stu-id="28a6b-178">Replace the entire contents of the MainWindow.xaml.cs or MainWindow.xaml.vb file with the code from this example.</span></span> <span data-ttu-id="28a6b-179">请确保工作区的名称匹配项目名称。</span><span class="sxs-lookup"><span data-stu-id="28a6b-179">Make sure that the name of the workspace matches the project name.</span></span>  
  
4.  <span data-ttu-id="28a6b-180">该示例从名为 C:\Users\Public\Pictures\Sample 图片的目录中读取 JPEG 图像\\。</span><span class="sxs-lookup"><span data-stu-id="28a6b-180">The example reads JPEG images from a directory named C:\Users\Public\Pictures\Sample Pictures\\.</span></span> <span data-ttu-id="28a6b-181">请创建目录和某些图像置于它，或者更改要引用包含映像的一些其他目录的路径。</span><span class="sxs-lookup"><span data-stu-id="28a6b-181">Either create the directory and place some images in it, or change the path to refer to some other directory that contains images.</span></span>  
  
 <span data-ttu-id="28a6b-182">此示例具有一些限制。</span><span class="sxs-lookup"><span data-stu-id="28a6b-182">This example has some limitations.</span></span> <span data-ttu-id="28a6b-183">例如，支持仅 32-每像素位数映像;其他格式中的映像已损坏的<xref:System.Windows.Media.Imaging.BitmapImage>大小调整操作过程中的对象。</span><span class="sxs-lookup"><span data-stu-id="28a6b-183">For example, only 32-bits-per-pixel images are supported; images in other formats are corrupted by the <xref:System.Windows.Media.Imaging.BitmapImage> object during the resizing operation.</span></span> <span data-ttu-id="28a6b-184">此外，源映像都必须大于磁贴大小。</span><span class="sxs-lookup"><span data-stu-id="28a6b-184">Also, the source images must all be larger than the tile size.</span></span> <span data-ttu-id="28a6b-185">在进一步的练习，你可以添加功能以处理多个像素格式和文件大小。</span><span class="sxs-lookup"><span data-stu-id="28a6b-185">As a further exercise, you can add functionality to handle multiple pixel formats and file sizes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="28a6b-186">下面的示例摘自[使用.NET Framework 4 进行并行编程示例](http://go.microsoft.com/fwlink/?LinkID=165717)MSDN 代码库网站上。</span><span class="sxs-lookup"><span data-stu-id="28a6b-186">The following example is taken from the [Samples for Parallel Programming with the .NET Framework 4](http://go.microsoft.com/fwlink/?LinkID=165717) on the MSDN Code Gallery Web site.</span></span>  <span data-ttu-id="28a6b-187">它将创建的自定义任务计划程序限制的应用使用的线程数。</span><span class="sxs-lookup"><span data-stu-id="28a6b-187">It creates a custom task scheduler that limits the number of threads used by the app.</span></span> <span data-ttu-id="28a6b-188">然后，将启动两个任务组，并显示有关任务和在其执行任务的线程的信息。</span><span class="sxs-lookup"><span data-stu-id="28a6b-188">It then launches two sets of tasks and displays information about the task and the thread on which the task is executing.</span></span>  
  
 [!code-csharp[TPL_Schedulers#02](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_schedulers/cs/limitex1.cs#02)]
 [!code-vb[TPL_Schedulers#02](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_schedulers/vb/module2.vb#02)]  
  
 <span data-ttu-id="28a6b-189">此外，多个示例任务计划程序中有代码库：[使用.NET Framework 4 进行并行编程示例](http://go.microsoft.com/fwlink/?LinkID=165717)。</span><span class="sxs-lookup"><span data-stu-id="28a6b-189">In addition, several sample task schedulers are available on Code Gallery: [Samples for Parallel Programming with the .NET Framework 4](http://go.microsoft.com/fwlink/?LinkID=165717).</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="28a6b-190">抽象的所有成员<see cref="T:System.Threading.Tasks.TaskScheduler" />类型是线程安全的可从多个线程同时使用。</span><span class="sxs-lookup"><span data-stu-id="28a6b-190">All members of the abstract <see cref="T:System.Threading.Tasks.TaskScheduler" /> type are thread-safe and may be used from multiple threads concurrently.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TaskScheduler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskScheduler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TaskScheduler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="28a6b-191">初始化 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span><span class="sxs-lookup"><span data-stu-id="28a6b-191">Initializes the <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.TaskScheduler Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.TaskScheduler Current" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskScheduler.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Current As TaskScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::TaskScheduler ^ Current { System::Threading::Tasks::TaskScheduler ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="28a6b-192">获取与当前正在执行的任务关联的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span><span class="sxs-lookup"><span data-stu-id="28a6b-192">Gets the <see cref="T:System.Threading.Tasks.TaskScheduler" /> associated with the currently executing task.</span></span></summary>
        <value><span data-ttu-id="28a6b-193">返回与当前正在执行的任务关联的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span><span class="sxs-lookup"><span data-stu-id="28a6b-193">Returns the <see cref="T:System.Threading.Tasks.TaskScheduler" /> associated with the currently executing task.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28a6b-194">当不从任务中调用时<xref:System.Threading.Tasks.TaskScheduler.Current%2A>将返回<xref:System.Threading.Tasks.TaskScheduler.Default%2A>计划程序。</span><span class="sxs-lookup"><span data-stu-id="28a6b-194">When not called from within a task, <xref:System.Threading.Tasks.TaskScheduler.Current%2A> will return the <xref:System.Threading.Tasks.TaskScheduler.Default%2A> scheduler.</span></span>  
  
 <span data-ttu-id="28a6b-195">有关详情，请参阅<xref:System.Threading.Tasks.TaskScheduler>。</span><span class="sxs-lookup"><span data-stu-id="28a6b-195">For more information, see <xref:System.Threading.Tasks.TaskScheduler>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.TaskScheduler Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.TaskScheduler Default" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskScheduler.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As TaskScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::TaskScheduler ^ Default { System::Threading::Tasks::TaskScheduler ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="28a6b-196">获取由 .NET Framework 提供的默认 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="28a6b-196">Gets the default <see cref="T:System.Threading.Tasks.TaskScheduler" /> instance that is provided by the .NET Framework.</span></span></summary>
        <value><span data-ttu-id="28a6b-197">返回默认的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="28a6b-197">Returns the default <see cref="T:System.Threading.Tasks.TaskScheduler" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28a6b-198">有关详细信息，请参阅[任务计划程序](http://msdn.microsoft.com/library/638f8ea5-21db-47a2-a934-86e1e961bf65)。</span><span class="sxs-lookup"><span data-stu-id="28a6b-198">For more information, see [Task Schedulers](http://msdn.microsoft.com/library/638f8ea5-21db-47a2-a934-86e1e961bf65).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromCurrentSynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.TaskScheduler FromCurrentSynchronizationContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.TaskScheduler FromCurrentSynchronizationContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromCurrentSynchronizationContext () As TaskScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::TaskScheduler ^ FromCurrentSynchronizationContext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="28a6b-199">创建与当前 <see cref="T:System.Threading.SynchronizationContext" /> 关联的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span><span class="sxs-lookup"><span data-stu-id="28a6b-199">Creates a <see cref="T:System.Threading.Tasks.TaskScheduler" /> associated with the current <see cref="T:System.Threading.SynchronizationContext" />.</span></span></summary>
        <returns><span data-ttu-id="28a6b-200">与当前 <see cref="T:System.Threading.SynchronizationContext" /> 关联的 <see cref="T:System.Threading.Tasks.TaskScheduler" />，由 <see cref="P:System.Threading.SynchronizationContext.Current" /> 确定。</span><span class="sxs-lookup"><span data-stu-id="28a6b-200">A <see cref="T:System.Threading.Tasks.TaskScheduler" /> associated with the current <see cref="T:System.Threading.SynchronizationContext" />, as determined by <see cref="P:System.Threading.SynchronizationContext.Current" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28a6b-201">所有<xref:System.Threading.Tasks.Task>实例排入返回计划程序将执行通过调用<xref:System.Threading.SynchronizationContext.Post%2A>该上下文上的方法。</span><span class="sxs-lookup"><span data-stu-id="28a6b-201">All <xref:System.Threading.Tasks.Task> instances queued to the returned scheduler will be executed through a call to the <xref:System.Threading.SynchronizationContext.Post%2A> method on that context.</span></span>  
  
 <span data-ttu-id="28a6b-202">有关详细信息，请参阅[任务计划程序](http://msdn.microsoft.com/library/638f8ea5-21db-47a2-a934-86e1e961bf65)。</span><span class="sxs-lookup"><span data-stu-id="28a6b-202">For more information, see [Task Schedulers](http://msdn.microsoft.com/library/638f8ea5-21db-47a2-a934-86e1e961bf65).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="28a6b-203">当前的 SynchronizationContext 不能用作 TaskScheduler。</span><span class="sxs-lookup"><span data-stu-id="28a6b-203">The current SynchronizationContext may not be used as a TaskScheduler.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetScheduledTasks">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; GetScheduledTasks ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; GetScheduledTasks() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskScheduler.GetScheduledTasks" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetScheduledTasks () As IEnumerable(Of Task)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ GetScheduledTasks();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="28a6b-204">仅对于调试器支持，生成当前排队到计划程序中等待执行的 <see cref="T:System.Threading.Tasks.Task" /> 实例的枚举。</span><span class="sxs-lookup"><span data-stu-id="28a6b-204">For debugger support only, generates an enumerable of <see cref="T:System.Threading.Tasks.Task" /> instances currently queued to the scheduler waiting to be executed.</span></span></summary>
        <returns><span data-ttu-id="28a6b-205">一个允许调试器遍历当前排队到此计划程序中的任务的枚举。</span><span class="sxs-lookup"><span data-stu-id="28a6b-205">An enumerable that allows a debugger to traverse the tasks currently queued to this scheduler.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28a6b-206">从派生的类<xref:System.Threading.Tasks.TaskScheduler>实现此方法，以便支持与调试器集成。</span><span class="sxs-lookup"><span data-stu-id="28a6b-206">A class derived from <xref:System.Threading.Tasks.TaskScheduler> implements this method in order to support integration with debuggers.</span></span> <span data-ttu-id="28a6b-207">当调试器请求的数据访问权限，则仅将由.NET Framework 调用此方法。</span><span class="sxs-lookup"><span data-stu-id="28a6b-207">This method will only be invoked by the .NET Framework when the debugger requests access to the data.</span></span> <span data-ttu-id="28a6b-208">将按调试实用程序，以访问的任务进行遍历的可枚举项返回当前排队到此计划程序，启用调试器提供的表示形式的用户界面中的此信息。</span><span class="sxs-lookup"><span data-stu-id="28a6b-208">The enumerable returned will be traversed by debugging utilities to access the tasks currently queued to this scheduler, enabling the debugger to provide a representation of this information in the user interface.</span></span>  
  
 <span data-ttu-id="28a6b-209">请务必注意，当调用此方法时，所有其他进程中的线程将被冻结。</span><span class="sxs-lookup"><span data-stu-id="28a6b-209">It is important to note that, when this method is called, all other threads in the process will be frozen.</span></span> <span data-ttu-id="28a6b-210">因此，务必避免与其他线程的同步可能会导致阻塞。</span><span class="sxs-lookup"><span data-stu-id="28a6b-210">Therefore, it's important to avoid synchronization with other threads that may lead to blocking.</span></span> <span data-ttu-id="28a6b-211">如果同步是必需的并且无法获取此方法中的锁，然后应引发异常，以便调试器未挂起。</span><span class="sxs-lookup"><span data-stu-id="28a6b-211">If synchronization is necessary, and you are unable to acquire the lock in this method, then you should throw an exception so that the debugger does not hang.</span></span> <span data-ttu-id="28a6b-212">下面的示例演示 C# 中的一种可行方法：</span><span class="sxs-lookup"><span data-stu-id="28a6b-212">The following example shows one possible approach in C#:</span></span>  
  
```  
protected override IEnumerable<Task> GetScheduledTasks()  
{  
    bool lockTaken = false;  
    try  
    {  
        Monitor.TryEnter(_syncObj, ref lockTaken);  
        if (lockTaken)  
        {  
            return _tasks.ToArray();  
        }  
        else throw new NotSupportedException();  
    }  
    finally  
    {  
    if (lockTaken) Monitor.Exit(_syncObj);  
    }}  
```  
  
 <span data-ttu-id="28a6b-213">此外，此方法，并返回的可枚举不能修改任何全局可见状态。</span><span class="sxs-lookup"><span data-stu-id="28a6b-213">Additionally, this method and the enumerable returned must not modify any globally visible state.</span></span>  
  
 <span data-ttu-id="28a6b-214">返回可枚举应永远不会为 null。</span><span class="sxs-lookup"><span data-stu-id="28a6b-214">The returned enumerable should never be null.</span></span> <span data-ttu-id="28a6b-215">如果当前没有任何排队的任务，应改为返回可枚举为空。</span><span class="sxs-lookup"><span data-stu-id="28a6b-215">If there are currently no queued tasks, an empty enumerable should be returned instead.</span></span>  
  
 <span data-ttu-id="28a6b-216">开发人员要实现自定义调试器不应直接调用此方法，但应使用内部包装方法`GetScheduledTasksForDebugger`相反： `internal Task[] GetScheduledTasksForDebugger()`。</span><span class="sxs-lookup"><span data-stu-id="28a6b-216">Developers who are implementing custom debuggers shouldn't call this method directly, but should use the internal wrapper method `GetScheduledTasksForDebugger` instead: `internal Task[] GetScheduledTasksForDebugger()`.</span></span> <span data-ttu-id="28a6b-217">此包装方法返回任务而不是一个可枚举对象的数组。</span><span class="sxs-lookup"><span data-stu-id="28a6b-217">This wrapper method returns an array of tasks instead of an enumerable.</span></span> <span data-ttu-id="28a6b-218">若要检索的活动计划程序列表，请使用内部方法`internal static TaskScheduler[] GetTaskSchedulersForDebugger()`。</span><span class="sxs-lookup"><span data-stu-id="28a6b-218">To retrieve a list of active schedulers, use the internal method `internal static TaskScheduler[] GetTaskSchedulersForDebugger()`.</span></span> <span data-ttu-id="28a6b-219">此静态方法返回的所有活动数组<xref:System.Threading.Tasks.TaskScheduler>实例。</span><span class="sxs-lookup"><span data-stu-id="28a6b-219">This static method returns an array of all active <xref:System.Threading.Tasks.TaskScheduler> instances.</span></span> <span data-ttu-id="28a6b-220">然后，可以使用`GetScheduledTasksForDebugger`上每个计划程序实例来检索其计划任务的列表。</span><span class="sxs-lookup"><span data-stu-id="28a6b-220">You can then use `GetScheduledTasksForDebugger` on each scheduler instance to retrieve its list of scheduled tasks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="28a6b-221">此计划程序无法在此时生成排队任务的列表。</span><span class="sxs-lookup"><span data-stu-id="28a6b-221">This scheduler is unable to generate a list of queued tasks at this time.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskScheduler.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="28a6b-222">获取此 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的唯一 ID。</span><span class="sxs-lookup"><span data-stu-id="28a6b-222">Gets the unique ID for this <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span></span></summary>
        <value><span data-ttu-id="28a6b-223">返回此 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的唯一 ID。</span><span class="sxs-lookup"><span data-stu-id="28a6b-223">Returns the unique ID for this <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28a6b-224">有关详细信息，请参阅[任务计划程序](http://msdn.microsoft.com/library/638f8ea5-21db-47a2-a934-86e1e961bf65)。</span><span class="sxs-lookup"><span data-stu-id="28a6b-224">For more information, see [Task Schedulers](http://msdn.microsoft.com/library/638f8ea5-21db-47a2-a934-86e1e961bf65).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumConcurrencyLevel">
      <MemberSignature Language="C#" Value="public virtual int MaximumConcurrencyLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumConcurrencyLevel" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MaximumConcurrencyLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaximumConcurrencyLevel { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="28a6b-225">指示此 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 能够支持的最大并发级别。</span><span class="sxs-lookup"><span data-stu-id="28a6b-225">Indicates the maximum concurrency level this <see cref="T:System.Threading.Tasks.TaskScheduler" /> is able to support.</span></span></summary>
        <value><span data-ttu-id="28a6b-226">返回表示最大并发级别的一个整数。</span><span class="sxs-lookup"><span data-stu-id="28a6b-226">Returns an integer that represents the maximum concurrency level.</span></span> <span data-ttu-id="28a6b-227">默认计划程序返回 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="28a6b-227">The default scheduler returns <see cref="F:System.Int32.MaxValue" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28a6b-228">有关详细信息，请参阅[任务计划程序](http://msdn.microsoft.com/library/638f8ea5-21db-47a2-a934-86e1e961bf65)。</span><span class="sxs-lookup"><span data-stu-id="28a6b-228">For more information, see [Task Schedulers](http://msdn.microsoft.com/library/638f8ea5-21db-47a2-a934-86e1e961bf65).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueTask">
      <MemberSignature Language="C#" Value="protected internal abstract void QueueTask (System.Threading.Tasks.Task task);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void QueueTask(class System.Threading.Tasks.Task task) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void QueueTask(System::Threading::Tasks::Task ^ task);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
      </Parameters>
      <Docs>
        <param name="task"><span data-ttu-id="28a6b-229">要排队的 <see cref="T:System.Threading.Tasks.Task" />。</span><span class="sxs-lookup"><span data-stu-id="28a6b-229">The <see cref="T:System.Threading.Tasks.Task" /> to be queued.</span></span></param>
        <summary><span data-ttu-id="28a6b-230">将 <see cref="T:System.Threading.Tasks.Task" /> 排队到计划程序中。</span><span class="sxs-lookup"><span data-stu-id="28a6b-230">Queues a <see cref="T:System.Threading.Tasks.Task" /> to the scheduler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28a6b-231">从派生的类<xref:System.Threading.Tasks.TaskScheduler>实现此方法，可以接受在计划程序计划的任务。</span><span class="sxs-lookup"><span data-stu-id="28a6b-231">A class derived from <xref:System.Threading.Tasks.TaskScheduler> implements this method to accept tasks being scheduled on the scheduler.</span></span>  
  
 <span data-ttu-id="28a6b-232">典型的实现将存储在内部数据结构中，这将提供将在未来某个时刻执行这些任务的线程服务的任务。</span><span class="sxs-lookup"><span data-stu-id="28a6b-232">A typical implementation would store the task in an internal data structure, which would be serviced by threads that would execute those tasks at some time in the future.</span></span>  
  
 <span data-ttu-id="28a6b-233">此方法仅用于由.NET Framework 调用，不应直接由派生类调用。</span><span class="sxs-lookup"><span data-stu-id="28a6b-233">This method is only meant to be called by the .NET Framework and should not be called directly by the derived class.</span></span> <span data-ttu-id="28a6b-234">这是系统的必要的维护的一致性。</span><span class="sxs-lookup"><span data-stu-id="28a6b-234">This is necessary for maintaining the consistency of the system.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="28a6b-235"><paramref name="task" /> 参数为 null。</span><span class="sxs-lookup"><span data-stu-id="28a6b-235">The <paramref name="task" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryDequeue">
      <MemberSignature Language="C#" Value="protected internal virtual bool TryDequeue (System.Threading.Tasks.Task task);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool TryDequeue(class System.Threading.Tasks.Task task) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool TryDequeue(System::Threading::Tasks::Task ^ task);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
      </Parameters>
      <Docs>
        <param name="task"><span data-ttu-id="28a6b-236">要取消排队的 <see cref="T:System.Threading.Tasks.Task" />。</span><span class="sxs-lookup"><span data-stu-id="28a6b-236">The <see cref="T:System.Threading.Tasks.Task" /> to be dequeued.</span></span></param>
        <summary><span data-ttu-id="28a6b-237">尝试将以前排队到此计划程序中的 <see cref="T:System.Threading.Tasks.Task" /> 取消排队。</span><span class="sxs-lookup"><span data-stu-id="28a6b-237">Attempts to dequeue a <see cref="T:System.Threading.Tasks.Task" /> that was previously queued to this scheduler.</span></span></summary>
        <returns><span data-ttu-id="28a6b-238">一个布尔值，该值指示是否已成功地将 <paramref name="task" /> 参数取消排队。</span><span class="sxs-lookup"><span data-stu-id="28a6b-238">A Boolean denoting whether the <paramref name="task" /> argument was successfully dequeued.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28a6b-239">有关详细信息，请参阅[任务计划程序](http://msdn.microsoft.com/library/638f8ea5-21db-47a2-a934-86e1e961bf65)。</span><span class="sxs-lookup"><span data-stu-id="28a6b-239">For more information, see [Task Schedulers](http://msdn.microsoft.com/library/638f8ea5-21db-47a2-a934-86e1e961bf65).</span></span>  
  
 <span data-ttu-id="28a6b-240">此方法中可能会执行 finally 块;因此，它应返回以尽可能快因此使任何资源，如<xref:System.Threading.CancellationTokenRegistration>对象可以及时的释放。</span><span class="sxs-lookup"><span data-stu-id="28a6b-240">This method may execute in a finally block; therefore it should return as quickly as possible so that any resources such as <xref:System.Threading.CancellationTokenRegistration> objects can be disposed of in a timely manner.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="28a6b-241"><paramref name="task" /> 参数为 null。</span><span class="sxs-lookup"><span data-stu-id="28a6b-241">The <paramref name="task" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryExecuteTask">
      <MemberSignature Language="C#" Value="protected bool TryExecuteTask (System.Threading.Tasks.Task task);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool TryExecuteTask(class System.Threading.Tasks.Task task) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool TryExecuteTask(System::Threading::Tasks::Task ^ task);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
      </Parameters>
      <Docs>
        <param name="task"><span data-ttu-id="28a6b-242">要执行的 <see cref="T:System.Threading.Tasks.Task" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="28a6b-242">A <see cref="T:System.Threading.Tasks.Task" /> object to be executed.</span></span></param>
        <summary><span data-ttu-id="28a6b-243">尝试在此计划程序上执行提供的 <see cref="T:System.Threading.Tasks.Task" />。</span><span class="sxs-lookup"><span data-stu-id="28a6b-243">Attempts to execute the provided <see cref="T:System.Threading.Tasks.Task" /> on this scheduler.</span></span></summary>
        <returns><span data-ttu-id="28a6b-244">一个布尔值，如果成功执行了 <paramref name="task" />，则该值为 true；如果未成功执行，则该值为 false。</span><span class="sxs-lookup"><span data-stu-id="28a6b-244">A Boolean that is true if <paramref name="task" /> was successfully executed, false if it was not.</span></span> <span data-ttu-id="28a6b-245">执行失败的常见原因是，该任务先前已经执行或者位于正在由另一个线程执行的进程中。</span><span class="sxs-lookup"><span data-stu-id="28a6b-245">A common reason for execution failure is that the task had previously been executed or is in the process of being executed by another thread.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28a6b-246">附带了计划程序实现<xref:System.Threading.Tasks.Task>实例执行通过<xref:System.Threading.Tasks.TaskScheduler.QueueTask%2A>方法或<xref:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="28a6b-246">Scheduler implementations are provided with <xref:System.Threading.Tasks.Task> instances to be executed through either the <xref:System.Threading.Tasks.TaskScheduler.QueueTask%2A> method or the <xref:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline%2A> method.</span></span> <span data-ttu-id="28a6b-247">当计划程序认为适当运行提供的任务，<xref:System.Threading.Tasks.TaskScheduler.TryExecuteTask%2A>应该用于这样做。</span><span class="sxs-lookup"><span data-stu-id="28a6b-247">When the scheduler deems it appropriate to run the provided task, <xref:System.Threading.Tasks.TaskScheduler.TryExecuteTask%2A> should be used to do so.</span></span> <span data-ttu-id="28a6b-248">TryExecuteTask 处理执行任务，包括操作调用、 异常处理、 状态管理和生命周期控件的所有的方面。</span><span class="sxs-lookup"><span data-stu-id="28a6b-248">TryExecuteTask handles all aspects of executing a task, including action invocation, exception handling, state management, and lifecycle control.</span></span>  
  
 <span data-ttu-id="28a6b-249"><xref:System.Threading.Tasks.TaskScheduler.TryExecuteTask%2A> 必须仅用于.NET Framework 基础结构提供给此计划程序任务。</span><span class="sxs-lookup"><span data-stu-id="28a6b-249"><xref:System.Threading.Tasks.TaskScheduler.TryExecuteTask%2A> must only be used for tasks provided to this scheduler by the .NET Framework infrastructure.</span></span> <span data-ttu-id="28a6b-250">不应该用于执行任意任务获取通过自定义机制。</span><span class="sxs-lookup"><span data-stu-id="28a6b-250">It should not be used to execute arbitrary tasks obtained through custom mechanisms.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="28a6b-251"><paramref name="task" /> 与此计划程序无关联。</span><span class="sxs-lookup"><span data-stu-id="28a6b-251">The <paramref name="task" /> is not associated with this scheduler.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryExecuteTaskInline">
      <MemberSignature Language="C#" Value="protected abstract bool TryExecuteTaskInline (System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryExecuteTaskInline(class System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool TryExecuteTaskInline(System::Threading::Tasks::Task ^ task, bool taskWasPreviouslyQueued);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
        <Parameter Name="taskWasPreviouslyQueued" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="task"><span data-ttu-id="28a6b-252">要执行的 <see cref="T:System.Threading.Tasks.Task" />。</span><span class="sxs-lookup"><span data-stu-id="28a6b-252">The <see cref="T:System.Threading.Tasks.Task" /> to be executed.</span></span></param>
        <param name="taskWasPreviouslyQueued"><span data-ttu-id="28a6b-253">一个布尔值，该值指示任务之前是否已排队。</span><span class="sxs-lookup"><span data-stu-id="28a6b-253">A Boolean denoting whether or not task has previously been queued.</span></span> <span data-ttu-id="28a6b-254">如果此参数为 True，则该任务以前可能已排队（已计划）；如果为 False，则已知该任务尚未排队，此时将执行此调用，以便以内联方式执行该任务，而不用将其排队。</span><span class="sxs-lookup"><span data-stu-id="28a6b-254">If this parameter is True, then the task may have been previously queued (scheduled); if False, then the task is known not to have been queued, and this call is being made in order to execute the task inline without queuing it.</span></span></param>
        <summary><span data-ttu-id="28a6b-255">确定是否可以在此调用中同步执行提供的 <see cref="T:System.Threading.Tasks.Task" />，如果可以，将执行该任务。</span><span class="sxs-lookup"><span data-stu-id="28a6b-255">Determines whether the provided <see cref="T:System.Threading.Tasks.Task" /> can be executed synchronously in this call, and if it can, executes it.</span></span></summary>
        <returns><span data-ttu-id="28a6b-256">一个布尔值，该值指示是否已以内联方式执行该任务。</span><span class="sxs-lookup"><span data-stu-id="28a6b-256">A Boolean value indicating whether the task was executed inline.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28a6b-257">从派生的类<xref:System.Threading.Tasks.TaskScheduler>实现此函数，以便启动该任务对象上的等待的线程上支持内联执行的任务。</span><span class="sxs-lookup"><span data-stu-id="28a6b-257">A class derived from <xref:System.Threading.Tasks.TaskScheduler> implements this function to support inline execution of a task on a thread that initiates a wait on that task object.</span></span> <span data-ttu-id="28a6b-258">内联执行是可选的并且可能会返回 false 拒绝请求。</span><span class="sxs-lookup"><span data-stu-id="28a6b-258">Inline execution is optional, and the request may be rejected by returning false.</span></span> <span data-ttu-id="28a6b-259">但是，多个任务可以进行内联，更好地计划程序将扩展。</span><span class="sxs-lookup"><span data-stu-id="28a6b-259">However, the more tasks that can be inlined, the better the scheduler will scale.</span></span> <span data-ttu-id="28a6b-260">事实上，计划程序该内联过少可能容易出现死锁。</span><span class="sxs-lookup"><span data-stu-id="28a6b-260">In fact, a scheduler that inlines too little may be prone to deadlocks.</span></span> <span data-ttu-id="28a6b-261">正确实现应确保下保证由调度器的策略执行的请求可以成功内联。</span><span class="sxs-lookup"><span data-stu-id="28a6b-261">A proper implementation should ensure that a request executing under the policies guaranteed by the scheduler can successfully inline.</span></span> <span data-ttu-id="28a6b-262">例如，如果计划程序使用的专用的线程执行任务，该线程从任何内联请求应会成功。</span><span class="sxs-lookup"><span data-stu-id="28a6b-262">For example, if a scheduler uses a dedicated thread to execute tasks, any inlining requests from that thread should succeed.</span></span>  
  
 <span data-ttu-id="28a6b-263">如果计划程序决定执行内联执行，它应执行操作来调用基 taskscheduler 计划的<xref:System.Threading.Tasks.TaskScheduler.TryExecuteTask%2A>与提供的任务对象，传播的返回值的方法。</span><span class="sxs-lookup"><span data-stu-id="28a6b-263">If a scheduler decides to perform the inline execution, it should do so by calling to the base TaskScheduler's <xref:System.Threading.Tasks.TaskScheduler.TryExecuteTask%2A> method with the provided task object, propagating the return value.</span></span> <span data-ttu-id="28a6b-264">它也可能是适用于从其内部数据结构中删除一个内联的任务，如果它决定接受内联请求的计划程序。</span><span class="sxs-lookup"><span data-stu-id="28a6b-264">It may also be appropriate for the scheduler to remove an inlined task from its internal data structures if it decides to honor the inlining request.</span></span> <span data-ttu-id="28a6b-265">但请注意，在某些情况下一个计划程序可能要求先内联不到它与以前提供的任务<xref:System.Threading.Tasks.TaskScheduler.QueueTask%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="28a6b-265">Note, however, that under some circumstances a scheduler may be asked to inline a task that was not previously provided to it with the <xref:System.Threading.Tasks.TaskScheduler.QueueTask%2A> method.</span></span>  
  
 <span data-ttu-id="28a6b-266">派生的计划程序会负责确保调用线程适用于执行指定的任务，就其自身的计划，并且而言执行策略。</span><span class="sxs-lookup"><span data-stu-id="28a6b-266">The derived scheduler is responsible for making sure that the calling thread is suitable for executing the given task as far as its own scheduling and execution policies are concerned.</span></span>  
  
 <span data-ttu-id="28a6b-267">有关详细信息，请参阅[任务计划程序](http://msdn.microsoft.com/library/638f8ea5-21db-47a2-a934-86e1e961bf65)。</span><span class="sxs-lookup"><span data-stu-id="28a6b-267">For more information, see [Task Schedulers](http://msdn.microsoft.com/library/638f8ea5-21db-47a2-a934-86e1e961bf65).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="28a6b-268"><paramref name="task" /> 参数为 null。</span><span class="sxs-lookup"><span data-stu-id="28a6b-268">The <paramref name="task" /> argument is null.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="28a6b-269">已执行的 <paramref name="task" />。</span><span class="sxs-lookup"><span data-stu-id="28a6b-269">The <paramref name="task" /> was already executed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UnobservedTaskException">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;System.Threading.Tasks.UnobservedTaskExceptionEventArgs&gt; UnobservedTaskException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Threading.Tasks.UnobservedTaskExceptionEventArgs&gt; UnobservedTaskException" />
      <MemberSignature Language="DocId" Value="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event UnobservedTaskException As EventHandler(Of UnobservedTaskExceptionEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler&lt;System::Threading::Tasks::UnobservedTaskExceptionEventArgs ^&gt; ^ UnobservedTaskException;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Threading.Tasks.UnobservedTaskExceptionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="28a6b-270">出错的任务中未观察到的异常将触发异常呈报策略时出现，默认情况下会终止进程。</span><span class="sxs-lookup"><span data-stu-id="28a6b-270">Occurs when a faulted task's unobserved exception is about to trigger exception escalation policy, which, by default, would terminate the process.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28a6b-271">此应用程序的全域性事件触发提供一种机制来防止异常升级策略 （默认情况下，终止进程）。</span><span class="sxs-lookup"><span data-stu-id="28a6b-271">This application domain-wide event provides a mechanism to prevent exception escalation policy (which, by default, terminates the process) from triggering.</span></span>  
  
 <span data-ttu-id="28a6b-272">为了更加便于开发人员编写基于任务的异步代码[!INCLUDE[net_v45](~/includes/net-v45-md.md)]更改默认的异常行为的未观察到异常。</span><span class="sxs-lookup"><span data-stu-id="28a6b-272">To make it easier for developers to write asynchronous code based on tasks, the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] changes the default exception behavior for unobserved exceptions.</span></span> <span data-ttu-id="28a6b-273">虽然仍未观察到的异常引发<xref:System.Threading.Tasks.TaskScheduler.UnobservedTaskException>异常，该过程不会终止默认情况下。</span><span class="sxs-lookup"><span data-stu-id="28a6b-273">Although unobserved exceptions still raise the <xref:System.Threading.Tasks.TaskScheduler.UnobservedTaskException> exception, the process does not terminate by default.</span></span> <span data-ttu-id="28a6b-274">相反，此异常处理由运行时后引发事件时，无论是否事件处理程序观察到异常。</span><span class="sxs-lookup"><span data-stu-id="28a6b-274">Instead, the exception is handled by the runtime after the event is raised, regardless of whether an event handler observes the exception.</span></span> <span data-ttu-id="28a6b-275">可以配置该行为。</span><span class="sxs-lookup"><span data-stu-id="28a6b-275">This behavior can be configured.</span></span> <span data-ttu-id="28a6b-276">从开始[!INCLUDE[net_v45](~/includes/net-v45-md.md)]，你可以使用的配置元素以恢复到的行为[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]和终止进程：</span><span class="sxs-lookup"><span data-stu-id="28a6b-276">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the  configuration element to revert to the behavior of the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] and terminate the process:</span></span>  
  
```xml  
<configuration>   
   <runtime>   
      <ThrowUnobservedTaskExceptions enabled="true"/>   
   </runtime>   
</configuration>  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>