<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TaskContinuationOptions.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a1c7a235951de4ea0250e610e035f8451c659154.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1c7a235951de4ea0250e610e035f8451c659154</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskContinuationOptions">
          <source>Specifies the behavior for a task that is created by using the <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" /&gt;</ph> method.</source>
          <target state="translated">为通过使用 <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" /&gt;</ph> 或 <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" /&gt;</ph> 方法创建的任务指定行为。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>Specifies that the continuation, if it is a child task, is attached to a parent in the task hierarchy.</source>
          <target state="translated">如果延续为子任务，则指定将延续附加到任务层次结构中的父级。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>The continuation can be a child task only if its antecedent is also a child task.</source>
          <target state="translated">只有当延续前面的任务也是子任务时，延续才可以是子任务。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>By default, a child task (that is, an inner task created by an outer task) executes independently of its parent.</source>
          <target state="translated">默认情况下，子任务（即由外部任务创建的内部任务）将独立于其父任务执行。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>You can use the <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" /&gt;</ph> option so that the parent and child tasks are synchronized.</source>
          <target state="translated">可以使用 <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" /&gt;</ph> 选项以便将父任务和子任务同步。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>Note that if a parent task is configured with the <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" /&gt;</ph> option, the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> option in the child task has no effect, and the child task will execute as a detached child task.</source>
          <target state="translated">请注意，如果使用 <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" /&gt;</ph> 选项配置父任务，则子任务中的 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> 选项不起作用，并且子任务将作为分离的子任务执行。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>For more information, see <bpt id="p1">[</bpt>Attached and Detached Child Tasks<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>附加和分离的子任务<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach">
          <source>Specifies that any child task (that is, any nested inner task created by this continuation) that is created with the <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> option and attempts to execute as an attached child task will not be able to attach to the parent task and will execute instead as a detached child task.</source>
          <target state="translated">指定任何使用 <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> 选项创建，并尝试作为附加的子任务执行的子任务（即，由此延续创建的任何嵌套内部任务）都无法附加到父任务，会改成作为分离的子任务执行。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach">
          <source>For more information, see <bpt id="p1">[</bpt>Attached and Detached Child Tasks<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>附加和分离的子任务<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>Specifies that the continuation task should be executed synchronously.</source>
          <target state="translated">指定应同步执行延续任务。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>With this option specified, the continuation runs on the same thread that causes the antecedent task to transition into its final state.</source>
          <target state="translated">指定此选项后，延续任务在导致前面的任务转换为其最终状态的相同线程上运行。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>If the antecedent is already complete when the continuation is created, the continuation will run on the thread that creates the continuation.</source>
          <target state="translated">如果在创建延续任务时已经完成前面的任务，则延续任务将在创建此延续任务的线程上运行。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>If the antecedent's <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> is disposed in a <ph id="ph2">&lt;see langword="finally" /&gt;</ph> block (<ph id="ph3">&lt;see langword="Finally" /&gt;</ph> in Visual Basic), a continuation with this option will run in that <ph id="ph4">&lt;see langword="finally" /&gt;</ph> block.</source>
          <target state="translated">如果前面任务的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> 已在一个 <ph id="ph2">&lt;see langword="finally" /&gt;</ph>（在 Visual Basic 中为 <ph id="ph3">&lt;see langword="Finally" /&gt;</ph>）块中释放，则使用此选项的延续任务将在该 <ph id="ph4">&lt;see langword="finally" /&gt;</ph> 块中运行。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>Only very short-running continuations should be executed synchronously.</source>
          <target state="translated">只应同步执行运行时间非常短的延续任务。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>Because the task executes synchronously, there is no need to call a method such as <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Wait" /&gt;</ph> to ensure that the calling thread waits for the task to complete.</source>
          <target state="translated">由于任务以同步方式执行，因此无需调用诸如 <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Wait" /&gt;</ph> 的方法来确保调用线程等待任务完成。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.HideScheduler">
          <source>Specifies that tasks created by the continuation by calling methods such as <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Run(System.Action)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" /&gt;</ph> see the default scheduler (<ph id="ph3">&lt;see cref="P:System.Threading.Tasks.TaskScheduler.Default" /&gt;</ph>) rather than the scheduler on which this continuation is running as the current scheduler.</source>
          <target state="translated">指定由延续通过调用方法（如 <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Run(System.Action)" /&gt;</ph> 或 <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" /&gt;</ph>）创建的任务将默认计划程序 (<ph id="ph3">&lt;see cref="P:System.Threading.Tasks.TaskScheduler.Default" /&gt;</ph>) 视为当前的计划程序，而不是正在运行该延续的计划程序。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.LazyCancellation">
          <source>In the case of continuation cancellation, prevents completion of the continuation until the antecedent has completed.</source>
          <target state="translated">在延续取消的情况下，防止延续的完成直到完成先前的任务。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
          <source>Specifies that a continuation will be a long-running, course-grained operation.</source>
          <target state="translated">指定延续将是长期运行的、粗粒度的操作。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
          <source>It provides a hint to the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that oversubscription may be warranted.</source>
          <target state="translated">它会向 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> 提示，过度订阅可能是合理的。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.None">
          <source>When no continuation options are specified, specifies that default behavior should be used when executing a continuation.</source>
          <target state="translated">如果未指定延续选项，应在执行延续任务时使用指定的默认行为。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.None">
          <source>The continuation runs asynchronously when the antecedent task completes, regardless of the antecedent's final <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property value.</source>
          <target state="translated">延续任务在前面的任务完成后以异步方式运行，与前面任务最终的 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> 属性值无关。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.None">
          <source>It the continuation is a child task, it is created as a detached nested task.</source>
          <target state="translated">如果延续为子任务，则会将其创建为分离的嵌套任务。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
          <source>Specifies that the continuation task should not be scheduled if its antecedent was canceled.</source>
          <target state="translated">指定不应在延续任务前面的任务已取消的情况下安排延续任务。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
          <source>An antecedent is canceled if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">如果前面任务完成的 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> 属性是 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>，则前面的任务会取消。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">此选项对多任务延续无效。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
          <source>Specifies that the continuation task should not be scheduled if its antecedent threw an unhandled exception.</source>
          <target state="translated">指定不应在延续任务前面的任务引发了未处理异常的情况下安排延续任务。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
          <source>An antecedent throws an unhandled exception if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>.</source>
          <target state="translated">如果前面任务完成的 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> 属性是 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>，则前面的任务会引发未处理的异常。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">此选项对多任务延续无效。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
          <source>Specifies that the continuation task should not be scheduled if its antecedent ran to completion.</source>
          <target state="translated">指定不应在延续任务前面的任务已完成运行的情况下安排延续任务。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
          <source>An antecedent runs to completion if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>.</source>
          <target state="translated">如果前面任务完成的 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> 属性是 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>，则前面的任务会运行直至完成。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">此选项对多任务延续无效。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
          <source>Specifies that the continuation should be scheduled only if its antecedent was canceled.</source>
          <target state="translated">指定只应在延续前面的任务已取消的情况下安排延续任务。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
          <source>An antecedent is canceled if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">如果前面任务完成的 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> 属性是 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>，则前面的任务会取消。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">此选项对多任务延续无效。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>Specifies that the continuation task should be scheduled only if its antecedent threw an unhandled exception.</source>
          <target state="translated">指定只有在延续任务前面的任务引发了未处理异常的情况下才应安排延续任务。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>An antecedent throws an unhandled exception if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>.</source>
          <target state="translated">如果前面任务完成的 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> 属性是 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>，则前面的任务会引发未处理的异常。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>The <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted" /&gt;</ph> option guarantees that the <ph id="ph2">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph> property in the antecedent is not <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted" /&gt;</ph> 选项可保证前面任务中的 <ph id="ph2">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph> 属性不是 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>You can use that property to catch the exception and see which exception caused the task to fault.</source>
          <target state="translated">你可以使用该属性来捕获异常，并确定导致任务出错的异常。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>If you do not access the <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph> property, the exception is unhandled.</source>
          <target state="translated">如果你不访问 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph> 属性，则不会处理异常。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>Also, if you attempt to access the <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property of a task that has been canceled or has faulted, a new exception is thrown.</source>
          <target state="translated">此外，如果尝试访问已取消或出错的任务的 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> 属性，则会引发一个新异常。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">此选项对多任务延续无效。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
          <source>Specifies that the continuation should be scheduled only if its antecedent ran to completion.</source>
          <target state="translated">指定只应在延续任务前面的任务已完成运行的情况下才安排延续任务。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
          <source>An antecedent runs to completion if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>.</source>
          <target state="translated">如果前面任务完成的 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> 属性是 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>，则前面的任务会运行直至完成。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">此选项对多任务延续无效。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness">
          <source>A hint to a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to schedule task in the order in which they were scheduled, so that tasks scheduled sooner are more likely to run sooner, and tasks scheduled later are more likely to run later.</source>
          <target state="translated">提示 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> 按任务计划的顺序安排任务，因此较早安排的任务将更可能较早运行，而较晚安排运行的任务将更可能较晚运行。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously">
          <source>Specifies that the continuation task should be run asynchronously.</source>
          <target state="translated">指定应异步运行延续任务。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously">
          <source>This option has precedence over <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">此选项优先于 <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>