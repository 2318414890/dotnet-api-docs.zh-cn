<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TaskCompletionSource`1.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52de3645476c627ddb3a294805715dabada484129.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2de3645476c627ddb3a294805715dabada484129</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>The type of the result value assocatied with this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>.</source>
          <target state="translated">与此 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> 关联的结果值的类型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>Represents the producer side of a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> unbound to a delegate, providing access to the consumer side through the <ph id="ph2">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> property.</source>
          <target state="translated">表示未绑定到委托的 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 的制造者方，并通过 <ph id="ph2">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> 属性提供对使用者方的访问。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>In many scenarios, it is useful to enable a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> to represent an external asynchronous operation.</source>
          <target state="translated">在许多情况下，它可用于启用<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>来表示外部的异步操作。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph> is provided for this purpose.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph> 出于此目的提供。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>It enables the creation of a task that can be handed out to consumers, and those consumers can use the members of the task as they would any other.</source>
          <target state="translated">它允许创建一个任务，它可以将分发给使用者，并且这些使用者可以使用该任务的成员，像任何其他。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>However, unlike most tasks, the state of a task created by a TaskCompletionSource is controlled explicitly by the methods on TaskCompletionSource.</source>
          <target state="translated">但是，不同于大多数任务，并由创建的任务的状态显式由控制上并的方法。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>This enables the completion of the external asynchronous operation to be propagated to the underlying Task.</source>
          <target state="translated">这使外部的异步操作传播到基础任务完成。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>The separation also ensures that consumers are not able to transition the state without access to the corresponding TaskCompletionSource.</source>
          <target state="translated">隔离还可确保使用者不能转换没有相应的并访问权限的状态。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>For more information, see the entry <bpt id="p1">[</bpt>The Nature of TaskCompletionSource<ph id="ph1">\&lt;</ph>TResult&gt;<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2009/06/02/9685804.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">有关详细信息，请参阅文章<bpt id="p1">[</bpt>并性质<ph id="ph1">\&lt;</ph>TResult &gt;<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2009/06/02/9685804.aspx)</ept>中使用.NET 博客进行并行编程。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>The <bpt id="p1">[</bpt>Parallel Extensions samples<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=165717)</ept> also contain examples of how to use <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">[</bpt>并行扩展示例<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=165717)</ept>还包含有关如何使用示例<ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph>:</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>All members of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> are thread-safe and may be used from multiple threads concurrently.</source>
          <target state="translated">所有成员<ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>是线程安全的可从多个线程同时使用。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> object.</source>
          <target state="translated">创建一个 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>.</source>
          <target state="translated">创建一个 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
          <source>The state to use as the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>'s AsyncState.</source>
          <target state="translated">要用作基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 的 AsyncState 的状态。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> with the specified state.</source>
          <target state="translated">使用指定的状态创建一个 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
          <source>The options to use when creating the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">创建基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 时要使用的选项。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> with the specified options.</source>
          <target state="translated">使用指定的选项创建一个 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> created by this instance and accessible through its <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.Task%2A&gt;</ph> property will be instantiated using the specified <ph id="ph3">`creationOptions`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>通过此实例创建并可通过访问其<ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.Task%2A&gt;</ph>将使用指定实例化属性<ph id="ph3">`creationOptions`</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> represent options invalid for use with a <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> 表示与 <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> 一起使用时无效的选项。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The state to use as the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>'s AsyncState.</source>
          <target state="translated">要用作基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 的 AsyncState 的状态。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The options to use when creating the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">创建基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 时要使用的选项。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> with the specified state and options.</source>
          <target state="translated">使用指定的状态和选项创建一个 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> represent options invalid for use with a <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> 表示与 <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph> 一起使用时无效的选项。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
          <source>Transitions the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> state.</source>
          <target state="translated">将基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 转换为 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> 状态。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>, <ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>, or <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>, or if the underlying <ph id="ph5">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> has already been disposed.</source>
          <target state="translated">基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 已经处于三个最终状态之一： <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>、 <ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 或 <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>；或者基础 <ph id="ph5">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 已被释放。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>Transitions the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> object into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> state.</source>
          <target state="translated">将基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 对象转换为 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 状态。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The collection of exceptions to bind to this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">要绑定到此 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 的异常的集合。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>Transitions the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> state and binds a collection of exception objects to it.</source>
          <target state="translated">将基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 转换为 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 状态，并对其绑定一些异常对象。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> was disposed.</source>
          <target state="translated">已释放 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The <ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> argument is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> 参数为 null。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>There are one or more null elements in <ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> 中有一个或多个 null 元素。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>, <ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>, or <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 已处于以下三种最终状态的其中一种：<ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>、<ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 或 <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
          <source>The exception to bind to this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">要绑定到此 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 的异常。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
          <source>Transitions the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> state and binds it to a specified exception.</source>
          <target state="translated">将基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 转换为 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 状态，并将其绑定到一个指定异常上。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> was disposed.</source>
          <target state="translated">已释放 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
          <source>The <ph id="ph1">&lt;paramref name="exception" /&gt;</ph> argument is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exception" /&gt;</ph> 参数为 null。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>, <ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>, or <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 已处于以下三种最终状态的其中一种：<ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>、<ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 或 <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
          <source>The result value to bind to this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">要绑定到此 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 的结果值。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
          <source>Transitions the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph> state.</source>
          <target state="translated">将基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 转换为 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph> 状态。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> was disposed.</source>
          <target state="translated">已释放 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>, <ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>, or <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 已处于以下三种最终状态的其中一种：<ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>、<ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 或 <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> created by this <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>.</source>
          <target state="translated">获取由此 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 创建的 <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> created by this <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>.</source>
          <target state="translated">返回由此 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 创建的 <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
          <source>This property enables a consumer to access the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> that is controlled by this instance.</source>
          <target state="translated">此属性使使用者可以访问<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>受此实例。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
          <source>When you create a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph> object, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property of this <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object returns <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.WaitingForActivation&gt;</ph></source>
          <target state="translated">当你创建<ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph>对象，<ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph>此属性<ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>对象返回 <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.WaitingForActivation&gt;</ph></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetResult%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetCanceled%2A&gt;</ph> methods (and their "Try" variants) on this instance all result in the relevant state transitions on this underlying Task.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetResult%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A&gt;</ph>，和<ph id="ph4">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetCanceled%2A&gt;</ph>方法 （和其"Try"的变体） 对此实例上的相关状态转换中的所有结果基础任务。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>Attempts to transition the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> state.</source>
          <target state="translated">尝试将基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 转换为 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> 状态。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
          <source>Attempts to transition the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> state.</source>
          <target state="translated">尝试将基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 转换为 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> 状态。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
          <source>True if the operation was successful; false if the operation was unsuccessful or the object has already been disposed.</source>
          <target state="translated">如果操作成功，则为 true；如果操作失败或对象已被释放，则为 false。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
          <source>This operation will return false if the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.</source>
          <target state="translated">此操作将返回 false 如果<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>已在三种的最终状态之一： <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>， <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>，或<ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
          <source>This method also returns false if the underlying <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> has already been disposed.</source>
          <target state="translated">此方法也返回 false，如果基础<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>已释放。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
          <source>A cancellation token.</source>
          <target state="translated">取消标记。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
          <source>Attempts to transition the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> state and enables a cancellation token to be stored in the canceled task.</source>
          <target state="translated">尝试将基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 转换为 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph> 状态并启用要存储在取消的任务中的取消标记。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
          <source>The method returns false if the underlying <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object is already in one of the following three final states.</source>
          <target state="translated">该方法返回 false，如果基础<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>对象已在以下三种最终状态之一。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
          <source>This method also returns <ph id="ph1">`false`</ph> if the underlying <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object has already been disposed.</source>
          <target state="translated">此方法也返回<ph id="ph1">`false`</ph>如果基础<ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>已释放对象。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskCompletionSource`1">
          <source>Attempts to transition the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> object into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> state.</source>
          <target state="translated">尝试将基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 对象转换为 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 状态。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The collection of exceptions to bind to this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">要绑定到此 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 的异常的集合。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>Attempts to transition the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> state and binds a collection of exception objects to it.</source>
          <target state="translated">尝试将基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 转换为 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 状态，并对其绑定一些异常对象。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>True if the operation was successful; otherwise, false.</source>
          <target state="translated">如果操作成功，则为 true；否则为 false。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>This operation will return false if the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.</source>
          <target state="translated">此操作将返回 false 如果<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>已在三种的最终状态之一： <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>， <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>，或<ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> was disposed.</source>
          <target state="translated">已释放 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The <ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> argument is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> 参数为 null。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>There are one or more null elements in <ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> 中有一个或多个 null 元素。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
          <source>The <ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> collection is empty.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> 集合为空。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
          <source>The exception to bind to this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">要绑定到此 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 的异常。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
          <source>Attempts to transition the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> state and binds it to a specified exception.</source>
          <target state="translated">尝试将基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 转换为 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> 状态，并将其绑定到一个指定异常上。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
          <source>True if the operation was successful; otherwise, false.</source>
          <target state="translated">如果操作成功，则为 true；否则为 false。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
          <source>This operation will return false if the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.</source>
          <target state="translated">此操作将返回 false 如果<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>已在三种的最终状态之一： <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>， <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>，或<ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph> was disposed.</source>
          <target state="translated">已释放 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
          <source>The <ph id="ph1">&lt;paramref name="exception" /&gt;</ph> argument is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exception" /&gt;</ph> 参数为 null。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
          <source>The result value to bind to this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">要绑定到此 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 的结果值。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
          <source>Attempts to transition the underlying <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> into the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph> state.</source>
          <target state="translated">尝试将基础 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> 转换为 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph> 状态。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
          <source>True if the operation was successful; otherwise, false.</source>
          <target state="translated">如果操作成功，则为 true；否则为 false。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
          <source>This operation will return false if the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> is already in one of the three final states: <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.</source>
          <target state="translated">此操作将返回 false 如果<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>已在三种的最终状态之一： <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>， <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>，或<ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
          <source>This method also returns false if the underlying <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> has already been disposed.</source>
          <target state="translated">此方法也返回 false，如果基础<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>已释放。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>