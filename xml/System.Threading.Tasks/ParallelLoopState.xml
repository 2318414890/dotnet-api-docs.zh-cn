<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af16a98f705e63e2ba868d464648af2e365bcb9a" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48619321" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="96a05-101">可使并行循环迭代与其他迭代交互。</span><span class="sxs-lookup"><span data-stu-id="96a05-101">Enables iterations of parallel loops to interact with other iterations.</span></span> <span data-ttu-id="96a05-102">此类的实例由 <see cref="T:System.Threading.Tasks.Parallel" /> 类提供给每个循环；不能在您的用户代码中创建实例。</span><span class="sxs-lookup"><span data-stu-id="96a05-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96a05-103">请注意，不能实例化此类的实例。</span><span class="sxs-lookup"><span data-stu-id="96a05-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="96a05-104">自动生成由编译器作为自变量对的调用中<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>或<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="96a05-105">说明如示例所示。</span><span class="sxs-lookup"><span data-stu-id="96a05-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="96a05-106">构造，例如`for`并`foreach`（在 C# 中) 和`For`和`For Each`（在 Visual Basic 中) 执行按顺序从最低到最高或从一组中的第一个对象的最后一个。</span><span class="sxs-lookup"><span data-stu-id="96a05-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="96a05-107">与此相反，<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>和<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法不这样做。</span><span class="sxs-lookup"><span data-stu-id="96a05-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="96a05-108">单个迭代的循环并行运行，因为它们可以开始和结束按任何顺序。</span><span class="sxs-lookup"><span data-stu-id="96a05-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="96a05-109"><xref:System.Threading.Tasks.ParallelLoopState>类允许在单个迭代的并行循环与另一个进行交互。</span><span class="sxs-lookup"><span data-stu-id="96a05-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="96a05-110"><xref:System.Threading.Tasks.ParallelLoopState>类可以为：</span><span class="sxs-lookup"><span data-stu-id="96a05-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="96a05-111">退出当前迭代并防止任何其他迭代通过调用启动<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="96a05-112">这不会影响已经开始计划执行的迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="96a05-113">阻止与索引大于当前索引的任何迭代通过调用执行<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="96a05-114">这不会影响已经开始计划执行的迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="96a05-115">确定是否发生了异常的任何循环迭代中检索的值来<xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="96a05-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="96a05-116">确定是否已调用循环的任何迭代<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法检索的值来<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="96a05-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="96a05-117">您可以使用此属性返回从之前对的调用启动循环的迭代<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法但仍在执行。</span><span class="sxs-lookup"><span data-stu-id="96a05-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="96a05-118">确定是否已调用循环的任何迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>或<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法或检索的值来引发了异常<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="96a05-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="96a05-119">从其索引大于的迭代中中断调用通过检索的值的索引的长时间运行迭代中退出<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="96a05-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96a05-120">下面的示例以并行方式执行最多 100 个循环迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="96a05-121">从 1 到 1000 毫秒的随机间隔暂停每次迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="96a05-122">随机生成的值确定哪次循环迭代上<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="96a05-123">如示例所示，前者的索引大于任何迭代中的输出<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性值开始后调用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="96a05-124">因为迭代循环的执行时仍可能<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法调用时，每次迭代都会调用<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>属性来检查是否已调用另一个迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="96a05-125">如果属性值为`true`，在迭代检查的值<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性以及它是否大于当前迭代索引值，将立即返回。</span><span class="sxs-lookup"><span data-stu-id="96a05-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="96a05-126">一个<see cref="T:System.Threading.Tasks.ParallelLoopState" />实例应该只在向其提供实例的循环主体中使用。</span><span class="sxs-lookup"><span data-stu-id="96a05-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span></span>  <span data-ttu-id="96a05-127">不安全地使用提供<see cref="T:System.Threading.Tasks.ParallelLoopState" />实例相关联的循环后结束，也不是显式将其提交给其他线程安全的有随时访问这些线程。</span><span class="sxs-lookup"><span data-stu-id="96a05-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span></span>  <span data-ttu-id="96a05-128">其他<see cref="T:System.Threading.Tasks.ParallelLoopState" />实例将提供给在循环中涉及的每个线程。</span><span class="sxs-lookup"><span data-stu-id="96a05-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="96a05-129">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="96a05-129">Data Parallelism (Task Parallel Library)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="96a05-130">告知 <see cref="T:System.Threading.Tasks.Parallel" /> 循环应在系统方便的时候尽早停止执行当前迭代之外的迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-130">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96a05-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 指示应运行当前迭代后的没有迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="96a05-132">它有效地取消循环的任何其他迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-132">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="96a05-133">但是，它不会停止已经开始计划执行的任何迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-133">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="96a05-134">例如，如果<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>从 100 循环访问从 0 到 1,000 个所有迭代小于 100 应仍继续运行，但为 1000，尚未启动不是从 101 到迭代执行并行循环迭代调用。</span><span class="sxs-lookup"><span data-stu-id="96a05-134">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="96a05-135">对于可能已执行的长时间运行迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>设置<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性设置为当前迭代的索引，如果当前索引的当前值少于<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>。</span><span class="sxs-lookup"><span data-stu-id="96a05-135">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="96a05-136">若要停止其索引大于从竞争执行的最低中断迭代的迭代，应执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="96a05-136">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="96a05-137">检查是否<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>属性是`true`。</span><span class="sxs-lookup"><span data-stu-id="96a05-137">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="96a05-138">如果其索引大于退出迭代<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性值。</span><span class="sxs-lookup"><span data-stu-id="96a05-138">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="96a05-139">说明如示例所示。</span><span class="sxs-lookup"><span data-stu-id="96a05-139">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="96a05-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 通常使用在其中进行排序是数据源中存在的基于搜索算法。</span><span class="sxs-lookup"><span data-stu-id="96a05-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96a05-141">下面的示例以并行方式执行最多 100 个循环迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-141">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="96a05-142">从 1 到 1000 毫秒的随机间隔暂停每次迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-142">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="96a05-143">随机生成的值确定哪次循环迭代上<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-143">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="96a05-144">如示例所示，前者的索引大于任何迭代中的输出<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性值开始后调用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-144">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="96a05-145">因为迭代循环的执行时仍可能<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法调用时，每次迭代都会调用<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>属性来检查是否已调用另一个迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-145">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="96a05-146">如果属性值为`true`，在迭代检查的值<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性以及它是否大于当前迭代索引值，将立即返回。</span><span class="sxs-lookup"><span data-stu-id="96a05-146">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="96a05-147"><see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 方法以前被调用过。</span><span class="sxs-lookup"><span data-stu-id="96a05-147">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span></span> <span data-ttu-id="96a05-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 和 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 不能被相同循环的迭代组合使用。</span><span class="sxs-lookup"><span data-stu-id="96a05-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="96a05-149">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="96a05-149">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="96a05-150">获取循环的任何迭代是否已引发相应迭代未处理的异常。</span><span class="sxs-lookup"><span data-stu-id="96a05-150">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span></span></summary>
        <value><span data-ttu-id="96a05-151">如果引发了未经处理的异常，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="96a05-151"><see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="96a05-152">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="96a05-152">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="96a05-153">获取循环的任何迭代是否已调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-153">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span></span></summary>
        <value><span data-ttu-id="96a05-154">如果任何迭代通过调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 方法已停止循环，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="96a05-154"><see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96a05-155">对于长时间运行循环的迭代，可以检索的值<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>属性来确定是否循环的任何迭代的开始执行之前调用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>仍在执行方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-155">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="96a05-156">然后可以使用的值<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>属性，以确定它们应立即返回还是正常执行。</span><span class="sxs-lookup"><span data-stu-id="96a05-156">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96a05-157">下面的示例以并行方式执行最多 10,000 个循环迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-157">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="96a05-158">从 1 到 1000 毫秒的随机间隔暂停每次迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-158">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="96a05-159">随机生成的值确定哪次循环迭代上<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-159">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="96a05-160">因为迭代循环的执行时仍可能<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>调用方法时，lambda 表达式调用<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>方法来检查是否已调用另一个迭代<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-160">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="96a05-161">如果它返回`true`，迭代将立即返回。</span><span class="sxs-lookup"><span data-stu-id="96a05-161">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="96a05-162">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="96a05-162">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="96a05-163">获取从中调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 的最低循环迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-163">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span></summary>
        <value><span data-ttu-id="96a05-164">从中调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 的最低迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-164">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span> <span data-ttu-id="96a05-165">如果是 <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> 循环，该值会基于内部生成的索引。</span><span class="sxs-lookup"><span data-stu-id="96a05-165">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96a05-166">可能的并行循环来调用多个迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-166">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="96a05-167">如果是这样，此值是调用一次迭代的最小索引<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>。</span><span class="sxs-lookup"><span data-stu-id="96a05-167">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="96a05-168">如果任何迭代循环不调用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>，此属性返回`null`。</span><span class="sxs-lookup"><span data-stu-id="96a05-168">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="96a05-169">请注意属性值不受对调用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-169">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="96a05-170">在中调用的迭代之后的所有迭代的长时间运行迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法不需要运行，<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性用来终止迭代开始执行之前调用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-170">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="96a05-171">若要停止其索引大于从竞争执行的最低中断迭代的迭代，应执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="96a05-171">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="96a05-172">检查是否<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>属性是`true`。</span><span class="sxs-lookup"><span data-stu-id="96a05-172">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="96a05-173">如果其索引大于退出迭代<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性值。</span><span class="sxs-lookup"><span data-stu-id="96a05-173">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="96a05-174">说明如示例所示。</span><span class="sxs-lookup"><span data-stu-id="96a05-174">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96a05-175">下面的示例以并行方式执行最多 100 个循环迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-175">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="96a05-176">从 1 到 1000 毫秒的随机间隔暂停每次迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-176">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="96a05-177">随机生成的值确定哪次循环迭代上<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-177">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="96a05-178">这可以防止的迭代其索引大于<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性值从开始到调用后<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法，但它不会影响已经开始计划执行的任何迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-178">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="96a05-179">若要防止这些无法完成，每次迭代都会调用<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>方法来检查是否已调用另一个迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-179">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="96a05-180">因此，在迭代检查的值，如果<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性以及它是否大于当前迭代索引值，将立即返回。</span><span class="sxs-lookup"><span data-stu-id="96a05-180">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="96a05-181">注意，因为<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>值的值超出范围并行循环之外，必须将其分配给一个变量，如果您想要保留其值会显示该循环之外。</span><span class="sxs-lookup"><span data-stu-id="96a05-181">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="96a05-182">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="96a05-182">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="96a05-183">获取循环的当前迭代是否应基于此迭代或其他迭代发出的请求退出。</span><span class="sxs-lookup"><span data-stu-id="96a05-183">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span></span></summary>
        <value><span data-ttu-id="96a05-184">如果当前迭代应退出，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="96a05-184"><see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96a05-185"><xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>属性设置为`true`在任一以下条件：</span><span class="sxs-lookup"><span data-stu-id="96a05-185">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="96a05-186">迭代的循环调用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>或<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>。</span><span class="sxs-lookup"><span data-stu-id="96a05-186">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="96a05-187">循环的迭代将引发异常。</span><span class="sxs-lookup"><span data-stu-id="96a05-187">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="96a05-188">循环将被取消。</span><span class="sxs-lookup"><span data-stu-id="96a05-188">The loop is canceled.</span></span>  
  
 <span data-ttu-id="96a05-189">当此属性是`true`，则<xref:System.Threading.Tasks.Parallel>类将主动尝试禁止其他迭代循环的开始执行。</span><span class="sxs-lookup"><span data-stu-id="96a05-189">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="96a05-190">但是，可能无法阻止其他迭代启动的情况。</span><span class="sxs-lookup"><span data-stu-id="96a05-190">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="96a05-191">它也可能长时间运行迭代已经开始执行这种情况。</span><span class="sxs-lookup"><span data-stu-id="96a05-191">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="96a05-192">在这种情况下，迭代可能显式检查<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>如果该属性返回的属性和终止执行`true`。</span><span class="sxs-lookup"><span data-stu-id="96a05-192">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96a05-193">下面的示例以并行方式执行最多 100 个循环迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-193">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="96a05-194">从 1 到 1000 毫秒的随机间隔暂停每次迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-194">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="96a05-195">随机生成的值确定哪次循环迭代上<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-195">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="96a05-196">这可以防止的迭代其索引大于<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性值从开始到调用后<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法，但它不会影响已经开始计划执行的任何迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-196">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="96a05-197">若要防止这些无法完成，每次迭代都会调用<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>方法来检查是否已调用另一个迭代<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-197">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="96a05-198">因此，在迭代检查的值，如果<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>属性以及它是否大于当前迭代索引值，将立即返回。</span><span class="sxs-lookup"><span data-stu-id="96a05-198">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="96a05-199">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="96a05-199">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="96a05-200">告知 <see cref="T:System.Threading.Tasks.Parallel" /> 循环应在系统方便的时候尽早停止执行。</span><span class="sxs-lookup"><span data-stu-id="96a05-200">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96a05-201">调用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法指示不需要运行尚未启动循环的任何迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-201">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="96a05-202">它有效地取消循环的任何其他迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-202">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="96a05-203">但是，它不会停止已经开始计划执行的任何迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-203">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="96a05-204">调用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法使<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>属性以返回`true`仍在执行循环的任何迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-204">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="96a05-205">这是特别有用，对于长时间运行迭代，可以检查<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>属性并退出尽早如果其值为`true`。</span><span class="sxs-lookup"><span data-stu-id="96a05-205">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="96a05-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 通常采用基于搜索的算法，其中一个结果后找到为没有其他迭代需要执行。</span><span class="sxs-lookup"><span data-stu-id="96a05-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96a05-207">下面的示例以并行方式执行最多 10,000 个循环迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-207">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="96a05-208">从 1 到 1000 毫秒的随机间隔暂停每次迭代。</span><span class="sxs-lookup"><span data-stu-id="96a05-208">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="96a05-209">随机生成的值确定哪次循环迭代上<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-209">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="96a05-210">如示例输出所示，在调用后执行任何迭代<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-210">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="96a05-211">因为迭代循环的执行时仍可能<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法调用时，每次迭代都会调用<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>方法来检查是否已调用另一个迭代<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-211">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="96a05-212">如果它返回`true`，迭代将立即返回。</span><span class="sxs-lookup"><span data-stu-id="96a05-212">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="96a05-213">以前调用过 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="96a05-213">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span></span> <span data-ttu-id="96a05-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 和 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 不能被相同循环的迭代组合使用。</span><span class="sxs-lookup"><span data-stu-id="96a05-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="96a05-215">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="96a05-215">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>